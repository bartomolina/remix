{
	"id": "e1e6d0d5b2ced58d8b6be089c62f82e3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"sources": {
			"premiere/Premiere_v2.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IConstantFlowAgreementV1} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\nimport {ISuperfluidToken} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IRegistry} from \"./IRegistry.sol\";\n\n// Superfluid CFA\n// Polygon: 0x6EeE6060f715257b970700bc2656De21dEdF074C\n// Mumbai: 0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873\n\n// SuperToken (fDAIx / DAIx)\n// Polygon: 0x1305F6B6Df9Dc47159D12Eb7aC2804d4A33173c2\n// Mumbai: 0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f\n\n// LensHub\n// Polygon: 0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d\n// Mumbai: 0x60Ae865ee4C725cd04353b5AAb364553f56ceF82\n\n// FlowRate\n// 2 / mo: 761035007610\n// 5 / mo: 1902587519025\n// 10 / mo: 3805175038051\n\ncontract Premiere {\n    address private lensHubAddress = 0x60Ae865ee4C725cd04353b5AAb364553f56ceF82;\n\n    IConstantFlowAgreementV1 private cfa =\n        IConstantFlowAgreementV1(0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873);\n    ISuperfluidToken private superToken =\n        ISuperfluidToken(0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f);\n    IERC721 private lensHub = IERC721(lensHubAddress);\n    IRegistry private tbaRegistry =\n        IRegistry(0x02101dfB77FDE026414827Fdc604ddAF224F0921);\n    int96 minFlowRate = 761035007610;\n\n    function balanceOf(\n        address _owner,\n        uint256 _id\n    ) external view returns (uint256) {\n        address tba = IRegistry(tbaRegistry).account(lensHubAddress, _id);\n\n        (, int96 flowRate, , ) = cfa.getFlow(superToken, _owner, tba);\n        address owner = lensHub.ownerOf(_id);\n\n        if (flowRate >= minFlowRate || _owner == owner) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function parseInt(\n        string memory _a\n    ) internal pure returns (uint256 _parsedInt) {\n        return parseInt(_a, 0);\n    }\n\n    function parseInt(\n        string memory _a,\n        uint _b\n    ) internal pure returns (uint256 _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if (\n                (uint(uint8(bresult[i])) >= 48) &&\n                (uint(uint8(bresult[i])) <= 57)\n            ) {\n                if (decimals) {\n                    if (_b == 0) {\n                        break;\n                    } else {\n                        _b--;\n                    }\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                decimals = true;\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n}\n"
			},
			"premiere/IRegistry.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ninterface IRegistry {\n    event AccountCreated(\n        address account,\n        address indexed tokenContract,\n        uint256 indexed tokenId\n    );\n\n    function createAccount(address tokenContract, uint256 tokenId)\n        external\n        returns (address);\n\n    function account(address tokenContract, uint256 tokenId)\n        external\n        view\n        returns (address);\n}"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluidGovernance } from \"./ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperTokenFactory } from \"./ISuperTokenFactory.sol\";\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperApp } from \"./ISuperApp.sol\";\nimport {\n    BatchOperation,\n    ContextDefinitions,\n    FlowOperatorDefinitions,\n    SuperAppDefinitions,\n    SuperfluidGovernanceConfigs\n} from \"./Definitions.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\n\n/**\n * @title Host interface\n * @author Superfluid\n * @notice This is the central contract of the system where super agreement, super app\n * and super token features are connected.\n *\n * The Superfluid host contract is also the entry point for the protocol users,\n * where batch call and meta transaction are provided for UX improvements.\n *\n */\ninterface ISuperfluid {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    // Superfluid Custom Errors\n    error HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION();              // 0xef4295f6\n    error HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE();           // 0x474e7641\n    error HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS();    // 0x0cd0ebc2\n    error HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS();   // 0x473f7bd4\n    error HOST_INVALID_CONFIG_WORD();                           // 0xf4c802a4\n    error HOST_MAX_256_AGREEMENTS();                            // 0x7c281a78\n    error HOST_NON_UPGRADEABLE();                               // 0x14f72c9f\n    error HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX();               // 0x67e9985b\n    error HOST_ONLY_GOVERNANCE();                               // 0xc5d22a4e\n    error HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE();             // 0xb4770115\n    error HOST_AGREEMENT_ALREADY_REGISTERED();                  // 0xdc9ddba8\n    error HOST_AGREEMENT_IS_NOT_REGISTERED();                   // 0x1c9e9bea\n    error HOST_MUST_BE_CONTRACT();                              // 0xd4f6b30c\n    error HOST_ONLY_LISTED_AGREEMENT();                         // 0x619c5359\n    error HOST_NEED_MORE_GAS();                                 // 0xd4f5d496\n\n    // App Related Custom Errors\n    // uses SuperAppDefinitions' App Jail Reasons as _code\n    error APP_RULE(uint256 _code);                              // 0xa85ba64f\n\n    error HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY(); // 0x19ab84d1\n    error HOST_NOT_A_SUPER_APP();                               // 0x163cbe43\n    error HOST_NO_APP_REGISTRATION_PERMISSIONS();               // 0x5b93ebf0\n    error HOST_RECEIVER_IS_NOT_SUPER_APP();                     // 0x96aa315e\n    error HOST_SENDER_IS_NOT_SUPER_APP();                       // 0xbacfdc40\n    error HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL();             // 0x44725270\n    error HOST_SUPER_APP_IS_JAILED();                           // 0x02384b64\n    error HOST_SUPER_APP_ALREADY_REGISTERED();                  // 0x01b0a935\n    error HOST_UNAUTHORIZED_SUPER_APP_FACTORY();                // 0x289533c5\n\n    /**************************************************************************\n     * Time\n     *\n     * > The Oracle: You have the sight now, Neo. You are looking at the world without time.\n     * > Neo: Then why can't I see what happens to her?\n     * > The Oracle: We can never see past the choices we don't understand.\n     * >       - The Oracle and Neo conversing about the future of Trinity and the effects of Neo's choices\n     *************************************************************************/\n\n    function getNow() external view returns (uint256);\n\n    /**************************************************************************\n     * Governance\n     *************************************************************************/\n\n    /**\n     * @dev Get the current governance address of the Superfluid host\n     */\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\n\n    /**\n     * @dev Replace the current governance with a new one\n     */\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\n    /**\n     * @dev Governance replaced event\n     * @param oldGov Address of the old governance contract\n     * @param newGov Address of the new governance contract\n     */\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\n\n    /**************************************************************************\n     * Agreement Whitelisting\n     *************************************************************************/\n\n    /**\n     * @dev Register a new agreement class to the system\n     * @param agreementClassLogic Initial agreement class code\n     *\n     * @custom:modifiers \n     * - onlyGovernance\n     */\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class registered event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type registered\n     * @param code Address of the new agreement\n     */\n    event AgreementClassRegistered(bytes32 agreementType, address code);\n\n    /**\n    * @dev Update code of an agreement class\n    * @param agreementClassLogic New code for the agreement class\n    *\n    * @custom:modifiers \n    *  - onlyGovernance\n    */\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class updated event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type updated\n     * @param code Address of the new agreement\n     */\n    event AgreementClassUpdated(bytes32 agreementType, address code);\n\n    /**\n    * @notice Check if the agreement type is whitelisted\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\n\n    /**\n    * @notice Get agreement class\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\n\n    /**\n    * @dev Map list of the agreement classes using a bitmap\n    * @param bitmap Agreement class bitmap\n    */\n    function mapAgreementClasses(uint256 bitmap)\n        external view\n        returns (ISuperAgreement[] memory agreementClasses);\n\n    /**\n    * @notice Create a new bitmask by adding a agreement class to it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**\n    * @notice Create a new bitmask by removing a agreement class from it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**************************************************************************\n    * Super Token Factory\n    **************************************************************************/\n\n    /**\n     * @dev Get the super token factory\n     * @return factory The factory\n     */\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\n\n    /**\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\n     * @return logic The factory logic\n     */\n    function getSuperTokenFactoryLogic() external view returns (address logic);\n\n    /**\n     * @dev Update super token factory\n     * @param newFactory New factory logic\n     */\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\n    /**\n     * @dev SuperToken factory updated event\n     * @param newFactory Address of the new factory\n     */\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\n\n    /**\n     * @notice Update the super token logic to the latest\n     * @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours\n     */\n    function updateSuperTokenLogic(ISuperToken token) external;\n    /**\n     * @dev SuperToken logic updated event\n     * @param code Address of the new SuperToken logic\n     */\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\n\n    /**************************************************************************\n     * App Registry\n     *************************************************************************/\n\n    /**\n     * @dev Message sender (must be a contract) declares itself as a super app.\n     * @custom:deprecated you should use `registerAppWithKey` or `registerAppByFactory` instead,\n     * because app registration is currently governance permissioned on mainnets.\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     */\n    function registerApp(uint256 configWord) external;\n    /**\n     * @dev App registered event\n     * @param app Address of jailed app\n     */\n    event AppRegistered(ISuperApp indexed app);\n\n    /**\n     * @dev Message sender declares itself as a super app.\n     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n     * @param registrationKey The registration key issued by the governance, needed to register on a mainnet.\n     * @notice See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n     * On testnets or in dev environment, a placeholder (e.g. empty string) can be used.\n     * While the message sender must be the super app itself, the transaction sender (tx.origin)\n     * must be the deployer account the registration key was issued for.\n     */\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\n\n    /**\n     * @dev Message sender (must be a contract) declares app as a super app\n     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n     * @notice On mainnet deployments, only factory contracts pre-authorized by governance can use this.\n     * See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n     */\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\n\n    /**\n     * @dev Query if the app is registered\n     * @param app Super app address\n     */\n    function isApp(ISuperApp app) external view returns(bool);\n\n    /**\n     * @dev Query app callbacklevel\n     * @param app Super app address\n     */\n    function getAppCallbackLevel(ISuperApp app) external view returns(uint8 appCallbackLevel);\n\n    /**\n     * @dev Get the manifest of the super app\n     * @param app Super app address\n     */\n    function getAppManifest(\n        ISuperApp app\n    )\n        external view\n        returns (\n            bool isSuperApp,\n            bool isJailed,\n            uint256 noopMask\n        );\n\n    /**\n     * @dev Query if the app has been jailed\n     * @param app Super app address\n     */\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\n\n    /**\n     * @dev Whitelist the target app for app composition for the source app (msg.sender)\n     * @param targetApp The target super app address\n     */\n    function allowCompositeApp(ISuperApp targetApp) external;\n\n    /**\n     * @dev Query if source app is allowed to call the target app as downstream app\n     * @param app Super app address\n     * @param targetApp The target super app address\n     */\n    function isCompositeAppAllowed(\n        ISuperApp app,\n        ISuperApp targetApp\n    )\n        external view\n        returns (bool isAppAllowed);\n\n    /**************************************************************************\n     * Agreement Framework\n     *\n     * Agreements use these function to trigger super app callbacks, updates\n     * app credit and charge gas fees.\n     *\n     * These functions can only be called by registered agreements.\n     *************************************************************************/\n\n    /**\n     * @dev (For agreements) StaticCall the app before callback\n     * @param  app               The super app.\n     * @param  callData          The call data sending to the super app.\n     * @param  isTermination     Is it a termination callback?\n     * @param  ctx               Current ctx, it will be validated.\n     * @return cbdata            Data returned from the callback.\n     */\n    function callAppBeforeCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns(bytes memory cbdata);\n\n    /**\n     * @dev (For agreements) Call the app after callback\n     * @param  app               The super app.\n     * @param  callData          The call data sending to the super app.\n     * @param  isTermination     Is it a termination callback?\n     * @param  ctx               Current ctx, it will be validated.\n     * @return newCtx            The current context of the transaction.\n     */\n    function callAppAfterCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Create a new callback stack\n     * @param  ctx                     The current ctx, it will be validated.\n     * @param  app                     The super app.\n     * @param  appCreditGranted        App credit granted so far.\n     * @param  appCreditUsed           App credit used so far.\n     * @return newCtx                  The current context of the transaction.\n     */\n    function appCallbackPush(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 appCreditGranted,\n        int256 appCreditUsed,\n        ISuperfluidToken appCreditToken\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Pop from the current app callback stack\n     * @param  ctx                     The ctx that was pushed before the callback stack.\n     * @param  appCreditUsedDelta      App credit used by the app.\n     * @return newCtx                  The current context of the transaction.\n     *\n     * @custom:security\n     * - Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory.\n     * - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.\n     */\n    function appCallbackPop(\n        bytes calldata ctx,\n        int256 appCreditUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Use app credit.\n     * @param  ctx                      The current ctx, it will be validated.\n     * @param  appCreditUsedMore        See app credit for more details.\n     * @return newCtx                   The current context of the transaction.\n     */\n    function ctxUseCredit(\n        bytes calldata ctx,\n        int256 appCreditUsedMore\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Jail the app.\n     * @param  app                     The super app.\n     * @param  reason                  Jail reason code.\n     * @return newCtx                  The current context of the transaction.\n     */\n    function jailApp(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 reason\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Jail event for the app\n     * @param app Address of jailed app\n     * @param reason Reason the app is jailed (see Definitions.sol for the full list)\n     */\n    event Jail(ISuperApp indexed app, uint256 reason);\n\n    /**************************************************************************\n     * Contextless Call Proxies\n     *\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\n     * with agreements or apps.\n     *\n     * NOTE: The contextual call data should be generated using\n     * abi.encodeWithSelector. The context parameter should be set to \"0x\",\n     * an empty bytes array as a placeholder to be replaced by the host\n     * contract.\n     *************************************************************************/\n\n     /**\n      * @dev Call agreement function\n      * @param agreementClass The agreement address you are calling\n      * @param callData The contextual call data with placeholder ctx\n      * @param userData Extra user data being sent to the super app callbacks\n      */\n     function callAgreement(\n         ISuperAgreement agreementClass,\n         bytes calldata callData,\n         bytes calldata userData\n     )\n        external\n        //cleanCtx\n        //isAgreement(agreementClass)\n        returns(bytes memory returnedData);\n\n    /**\n     * @notice Call app action\n     * @dev Main use case is calling app action in a batch call via the host\n     * @param callData The contextual call data\n     *\n     * @custom:note See \"Contextless Call Proxies\" above for more about contextual call data.\n     */\n    function callAppAction(\n        ISuperApp app,\n        bytes calldata callData\n    )\n        external\n        //cleanCtx\n        //isAppActive(app)\n        //isValidAppAction(callData)\n        returns(bytes memory returnedData);\n\n    /**************************************************************************\n     * Contextual Call Proxies and Context Utilities\n     *\n     * For apps, they must use context they receive to interact with\n     * agreements or apps.\n     *\n     * The context changes must be saved and returned by the apps in their\n     * callbacks always, any modification to the context will be detected and\n     * the violating app will be jailed.\n     *************************************************************************/\n\n    /**\n     * @dev Context Struct\n     *\n     * @custom:note on backward compatibility:\n     * - Non-dynamic fields are padded to 32bytes and packed\n     * - Dynamic fields are referenced through a 32bytes offset to their \"parents\" field (or root)\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\n     *    - non-dynamic fields will be parsed at the same memory location,\n     *    - and dynamic fields will simply have a greater offset than it was.\n     * - We cannot change the structure of the Context struct because of ABI compatibility requirements\n     */\n    struct Context {\n        //\n        // Call context\n        //\n        // app callback level\n        uint8 appCallbackLevel;\n        // type of call\n        uint8 callType;\n        // the system timestamp\n        uint256 timestamp;\n        // The intended message sender for the call\n        address msgSender;\n\n        //\n        // Callback context\n        //\n        // For callbacks it is used to know which agreement function selector is called\n        bytes4 agreementSelector;\n        // User provided data for app callbacks\n        bytes userData;\n\n        //\n        // App context\n        //\n        // app credit granted\n        uint256 appCreditGranted;\n        // app credit wanted by the app callback\n        uint256 appCreditWantedDeprecated;\n        // app credit used, allowing negative values over a callback session\n        // the appCreditUsed value over a callback sessions is calculated with:\n        // existing flow data owed deposit + sum of the callback agreements\n        // deposit deltas \n        // the final value used to modify the state is determined by the\n        // _adjustNewAppCreditUsed function (in AgreementLibrary.sol) which takes \n        // the appCreditUsed value reached in the callback session and the app\n        // credit granted\n        int256 appCreditUsed;\n        // app address\n        address appAddress;\n        // app credit in super token\n        ISuperfluidToken appCreditToken;\n    }\n\n    function callAgreementWithContext(\n        ISuperAgreement agreementClass,\n        bytes calldata callData,\n        bytes calldata userData,\n        bytes calldata ctx\n    )\n        external\n        // requireValidCtx(ctx)\n        // onlyAgreement(agreementClass)\n        returns (bytes memory newCtx, bytes memory returnedData);\n\n    function callAppActionWithContext(\n        ISuperApp app,\n        bytes calldata callData,\n        bytes calldata ctx\n    )\n        external\n        // requireValidCtx(ctx)\n        // isAppActive(app)\n        returns (bytes memory newCtx);\n\n    function decodeCtx(bytes memory ctx)\n        external pure\n        returns (Context memory context);\n\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\n\n    /**************************************************************************\n    * Batch call\n    **************************************************************************/\n    /**\n     * @dev Batch operation data\n     */\n    struct Operation {\n        // Operation type. Defined in BatchOperation (Definitions.sol)\n        uint32 operationType;\n        // Operation target\n        address target;\n        // Data specific to the operation\n        bytes data;\n    }\n\n    /**\n     * @dev Batch call function\n     * @param operations Array of batch operations\n     */\n    function batchCall(Operation[] calldata operations) external;\n\n    /**\n     * @dev Batch call function for trusted forwarders (EIP-2771)\n     * @param operations Array of batch operations\n     */\n    function forwardBatchCall(Operation[] calldata operations) external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * TODO: turning these off because solidity-coverage doesn't like it\n     *************************************************************************/\n\n     /* /// @dev The current superfluid context is clean.\n     modifier cleanCtx() virtual;\n\n     /// @dev Require the ctx being valid.\n     modifier requireValidCtx(bytes memory ctx) virtual;\n\n     /// @dev Assert the ctx being valid.\n     modifier assertValidCtx(bytes memory ctx) virtual;\n\n     /// @dev The agreement is a listed agreement.\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\n\n     // onlyGovernance\n\n     /// @dev The msg.sender must be a listed agreement.\n     modifier onlyAgreement() virtual;\n\n     /// @dev The app is registered and not jailed.\n     modifier isAppActive(ISuperApp app) virtual; */\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n/**\n * @title Constant Flow Agreement interface\n * @author Superfluid\n */\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error CFA_ACL_NO_SENDER_CREATE();               // 0x4b993136\n    error CFA_ACL_NO_SENDER_UPDATE();               // 0xedfa0d3b\n    error CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS(); // 0xa3eab6ac\n    error CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS(); // 0xac434b5f\n    error CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS(); // 0xe30f1bff\n    error CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED();   // 0xa0645c1f\n    error CFA_ACL_UNCLEAN_PERMISSIONS();            // 0x7939d66c\n    error CFA_ACL_NO_SENDER_FLOW_OPERATOR();        // 0xb0ed394d\n    error CFA_ACL_NO_NEGATIVE_ALLOWANCE();          // 0x86e0377d\n    error CFA_FLOW_ALREADY_EXISTS();                // 0x801b6863\n    error CFA_FLOW_DOES_NOT_EXIST();                // 0x5a32bf24\n    error CFA_INSUFFICIENT_BALANCE();               // 0xea76c9b3\n    error CFA_ZERO_ADDRESS_SENDER();                // 0x1ce9b067\n    error CFA_ZERO_ADDRESS_RECEIVER();              // 0x78e02b2a\n    error CFA_HOOK_OUT_OF_GAS();                    // 0x9f76430b\n    error CFA_DEPOSIT_TOO_BIG();                    // 0x752c2b9c\n    error CFA_FLOW_RATE_TOO_BIG();                  // 0x0c9c55c1\n    error CFA_NON_CRITICAL_SENDER();                // 0xce11b5d1\n    error CFA_INVALID_FLOW_RATE();                  // 0x91acad16\n    error CFA_NO_SELF_FLOW();                       // 0xa47338ef\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    /**\n     * @notice Get the maximum flow rate allowed with the deposit\n     * @dev The deposit is clipped and rounded down\n     * @param deposit Deposit amount used for creating the flow\n     * @return flowRate The maximum flow rate\n     */\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Get the deposit required for creating the flow\n     * @dev Calculates the deposit based on the liquidationPeriod and flowRate\n     * @param flowRate Flow rate to be tested\n     * @return deposit The deposit amount based on flowRate and liquidationPeriod\n     * @custom:note \n     * - if calculated deposit (flowRate * liquidationPeriod) is less\n     *   than the minimum deposit, we use the minimum deposit otherwise\n     *   we use the calculated deposit\n     */\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view virtual\n        returns (uint256 deposit);\n\n    /**\n     * @dev Returns whether it is the patrician period based on host.getNow()\n     * @param account The account we are interested in\n     * @return isCurrentlyPatricianPeriod Whether it is currently the patrician period dictated by governance\n     * @return timestamp The value of host.getNow()\n     */\n    function isPatricianPeriodNow(\n        ISuperfluidToken token,\n        address account)\n        external view virtual\n        returns (bool isCurrentlyPatricianPeriod, uint256 timestamp);\n\n    /**\n     * @dev Returns whether it is the patrician period based on timestamp\n     * @param account The account we are interested in\n     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n     * @return bool Whether it is currently the patrician period dictated by governance\n     */\n    function isPatricianPeriod(\n        ISuperfluidToken token,\n        address account,\n        uint256 timestamp\n    )\n        public view virtual\n        returns (bool);\n\n    /**\n     * @dev msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param permissions A bitmask representation of the granted permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function updateFlowOperatorPermissions(\n        ISuperfluidToken token,\n        address flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance,\n        bytes calldata ctx\n    ) \n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\n     * @dev if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param addedFlowRateAllowance The flow rate allowance delta\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @return newCtx The new context bytes\n     */\n    function increaseFlowRateAllowance(\n        ISuperfluidToken token,\n        address flowOperator,\n        int96 addedFlowRateAllowance,\n        bytes calldata ctx\n    ) external virtual returns(bytes memory newCtx);\n\n    /**\n     * @dev msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`\n     * @dev if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param subtractedFlowRateAllowance The flow rate allowance delta\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @return newCtx The new context bytes\n     */\n    function decreaseFlowRateAllowance(\n        ISuperfluidToken token,\n        address flowOperator,\n        int96 subtractedFlowRateAllowance,\n        bytes calldata ctx\n    ) external virtual returns(bytes memory newCtx);\n\n    /**\n     * @dev msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function authorizeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n     /**\n     * @notice msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\n     * @dev `permissions` and `flowRateAllowance` will both be set to 0\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function revokeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\n     * @param token Super token address\n     * @param sender The permission granter address\n     * @param flowOperator The permission grantee address\n     * @return flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorData(\n       ISuperfluidToken token,\n       address sender,\n       address flowOperator\n    )\n        public view virtual\n        returns (\n            bytes32 flowOperatorId,\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Get flow operator using flowOperatorId\n     * @param token Super token address\n     * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorDataByID(\n       ISuperfluidToken token,\n       bytes32 flowOperatorId\n    )\n        external view virtual\n        returns (\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Create a flow betwen ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementCreated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - A deposit is taken as safety margin for the solvency agents\n     * - A extra gas fee may be taken to pay for solvency agent liquidations\n     */\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Create a flow between sender and receiver\n    * @dev A flow created by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function createFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Update the flow rate between ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementUpdated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Only the flow sender may update the flow rate\n     * - Even if the flow rate is zero, the flow is not deleted\n     * from the system\n     * - Deposit amount will be adjusted accordingly\n     * - No new gas fee is charged\n     */\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Update a flow between sender and receiver\n    * @dev A flow updated by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function updateFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev Get the flow data between `sender` and `receiver` of `token`\n     * @param token Super token address\n     * @param sender Flow receiver\n     * @param receiver Flow sender\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The amount of deposit the flow\n     * @return owedDeposit The amount of owed deposit of the flow\n     */\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @notice Get flow data using agreementId\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param agreementId The agreement ID\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The deposit amount of the flow\n     * @return owedDeposit The owed deposit amount of the flow\n     */\n    function getFlowByID(\n       ISuperfluidToken token,\n       bytes32 agreementId\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get the aggregated flow info of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return timestamp Timestamp of when a flow was last updated for account\n     * @return flowRate The net flow rate of token for account\n     * @return deposit The sum of all deposits for account's flows\n     * @return owedDeposit The sum of all owed deposits for account's flows\n     */\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @dev Get the net flow rate of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return flowRate Net flow rate\n     */\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     *\n     * @custom:callbacks \n     * - AgreementTerminated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Both flow sender and receiver may delete the flow\n     * - If Sender account is insolvent or in critical state, a solvency agent may\n     *   also terminate the agreement\n     * - Gas fee may be returned to the sender\n     */\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev A flow deleted by an approved flow operator (see above for details on callbacks)\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     */\n    function deleteFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n     \n    /**\n     * @dev Flow operator updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param flowOperator Flow operator address\n     * @param permissions Octo bitmask representation of permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    event FlowOperatorUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance\n    );\n\n    /**\n     * @dev Flow updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param receiver Flow recipient address\n     * @param flowRate Flow rate in amount per second for this flow\n     * @param totalSenderFlowRate Total flow rate in amount per second for the sender\n     * @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n     * @param userData The user provided data\n     *\n     */\n    event FlowUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed receiver,\n        int96 flowRate,\n        int256 totalSenderFlowRate,\n        int256 totalReceiverFlowRate,\n        bytes userData\n    );\n\n    /**\n     * @dev Flow updated extension event\n     * @param flowOperator Flow operator address - the Context.msgSender\n     * @param deposit The deposit amount for the stream\n     */\n    event FlowUpdatedExtension(\n        address indexed flowOperator,\n        uint256 deposit\n    );\n}\n"
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC777/IERC777.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\n     */\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\n     */\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\n/**\n * @title ERC20 token info interface\n * @author Superfluid\n * @dev ERC20 standard interface does not specify these functions, but\n *      often the token implementations have them.\n */\ninterface TokenInfo {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\n/**\n * @title Super app definitions library\n * @author Superfluid\n */\nlibrary SuperAppDefinitions {\n\n    /**************************************************************************\n    / App manifest config word\n    /**************************************************************************/\n\n    /*\n     * App level is a way to allow the app to whitelist what other app it can\n     * interact with (aka. composite app feature).\n     *\n     * For more details, refer to the technical paper of superfluid protocol.\n     */\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\n\n    // The app is at the final level, hence it doesn't want to interact with any other app\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\n\n    // The app is at the second level, it may interact with other final level apps if whitelisted\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\n\n    function getAppCallbackLevel(uint256 configWord) internal pure returns (uint8) {\n        return uint8(configWord & APP_LEVEL_MASK);\n    }\n\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\n    }\n\n    /**************************************************************************\n    / Callback implementation bit masks\n    /**************************************************************************/\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\n\n    /**************************************************************************\n    / App Jail Reasons\n    /**************************************************************************/\n\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\n\n    // Validate configWord cleaness for future compatibility, or else may introduce undefined future behavior\n    function isConfigWordClean(uint256 configWord) internal pure returns (bool) {\n        return (configWord & ~(APP_LEVEL_MASK | APP_JAIL_BIT | AGREEMENT_CALLBACK_NOOP_BITMASKS)) == uint256(0);\n    }\n}\n\n/**\n * @title Context definitions library\n * @author Superfluid\n */\nlibrary ContextDefinitions {\n\n    /**************************************************************************\n    / Call info\n    /**************************************************************************/\n\n    // app level\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\n\n    // call type\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\n\n    function decodeCallInfo(uint256 callInfo)\n        internal pure\n        returns (uint8 appCallbackLevel, uint8 callType)\n    {\n        appCallbackLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n    function encodeCallInfo(uint8 appCallbackLevel, uint8 callType)\n        internal pure\n        returns (uint256 callInfo)\n    {\n        return uint256(appCallbackLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n}\n\n/**\n * @title Flow Operator definitions library\n  * @author Superfluid\n */\n library FlowOperatorDefinitions {\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_CREATE = uint8(1) << 0;\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_UPDATE = uint8(1) << 1;\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_DELETE = uint8(1) << 2;\n    uint8 constant internal AUTHORIZE_FULL_CONTROL =\n        AUTHORIZE_FLOW_OPERATOR_CREATE | AUTHORIZE_FLOW_OPERATOR_UPDATE | AUTHORIZE_FLOW_OPERATOR_DELETE;\n    uint8 constant internal REVOKE_FLOW_OPERATOR_CREATE = ~(uint8(1) << 0);\n    uint8 constant internal REVOKE_FLOW_OPERATOR_UPDATE = ~(uint8(1) << 1);\n    uint8 constant internal REVOKE_FLOW_OPERATOR_DELETE = ~(uint8(1) << 2);\n\n    function isPermissionsClean(uint8 permissions) internal pure returns (bool) {\n        return (\n            permissions & ~(AUTHORIZE_FLOW_OPERATOR_CREATE\n                | AUTHORIZE_FLOW_OPERATOR_UPDATE\n                | AUTHORIZE_FLOW_OPERATOR_DELETE)\n            ) == uint8(0);\n    }\n }\n\n/**\n * @title Batch operation library\n * @author Superfluid\n */\nlibrary BatchOperation {\n    /**\n     * @dev ERC20.approve batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationApprove(\n     *     abi.decode(data, (address spender, uint256 amount))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\n    /**\n     * @dev ERC20.transferFrom batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationTransferFrom(\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\n    /**\n     * @dev ERC777.send batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationSend(\n     *     abi.decode(data, (address recipient, uint256 amount, bytes userData)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC777_SEND = 3;\n    /**\n     * @dev ERC20.increaseAllowance batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationIncreaseAllowance(\n     *     abi.decode(data, (address account, address spender, uint256 addedValue))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE = 4;\n    /**\n     * @dev ERC20.decreaseAllowance batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDecreaseAllowance(\n     *     abi.decode(data, (address account, address spender, uint256 subtractedValue))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE = 5;\n    /**\n     * @dev SuperToken.upgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationUpgrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\n    /**\n     * @dev SuperToken.downgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDowngrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\n    /**\n     * @dev Superfluid.callAgreement batch operation type\n     *\n     * Call spec:\n     * callAgreement(\n     *     ISuperAgreement(target)),\n     *     abi.decode(data, (bytes callData, bytes userData)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\n    /**\n     * @dev Superfluid.callAppAction batch operation type\n     *\n     * Call spec:\n     * callAppAction(\n     *     ISuperApp(target)),\n     *     data\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\n}\n\n/**\n * @title Superfluid governance configs library\n * @author Superfluid\n */\nlibrary SuperfluidGovernanceConfigs {\n\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n    bytes32 constant internal CFAV1_PPP_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\");\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\");\n\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.trustedForwarder\",\n            forwarder));\n    }\n\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\",\n            deployer,\n            registrationKey));\n    }\n\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32)\n    {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.factory\",\n            factory));\n    }\n\n    function decodePPPConfig(uint256 pppConfig) internal pure\n        returns (uint256 liquidationPeriod, uint256 patricianPeriod)\n    {\n        liquidationPeriod = (pppConfig >> 32) & type(uint32).max;\n        patricianPeriod = pppConfig & type(uint32).max;\n    }\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\n/**\n * @title SuperApp interface\n * @author Superfluid\n * @dev Be aware of the app being jailed, when the word permitted is used.\n */\ninterface ISuperApp {\n\n    /**\n     * @dev Callback before a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * @custom:note \n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n     * @dev Callback after a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param cbdata The data returned from the before-hook callback.\n     * @param ctx The context data.\n     * @return newCtx The current context of the transaction.\n     *\n     * @custom:note \n     * - State changes is permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function afterAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Callback before a new agreement is updated.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * @custom:note \n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n\n    /**\n    * @dev Callback after a new agreement is updated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * @custom:note \n    * - State changes is permitted.\n    * - Only revert with a \"reason\" is permitted.\n    */\n    function afterAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n    * @dev Callback before a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param ctx The context data.\n    * @return cbdata A free format in memory data the app can use to pass arbitary information to\n    *         the after-hook callback.\n    *\n    * @custom:note \n    * - It will be invoked with `staticcall`, no state changes are permitted.\n    * - Revert is not permitted.\n    */\n    function beforeAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n    * @dev Callback after a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * @custom:note \n    * - State changes is permitted.\n    * - Revert is not permitted.\n    */\n    function afterAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Super agreement interface\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Get the type of the agreement class\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class\n     * @param account Account the state belongs to\n     * @param time Time used for the calculation\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n     * @return deposit Account deposit amount of this agreement\n     * @return owedDeposit Account owed deposit amount of this agreement\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\nimport {\n    IERC20,\n    ERC20WithTokenInfo\n} from \"../tokens/ERC20WithTokenInfo.sol\";\n\n/**\n * @title Super token factory interface\n * @author Superfluid\n */\ninterface ISuperTokenFactory {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_FACTORY_ALREADY_EXISTS();                 // 0x91d67972\n    error SUPER_TOKEN_FACTORY_DOES_NOT_EXIST();                 // 0x872cac48\n    error SUPER_TOKEN_FACTORY_UNINITIALIZED();                  // 0x1b39b9b4\n    error SUPER_TOKEN_FACTORY_ONLY_HOST();                      // 0x478b8e83\n    error SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED();  // 0x478b8e83\n    error SUPER_TOKEN_FACTORY_ZERO_ADDRESS();                   // 0x305c9e82\n\n    /**************************************************************************\n    * Immutable Variables\n    **************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /// @dev Initialize the contract\n    function initialize() external;\n\n    /**\n     * @notice Get the canonical super token logic.\n     */\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\n\n    /**\n     * @dev Upgradability modes\n     */\n    enum Upgradability {\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\n        NON_UPGRADABLE,\n        /// Upgradable through `host.updateSuperTokenLogic` operation\n        SEMI_UPGRADABLE,\n        /// Always using the latest super token logic\n        FULL_UPGRADABLE\n    }\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     */\n    function createERC20Wrapper(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token with extra token info\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     * NOTE:\n     * - It assumes token provide the .decimals() function\n     */\n    function createERC20Wrapper(\n        ERC20WithTokenInfo underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\n     * @dev salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\n     * @param _underlyingToken Underlying ERC20 token\n     * @return ISuperToken the created supertoken\n     */\n    function createCanonicalERC20Wrapper(ERC20WithTokenInfo _underlyingToken)\n        external\n        returns (ISuperToken);\n\n    /**\n     * @notice Computes/Retrieves wrapper super token address given the underlying token address\n     * @dev We return from our canonical list if it already exists, otherwise we compute it\n     * @dev note that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\n     * @param _underlyingToken Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     * @return isDeployed whether the super token is deployed AND set in the canonical mapping\n     */\n    function computeCanonicalERC20WrapperAddress(address _underlyingToken)\n        external\n        view\n        returns (address superTokenAddress, bool isDeployed);\n\n    /**\n     * @notice Gets the canonical ERC20 wrapper super token address given the underlying token address\n     * @dev We return the address if it exists and the zero address otherwise\n     * @param _underlyingTokenAddress Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     */\n    function getCanonicalERC20Wrapper(address _underlyingTokenAddress)\n        external\n        view\n        returns (address superTokenAddress);\n\n    /**\n     * @dev Creates a new custom super token\n     * @param customSuperTokenProxy address of the custom supertoken proxy\n     */\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external;\n\n    /**\n      * @dev Super token logic created event\n      * @param tokenLogic Token logic address\n      */\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\n\n    /**\n      * @dev Super token created event\n      * @param token Newly created super token address\n      */\n    event SuperTokenCreated(ISuperToken indexed token);\n\n    /**\n      * @dev Custom super token created event\n      * @param token Newly created custom super token address\n      */\n    event CustomSuperTokenCreated(ISuperToken indexed token);\n\n}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IConstantOutflowNFT } from \"./IConstantOutflowNFT.sol\";\nimport { IConstantInflowNFT } from \"./IConstantInflowNFT.sol\";\nimport { IPoolAdminNFT } from \"./IPoolAdminNFT.sol\";\nimport { IPoolMemberNFT } from \"./IPoolMemberNFT.sol\";\n\n/**\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER();       // 0xf7f02227\n    error SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT();             // 0xfe737d05\n    error SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED(); // 0xe3e13698\n    error SUPER_TOKEN_NO_UNDERLYING_TOKEN();                     // 0xf79cf656\n    error SUPER_TOKEN_ONLY_SELF();                               // 0x7ffa6648\n    error SUPER_TOKEN_ONLY_HOST();                               // 0x98f73704\n    error SUPER_TOKEN_ONLY_GOV_OWNER();                          // 0xd9c7ed08\n    error SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS();               // 0x81638627\n    error SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS();                 // 0xdf070274\n    error SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS();                  // 0xba2ab184\n    error SUPER_TOKEN_MINT_TO_ZERO_ADDRESS();                    // 0x0d243157\n    error SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS();              // 0xeecd6c9b\n    error SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS();                // 0xe219bd39\n    error SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED();               // 0x6bef249d\n\n    /**\n     * @dev Initialize the contract\n     */\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n    * Immutable variables\n    *************************************************************************/\n\n    // solhint-disable-next-line func-name-mixedcase\n    function CONSTANT_OUTFLOW_NFT() external view returns (IConstantOutflowNFT);\n    // solhint-disable-next-line func-name-mixedcase\n    function CONSTANT_INFLOW_NFT() external view returns (IConstantInflowNFT);\n\n    /**************************************************************************\n    * TokenInfo & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * @custom:note SuperToken always uses 18 decimals.\n     *\n     * This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\n     *         zero by default.\n     *\n     * @notice This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:note Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @custom:emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     *         allowance mechanism. `amount` is then deducted from the caller's\n     *         allowance.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements \n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements \n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     *         means all token operations (creation, movement and destruction) must have\n     *         amounts that are a multiple of this number.\n     *\n     * @custom:note For super token contracts, this value is always 1\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\n     *      the corresponding functions will be called with `data` and empty\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements \n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply and transfers the underlying token to the caller's account.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements \n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * @custom:emits an {AuthorizedOperator} event.\n     *\n     * @custom:requirements \n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * @custom:emits a {RevokedOperator} event.\n     *\n     * @custom:requirements \n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements \n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements \n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * @custom:modifiers \n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n   /**\n    * @dev Transfer `amount` tokens from the `sender` to `recipient`.\n    * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n    * spend tokens of `sender`.\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfTransferFrom(\n        address sender,\n        address spender,\n        address recipient,\n        uint256 amount\n   ) external;\n\n   /**\n    * @dev Give `spender`, `amount` allowance to spend the tokens of\n    * `account`.\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfApproveFor(\n        address account,\n        address spender,\n        uint256 amount\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to receive upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     * \n     * @custom:warning\n     * - there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.\n     * @custom:requirements \n     * - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Downgrade SuperToken to ERC20 and transfer immediately\n     * @param to The account to receive downgraded tokens\n     * @param amount Number of tokens to be downgraded (in 18 decimals)\n     */\n    function downgradeTo(address to, uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are downgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    function operationIncreaseAllowance(\n        address account,\n        address spender,\n        uint256 addedValue\n    ) external;\n\n    function operationDecreaseAllowance(\n        address account,\n        address spender,\n        uint256 subtractedValue\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transferFrom by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC777 send by host contract.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    * @param data Arbitrary user inputted data\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationSend(\n        address spender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n    // Flow NFT events\n    /**\n     * @dev Constant Outflow NFT proxy created event\n     * @param constantOutflowNFT constant outflow nft address\n     */\n    event ConstantOutflowNFTCreated(\n        IConstantOutflowNFT indexed constantOutflowNFT\n    );\n\n    /**\n     * @dev Constant Inflow NFT proxy created event\n     * @param constantInflowNFT constant inflow nft address\n     */\n    event ConstantInflowNFTCreated(\n        IConstantInflowNFT indexed constantInflowNFT\n    );\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n/**\n * @title Superfluid token interface\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_TOKEN_AGREEMENT_ALREADY_EXISTS();  // 0xf05521f6\n    error SF_TOKEN_AGREEMENT_DOES_NOT_EXIST();  // 0xdae18809\n    error SF_TOKEN_BURN_INSUFFICIENT_BALANCE(); // 0x10ecdf44\n    error SF_TOKEN_MOVE_INSUFFICIENT_BALANCE(); // 0x2f4cb941\n    error SF_TOKEN_ONLY_LISTED_AGREEMENT();     // 0xc9ff6644\n    error SF_TOKEN_ONLY_HOST();                 // 0xc51efddd\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\n     *\n     * @custom:note \n     * - version: 1\n     * - liquidationType key:\n     *    - 0 = reward account receives reward (PIC period)\n     *    - 1 = liquidator account receives reward (Pleb period)\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\n     */\n    struct LiquidationTypeData {\n        uint256 version;\n        uint8 liquidationType;\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @notice Calculate the realtime balance given the current host.getNow() value\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\n     * @param account for the query\n     * @return availableBalance Real-time balance\n     * @return deposit Account deposit\n     * @return owedDeposit Account owed Deposit\n     */\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @notice Check if account is critical\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @notice Check if account is critical now (current host.getNow())\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @notice Check if account is solvent\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @notice Check if account is solvent now\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @notice Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement created event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement updated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n    /**\n     * @dev Agreement terminated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * @custom:note \n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of an agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @notice Settle balance from an account by the agreement\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Make liquidation payouts (v2)\n     * @param id Agreement ID\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n     * @param targetAccount Account to be liquidated\n     * @param rewardAmount The amount the rewarded account will receive\n     * @param targetAccountBalanceDelta The delta amount the target account balance should change by\n     *\n     * @custom:note \n     * - If a bailout is required (bailoutAmount > 0)\n     *   - the actual reward (single deposit) goes to the executor,\n     *   - while the reward account becomes the bailout account\n     *   - total bailout include: bailout amount + reward amount\n     *   - the targetAccount will be bailed out\n     * - If a bailout is not required\n     *   - the targetAccount will pay the rewardAmount\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function makeLiquidationPayoutsV2\n    (\n        bytes32 id,\n        bytes memory liquidationTypeData,\n        address liquidatorAccount,\n        bool useDefaultRewardAccount,\n        address targetAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta\n    ) external;\n    /**\n     * @dev Agreement liquidation event v2 (including agent account)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param targetAccount Account of the stream sender\n     * @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n     * @param rewardAmount The amount the reward recipient account balance should change by\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if the agreement is liquidated during the PIC period\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the targetAccount is insolvent\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\n     *   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n     *   - the targetAccount will receive the bailoutAmount\n     */\n    event AgreementLiquidatedV2(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed liquidatorAccount,\n        address indexed targetAccount,\n        address rewardAmountReceiver,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta,\n        bytes liquidationTypeData\n    );\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n    /**************************************************************************\n     * DEPRECATED\n     *************************************************************************/\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param bondAccount Account that collect the reward or bailout accounts\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of liquidation bailouot\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if bailout is equal to 0, then\n     *   - the bondAccount will get the rewardAmount,\n     *   - the penaltyAccount will pay for the rewardAmount.\n     * - if bailout is larger than 0, then\n     *   - the liquidatorAccount will get the rewardAmouont,\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\n     */\n    event AgreementLiquidatedBy(\n        address liquidatorAccount,\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed bondAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    );\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperfluidToken  } from \"./ISuperfluidToken.sol\";\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\n\n\n/**\n * @title Superfluid governance interface\n * @author Superfluid\n */\ninterface ISuperfluidGovernance {\n    \n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_GOV_ARRAYS_NOT_SAME_LENGTH();                  // 0x27743aa6\n    error SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD(); // 0xe171980a\n    error SF_GOV_MUST_BE_CONTRACT();                        // 0x80dddd73\n\n    /**\n     * @dev Replace the current governance with a new governance\n     */\n    function replaceGovernance(\n        ISuperfluid host,\n        address newGov) external;\n\n    /**\n     * @dev Register a new agreement class\n     */\n    function registerAgreementClass(\n        ISuperfluid host,\n        address agreementClass) external;\n\n    /**\n     * @dev Update logics of the contracts\n     *\n     * @custom:note \n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\n     */\n    function updateContracts(\n        ISuperfluid host,\n        address hostNewLogic,\n        address[] calldata agreementClassNewLogics,\n        address superTokenFactoryNewLogic\n    ) external;\n\n    /**\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\n     */\n    function batchUpdateSuperTokenLogic(\n        ISuperfluid host,\n        ISuperToken[] calldata tokens) external;\n    \n    /**\n     * @dev Set configuration as address value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        address value\n    ) external;\n    \n    /**\n     * @dev Set configuration as uint256 value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        uint256 value\n    ) external;\n\n    /**\n     * @dev Clear configuration\n     */\n    function clearConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key\n    ) external;\n\n    /**\n     * @dev Get configuration as address value\n     */\n    function getConfigAsAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (address value);\n\n    /**\n     * @dev Get configuration as uint256 value\n     */\n    function getConfigAsUint256(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (uint256 value);\n\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { TokenInfo } from \"./TokenInfo.sol\";\n\n/**\n * @title ERC20 token with token info interface\n * @author Superfluid\n * @dev Using abstract contract instead of interfaces because old solidity\n *      does not support interface inheriting other interfaces\n * solhint-disable-next-line no-empty-blocks\n *\n */\n// solhint-disable-next-line no-empty-blocks\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPoolMemberNFT {}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPoolAdminNFT {}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { IFlowNFTBase } from \"./IFlowNFTBase.sol\";\n\ninterface IConstantInflowNFT is IFlowNFTBase {\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n    error CIF_NFT_ONLY_CONSTANT_OUTFLOW(); // 0xe81ef57a\n\n    /**************************************************************************\n     * Write Functions\n     *************************************************************************/\n\n    /// @notice The mint function emits the \"mint\" `Transfer` event.\n    /// @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n    /// is to inform clients that search for events.\n    /// @param to the flow receiver (inflow NFT receiver)\n    /// @param newTokenId the new token id\n    function mint(address to, uint256 newTokenId) external;\n\n    /// @notice This burn function emits the \"burn\" `Transfer` event.\n    /// @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n    /// is to inform clients that search for events.\n    /// @param tokenId desired token id to burn\n    function burn(uint256 tokenId) external;\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { IFlowNFTBase } from \"./IFlowNFTBase.sol\";\n\ninterface IConstantOutflowNFT is IFlowNFTBase {\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n\n    error COF_NFT_INVALID_SUPER_TOKEN();            // 0x6de98774\n    error COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME(); // 0x0d1d1161\n    error COF_NFT_MINT_TO_ZERO_ADDRESS();           // 0x43d05e51\n    error COF_NFT_ONLY_CONSTANT_INFLOW();           // 0xa495a718\n    error COF_NFT_ONLY_FLOW_AGREEMENTS();           // 0xd367b64f\n    error COF_NFT_TOKEN_ALREADY_EXISTS();           // 0xe2480183\n\n\n    /**************************************************************************\n     * Write Functions\n     *************************************************************************/\n\n    /// @notice The onCreate function is called when a new flow is created.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onCreate(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n\n    /// @notice The onUpdate function is called when a flow is updated.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onUpdate(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n\n    /// @notice The onDelete function is called when a flow is deleted.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onDelete(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport {\n    IERC721Metadata\n} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\ninterface IFlowNFTBase is IERC721Metadata {\n    // FlowNFTData struct storage packing:\n    // b = bits\n    // WORD 1: | superToken      | FREE\n    //         | 160b            | 96b\n    // WORD 2: | flowSender      | FREE\n    //         | 160b            | 96b\n    // WORD 3: | flowReceiver    | flowStartDate | FREE\n    //         | 160b            | 32b           | 64b\n    struct FlowNFTData {\n        address superToken;\n        address flowSender;\n        address flowReceiver;\n        uint32 flowStartDate;\n    }\n\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n\n    error CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();   // 0xa3352582\n    error CFA_NFT_APPROVE_TO_CALLER();                              // 0xd3c77329\n    error CFA_NFT_APPROVE_TO_CURRENT_OWNER();                       // 0xe4790b25\n    error CFA_NFT_INVALID_TOKEN_ID();                               // 0xeab95e3b\n    error CFA_NFT_ONLY_SUPER_TOKEN_FACTORY();                       // 0xebb7505b\n    error CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();  // 0x2551d606\n    error CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER();                  // 0x5a26c744\n    error CFA_NFT_TRANSFER_IS_NOT_ALLOWED();                        // 0xaa747eca\n    error CFA_NFT_TRANSFER_TO_ZERO_ADDRESS();                       // 0xde06d21e\n\n    /**************************************************************************\n     * Events\n     *************************************************************************/\n\n    /// @notice Informs third-party platforms that NFT metadata should be updated\n    /// @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n    /// @param tokenId the id of the token that should have its metadata updated\n    event MetadataUpdate(uint256 tokenId);\n\n    /**************************************************************************\n     * View\n     *************************************************************************/\n\n    /// @notice An external function for querying flow data by `tokenId``\n    /// @param tokenId the token id\n    /// @return flowData the flow data associated with `tokenId`\n    function flowDataByTokenId(\n        uint256 tokenId\n    ) external view returns (FlowNFTData memory flowData);\n\n    /// @notice An external function for computing the deterministic tokenId\n    /// @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n    /// @param superToken the super token\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    /// @return tokenId the tokenId\n    function getTokenId(\n        address superToken,\n        address flowSender,\n        address flowReceiver\n    ) external view returns (uint256);\n\n    /**************************************************************************\n     * Write\n     *************************************************************************/\n\n    function initialize(\n        string memory nftName,\n        string memory nftSymbol\n    ) external; // initializer;\n\n    function triggerMetadataUpdate(uint256 tokenId) external;\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"IERC777": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "AuthorizedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Burned",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Minted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "RevokedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Sent",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "authorizeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultOperators",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "granularity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "isOperatorFor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "revokeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "send",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.",
						"events": {
							"AuthorizedOperator(address,address)": {
								"details": "Emitted when `operator` is made operator for `tokenHolder`."
							},
							"Burned(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"Minted(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"RevokedOperator(address,address)": {
								"details": "Emitted when `operator` is revoked its operator status for `tokenHolder`."
							}
						},
						"kind": "dev",
						"methods": {
							"authorizeOperator(address)": {
								"details": "Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by an account (`owner`)."
							},
							"burn(uint256,bytes)": {
								"details": "Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens."
							},
							"defaultOperators()": {
								"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
							},
							"granularity()": {
								"details": "Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1."
							},
							"isOperatorFor(address,address)": {
								"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"operatorBurn(address,uint256,bytes,bytes)": {
								"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`."
							},
							"operatorSend(address,address,uint256,bytes,bytes)": {
								"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
							},
							"revokeOperator(address)": {
								"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address."
							},
							"send(address,uint256,bytes)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"authorizeOperator(address)": "959b8c3f",
							"balanceOf(address)": "70a08231",
							"burn(uint256,bytes)": "fe9d9303",
							"defaultOperators()": "06e48538",
							"granularity()": "556f0dc7",
							"isOperatorFor(address,address)": "d95b6371",
							"name()": "06fdde03",
							"operatorBurn(address,uint256,bytes,bytes)": "fc673c4f",
							"operatorSend(address,address,uint256,bytes,bytes)": "62ad1b83",
							"revokeOperator(address)": "fad8b32a",
							"send(address,uint256,bytes)": "9bd9bbc6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.\",\"events\":{\"AuthorizedOperator(address,address)\":{\"details\":\"Emitted when `operator` is made operator for `tokenHolder`.\"},\"Burned(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"Minted(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"RevokedOperator(address,address)\":{\"details\":\"Emitted when `operator` is revoked its operator status for `tokenHolder`.\"}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address)\":{\"details\":\"Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by an account (`owner`).\"},\"burn(uint256,bytes)\":{\"details\":\"Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens.\"},\"defaultOperators()\":{\"details\":\"Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.\"},\"granularity()\":{\"details\":\"Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1.\"},\"isOperatorFor(address,address)\":{\"details\":\"Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"operatorBurn(address,uint256,bytes,bytes)\":{\"details\":\"Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.\"},\"operatorSend(address,address,uint256,bytes,bytes)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\"},\"revokeOperator(address)\":{\"details\":\"Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address.\"},\"send(address,uint256,bytes)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":\"IERC777\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"IConstantFlowAgreementV1": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_NEGATIVE_ALLOWANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_CREATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_FLOW_OPERATOR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_UPDATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_UNCLEAN_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_DEPOSIT_TOO_BIG",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_RATE_TOO_BIG",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_HOOK_OUT_OF_GAS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_INVALID_FLOW_RATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NON_CRITICAL_SENDER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NO_SELF_FLOW",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ZERO_ADDRESS_RECEIVER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ZERO_ADDRESS_SENDER",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"name": "FlowOperatorUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "totalSenderFlowRate",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "totalReceiverFlowRate",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "FlowUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"name": "FlowUpdatedExtension",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "agreementType",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "authorizeFlowOperatorWithFullControl",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "createFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "createFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "subtractedFlowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "decreaseFlowRateAllowance",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "deleteFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "deleteFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountFlowInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"name": "getDepositRequiredForFlowRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "getFlow",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								}
							],
							"name": "getFlowByID",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								}
							],
							"name": "getFlowOperatorData",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "flowOperatorId",
									"type": "bytes32"
								},
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "flowOperatorId",
									"type": "bytes32"
								}
							],
							"name": "getFlowOperatorDataByID",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"name": "getMaximumFlowRateFromDeposit",
							"outputs": [
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getNetFlow",
							"outputs": [
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "addedFlowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "increaseFlowRateAllowance",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isPatricianPeriod",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isPatricianPeriodNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCurrentlyPatricianPeriod",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "dynamicBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "revokeFlowOperatorWithFullControl",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlowOperatorPermissions",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"FlowOperatorUpdated(address,address,address,uint8,int96)": {
								"details": "Flow operator updated event",
								"params": {
									"flowOperator": "Flow operator address",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "Octo bitmask representation of permissions",
									"sender": "Flow sender address",
									"token": "Super token address"
								}
							},
							"FlowUpdated(address,address,address,int96,int256,int256,bytes)": {
								"details": "Flow updated event",
								"params": {
									"flowRate": "Flow rate in amount per second for this flow",
									"receiver": "Flow recipient address",
									"sender": "Flow sender address",
									"token": "Super token address",
									"totalReceiverFlowRate": "Total flow rate in amount per second for the receiver",
									"totalSenderFlowRate": "Total flow rate in amount per second for the sender",
									"userData": "The user provided data"
								}
							},
							"FlowUpdatedExtension(address,uint256)": {
								"details": "Flow updated extension event",
								"params": {
									"deposit": "The deposit amount for the stream",
									"flowOperator": "Flow operator address - the Context.msgSender"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"agreementType()": {
								"details": "ISuperAgreement.agreementType implementation"
							},
							"authorizeFlowOperatorWithFullControl(address,address,bytes)": {
								"details": "msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								}
							},
							"createFlow(address,address,int96,bytes)": {
								"custom:callbacks": " - AgreementCreated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - A deposit is taken as safety margin for the solvency agents - A extra gas fee may be taken to pay for solvency agent liquidations",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"createFlowByOperator(address,address,address,int96,bytes)": {
								"details": "A flow created by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"sender": "Flow sender address (has granted permissions)",
									"token": "Super token address"
								}
							},
							"decreaseFlowRateAllowance(address,address,int96,bytes)": {
								"details": "msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"subtractedFlowRateAllowance": "The flow rate allowance delta",
									"token": "Super token address"
								},
								"returns": {
									"newCtx": "The new context bytes"
								}
							},
							"deleteFlow(address,address,address,bytes)": {
								"custom:callbacks": " - AgreementTerminated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - Both flow sender and receiver may delete the flow - If Sender account is insolvent or in critical state, a solvency agent may   also terminate the agreement - Gas fee may be returned to the sender",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"deleteFlowByOperator(address,address,address,bytes)": {
								"details": "A flow deleted by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"getAccountFlowInfo(address,address)": {
								"details": "Get the aggregated flow info of the account",
								"params": {
									"account": "Account for the query",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The sum of all deposits for account's flows",
									"flowRate": "The net flow rate of token for account",
									"owedDeposit": "The sum of all owed deposits for account's flows",
									"timestamp": "Timestamp of when a flow was last updated for account"
								}
							},
							"getDepositRequiredForFlowRate(address,int96)": {
								"custom:note": " - if calculated deposit (flowRate * liquidationPeriod) is less   than the minimum deposit, we use the minimum deposit otherwise   we use the calculated deposit",
								"details": "Calculates the deposit based on the liquidationPeriod and flowRate",
								"params": {
									"flowRate": "Flow rate to be tested"
								},
								"returns": {
									"deposit": "The deposit amount based on flowRate and liquidationPeriod"
								}
							},
							"getFlow(address,address,address)": {
								"details": "Get the flow data between `sender` and `receiver` of `token`",
								"params": {
									"receiver": "Flow sender",
									"sender": "Flow receiver",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The amount of deposit the flow",
									"flowRate": "The flow rate",
									"owedDeposit": "The amount of owed deposit of the flow",
									"timestamp": "Timestamp of when the flow is updated"
								}
							},
							"getFlowByID(address,bytes32)": {
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"agreementId": "The agreement ID",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The deposit amount of the flow",
									"flowRate": "The flow rate",
									"owedDeposit": "The owed deposit amount of the flow",
									"timestamp": "Timestamp of when the flow is updated"
								}
							},
							"getFlowOperatorData(address,address,address)": {
								"params": {
									"flowOperator": "The permission grantee address",
									"sender": "The permission granter address",
									"token": "Super token address"
								},
								"returns": {
									"flowOperatorId": "The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions"
								}
							},
							"getFlowOperatorDataByID(address,bytes32)": {
								"params": {
									"flowOperatorId": "The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator",
									"token": "Super token address"
								},
								"returns": {
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions"
								}
							},
							"getMaximumFlowRateFromDeposit(address,uint256)": {
								"details": "The deposit is clipped and rounded down",
								"params": {
									"deposit": "Deposit amount used for creating the flow"
								},
								"returns": {
									"flowRate": "The maximum flow rate"
								}
							},
							"getNetFlow(address,address)": {
								"details": "Get the net flow rate of the account",
								"params": {
									"account": "Account for the query",
									"token": "Super token address"
								},
								"returns": {
									"flowRate": "Net flow rate"
								}
							},
							"increaseFlowRateAllowance(address,address,int96,bytes)": {
								"details": "if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE",
								"params": {
									"addedFlowRateAllowance": "The flow rate allowance delta",
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								},
								"returns": {
									"newCtx": "The new context bytes"
								}
							},
							"isPatricianPeriod(address,address,uint256)": {
								"details": "Returns whether it is the patrician period based on timestamp",
								"params": {
									"account": "The account we are interested in",
									"timestamp": "The timestamp we are interested in observing the result of isPatricianPeriod"
								},
								"returns": {
									"_0": "bool Whether it is currently the patrician period dictated by governance"
								}
							},
							"isPatricianPeriodNow(address,address)": {
								"details": "Returns whether it is the patrician period based on host.getNow()",
								"params": {
									"account": "The account we are interested in"
								},
								"returns": {
									"isCurrentlyPatricianPeriod": "Whether it is currently the patrician period dictated by governance",
									"timestamp": "The value of host.getNow()"
								}
							},
							"realtimeBalanceOf(address,address,uint256)": {
								"details": "Calculate the real-time balance for the account of this agreement class",
								"params": {
									"account": "Account the state belongs to",
									"time": "Time used for the calculation"
								},
								"returns": {
									"deposit": "Account deposit amount of this agreement",
									"dynamicBalance": "Dynamic balance portion of real-time balance of this agreement",
									"owedDeposit": "Account owed deposit amount of this agreement"
								}
							},
							"revokeFlowOperatorWithFullControl(address,address,bytes)": {
								"details": "`permissions` and `flowRateAllowance` will both be set to 0",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								}
							},
							"updateFlow(address,address,int96,bytes)": {
								"custom:callbacks": " - AgreementUpdated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - Only the flow sender may update the flow rate - Even if the flow rate is zero, the flow is not deleted from the system - Deposit amount will be adjusted accordingly - No new gas fee is charged",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"updateFlowByOperator(address,address,address,int96,bytes)": {
								"details": "A flow updated by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"sender": "Flow sender address (has granted permissions)",
									"token": "Super token address"
								}
							},
							"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)": {
								"details": "msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions",
									"token": "Super token address"
								}
							}
						},
						"title": "Constant Flow Agreement interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"agreementType()": "7730599e",
							"authorizeFlowOperatorWithFullControl(address,address,bytes)": "54b770e3",
							"createFlow(address,address,int96,bytes)": "62fc305e",
							"createFlowByOperator(address,address,address,int96,bytes)": "94229ecb",
							"decreaseFlowRateAllowance(address,address,int96,bytes)": "5f51fb23",
							"deleteFlow(address,address,address,bytes)": "b4b333c6",
							"deleteFlowByOperator(address,address,address,bytes)": "4c8b181f",
							"getAccountFlowInfo(address,address)": "0f1ac495",
							"getDepositRequiredForFlowRate(address,int96)": "8d997f6e",
							"getFlow(address,address,address)": "e6a1e888",
							"getFlowByID(address,bytes32)": "aabd2668",
							"getFlowOperatorData(address,address,address)": "00422bbe",
							"getFlowOperatorDataByID(address,bytes32)": "09d256ef",
							"getMaximumFlowRateFromDeposit(address,uint256)": "0602f7db",
							"getNetFlow(address,address)": "e8e7e2d1",
							"increaseFlowRateAllowance(address,address,int96,bytes)": "ac5f5d00",
							"isPatricianPeriod(address,address,uint256)": "4b839e0b",
							"isPatricianPeriodNow(address,address)": "4fe9c291",
							"realtimeBalanceOf(address,address,uint256)": "9b2e48bc",
							"revokeFlowOperatorWithFullControl(address,address,bytes)": "062e56ec",
							"updateFlow(address,address,int96,bytes)": "50209a62",
							"updateFlowByOperator(address,address,address,int96,bytes)": "354b9590",
							"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)": "811b3d40"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_CREATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_FLOW_OPERATOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_UPDATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_UNCLEAN_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_DEPOSIT_TOO_BIG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_RATE_TOO_BIG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_HOOK_OUT_OF_GAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_INVALID_FLOW_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NON_CRITICAL_SENDER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NO_SELF_FLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ZERO_ADDRESS_RECEIVER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ZERO_ADDRESS_SENDER\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"name\":\"FlowOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalSenderFlowRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalReceiverFlowRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"FlowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"FlowUpdatedExtension\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agreementType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"authorizeFlowOperatorWithFullControl\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"createFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"createFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"subtractedFlowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"decreaseFlowRateAllowance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"deleteFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"deleteFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountFlowInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"name\":\"getDepositRequiredForFlowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getFlow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getFlowByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"}],\"name\":\"getFlowOperatorData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"flowOperatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"flowOperatorId\",\"type\":\"bytes32\"}],\"name\":\"getFlowOperatorDataByID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getMaximumFlowRateFromDeposit\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNetFlow\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"addedFlowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"increaseFlowRateAllowance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isPatricianPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPatricianPeriodNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCurrentlyPatricianPeriod\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"dynamicBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"revokeFlowOperatorWithFullControl\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlowOperatorPermissions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"FlowOperatorUpdated(address,address,address,uint8,int96)\":{\"details\":\"Flow operator updated event\",\"params\":{\"flowOperator\":\"Flow operator address\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"Octo bitmask representation of permissions\",\"sender\":\"Flow sender address\",\"token\":\"Super token address\"}},\"FlowUpdated(address,address,address,int96,int256,int256,bytes)\":{\"details\":\"Flow updated event\",\"params\":{\"flowRate\":\"Flow rate in amount per second for this flow\",\"receiver\":\"Flow recipient address\",\"sender\":\"Flow sender address\",\"token\":\"Super token address\",\"totalReceiverFlowRate\":\"Total flow rate in amount per second for the receiver\",\"totalSenderFlowRate\":\"Total flow rate in amount per second for the sender\",\"userData\":\"The user provided data\"}},\"FlowUpdatedExtension(address,uint256)\":{\"details\":\"Flow updated extension event\",\"params\":{\"deposit\":\"The deposit amount for the stream\",\"flowOperator\":\"Flow operator address - the Context.msgSender\"}}},\"kind\":\"dev\",\"methods\":{\"agreementType()\":{\"details\":\"ISuperAgreement.agreementType implementation\"},\"authorizeFlowOperatorWithFullControl(address,address,bytes)\":{\"details\":\"msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"}},\"createFlow(address,address,int96,bytes)\":{\"custom:callbacks\":\" - AgreementCreated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - A deposit is taken as safety margin for the solvency agents - A extra gas fee may be taken to pay for solvency agent liquidations\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"createFlowByOperator(address,address,address,int96,bytes)\":{\"details\":\"A flow created by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"sender\":\"Flow sender address (has granted permissions)\",\"token\":\"Super token address\"}},\"decreaseFlowRateAllowance(address,address,int96,bytes)\":{\"details\":\"msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"subtractedFlowRateAllowance\":\"The flow rate allowance delta\",\"token\":\"Super token address\"},\"returns\":{\"newCtx\":\"The new context bytes\"}},\"deleteFlow(address,address,address,bytes)\":{\"custom:callbacks\":\" - AgreementTerminated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - Both flow sender and receiver may delete the flow - If Sender account is insolvent or in critical state, a solvency agent may   also terminate the agreement - Gas fee may be returned to the sender\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"deleteFlowByOperator(address,address,address,bytes)\":{\"details\":\"A flow deleted by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"getAccountFlowInfo(address,address)\":{\"details\":\"Get the aggregated flow info of the account\",\"params\":{\"account\":\"Account for the query\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The sum of all deposits for account's flows\",\"flowRate\":\"The net flow rate of token for account\",\"owedDeposit\":\"The sum of all owed deposits for account's flows\",\"timestamp\":\"Timestamp of when a flow was last updated for account\"}},\"getDepositRequiredForFlowRate(address,int96)\":{\"custom:note\":\" - if calculated deposit (flowRate * liquidationPeriod) is less   than the minimum deposit, we use the minimum deposit otherwise   we use the calculated deposit\",\"details\":\"Calculates the deposit based on the liquidationPeriod and flowRate\",\"params\":{\"flowRate\":\"Flow rate to be tested\"},\"returns\":{\"deposit\":\"The deposit amount based on flowRate and liquidationPeriod\"}},\"getFlow(address,address,address)\":{\"details\":\"Get the flow data between `sender` and `receiver` of `token`\",\"params\":{\"receiver\":\"Flow sender\",\"sender\":\"Flow receiver\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The amount of deposit the flow\",\"flowRate\":\"The flow rate\",\"owedDeposit\":\"The amount of owed deposit of the flow\",\"timestamp\":\"Timestamp of when the flow is updated\"}},\"getFlowByID(address,bytes32)\":{\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"agreementId\":\"The agreement ID\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The deposit amount of the flow\",\"flowRate\":\"The flow rate\",\"owedDeposit\":\"The owed deposit amount of the flow\",\"timestamp\":\"Timestamp of when the flow is updated\"}},\"getFlowOperatorData(address,address,address)\":{\"params\":{\"flowOperator\":\"The permission grantee address\",\"sender\":\"The permission granter address\",\"token\":\"Super token address\"},\"returns\":{\"flowOperatorId\":\"The keccak256 hash of encoded string \\\"flowOperator\\\", sender and flowOperator\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\"}},\"getFlowOperatorDataByID(address,bytes32)\":{\"params\":{\"flowOperatorId\":\"The keccak256 hash of encoded string \\\"flowOperator\\\", sender and flowOperator\",\"token\":\"Super token address\"},\"returns\":{\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\"}},\"getMaximumFlowRateFromDeposit(address,uint256)\":{\"details\":\"The deposit is clipped and rounded down\",\"params\":{\"deposit\":\"Deposit amount used for creating the flow\"},\"returns\":{\"flowRate\":\"The maximum flow rate\"}},\"getNetFlow(address,address)\":{\"details\":\"Get the net flow rate of the account\",\"params\":{\"account\":\"Account for the query\",\"token\":\"Super token address\"},\"returns\":{\"flowRate\":\"Net flow rate\"}},\"increaseFlowRateAllowance(address,address,int96,bytes)\":{\"details\":\"if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"params\":{\"addedFlowRateAllowance\":\"The flow rate allowance delta\",\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"},\"returns\":{\"newCtx\":\"The new context bytes\"}},\"isPatricianPeriod(address,address,uint256)\":{\"details\":\"Returns whether it is the patrician period based on timestamp\",\"params\":{\"account\":\"The account we are interested in\",\"timestamp\":\"The timestamp we are interested in observing the result of isPatricianPeriod\"},\"returns\":{\"_0\":\"bool Whether it is currently the patrician period dictated by governance\"}},\"isPatricianPeriodNow(address,address)\":{\"details\":\"Returns whether it is the patrician period based on host.getNow()\",\"params\":{\"account\":\"The account we are interested in\"},\"returns\":{\"isCurrentlyPatricianPeriod\":\"Whether it is currently the patrician period dictated by governance\",\"timestamp\":\"The value of host.getNow()\"}},\"realtimeBalanceOf(address,address,uint256)\":{\"details\":\"Calculate the real-time balance for the account of this agreement class\",\"params\":{\"account\":\"Account the state belongs to\",\"time\":\"Time used for the calculation\"},\"returns\":{\"deposit\":\"Account deposit amount of this agreement\",\"dynamicBalance\":\"Dynamic balance portion of real-time balance of this agreement\",\"owedDeposit\":\"Account owed deposit amount of this agreement\"}},\"revokeFlowOperatorWithFullControl(address,address,bytes)\":{\"details\":\"`permissions` and `flowRateAllowance` will both be set to 0\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"}},\"updateFlow(address,address,int96,bytes)\":{\"custom:callbacks\":\" - AgreementUpdated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - Only the flow sender may update the flow rate - Even if the flow rate is zero, the flow is not deleted from the system - Deposit amount will be adjusted accordingly - No new gas fee is charged\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"updateFlowByOperator(address,address,address,int96,bytes)\":{\"details\":\"A flow updated by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"sender\":\"Flow sender address (has granted permissions)\",\"token\":\"Super token address\"}},\"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)\":{\"details\":\"msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\",\"token\":\"Super token address\"}}},\"title\":\"Constant Flow Agreement interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createFlow(address,address,int96,bytes)\":{\"notice\":\"Create a flow betwen ctx.msgSender and receiver\"},\"createFlowByOperator(address,address,address,int96,bytes)\":{\"notice\":\"Create a flow between sender and receiver\"},\"deleteFlow(address,address,address,bytes)\":{\"notice\":\"Delete the flow between sender and receiver\"},\"deleteFlowByOperator(address,address,address,bytes)\":{\"notice\":\"Delete the flow between sender and receiver\"},\"getDepositRequiredForFlowRate(address,int96)\":{\"notice\":\"Get the deposit required for creating the flow\"},\"getFlowByID(address,bytes32)\":{\"notice\":\"Get flow data using agreementId\"},\"getFlowOperatorData(address,address,address)\":{\"notice\":\"Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\"},\"getFlowOperatorDataByID(address,bytes32)\":{\"notice\":\"Get flow operator using flowOperatorId\"},\"getMaximumFlowRateFromDeposit(address,uint256)\":{\"notice\":\"Get the maximum flow rate allowed with the deposit\"},\"increaseFlowRateAllowance(address,address,int96,bytes)\":{\"notice\":\"msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\"},\"revokeFlowOperatorWithFullControl(address,address,bytes)\":{\"notice\":\"msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\"},\"updateFlow(address,address,int96,bytes)\":{\"notice\":\"Update the flow rate between ctx.msgSender and receiver\"},\"updateFlowByOperator(address,address,address,int96,bytes)\":{\"notice\":\"Update a flow between sender and receiver\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":\"IConstantFlowAgreementV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0x8a191d6f5dcdfd97e8fbbe17382fa96f51dbaddea6ed704206e7cbda5d12cc65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5bed573cf54d2406d0e7566ab6cd37c31025c6fab3b5b8d8ef9b79b1cab098fd\",\"dweb:/ipfs/QmegphCXp9qTAvefUYyW8eGdaGQMLJ4JrEXELU7WhisRcS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createFlow(address,address,int96,bytes)": {
								"notice": "Create a flow betwen ctx.msgSender and receiver"
							},
							"createFlowByOperator(address,address,address,int96,bytes)": {
								"notice": "Create a flow between sender and receiver"
							},
							"deleteFlow(address,address,address,bytes)": {
								"notice": "Delete the flow between sender and receiver"
							},
							"deleteFlowByOperator(address,address,address,bytes)": {
								"notice": "Delete the flow between sender and receiver"
							},
							"getDepositRequiredForFlowRate(address,int96)": {
								"notice": "Get the deposit required for creating the flow"
							},
							"getFlowByID(address,bytes32)": {
								"notice": "Get flow data using agreementId"
							},
							"getFlowOperatorData(address,address,address)": {
								"notice": "Get the permissions of a flow operator between `sender` and `flowOperator` for `token`"
							},
							"getFlowOperatorDataByID(address,bytes32)": {
								"notice": "Get flow operator using flowOperatorId"
							},
							"getMaximumFlowRateFromDeposit(address,uint256)": {
								"notice": "Get the maximum flow rate allowed with the deposit"
							},
							"increaseFlowRateAllowance(address,address,int96,bytes)": {
								"notice": "msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`"
							},
							"revokeFlowOperatorWithFullControl(address,address,bytes)": {
								"notice": "msgSender from `ctx` revokes `flowOperator` create/update/delete permissions"
							},
							"updateFlow(address,address,int96,bytes)": {
								"notice": "Update the flow rate between ctx.msgSender and receiver"
							},
							"updateFlowByOperator(address,address,address,int96,bytes)": {
								"notice": "Update a flow between sender and receiver"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
				"BatchOperation": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"OPERATION_TYPE_ERC20_APPROVE": {
								"details": "ERC20.approve batch operation type Call spec: ISuperToken(target).operationApprove(     abi.decode(data, (address spender, uint256 amount)) )"
							},
							"OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE": {
								"details": "ERC20.decreaseAllowance batch operation type Call spec: ISuperToken(target).operationDecreaseAllowance(     abi.decode(data, (address account, address spender, uint256 subtractedValue)) )"
							},
							"OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE": {
								"details": "ERC20.increaseAllowance batch operation type Call spec: ISuperToken(target).operationIncreaseAllowance(     abi.decode(data, (address account, address spender, uint256 addedValue)) )"
							},
							"OPERATION_TYPE_ERC20_TRANSFER_FROM": {
								"details": "ERC20.transferFrom batch operation type Call spec: ISuperToken(target).operationTransferFrom(     abi.decode(data, (address sender, address recipient, uint256 amount) )"
							},
							"OPERATION_TYPE_ERC777_SEND": {
								"details": "ERC777.send batch operation type Call spec: ISuperToken(target).operationSend(     abi.decode(data, (address recipient, uint256 amount, bytes userData) )"
							},
							"OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT": {
								"details": "Superfluid.callAgreement batch operation type Call spec: callAgreement(     ISuperAgreement(target)),     abi.decode(data, (bytes callData, bytes userData) )"
							},
							"OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION": {
								"details": "Superfluid.callAppAction batch operation type Call spec: callAppAction(     ISuperApp(target)),     data )"
							},
							"OPERATION_TYPE_SUPERTOKEN_DOWNGRADE": {
								"details": "SuperToken.downgrade batch operation type Call spec: ISuperToken(target).operationDowngrade(     abi.decode(data, (uint256 amount) )"
							},
							"OPERATION_TYPE_SUPERTOKEN_UPGRADE": {
								"details": "SuperToken.upgrade batch operation type Call spec: ISuperToken(target).operationUpgrade(     abi.decode(data, (uint256 amount) )"
							}
						},
						"title": "Batch operation library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":5645:8269  library BatchOperation {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":5645:8269  library BatchOperation {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220beaa9a8866d7301ea014956be96ff8f813e463a081da02869dd55f588ee7e20664736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220beaa9a8866d7301ea014956be96ff8f813e463a081da02869dd55f588ee7e20664736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xAA SWAP11 DUP9 PUSH7 0xD7301EA014956B 0xE9 PUSH16 0xF8F813E463A081DA02869DD55F588EE7 0xE2 MOD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "5645:2624:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220beaa9a8866d7301ea014956be96ff8f813e463a081da02869dd55f588ee7e20664736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xAA SWAP11 DUP9 PUSH7 0xD7301EA014956B 0xE9 PUSH16 0xF8F813E463A081DA02869DD55F588EE7 0xE2 MOD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "5645:2624:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220beaa9a8866d7301ea014956be96ff8f813e463a081da02869dd55f588ee7e20664736f6c63430008120033",
									".code": [
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere_v2.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OPERATION_TYPE_ERC20_APPROVE\":{\"details\":\"ERC20.approve batch operation type Call spec: ISuperToken(target).operationApprove(     abi.decode(data, (address spender, uint256 amount)) )\"},\"OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE\":{\"details\":\"ERC20.decreaseAllowance batch operation type Call spec: ISuperToken(target).operationDecreaseAllowance(     abi.decode(data, (address account, address spender, uint256 subtractedValue)) )\"},\"OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE\":{\"details\":\"ERC20.increaseAllowance batch operation type Call spec: ISuperToken(target).operationIncreaseAllowance(     abi.decode(data, (address account, address spender, uint256 addedValue)) )\"},\"OPERATION_TYPE_ERC20_TRANSFER_FROM\":{\"details\":\"ERC20.transferFrom batch operation type Call spec: ISuperToken(target).operationTransferFrom(     abi.decode(data, (address sender, address recipient, uint256 amount) )\"},\"OPERATION_TYPE_ERC777_SEND\":{\"details\":\"ERC777.send batch operation type Call spec: ISuperToken(target).operationSend(     abi.decode(data, (address recipient, uint256 amount, bytes userData) )\"},\"OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT\":{\"details\":\"Superfluid.callAgreement batch operation type Call spec: callAgreement(     ISuperAgreement(target)),     abi.decode(data, (bytes callData, bytes userData) )\"},\"OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION\":{\"details\":\"Superfluid.callAppAction batch operation type Call spec: callAppAction(     ISuperApp(target)),     data )\"},\"OPERATION_TYPE_SUPERTOKEN_DOWNGRADE\":{\"details\":\"SuperToken.downgrade batch operation type Call spec: ISuperToken(target).operationDowngrade(     abi.decode(data, (uint256 amount) )\"},\"OPERATION_TYPE_SUPERTOKEN_UPGRADE\":{\"details\":\"SuperToken.upgrade batch operation type Call spec: ISuperToken(target).operationUpgrade(     abi.decode(data, (uint256 amount) )\"}},\"title\":\"Batch operation library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"BatchOperation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ContextDefinitions": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Context definitions library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":3371:4559  library ContextDefinitions {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":3371:4559  library ContextDefinitions {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220eab70834a0c7fa0750378591cba57a105d866a545703363a2b3fc1757ff739f964736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eab70834a0c7fa0750378591cba57a105d866a545703363a2b3fc1757ff739f964736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xB7 ADDMOD CALLVALUE LOG0 0xC7 STATICCALL SMOD POP CALLDATACOPY DUP6 SWAP2 0xCB 0xA5 PUSH27 0x105D866A545703363A2B3FC1757FF739F964736F6C634300081200 CALLER ",
							"sourceMap": "3371:1188:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eab70834a0c7fa0750378591cba57a105d866a545703363a2b3fc1757ff739f964736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xB7 ADDMOD CALLVALUE LOG0 0xC7 STATICCALL SMOD POP CALLDATACOPY DUP6 SWAP2 0xCB 0xA5 PUSH27 0x105D866A545703363A2B3FC1757FF739F964736F6C634300081200 CALLER ",
							"sourceMap": "3371:1188:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodeCallInfo(uint256)": "infinite",
								"encodeCallInfo(uint8,uint8)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220eab70834a0c7fa0750378591cba57a105d866a545703363a2b3fc1757ff739f964736f6c63430008120033",
									".code": [
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere_v2.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Context definitions library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"ContextDefinitions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"FlowOperatorDefinitions": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Flow Operator definitions library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":4637:5579  library FlowOperatorDefinitions {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":4637:5579  library FlowOperatorDefinitions {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122085a5da62f0bc2eb0cf23469634f747e5308a09b75ec247988224770469d58ff464736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085a5da62f0bc2eb0cf23469634f747e5308a09b75ec247988224770469d58ff464736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xA5 0xDA PUSH3 0xF0BC2E 0xB0 0xCF 0x23 CHAINID SWAP7 CALLVALUE 0xF7 SELFBALANCE 0xE5 ADDRESS DUP11 MULMOD 0xB7 0x5E 0xC2 SELFBALANCE SWAP9 DUP3 0x24 PUSH24 0x469D58FF464736F6C634300081200330000000000000000 ",
							"sourceMap": "4637:942:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085a5da62f0bc2eb0cf23469634f747e5308a09b75ec247988224770469d58ff464736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xA5 0xDA PUSH3 0xF0BC2E 0xB0 0xCF 0x23 CHAINID SWAP7 CALLVALUE 0xF7 SELFBALANCE 0xE5 ADDRESS DUP11 MULMOD 0xB7 0x5E 0xC2 SELFBALANCE SWAP9 DUP3 0x24 PUSH24 0x469D58FF464736F6C634300081200330000000000000000 ",
							"sourceMap": "4637:942:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"isPermissionsClean(uint8)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122085a5da62f0bc2eb0cf23469634f747e5308a09b75ec247988224770469d58ff464736f6c63430008120033",
									".code": [
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere_v2.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Flow Operator definitions library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"FlowOperatorDefinitions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SuperAppDefinitions": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Super app definitions library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":129:3301  library SuperAppDefinitions {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":129:3301  library SuperAppDefinitions {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122028ff714257ac995c927ae06394822937cf49747df4d067b18794e77c69826e6d64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028ff714257ac995c927ae06394822937cf49747df4d067b18794e77c69826e6d64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 SELFDESTRUCT PUSH18 0x4257AC995C927AE06394822937CF49747DF4 0xD0 PUSH8 0xB18794E77C69826E PUSH14 0x64736F6C63430008120033000000 ",
							"sourceMap": "129:3172:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028ff714257ac995c927ae06394822937cf49747df4d067b18794e77c69826e6d64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 SELFDESTRUCT PUSH18 0x4257AC995C927AE06394822937CF49747DF4 0xD0 PUSH8 0xB18794E77C69826E PUSH14 0x64736F6C63430008120033000000 ",
							"sourceMap": "129:3172:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getAppCallbackLevel(uint256)": "infinite",
								"isAppJailed(uint256)": "infinite",
								"isConfigWordClean(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122028ff714257ac995c927ae06394822937cf49747df4d067b18794e77c69826e6d64736f6c63430008120033",
									".code": [
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere_v2.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Super app definitions library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"SuperAppDefinitions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SuperfluidGovernanceConfigs": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Superfluid governance configs library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":8349:9864  library SuperfluidGovernanceConfigs {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":8349:9864  library SuperfluidGovernanceConfigs {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204c7b0f15b9854dcf36fbf02472684c385762acde095be0e6676f0fb43614ba7c64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204c7b0f15b9854dcf36fbf02472684c385762acde095be0e6676f0fb43614ba7c64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C PUSH28 0xF15B9854DCF36FBF02472684C385762ACDE095BE0E6676F0FB43614 0xBA PUSH29 0x64736F6C63430008120033000000000000000000000000000000000000 ",
							"sourceMap": "8349:1515:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204c7b0f15b9854dcf36fbf02472684c385762acde095be0e6676f0fb43614ba7c64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C PUSH28 0xF15B9854DCF36FBF02472684C385762ACDE095BE0E6676F0FB43614 0xBA PUSH29 0x64736F6C63430008120033000000000000000000000000000000000000 ",
							"sourceMap": "8349:1515:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodePPPConfig(uint256)": "infinite",
								"getAppFactoryConfigKey(address)": "infinite",
								"getAppRegistrationConfigKey(address,string memory)": "infinite",
								"getTrustedForwarderConfigKey(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204c7b0f15b9854dcf36fbf02472684c385762acde095be0e6676f0fb43614ba7c64736f6c63430008120033",
									".code": [
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere_v2.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Superfluid governance configs library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"SuperfluidGovernanceConfigs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"IConstantInflowNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CIF_NFT_ONLY_CONSTANT_OUTFLOW",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "newTokenId",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"details": "We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.",
								"params": {
									"tokenId": "desired token id to burn"
								}
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint(address,uint256)": {
								"details": "We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.",
								"params": {
									"newTokenId": "the new token id",
									"to": "the flow receiver (inflow NFT receiver)"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CIF_NFT_ONLY_CONSTANT_OUTFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"details\":\"We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.\",\"params\":{\"tokenId\":\"desired token id to burn\"}},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint(address,uint256)\":{\"details\":\"We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.\",\"params\":{\"newTokenId\":\"the new token id\",\"to\":\"the flow receiver (inflow NFT receiver)\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"This burn function emits the \\\"burn\\\" `Transfer` event.\"},\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"mint(address,uint256)\":{\"notice\":\"The mint function emits the \\\"mint\\\" `Transfer` event.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":\"IConstantInflowNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "This burn function emits the \"burn\" `Transfer` event."
							},
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							},
							"mint(address,uint256)": {
								"notice": "The mint function emits the \"mint\" `Transfer` event."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"IConstantOutflowNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_INVALID_SUPER_TOKEN",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_ONLY_CONSTANT_INFLOW",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_TOKEN_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onCreate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onDelete",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"onCreate(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"onDelete(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"onUpdate(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"onCreate(address,address,address)": "f7e3d983",
							"onDelete(address,address,address)": "ef1f0237",
							"onUpdate(address,address,address)": "eb54a7ca",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_INVALID_SUPER_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_CONSTANT_INFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_FLOW_AGREEMENTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_TOKEN_ALREADY_EXISTS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onDelete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"onCreate(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"onDelete(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"onUpdate(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"onCreate(address,address,address)\":{\"notice\":\"The onCreate function is called when a new flow is created.\"},\"onDelete(address,address,address)\":{\"notice\":\"The onDelete function is called when a flow is deleted.\"},\"onUpdate(address,address,address)\":{\"notice\":\"The onUpdate function is called when a flow is updated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":\"IConstantOutflowNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							},
							"onCreate(address,address,address)": {
								"notice": "The onCreate function is called when a new flow is created."
							},
							"onDelete(address,address,address)": {
								"notice": "The onDelete function is called when a flow is deleted."
							},
							"onUpdate(address,address,address)": {
								"notice": "The onUpdate function is called when a flow is updated."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"IFlowNFTBase": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":\"IFlowNFTBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
				"IPoolAdminNFT": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":\"IPoolAdminNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
				"IPoolMemberNFT": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":\"IPoolMemberNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ISuperAgreement": {
					"abi": [
						{
							"inputs": [],
							"name": "agreementType",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "dynamicBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {
							"agreementType()": {
								"details": "Get the type of the agreement class"
							},
							"realtimeBalanceOf(address,address,uint256)": {
								"details": "Calculate the real-time balance for the account of this agreement class",
								"params": {
									"account": "Account the state belongs to",
									"time": "Time used for the calculation"
								},
								"returns": {
									"deposit": "Account deposit amount of this agreement",
									"dynamicBalance": "Dynamic balance portion of real-time balance of this agreement",
									"owedDeposit": "Account owed deposit amount of this agreement"
								}
							}
						},
						"title": "Super agreement interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"agreementType()": "7730599e",
							"realtimeBalanceOf(address,address,uint256)": "9b2e48bc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"agreementType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"dynamicBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{\"agreementType()\":{\"details\":\"Get the type of the agreement class\"},\"realtimeBalanceOf(address,address,uint256)\":{\"details\":\"Calculate the real-time balance for the account of this agreement class\",\"params\":{\"account\":\"Account the state belongs to\",\"time\":\"Time used for the calculation\"},\"returns\":{\"deposit\":\"Account deposit amount of this agreement\",\"dynamicBalance\":\"Dynamic balance portion of real-time balance of this agreement\",\"owedDeposit\":\"Account owed deposit amount of this agreement\"}}},\"title\":\"Super agreement interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":\"ISuperAgreement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
				"ISuperApp": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "afterAgreementCreated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "afterAgreementTerminated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "afterAgreementUpdated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "beforeAgreementCreated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "beforeAgreementTerminated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "beforeAgreementUpdated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"details": "Be aware of the app being jailed, when the word permitted is used.",
						"kind": "dev",
						"methods": {
							"afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": {
								"custom:note": " - State changes is permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback after a new agreement is created.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"cbdata": "The data returned from the before-hook callback.",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"newCtx": "The current context of the transaction."
								}
							},
							"afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": {
								"custom:note": " - State changes is permitted. - Revert is not permitted.",
								"details": "Callback after a new agreement is terminated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"cbdata": "The data returned from the before-hook callback.",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"newCtx": "The current context of the transaction."
								}
							},
							"afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": {
								"custom:note": " - State changes is permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback after a new agreement is updated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"cbdata": "The data returned from the before-hook callback.",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"newCtx": "The current context of the transaction."
								}
							},
							"beforeAgreementCreated(address,address,bytes32,bytes,bytes)": {
								"custom:note": " - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback before a new agreement is created.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"cbdata": "A free format in memory data the app can use to pass          arbitary information to the after-hook callback."
								}
							},
							"beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": {
								"custom:note": " - It will be invoked with `staticcall`, no state changes are permitted. - Revert is not permitted.",
								"details": "Callback before a new agreement is terminated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"cbdata": "A free format in memory data the app can use to pass arbitary information to         the after-hook callback."
								}
							},
							"beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": {
								"custom:note": " - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback before a new agreement is updated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"cbdata": "A free format in memory data the app can use to pass          arbitary information to the after-hook callback."
								}
							}
						},
						"title": "SuperApp interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": "d86ed3e5",
							"afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": "53c11f99",
							"afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": "230dbd29",
							"beforeAgreementCreated(address,address,bytes32,bytes,bytes)": "30d9c915",
							"beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": "5f9e7d77",
							"beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": "884d1f40"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"Be aware of the app being jailed, when the word permitted is used.\",\"kind\":\"dev\",\"methods\":{\"afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)\":{\"custom:note\":\" - State changes is permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback after a new agreement is created.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"cbdata\":\"The data returned from the before-hook callback.\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"newCtx\":\"The current context of the transaction.\"}},\"afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)\":{\"custom:note\":\" - State changes is permitted. - Revert is not permitted.\",\"details\":\"Callback after a new agreement is terminated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"cbdata\":\"The data returned from the before-hook callback.\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"newCtx\":\"The current context of the transaction.\"}},\"afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)\":{\"custom:note\":\" - State changes is permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback after a new agreement is updated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"cbdata\":\"The data returned from the before-hook callback.\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"newCtx\":\"The current context of the transaction.\"}},\"beforeAgreementCreated(address,address,bytes32,bytes,bytes)\":{\"custom:note\":\" - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback before a new agreement is created.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"cbdata\":\"A free format in memory data the app can use to pass          arbitary information to the after-hook callback.\"}},\"beforeAgreementTerminated(address,address,bytes32,bytes,bytes)\":{\"custom:note\":\" - It will be invoked with `staticcall`, no state changes are permitted. - Revert is not permitted.\",\"details\":\"Callback before a new agreement is terminated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"cbdata\":\"A free format in memory data the app can use to pass arbitary information to         the after-hook callback.\"}},\"beforeAgreementUpdated(address,address,bytes32,bytes,bytes)\":{\"custom:note\":\" - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback before a new agreement is updated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"cbdata\":\"A free format in memory data the app can use to pass          arbitary information to the after-hook callback.\"}}},\"title\":\"SuperApp interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":\"ISuperApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"ISuperToken": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_MINT_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NO_UNDERLYING_TOKEN",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_GOV_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_SELF",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "rewardAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidatedBy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "rewardAmountReceiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								}
							],
							"name": "AgreementLiquidatedV2",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								}
							],
							"name": "AgreementStateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "AgreementTerminated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "AuthorizedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "bailoutAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "Bailout",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Burned",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IConstantInflowNFT",
									"name": "constantInflowNFT",
									"type": "address"
								}
							],
							"name": "ConstantInflowNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IConstantOutflowNFT",
									"name": "constantOutflowNFT",
									"type": "address"
								}
							],
							"name": "ConstantOutflowNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Minted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "RevokedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Sent",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokenDowngraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokenUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "CONSTANT_INFLOW_NFT",
							"outputs": [
								{
									"internalType": "contract IConstantInflowNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "CONSTANT_OUTFLOW_NFT",
							"outputs": [
								{
									"internalType": "contract IConstantOutflowNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "authorizeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "createAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultOperators",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "downgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "downgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountActiveAgreements",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "activeAgreements",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementData",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementStateSlot",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getUnderlyingToken",
							"outputs": [
								{
									"internalType": "address",
									"name": "tokenAddr",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "granularity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "n",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "s",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountCritical",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountCriticalNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountSolvent",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountSolventNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "isOperatorFor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "useDefaultRewardAccount",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								}
							],
							"name": "makeLiquidationPayoutsV2",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationApprove",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "operationDecreaseAllowance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationDowngrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "operationIncreaseAllowance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "operationSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationUpgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "realtimeBalanceOfNow",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "revokeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "selfApproveFor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "selfBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "selfMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "selfTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "send",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "settleBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "terminateAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "transferAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementStateSlot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "upgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementCreated(address,bytes32,bytes32[])": {
								"details": "Agreement created event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"AgreementLiquidated(address,bytes32,address,address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAccount": "Account that collect the reward",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"custom:note": " Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"bailoutAmount": "Amount of liquidation bailouot",
									"bondAccount": "Account that collect the reward or bailout accounts",
									"id": "Agreement ID",
									"liquidatorAccount": "Account of the agent that performed the liquidation.",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": {
								"custom:note": " Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount",
								"details": "Agreement liquidation event v2 (including agent account)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"liquidationTypeData": "The encoded liquidation type data including the version (how to decode)",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the reward recipient account balance should change by",
									"rewardAmountReceiver": "Account that collects the reward or bails out insolvent accounts",
									"targetAccount": "Account of the stream sender",
									"targetAccountBalanceDelta": "The amount the sender account balance should change by"
								}
							},
							"AgreementStateUpdated(address,address,uint256)": {
								"details": "Agreement account state updated event",
								"params": {
									"account": "Account updated",
									"agreementClass": "Contract address of the agreement",
									"slotId": "slot id of the agreement state"
								}
							},
							"AgreementTerminated(address,bytes32)": {
								"details": "Agreement terminated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								}
							},
							"AgreementUpdated(address,bytes32,bytes32[])": {
								"details": "Agreement updated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"AuthorizedOperator(address,address)": {
								"details": "Emitted when `operator` is made operator for `tokenHolder`."
							},
							"Bailout(address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"bailoutAccount": "Account that bailout the penalty account",
									"bailoutAmount": "Amount of account bailout"
								}
							},
							"Burned(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"ConstantInflowNFTCreated(address)": {
								"details": "Constant Inflow NFT proxy created event",
								"params": {
									"constantInflowNFT": "constant inflow nft address"
								}
							},
							"ConstantOutflowNFTCreated(address)": {
								"details": "Constant Outflow NFT proxy created event",
								"params": {
									"constantOutflowNFT": "constant outflow nft address"
								}
							},
							"Minted(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"RevokedOperator(address,address)": {
								"details": "Emitted when `operator` is revoked its operator status for `tokenHolder`."
							},
							"TokenDowngraded(address,uint256)": {
								"details": "Token downgrade event",
								"params": {
									"account": "Account whose tokens are downgraded",
									"amount": "Amount of tokens downgraded"
								}
							},
							"TokenUpgraded(address,uint256)": {
								"details": "Token upgrade event",
								"params": {
									"account": "Account where tokens are upgraded to",
									"amount": "Amount of tokens upgraded (in 18 decimals)"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default."
							},
							"approve(address,uint256)": {
								"custom:emits": "an {Approval} event.",
								"custom:note": "Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"authorizeOperator(address)": {
								"custom:emits": "an {AuthorizedOperator} event.",
								"custom:requirements": " - `operator` cannot be calling address.",
								"details": "Make an account an operator of the caller. See {isOperatorFor}."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by an account (`owner`)."
							},
							"burn(uint256,bytes)": {
								"custom:emits": "a {Burned} event.",
								"custom:requirements": " - the caller must have at least `amount` tokens.",
								"details": "Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}."
							},
							"createAgreement(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"decimals()": {
								"custom:note": "SuperToken always uses 18 decimals. This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.",
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called."
							},
							"decreaseAllowance(address,uint256)": {
								"custom:emits": "an {Approval} event indicating the updated allowance.",
								"custom:requirements": " - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.",
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}."
							},
							"defaultOperators()": {
								"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
							},
							"downgrade(uint256)": {
								"details": "Downgrade SuperToken to ERC20.It will call transfer to send tokens",
								"params": {
									"amount": "Number of tokens to be downgraded"
								}
							},
							"downgradeTo(address,uint256)": {
								"details": "Downgrade SuperToken to ERC20 and transfer immediately",
								"params": {
									"amount": "Number of tokens to be downgraded (in 18 decimals)",
									"to": "The account to receive downgraded tokens"
								}
							},
							"getAccountActiveAgreements(address)": {
								"details": "An active agreement is one that has state for the account",
								"params": {
									"account": "Account to query"
								},
								"returns": {
									"activeAgreements": "List of accounts that have non-zero states for the account"
								}
							},
							"getAgreementData(address,bytes32,uint256)": {
								"details": "Get data of the agreement",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								},
								"returns": {
									"data": "Data of the agreement"
								}
							},
							"getAgreementStateSlot(address,address,uint256,uint256)": {
								"details": "Get data of the slot of the state of an agreement",
								"params": {
									"account": "Account to query",
									"agreementClass": "Contract address of the agreement",
									"dataLength": "length of the state data",
									"slotId": "slot id of the state"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"getUnderlyingToken()": {
								"details": "Return the underlying token contract",
								"returns": {
									"tokenAddr": "Underlying token address"
								}
							},
							"granularity()": {
								"custom:note": "For super token contracts, this value is always 1",
								"details": "Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number."
							},
							"increaseAllowance(address,uint256)": {
								"custom:emits": "an {Approval} event indicating the updated allowance.",
								"custom:requirements": " - `spender` cannot be the zero address.",
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}."
							},
							"initialize(address,uint8,string,string)": {
								"details": "Initialize the contract"
							},
							"isAccountCritical(address,uint256)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is critical (should use future)"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountCriticalNow(address)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountSolvent(address,uint256)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is solvent (should use future)"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isAccountSolventNow(address)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isOperatorFor(address,address)": {
								"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
							},
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"custom:note": " - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount",
								"details": "Make liquidation payouts (v2)",
								"params": {
									"id": "Agreement ID",
									"liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the rewarded account will receive",
									"targetAccount": "Account to be liquidated",
									"targetAccountBalanceDelta": "The delta amount the target account balance should change by",
									"useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"operationApprove(address,address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Perform ERC20 approve by host contract.",
								"params": {
									"account": "The account owner to be approved.",
									"amount": "Number of tokens to be approved.",
									"spender": "The spender of account owner's funds."
								}
							},
							"operationDowngrade(address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Downgrade ERC20 to SuperToken by host contract.",
								"params": {
									"account": "The account to be changed.",
									"amount": "Number of tokens to be downgraded (in 18 decimals)"
								}
							},
							"operationSend(address,address,uint256,bytes)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Perform ERC777 send by host contract.",
								"params": {
									"amount": "Number of tokens to be transferred.",
									"data": "Arbitrary user inputted data",
									"recipient": "The recipient of the funds.",
									"spender": "The account where the funds is sent from."
								}
							},
							"operationTransferFrom(address,address,address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Perform ERC20 transferFrom by host contract.",
								"params": {
									"account": "The account to spend sender's funds.",
									"amount": "Number of tokens to be transferred.",
									"recipient": "The recipient of the funds.",
									"spender": "The account where the funds is sent from."
								}
							},
							"operationUpgrade(address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Upgrade ERC20 to SuperToken by host contract.",
								"params": {
									"account": "The account to be changed.",
									"amount": "Number of tokens to be upgraded (in 18 decimals)"
								}
							},
							"operatorBurn(address,uint256,bytes,bytes)": {
								"custom:emits": "a {Burned} event.",
								"custom:requirements": " - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.",
								"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}."
							},
							"operatorSend(address,address,uint256,bytes,bytes)": {
								"custom:emits": "a {Sent} event.",
								"custom:requirements": " - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.",
								"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}."
							},
							"realtimeBalanceOf(address,uint256)": {
								"details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
								"params": {
									"account": "for the query",
									"timestamp": "Time of balance"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"realtimeBalanceOfNow(address)": {
								"details": "realtimeBalanceOf with timestamp equals to block timestamp",
								"params": {
									"account": "for the query"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"revokeOperator(address)": {
								"custom:emits": "a {RevokedOperator} event.",
								"custom:requirements": " - `operator` cannot be calling address.",
								"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}."
							},
							"selfApproveFor(address,address,uint256)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Give `spender`, `amount` allowance to spend the tokens of `account`."
							},
							"selfBurn(address,uint256,bytes)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Burn existing tokens for the account"
							},
							"selfMint(address,uint256,bytes)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Mint new tokens for the account"
							},
							"selfTransferFrom(address,address,address,uint256)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`."
							},
							"send(address,uint256,bytes)": {
								"custom:emits": "a {Sent} event.",
								"custom:requirements": " - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.",
								"details": "Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}."
							},
							"settleBalance(address,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"details": "The agreement needs to make sure that the balance delta is balanced afterwards",
								"params": {
									"account": "Account to query.",
									"delta": "Amount of balance delta to be settled"
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"terminateAgreement(bytes32,uint256)": {
								"details": "Close the agreement",
								"params": {
									"id": "Agreement ID"
								}
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"custom:emits": "a {Transfer} event.",
								"details": "Moves `amount` tokens from the caller's account to `recipient`.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"transferAll(address)": {
								"details": "Transfer all available balance from `msg.sender` to `recipient`"
							},
							"transferFrom(address,address,uint256)": {
								"custom:emits": "a {Transfer} event.",
								"details": "Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"updateAgreementData(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"updateAgreementStateSlot(address,uint256,bytes32[])": {
								"custom:note": " - To clear the storage out, provide zero-ed array of intended length",
								"details": "Update agreement state slot",
								"params": {
									"account": "Account to be updated"
								}
							},
							"upgrade(uint256)": {
								"custom:note": "It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract",
								"details": "Upgrade ERC20 to SuperToken.",
								"params": {
									"amount": "Number of tokens to be upgraded (in 18 decimals)"
								}
							},
							"upgradeTo(address,uint256,bytes)": {
								"custom:note": "It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract ",
								"custom:requirements": " - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.",
								"custom:warning": "- there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.",
								"details": "Upgrade ERC20 to SuperToken and transfer immediately",
								"params": {
									"amount": "Number of tokens to be upgraded (in 18 decimals)",
									"data": "User data for the TokensRecipient callback",
									"to": "The account to receive upgraded tokens"
								}
							}
						},
						"title": "Super token (Superfluid Token + ERC20 + ERC777) interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"CONSTANT_INFLOW_NFT()": "4c5c0c85",
							"CONSTANT_OUTFLOW_NFT()": "ef43d2c6",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"authorizeOperator(address)": "959b8c3f",
							"balanceOf(address)": "70a08231",
							"burn(uint256,bytes)": "fe9d9303",
							"createAgreement(bytes32,bytes32[])": "12a6a3f8",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"defaultOperators()": "06e48538",
							"downgrade(uint256)": "11bcc81e",
							"downgradeTo(address,uint256)": "83ba2525",
							"getAccountActiveAgreements(address)": "386fa221",
							"getAgreementData(address,bytes32,uint256)": "6c2d9f2f",
							"getAgreementStateSlot(address,address,uint256,uint256)": "4b61cc33",
							"getHost()": "20bc4425",
							"getUnderlyingToken()": "ee719bc8",
							"granularity()": "556f0dc7",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(address,uint8,string,string)": "42fe0980",
							"isAccountCritical(address,uint256)": "d9d078d6",
							"isAccountCriticalNow(address)": "79359f6f",
							"isAccountSolvent(address,uint256)": "b84cdd4a",
							"isAccountSolventNow(address)": "bb0d196e",
							"isOperatorFor(address,address)": "d95b6371",
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": "1863e809",
							"name()": "06fdde03",
							"operationApprove(address,address,uint256)": "62aa5287",
							"operationDecreaseAllowance(address,address,uint256)": "c780fd82",
							"operationDowngrade(address,uint256)": "245887fc",
							"operationIncreaseAllowance(address,address,uint256)": "4b2763b3",
							"operationSend(address,address,uint256,bytes)": "ca0c1e7f",
							"operationTransferFrom(address,address,address,uint256)": "16d055d6",
							"operationUpgrade(address,uint256)": "ca789464",
							"operatorBurn(address,uint256,bytes,bytes)": "fc673c4f",
							"operatorSend(address,address,uint256,bytes,bytes)": "62ad1b83",
							"realtimeBalanceOf(address,uint256)": "eb3537cc",
							"realtimeBalanceOfNow(address)": "2ec8eec7",
							"revokeOperator(address)": "fad8b32a",
							"selfApproveFor(address,address,uint256)": "66a12fb6",
							"selfBurn(address,uint256,bytes)": "9d876741",
							"selfMint(address,uint256,bytes)": "c68d4283",
							"selfTransferFrom(address,address,address,uint256)": "41b706be",
							"send(address,uint256,bytes)": "9bd9bbc6",
							"settleBalance(address,int256)": "cf97256d",
							"symbol()": "95d89b41",
							"terminateAgreement(bytes32,uint256)": "27048397",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAll(address)": "a3a7e7f3",
							"transferFrom(address,address,uint256)": "23b872dd",
							"updateAgreementData(bytes32,bytes32[])": "a1b2bf8b",
							"updateAgreementStateSlot(address,uint256,bytes32[])": "090c415e",
							"upgrade(uint256)": "45977d03",
							"upgradeTo(address,uint256,bytes)": "5b9d09cc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_BURN_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_MOVE_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NO_UNDERLYING_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_GOV_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_SELF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"}],\"name\":\"AgreementLiquidatedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bailoutAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"Bailout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"constantInflowNFT\",\"type\":\"address\"}],\"name\":\"ConstantInflowNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConstantOutflowNFT\",\"name\":\"constantOutflowNFT\",\"type\":\"address\"}],\"name\":\"ConstantOutflowNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDowngraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONSTANT_INFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONSTANT_OUTFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantOutflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"downgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"downgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"activeAgreements\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountCriticalNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountSolventNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDefaultRewardAccount\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"}],\"name\":\"makeLiquidationPayoutsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"operationDecreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationDowngrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"operationIncreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"operationSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfApproveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"selfBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"selfMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementCreated(address,bytes32,bytes32[])\":{\"details\":\"Agreement created event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"AgreementLiquidated(address,bytes32,address,address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAccount\":\"Account that collect the reward\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"custom:note\":\" Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"bailoutAmount\":\"Amount of liquidation bailouot\",\"bondAccount\":\"Account that collect the reward or bailout accounts\",\"id\":\"Agreement ID\",\"liquidatorAccount\":\"Account of the agent that performed the liquidation.\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)\":{\"custom:note\":\" Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount\",\"details\":\"Agreement liquidation event v2 (including agent account)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"liquidationTypeData\":\"The encoded liquidation type data including the version (how to decode)\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the reward recipient account balance should change by\",\"rewardAmountReceiver\":\"Account that collects the reward or bails out insolvent accounts\",\"targetAccount\":\"Account of the stream sender\",\"targetAccountBalanceDelta\":\"The amount the sender account balance should change by\"}},\"AgreementStateUpdated(address,address,uint256)\":{\"details\":\"Agreement account state updated event\",\"params\":{\"account\":\"Account updated\",\"agreementClass\":\"Contract address of the agreement\",\"slotId\":\"slot id of the agreement state\"}},\"AgreementTerminated(address,bytes32)\":{\"details\":\"Agreement terminated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"}},\"AgreementUpdated(address,bytes32,bytes32[])\":{\"details\":\"Agreement updated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"AuthorizedOperator(address,address)\":{\"details\":\"Emitted when `operator` is made operator for `tokenHolder`.\"},\"Bailout(address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"bailoutAccount\":\"Account that bailout the penalty account\",\"bailoutAmount\":\"Amount of account bailout\"}},\"Burned(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"ConstantInflowNFTCreated(address)\":{\"details\":\"Constant Inflow NFT proxy created event\",\"params\":{\"constantInflowNFT\":\"constant inflow nft address\"}},\"ConstantOutflowNFTCreated(address)\":{\"details\":\"Constant Outflow NFT proxy created event\",\"params\":{\"constantOutflowNFT\":\"constant outflow nft address\"}},\"Minted(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"RevokedOperator(address,address)\":{\"details\":\"Emitted when `operator` is revoked its operator status for `tokenHolder`.\"},\"TokenDowngraded(address,uint256)\":{\"details\":\"Token downgrade event\",\"params\":{\"account\":\"Account whose tokens are downgraded\",\"amount\":\"Amount of tokens downgraded\"}},\"TokenUpgraded(address,uint256)\":{\"details\":\"Token upgrade event\",\"params\":{\"account\":\"Account where tokens are upgraded to\",\"amount\":\"Amount of tokens upgraded (in 18 decimals)\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default.\"},\"approve(address,uint256)\":{\"custom:emits\":\"an {Approval} event.\",\"custom:note\":\"Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"authorizeOperator(address)\":{\"custom:emits\":\"an {AuthorizedOperator} event.\",\"custom:requirements\":\" - `operator` cannot be calling address.\",\"details\":\"Make an account an operator of the caller. See {isOperatorFor}.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by an account (`owner`).\"},\"burn(uint256,bytes)\":{\"custom:emits\":\"a {Burned} event.\",\"custom:requirements\":\" - the caller must have at least `amount` tokens.\",\"details\":\"Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}.\"},\"createAgreement(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"decimals()\":{\"custom:note\":\"SuperToken always uses 18 decimals. This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\",\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.\"},\"decreaseAllowance(address,uint256)\":{\"custom:emits\":\"an {Approval} event indicating the updated allowance.\",\"custom:requirements\":\" - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\",\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\"},\"defaultOperators()\":{\"details\":\"Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.\"},\"downgrade(uint256)\":{\"details\":\"Downgrade SuperToken to ERC20.It will call transfer to send tokens\",\"params\":{\"amount\":\"Number of tokens to be downgraded\"}},\"downgradeTo(address,uint256)\":{\"details\":\"Downgrade SuperToken to ERC20 and transfer immediately\",\"params\":{\"amount\":\"Number of tokens to be downgraded (in 18 decimals)\",\"to\":\"The account to receive downgraded tokens\"}},\"getAccountActiveAgreements(address)\":{\"details\":\"An active agreement is one that has state for the account\",\"params\":{\"account\":\"Account to query\"},\"returns\":{\"activeAgreements\":\"List of accounts that have non-zero states for the account\"}},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"Get data of the agreement\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"},\"returns\":{\"data\":\"Data of the agreement\"}},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"Get data of the slot of the state of an agreement\",\"params\":{\"account\":\"Account to query\",\"agreementClass\":\"Contract address of the agreement\",\"dataLength\":\"length of the state data\",\"slotId\":\"slot id of the state\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"getUnderlyingToken()\":{\"details\":\"Return the underlying token contract\",\"returns\":{\"tokenAddr\":\"Underlying token address\"}},\"granularity()\":{\"custom:note\":\"For super token contracts, this value is always 1\",\"details\":\"Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number.\"},\"increaseAllowance(address,uint256)\":{\"custom:emits\":\"an {Approval} event indicating the updated allowance.\",\"custom:requirements\":\" - `spender` cannot be the zero address.\",\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\"},\"initialize(address,uint8,string,string)\":{\"details\":\"Initialize the contract\"},\"isAccountCritical(address,uint256)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is critical (should use future)\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountCriticalNow(address)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountSolvent(address,uint256)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is solvent (should use future)\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isAccountSolventNow(address)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isOperatorFor(address,address)\":{\"details\":\"Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.\"},\"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"custom:note\":\" - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount\",\"details\":\"Make liquidation payouts (v2)\",\"params\":{\"id\":\"Agreement ID\",\"liquidationTypeData\":\"Data regarding the version of the liquidation schema and the type\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the rewarded account will receive\",\"targetAccount\":\"Account to be liquidated\",\"targetAccountBalanceDelta\":\"The delta amount the target account balance should change by\",\"useDefaultRewardAccount\":\"Whether or not the default reward account receives the rewardAmount\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"operationApprove(address,address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Perform ERC20 approve by host contract.\",\"params\":{\"account\":\"The account owner to be approved.\",\"amount\":\"Number of tokens to be approved.\",\"spender\":\"The spender of account owner's funds.\"}},\"operationDowngrade(address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Downgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be downgraded (in 18 decimals)\"}},\"operationSend(address,address,uint256,bytes)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Perform ERC777 send by host contract.\",\"params\":{\"amount\":\"Number of tokens to be transferred.\",\"data\":\"Arbitrary user inputted data\",\"recipient\":\"The recipient of the funds.\",\"spender\":\"The account where the funds is sent from.\"}},\"operationTransferFrom(address,address,address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Perform ERC20 transferFrom by host contract.\",\"params\":{\"account\":\"The account to spend sender's funds.\",\"amount\":\"Number of tokens to be transferred.\",\"recipient\":\"The recipient of the funds.\",\"spender\":\"The account where the funds is sent from.\"}},\"operationUpgrade(address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Upgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"}},\"operatorBurn(address,uint256,bytes,bytes)\":{\"custom:emits\":\"a {Burned} event.\",\"custom:requirements\":\" - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.\",\"details\":\"Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}.\"},\"operatorSend(address,address,uint256,bytes,bytes)\":{\"custom:emits\":\"a {Sent} event.\",\"custom:requirements\":\" - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\",\"details\":\"Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\"},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"Calculate the real balance of a user, taking in consideration all agreements of the account\",\"params\":{\"account\":\"for the query\",\"timestamp\":\"Time of balance\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block timestamp\",\"params\":{\"account\":\"for the query\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"revokeOperator(address)\":{\"custom:emits\":\"a {RevokedOperator} event.\",\"custom:requirements\":\" - `operator` cannot be calling address.\",\"details\":\"Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}.\"},\"selfApproveFor(address,address,uint256)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Give `spender`, `amount` allowance to spend the tokens of `account`.\"},\"selfBurn(address,uint256,bytes)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Burn existing tokens for the account\"},\"selfMint(address,uint256,bytes)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Mint new tokens for the account\"},\"selfTransferFrom(address,address,address,uint256)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`.\"},\"send(address,uint256,bytes)\":{\"custom:emits\":\"a {Sent} event.\",\"custom:requirements\":\" - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\",\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\"},\"settleBalance(address,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"details\":\"The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"Close the agreement\",\"params\":{\"id\":\"Agreement ID\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"custom:emits\":\"a {Transfer} event.\",\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"transferAll(address)\":{\"details\":\"Transfer all available balance from `msg.sender` to `recipient`\"},\"transferFrom(address,address,uint256)\":{\"custom:emits\":\"a {Transfer} event.\",\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"custom:note\":\" - To clear the storage out, provide zero-ed array of intended length\",\"details\":\"Update agreement state slot\",\"params\":{\"account\":\"Account to be updated\"}},\"upgrade(uint256)\":{\"custom:note\":\"It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract\",\"details\":\"Upgrade ERC20 to SuperToken.\",\"params\":{\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"}},\"upgradeTo(address,uint256,bytes)\":{\"custom:note\":\"It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract \",\"custom:requirements\":\" - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.\",\"custom:warning\":\"- there is potential of reentrancy IF the \\\"to\\\" account is a registered ERC777 recipient.\",\"details\":\"Upgrade ERC20 to SuperToken and transfer immediately\",\"params\":{\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\",\"data\":\"User data for the TokensRecipient callback\",\"to\":\"The account to receive upgraded tokens\"}}},\"title\":\"Super token (Superfluid Token + ERC20 + ERC777) interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"This value changes when {approve} or {transferFrom} are called.\"},\"getAccountActiveAgreements(address)\":{\"notice\":\"Get a list of agreements that is active for the account\"},\"isAccountCritical(address,uint256)\":{\"notice\":\"Check if account is critical\"},\"isAccountCriticalNow(address)\":{\"notice\":\"Check if account is critical now (current host.getNow())\"},\"isAccountSolvent(address,uint256)\":{\"notice\":\"Check if account is solvent\"},\"isAccountSolventNow(address)\":{\"notice\":\"Check if account is solvent now\"},\"realtimeBalanceOfNow(address)\":{\"notice\":\"Calculate the realtime balance given the current host.getNow() value\"},\"settleBalance(address,int256)\":{\"notice\":\"Settle balance from an account by the agreement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":\"ISuperToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"allowance(address,address)": {
								"notice": "This value changes when {approve} or {transferFrom} are called."
							},
							"getAccountActiveAgreements(address)": {
								"notice": "Get a list of agreements that is active for the account"
							},
							"isAccountCritical(address,uint256)": {
								"notice": "Check if account is critical"
							},
							"isAccountCriticalNow(address)": {
								"notice": "Check if account is critical now (current host.getNow())"
							},
							"isAccountSolvent(address,uint256)": {
								"notice": "Check if account is solvent"
							},
							"isAccountSolventNow(address)": {
								"notice": "Check if account is solvent now"
							},
							"realtimeBalanceOfNow(address)": {
								"notice": "Calculate the realtime balance given the current host.getNow() value"
							},
							"settleBalance(address,int256)": {
								"notice": "Settle balance from an account by the agreement"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"ISuperTokenFactory": {
					"abi": [
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_UNINITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "CustomSuperTokenCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SuperTokenCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "tokenLogic",
									"type": "address"
								}
							],
							"name": "SuperTokenLogicCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_underlyingToken",
									"type": "address"
								}
							],
							"name": "computeCanonicalERC20WrapperAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "superTokenAddress",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "isDeployed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ERC20WithTokenInfo",
									"name": "_underlyingToken",
									"type": "address"
								}
							],
							"name": "createCanonicalERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ERC20WithTokenInfo",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_underlyingTokenAddress",
									"type": "address"
								}
							],
							"name": "getCanonicalERC20Wrapper",
							"outputs": [
								{
									"internalType": "address",
									"name": "superTokenAddress",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenLogic",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "customSuperTokenProxy",
									"type": "address"
								}
							],
							"name": "initializeCustomSuperToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"CustomSuperTokenCreated(address)": {
								"details": "Custom super token created event",
								"params": {
									"token": "Newly created custom super token address"
								}
							},
							"SuperTokenCreated(address)": {
								"details": "Super token created event",
								"params": {
									"token": "Newly created super token address"
								}
							},
							"SuperTokenLogicCreated(address)": {
								"details": "Super token logic created event",
								"params": {
									"tokenLogic": "Token logic address"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"computeCanonicalERC20WrapperAddress(address)": {
								"details": "We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens",
								"params": {
									"_underlyingToken": "Underlying ERC20 token address"
								},
								"returns": {
									"isDeployed": "whether the super token is deployed AND set in the canonical mapping",
									"superTokenAddress": "Super token address"
								}
							},
							"createCanonicalERC20Wrapper(address)": {
								"details": "salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))",
								"params": {
									"_underlyingToken": "Underlying ERC20 token"
								},
								"returns": {
									"_0": "ISuperToken the created supertoken"
								}
							},
							"createERC20Wrapper(address,uint8,string,string)": {
								"params": {
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token NOTE: - It assumes token provide the .decimals() function"
								}
							},
							"createERC20Wrapper(address,uint8,uint8,string,string)": {
								"params": {
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingDecimals": "Underlying token decimals",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token"
								}
							},
							"getCanonicalERC20Wrapper(address)": {
								"details": "We return the address if it exists and the zero address otherwise",
								"params": {
									"_underlyingTokenAddress": "Underlying ERC20 token address"
								},
								"returns": {
									"superTokenAddress": "Super token address"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"initialize()": {
								"details": "Initialize the contract"
							},
							"initializeCustomSuperToken(address)": {
								"details": "Creates a new custom super token",
								"params": {
									"customSuperTokenProxy": "address of the custom supertoken proxy"
								}
							}
						},
						"title": "Super token factory interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"computeCanonicalERC20WrapperAddress(address)": "bab74c89",
							"createCanonicalERC20Wrapper(address)": "151188dc",
							"createERC20Wrapper(address,uint8,string,string)": "431f1481",
							"createERC20Wrapper(address,uint8,uint8,string,string)": "a6d0c534",
							"getCanonicalERC20Wrapper(address)": "eff0a89d",
							"getHost()": "20bc4425",
							"getSuperTokenLogic()": "9470a5b2",
							"initialize()": "8129fc1c",
							"initializeCustomSuperToken(address)": "d412d344"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_UNINITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CustomSuperTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SuperTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"tokenLogic\",\"type\":\"address\"}],\"name\":\"SuperTokenLogicCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"computeCanonicalERC20WrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20WithTokenInfo\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"createCanonicalERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20WithTokenInfo\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingTokenAddress\",\"type\":\"address\"}],\"name\":\"getCanonicalERC20Wrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenLogic\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customSuperTokenProxy\",\"type\":\"address\"}],\"name\":\"initializeCustomSuperToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"CustomSuperTokenCreated(address)\":{\"details\":\"Custom super token created event\",\"params\":{\"token\":\"Newly created custom super token address\"}},\"SuperTokenCreated(address)\":{\"details\":\"Super token created event\",\"params\":{\"token\":\"Newly created super token address\"}},\"SuperTokenLogicCreated(address)\":{\"details\":\"Super token logic created event\",\"params\":{\"tokenLogic\":\"Token logic address\"}}},\"kind\":\"dev\",\"methods\":{\"computeCanonicalERC20WrapperAddress(address)\":{\"details\":\"We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\",\"params\":{\"_underlyingToken\":\"Underlying ERC20 token address\"},\"returns\":{\"isDeployed\":\"whether the super token is deployed AND set in the canonical mapping\",\"superTokenAddress\":\"Super token address\"}},\"createCanonicalERC20Wrapper(address)\":{\"details\":\"salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\",\"params\":{\"_underlyingToken\":\"Underlying ERC20 token\"},\"returns\":{\"_0\":\"ISuperToken the created supertoken\"}},\"createERC20Wrapper(address,uint8,string,string)\":{\"params\":{\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token NOTE: - It assumes token provide the .decimals() function\"}},\"createERC20Wrapper(address,uint8,uint8,string,string)\":{\"params\":{\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingDecimals\":\"Underlying token decimals\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token\"}},\"getCanonicalERC20Wrapper(address)\":{\"details\":\"We return the address if it exists and the zero address otherwise\",\"params\":{\"_underlyingTokenAddress\":\"Underlying ERC20 token address\"},\"returns\":{\"superTokenAddress\":\"Super token address\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"initialize()\":{\"details\":\"Initialize the contract\"},\"initializeCustomSuperToken(address)\":{\"details\":\"Creates a new custom super token\",\"params\":{\"customSuperTokenProxy\":\"address of the custom supertoken proxy\"}}},\"title\":\"Super token factory interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeCanonicalERC20WrapperAddress(address)\":{\"notice\":\"Computes/Retrieves wrapper super token address given the underlying token address\"},\"createCanonicalERC20Wrapper(address)\":{\"notice\":\"Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\"},\"createERC20Wrapper(address,uint8,string,string)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token with extra token info\"},\"createERC20Wrapper(address,uint8,uint8,string,string)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token\"},\"getCanonicalERC20Wrapper(address)\":{\"notice\":\"Gets the canonical ERC20 wrapper super token address given the underlying token address\"},\"getSuperTokenLogic()\":{\"notice\":\"Get the canonical super token logic.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":\"ISuperTokenFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"computeCanonicalERC20WrapperAddress(address)": {
								"notice": "Computes/Retrieves wrapper super token address given the underlying token address"
							},
							"createCanonicalERC20Wrapper(address)": {
								"notice": "Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists"
							},
							"createERC20Wrapper(address,uint8,string,string)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token with extra token info"
							},
							"createERC20Wrapper(address,uint8,uint8,string,string)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token"
							},
							"getCanonicalERC20Wrapper(address)": {
								"notice": "Gets the canonical ERC20 wrapper super token address given the underlying token address"
							},
							"getSuperTokenLogic()": {
								"notice": "Get the canonical super token logic."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
				"ISuperfluid": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_code",
									"type": "uint256"
								}
							],
							"name": "APP_RULE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_AGREEMENT_ALREADY_REGISTERED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_AGREEMENT_IS_NOT_REGISTERED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_INVALID_CONFIG_WORD",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_MAX_256_AGREEMENTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_MUST_BE_CONTRACT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NEED_MORE_GAS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NON_UPGRADEABLE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NOT_A_SUPER_APP",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NO_APP_REGISTRATION_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_ONLY_GOVERNANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_RECEIVER_IS_NOT_SUPER_APP",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SENDER_IS_NOT_SUPER_APP",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SUPER_APP_ALREADY_REGISTERED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SUPER_APP_IS_JAILED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_UNAUTHORIZED_SUPER_APP_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "code",
									"type": "address"
								}
							],
							"name": "AgreementClassRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "code",
									"type": "address"
								}
							],
							"name": "AgreementClassUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "AppRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "contract ISuperfluidGovernance",
									"name": "oldGov",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "contract ISuperfluidGovernance",
									"name": "newGov",
									"type": "address"
								}
							],
							"name": "GovernanceReplaced",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "reason",
									"type": "uint256"
								}
							],
							"name": "Jail",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "contract ISuperTokenFactory",
									"name": "newFactory",
									"type": "address"
								}
							],
							"name": "SuperTokenFactoryUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "code",
									"type": "address"
								}
							],
							"name": "SuperTokenLogicUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bitmap",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "addToAgreementClassesBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "newBitmap",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "targetApp",
									"type": "address"
								}
							],
							"name": "allowCompositeApp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "int256",
									"name": "appCreditUsedDelta",
									"type": "int256"
								}
							],
							"name": "appCallbackPop",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "appCreditGranted",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "appCreditUsed",
									"type": "int256"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "appCreditToken",
									"type": "address"
								}
							],
							"name": "appCallbackPush",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "operationType",
											"type": "uint32"
										},
										{
											"internalType": "address",
											"name": "target",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										}
									],
									"internalType": "struct ISuperfluid.Operation[]",
									"name": "operations",
									"type": "tuple[]"
								}
							],
							"name": "batchCall",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "callAgreement",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "returnedData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAgreementWithContext",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "returnedData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								}
							],
							"name": "callAppAction",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "returnedData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAppActionWithContext",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bool",
									"name": "isTermination",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAppAfterCallback",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bool",
									"name": "isTermination",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAppBeforeCallback",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "int256",
									"name": "appCreditUsedMore",
									"type": "int256"
								}
							],
							"name": "ctxUseCredit",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "decodeCtx",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "appCallbackLevel",
											"type": "uint8"
										},
										{
											"internalType": "uint8",
											"name": "callType",
											"type": "uint8"
										},
										{
											"internalType": "uint256",
											"name": "timestamp",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "msgSender",
											"type": "address"
										},
										{
											"internalType": "bytes4",
											"name": "agreementSelector",
											"type": "bytes4"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "appCreditGranted",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "appCreditWantedDeprecated",
											"type": "uint256"
										},
										{
											"internalType": "int256",
											"name": "appCreditUsed",
											"type": "int256"
										},
										{
											"internalType": "address",
											"name": "appAddress",
											"type": "address"
										},
										{
											"internalType": "contract ISuperfluidToken",
											"name": "appCreditToken",
											"type": "address"
										}
									],
									"internalType": "struct ISuperfluid.Context",
									"name": "context",
									"type": "tuple"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "operationType",
											"type": "uint32"
										},
										{
											"internalType": "address",
											"name": "target",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										}
									],
									"internalType": "struct ISuperfluid.Operation[]",
									"name": "operations",
									"type": "tuple[]"
								}
							],
							"name": "forwardBatchCall",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "getAgreementClass",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "getAppCallbackLevel",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "appCallbackLevel",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "getAppManifest",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSuperApp",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isJailed",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "noopMask",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getGovernance",
							"outputs": [
								{
									"internalType": "contract ISuperfluidGovernance",
									"name": "governance",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getNow",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenFactory",
							"outputs": [
								{
									"internalType": "contract ISuperTokenFactory",
									"name": "factory",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenFactoryLogic",
							"outputs": [
								{
									"internalType": "address",
									"name": "logic",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								}
							],
							"name": "isAgreementClassListed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "yes",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "isAgreementTypeListed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "yes",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "isApp",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "isAppJailed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isJail",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "contract ISuperApp",
									"name": "targetApp",
									"type": "address"
								}
							],
							"name": "isCompositeAppAllowed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isAppAllowed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "isCtxValid",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "reason",
									"type": "uint256"
								}
							],
							"name": "jailApp",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bitmap",
									"type": "uint256"
								}
							],
							"name": "mapAgreementClasses",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "agreementClasses",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClassLogic",
									"type": "address"
								}
							],
							"name": "registerAgreementClass",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "configWord",
									"type": "uint256"
								}
							],
							"name": "registerApp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "configWord",
									"type": "uint256"
								}
							],
							"name": "registerAppByFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "configWord",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "registrationKey",
									"type": "string"
								}
							],
							"name": "registerAppWithKey",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bitmap",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "removeFromAgreementClassesBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "newBitmap",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidGovernance",
									"name": "newGov",
									"type": "address"
								}
							],
							"name": "replaceGovernance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClassLogic",
									"type": "address"
								}
							],
							"name": "updateAgreementClass",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperTokenFactory",
									"name": "newFactory",
									"type": "address"
								}
							],
							"name": "updateSuperTokenFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "updateSuperTokenLogic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementClassRegistered(bytes32,address)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"agreementType": "The agreement type registered",
									"code": "Address of the new agreement"
								}
							},
							"AgreementClassUpdated(bytes32,address)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"agreementType": "The agreement type updated",
									"code": "Address of the new agreement"
								}
							},
							"AppRegistered(address)": {
								"details": "App registered event",
								"params": {
									"app": "Address of jailed app"
								}
							},
							"GovernanceReplaced(address,address)": {
								"details": "Governance replaced event",
								"params": {
									"newGov": "Address of the new governance contract",
									"oldGov": "Address of the old governance contract"
								}
							},
							"Jail(address,uint256)": {
								"details": "Jail event for the app",
								"params": {
									"app": "Address of jailed app",
									"reason": "Reason the app is jailed (see Definitions.sol for the full list)"
								}
							},
							"SuperTokenFactoryUpdated(address)": {
								"details": "SuperToken factory updated event",
								"params": {
									"newFactory": "Address of the new factory"
								}
							},
							"SuperTokenLogicUpdated(address,address)": {
								"details": "SuperToken logic updated event",
								"params": {
									"code": "Address of the new SuperToken logic"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addToAgreementClassesBitmap(uint256,bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"bitmap": "Agreement class bitmap"
								}
							},
							"allowCompositeApp(address)": {
								"details": "Whitelist the target app for app composition for the source app (msg.sender)",
								"params": {
									"targetApp": "The target super app address"
								}
							},
							"appCallbackPop(bytes,int256)": {
								"custom:security": "- Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory. - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.",
								"details": "(For agreements) Pop from the current app callback stack",
								"params": {
									"appCreditUsedDelta": "App credit used by the app.",
									"ctx": "The ctx that was pushed before the callback stack."
								},
								"returns": {
									"newCtx": "                 The current context of the transaction."
								}
							},
							"appCallbackPush(bytes,address,uint256,int256,address)": {
								"details": "(For agreements) Create a new callback stack",
								"params": {
									"app": "The super app.",
									"appCreditGranted": "App credit granted so far.",
									"appCreditUsed": "App credit used so far.",
									"ctx": "The current ctx, it will be validated."
								},
								"returns": {
									"newCtx": "                 The current context of the transaction."
								}
							},
							"batchCall((uint32,address,bytes)[])": {
								"details": "Batch call function",
								"params": {
									"operations": "Array of batch operations"
								}
							},
							"callAgreement(address,bytes,bytes)": {
								"details": "Call agreement function",
								"params": {
									"agreementClass": "The agreement address you are calling",
									"callData": "The contextual call data with placeholder ctx",
									"userData": "Extra user data being sent to the super app callbacks"
								}
							},
							"callAppAction(address,bytes)": {
								"custom:note": "See \"Contextless Call Proxies\" above for more about contextual call data.",
								"details": "Main use case is calling app action in a batch call via the host",
								"params": {
									"callData": "The contextual call data"
								}
							},
							"callAppAfterCallback(address,bytes,bool,bytes)": {
								"details": "(For agreements) Call the app after callback",
								"params": {
									"app": "The super app.",
									"callData": "The call data sending to the super app.",
									"ctx": "Current ctx, it will be validated.",
									"isTermination": "Is it a termination callback?"
								},
								"returns": {
									"newCtx": "           The current context of the transaction."
								}
							},
							"callAppBeforeCallback(address,bytes,bool,bytes)": {
								"details": "(For agreements) StaticCall the app before callback",
								"params": {
									"app": "The super app.",
									"callData": "The call data sending to the super app.",
									"ctx": "Current ctx, it will be validated.",
									"isTermination": "Is it a termination callback?"
								},
								"returns": {
									"cbdata": "           Data returned from the callback."
								}
							},
							"ctxUseCredit(bytes,int256)": {
								"details": "(For agreements) Use app credit.",
								"params": {
									"appCreditUsedMore": "See app credit for more details.",
									"ctx": "The current ctx, it will be validated."
								},
								"returns": {
									"newCtx": "                  The current context of the transaction."
								}
							},
							"forwardBatchCall((uint32,address,bytes)[])": {
								"details": "Batch call function for trusted forwarders (EIP-2771)",
								"params": {
									"operations": "Array of batch operations"
								}
							},
							"getAgreementClass(bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
							},
							"getAppCallbackLevel(address)": {
								"details": "Query app callbacklevel",
								"params": {
									"app": "Super app address"
								}
							},
							"getAppManifest(address)": {
								"details": "Get the manifest of the super app",
								"params": {
									"app": "Super app address"
								}
							},
							"getGovernance()": {
								"details": "Get the current governance address of the Superfluid host"
							},
							"getSuperTokenFactory()": {
								"details": "Get the super token factory",
								"returns": {
									"factory": "The factory"
								}
							},
							"getSuperTokenFactoryLogic()": {
								"details": "Get the super token factory logic (applicable to upgradable deployment)",
								"returns": {
									"logic": "The factory logic"
								}
							},
							"isAgreementClassListed(address)": {
								"details": "Check if the agreement class is whitelisted"
							},
							"isAgreementTypeListed(bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
							},
							"isApp(address)": {
								"details": "Query if the app is registered",
								"params": {
									"app": "Super app address"
								}
							},
							"isAppJailed(address)": {
								"details": "Query if the app has been jailed",
								"params": {
									"app": "Super app address"
								}
							},
							"isCompositeAppAllowed(address,address)": {
								"details": "Query if source app is allowed to call the target app as downstream app",
								"params": {
									"app": "Super app address",
									"targetApp": "The target super app address"
								}
							},
							"jailApp(bytes,address,uint256)": {
								"details": "(For agreements) Jail the app.",
								"params": {
									"app": "The super app.",
									"reason": "Jail reason code."
								},
								"returns": {
									"newCtx": "                 The current context of the transaction."
								}
							},
							"mapAgreementClasses(uint256)": {
								"details": "Map list of the agreement classes using a bitmap",
								"params": {
									"bitmap": "Agreement class bitmap"
								}
							},
							"registerAgreementClass(address)": {
								"custom:modifiers": " - onlyGovernance",
								"details": "Register a new agreement class to the system",
								"params": {
									"agreementClassLogic": "Initial agreement class code"
								}
							},
							"registerApp(uint256)": {
								"custom:deprecated": "you should use `registerAppWithKey` or `registerAppByFactory` instead, because app registration is currently governance permissioned on mainnets.",
								"details": "Message sender (must be a contract) declares itself as a super app.",
								"params": {
									"configWord": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`"
								}
							},
							"registerAppByFactory(address,uint256)": {
								"details": "Message sender (must be a contract) declares app as a super app",
								"params": {
									"configWord": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`"
								}
							},
							"registerAppWithKey(uint256,string)": {
								"details": "Message sender declares itself as a super app.",
								"params": {
									"configWord": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`",
									"registrationKey": "The registration key issued by the governance, needed to register on a mainnet."
								}
							},
							"removeFromAgreementClassesBitmap(uint256,bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"bitmap": "Agreement class bitmap"
								}
							},
							"replaceGovernance(address)": {
								"details": "Replace the current governance with a new one"
							},
							"updateAgreementClass(address)": {
								"custom:modifiers": "  - onlyGovernance",
								"details": "Update code of an agreement class",
								"params": {
									"agreementClassLogic": "New code for the agreement class"
								}
							},
							"updateSuperTokenFactory(address)": {
								"details": "Update super token factory",
								"params": {
									"newFactory": "New factory logic"
								}
							},
							"updateSuperTokenLogic(address)": {
								"details": "Refer to ISuperTokenFactory.Upgradability for expected behaviours"
							}
						},
						"title": "Host interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addToAgreementClassesBitmap(uint256,bytes32)": "bced3ddc",
							"allowCompositeApp(address)": "57121e0c",
							"appCallbackPop(bytes,int256)": "989b0c3e",
							"appCallbackPush(bytes,address,uint256,int256,address)": "768fabb0",
							"batchCall((uint32,address,bytes)[])": "6ad3ca7d",
							"callAgreement(address,bytes,bytes)": "39255d5b",
							"callAgreementWithContext(address,bytes,bytes,bytes)": "4329d293",
							"callAppAction(address,bytes)": "1e855cf3",
							"callAppActionWithContext(address,bytes,bytes)": "ba48b5f8",
							"callAppAfterCallback(address,bytes,bool,bytes)": "1e6d0a84",
							"callAppBeforeCallback(address,bytes,bool,bytes)": "74041e02",
							"ctxUseCredit(bytes,int256)": "59a29141",
							"decodeCtx(bytes)": "3f6c923a",
							"forwardBatchCall((uint32,address,bytes)[])": "670e77e3",
							"getAgreementClass(bytes32)": "b6d200de",
							"getAppCallbackLevel(address)": "9378fa13",
							"getAppManifest(address)": "f9f522f4",
							"getGovernance()": "289b3c0d",
							"getNow()": "bbe4fd50",
							"getSuperTokenFactory()": "731aed6e",
							"getSuperTokenFactoryLogic()": "f2e55caf",
							"isAgreementClassListed(address)": "8ca48484",
							"isAgreementTypeListed(bytes32)": "e8dccb7d",
							"isApp(address)": "3ca3ad4e",
							"isAppJailed(address)": "6b4f3335",
							"isCompositeAppAllowed(address,address)": "bb84cfa1",
							"isCtxValid(bytes)": "bf428734",
							"jailApp(bytes,address,uint256)": "b724211e",
							"mapAgreementClasses(uint256)": "c56a069d",
							"registerAgreementClass(address)": "15a024e1",
							"registerApp(uint256)": "ad3915c8",
							"registerAppByFactory(address,uint256)": "f3733052",
							"registerAppWithKey(uint256,string)": "bd1c448b",
							"removeFromAgreementClassesBitmap(uint256,bytes32)": "a5dbbbcd",
							"replaceGovernance(address)": "7283100c",
							"updateAgreementClass(address)": "06cecba8",
							"updateSuperTokenFactory(address)": "54fbc493",
							"updateSuperTokenLogic(address)": "787afde7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"APP_RULE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_AGREEMENT_ALREADY_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_AGREEMENT_IS_NOT_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_INVALID_CONFIG_WORD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_MAX_256_AGREEMENTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_MUST_BE_CONTRACT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NEED_MORE_GAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NON_UPGRADEABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NOT_A_SUPER_APP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NO_APP_REGISTRATION_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_ONLY_GOVERNANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_RECEIVER_IS_NOT_SUPER_APP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SENDER_IS_NOT_SUPER_APP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SUPER_APP_ALREADY_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SUPER_APP_IS_JAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_UNAUTHORIZED_SUPER_APP_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"AgreementClassRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"AgreementClassUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"AppRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"oldGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"GovernanceReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"Jail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISuperTokenFactory\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"SuperTokenFactoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"SuperTokenLogicUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"addToAgreementClassesBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"targetApp\",\"type\":\"address\"}],\"name\":\"allowCompositeApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsedDelta\",\"type\":\"int256\"}],\"name\":\"appCallbackPop\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"appCreditGranted\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsed\",\"type\":\"int256\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"appCreditToken\",\"type\":\"address\"}],\"name\":\"appCallbackPush\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"operationType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ISuperfluid.Operation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"batchCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"callAgreement\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnedData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAgreementWithContext\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"returnedData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"callAppAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnedData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAppActionWithContext\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isTermination\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAppAfterCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isTermination\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAppBeforeCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsedMore\",\"type\":\"int256\"}],\"name\":\"ctxUseCredit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"decodeCtx\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"appCallbackLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"agreementSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"appCreditGranted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appCreditWantedDeprecated\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsed\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"appCreditToken\",\"type\":\"address\"}],\"internalType\":\"struct ISuperfluid.Context\",\"name\":\"context\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"operationType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ISuperfluid.Operation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"forwardBatchCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"getAgreementClass\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"getAppCallbackLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"appCallbackLevel\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"getAppManifest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSuperApp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isJailed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"noopMask\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"governance\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenFactory\",\"outputs\":[{\"internalType\":\"contract ISuperTokenFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenFactoryLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"}],\"name\":\"isAgreementClassListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"yes\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"isAgreementTypeListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"yes\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"isApp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"isAppJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJail\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"contract ISuperApp\",\"name\":\"targetApp\",\"type\":\"address\"}],\"name\":\"isCompositeAppAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAppAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"isCtxValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"jailApp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"name\":\"mapAgreementClasses\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"agreementClasses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClassLogic\",\"type\":\"address\"}],\"name\":\"registerAgreementClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configWord\",\"type\":\"uint256\"}],\"name\":\"registerApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configWord\",\"type\":\"uint256\"}],\"name\":\"registerAppByFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configWord\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"registrationKey\",\"type\":\"string\"}],\"name\":\"registerAppWithKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"removeFromAgreementClassesBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"replaceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClassLogic\",\"type\":\"address\"}],\"name\":\"updateAgreementClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperTokenFactory\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"updateSuperTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateSuperTokenLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementClassRegistered(bytes32,address)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"agreementType\":\"The agreement type registered\",\"code\":\"Address of the new agreement\"}},\"AgreementClassUpdated(bytes32,address)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"agreementType\":\"The agreement type updated\",\"code\":\"Address of the new agreement\"}},\"AppRegistered(address)\":{\"details\":\"App registered event\",\"params\":{\"app\":\"Address of jailed app\"}},\"GovernanceReplaced(address,address)\":{\"details\":\"Governance replaced event\",\"params\":{\"newGov\":\"Address of the new governance contract\",\"oldGov\":\"Address of the old governance contract\"}},\"Jail(address,uint256)\":{\"details\":\"Jail event for the app\",\"params\":{\"app\":\"Address of jailed app\",\"reason\":\"Reason the app is jailed (see Definitions.sol for the full list)\"}},\"SuperTokenFactoryUpdated(address)\":{\"details\":\"SuperToken factory updated event\",\"params\":{\"newFactory\":\"Address of the new factory\"}},\"SuperTokenLogicUpdated(address,address)\":{\"details\":\"SuperToken logic updated event\",\"params\":{\"code\":\"Address of the new SuperToken logic\"}}},\"kind\":\"dev\",\"methods\":{\"addToAgreementClassesBitmap(uint256,bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"bitmap\":\"Agreement class bitmap\"}},\"allowCompositeApp(address)\":{\"details\":\"Whitelist the target app for app composition for the source app (msg.sender)\",\"params\":{\"targetApp\":\"The target super app address\"}},\"appCallbackPop(bytes,int256)\":{\"custom:security\":\"- Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory. - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.\",\"details\":\"(For agreements) Pop from the current app callback stack\",\"params\":{\"appCreditUsedDelta\":\"App credit used by the app.\",\"ctx\":\"The ctx that was pushed before the callback stack.\"},\"returns\":{\"newCtx\":\"                 The current context of the transaction.\"}},\"appCallbackPush(bytes,address,uint256,int256,address)\":{\"details\":\"(For agreements) Create a new callback stack\",\"params\":{\"app\":\"The super app.\",\"appCreditGranted\":\"App credit granted so far.\",\"appCreditUsed\":\"App credit used so far.\",\"ctx\":\"The current ctx, it will be validated.\"},\"returns\":{\"newCtx\":\"                 The current context of the transaction.\"}},\"batchCall((uint32,address,bytes)[])\":{\"details\":\"Batch call function\",\"params\":{\"operations\":\"Array of batch operations\"}},\"callAgreement(address,bytes,bytes)\":{\"details\":\"Call agreement function\",\"params\":{\"agreementClass\":\"The agreement address you are calling\",\"callData\":\"The contextual call data with placeholder ctx\",\"userData\":\"Extra user data being sent to the super app callbacks\"}},\"callAppAction(address,bytes)\":{\"custom:note\":\"See \\\"Contextless Call Proxies\\\" above for more about contextual call data.\",\"details\":\"Main use case is calling app action in a batch call via the host\",\"params\":{\"callData\":\"The contextual call data\"}},\"callAppAfterCallback(address,bytes,bool,bytes)\":{\"details\":\"(For agreements) Call the app after callback\",\"params\":{\"app\":\"The super app.\",\"callData\":\"The call data sending to the super app.\",\"ctx\":\"Current ctx, it will be validated.\",\"isTermination\":\"Is it a termination callback?\"},\"returns\":{\"newCtx\":\"           The current context of the transaction.\"}},\"callAppBeforeCallback(address,bytes,bool,bytes)\":{\"details\":\"(For agreements) StaticCall the app before callback\",\"params\":{\"app\":\"The super app.\",\"callData\":\"The call data sending to the super app.\",\"ctx\":\"Current ctx, it will be validated.\",\"isTermination\":\"Is it a termination callback?\"},\"returns\":{\"cbdata\":\"           Data returned from the callback.\"}},\"ctxUseCredit(bytes,int256)\":{\"details\":\"(For agreements) Use app credit.\",\"params\":{\"appCreditUsedMore\":\"See app credit for more details.\",\"ctx\":\"The current ctx, it will be validated.\"},\"returns\":{\"newCtx\":\"                  The current context of the transaction.\"}},\"forwardBatchCall((uint32,address,bytes)[])\":{\"details\":\"Batch call function for trusted forwarders (EIP-2771)\",\"params\":{\"operations\":\"Array of batch operations\"}},\"getAgreementClass(bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\"},\"getAppCallbackLevel(address)\":{\"details\":\"Query app callbacklevel\",\"params\":{\"app\":\"Super app address\"}},\"getAppManifest(address)\":{\"details\":\"Get the manifest of the super app\",\"params\":{\"app\":\"Super app address\"}},\"getGovernance()\":{\"details\":\"Get the current governance address of the Superfluid host\"},\"getSuperTokenFactory()\":{\"details\":\"Get the super token factory\",\"returns\":{\"factory\":\"The factory\"}},\"getSuperTokenFactoryLogic()\":{\"details\":\"Get the super token factory logic (applicable to upgradable deployment)\",\"returns\":{\"logic\":\"The factory logic\"}},\"isAgreementClassListed(address)\":{\"details\":\"Check if the agreement class is whitelisted\"},\"isAgreementTypeListed(bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\"},\"isApp(address)\":{\"details\":\"Query if the app is registered\",\"params\":{\"app\":\"Super app address\"}},\"isAppJailed(address)\":{\"details\":\"Query if the app has been jailed\",\"params\":{\"app\":\"Super app address\"}},\"isCompositeAppAllowed(address,address)\":{\"details\":\"Query if source app is allowed to call the target app as downstream app\",\"params\":{\"app\":\"Super app address\",\"targetApp\":\"The target super app address\"}},\"jailApp(bytes,address,uint256)\":{\"details\":\"(For agreements) Jail the app.\",\"params\":{\"app\":\"The super app.\",\"reason\":\"Jail reason code.\"},\"returns\":{\"newCtx\":\"                 The current context of the transaction.\"}},\"mapAgreementClasses(uint256)\":{\"details\":\"Map list of the agreement classes using a bitmap\",\"params\":{\"bitmap\":\"Agreement class bitmap\"}},\"registerAgreementClass(address)\":{\"custom:modifiers\":\" - onlyGovernance\",\"details\":\"Register a new agreement class to the system\",\"params\":{\"agreementClassLogic\":\"Initial agreement class code\"}},\"registerApp(uint256)\":{\"custom:deprecated\":\"you should use `registerAppWithKey` or `registerAppByFactory` instead, because app registration is currently governance permissioned on mainnets.\",\"details\":\"Message sender (must be a contract) declares itself as a super app.\",\"params\":{\"configWord\":\"The super app manifest configuration, flags are defined in `SuperAppDefinitions`\"}},\"registerAppByFactory(address,uint256)\":{\"details\":\"Message sender (must be a contract) declares app as a super app\",\"params\":{\"configWord\":\"The super app manifest configuration, flags are defined in `SuperAppDefinitions`\"}},\"registerAppWithKey(uint256,string)\":{\"details\":\"Message sender declares itself as a super app.\",\"params\":{\"configWord\":\"The super app manifest configuration, flags are defined in `SuperAppDefinitions`\",\"registrationKey\":\"The registration key issued by the governance, needed to register on a mainnet.\"}},\"removeFromAgreementClassesBitmap(uint256,bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"bitmap\":\"Agreement class bitmap\"}},\"replaceGovernance(address)\":{\"details\":\"Replace the current governance with a new one\"},\"updateAgreementClass(address)\":{\"custom:modifiers\":\"  - onlyGovernance\",\"details\":\"Update code of an agreement class\",\"params\":{\"agreementClassLogic\":\"New code for the agreement class\"}},\"updateSuperTokenFactory(address)\":{\"details\":\"Update super token factory\",\"params\":{\"newFactory\":\"New factory logic\"}},\"updateSuperTokenLogic(address)\":{\"details\":\"Refer to ISuperTokenFactory.Upgradability for expected behaviours\"}},\"title\":\"Host interface\",\"version\":1},\"userdoc\":{\"events\":{\"AgreementClassRegistered(bytes32,address)\":{\"notice\":\"Agreement class registered event\"},\"AgreementClassUpdated(bytes32,address)\":{\"notice\":\"Agreement class updated event\"}},\"kind\":\"user\",\"methods\":{\"addToAgreementClassesBitmap(uint256,bytes32)\":{\"notice\":\"Create a new bitmask by adding a agreement class to it\"},\"callAppAction(address,bytes)\":{\"notice\":\"Call app action\"},\"getAgreementClass(bytes32)\":{\"notice\":\"Get agreement class\"},\"isAgreementTypeListed(bytes32)\":{\"notice\":\"Check if the agreement type is whitelisted\"},\"registerAppByFactory(address,uint256)\":{\"notice\":\"On mainnet deployments, only factory contracts pre-authorized by governance can use this. See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\"},\"registerAppWithKey(uint256,string)\":{\"notice\":\"See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide On testnets or in dev environment, a placeholder (e.g. empty string) can be used. While the message sender must be the super app itself, the transaction sender (tx.origin) must be the deployer account the registration key was issued for.\"},\"removeFromAgreementClassesBitmap(uint256,bytes32)\":{\"notice\":\"Create a new bitmask by removing a agreement class from it\"},\"updateSuperTokenLogic(address)\":{\"notice\":\"Update the super token logic to the latest\"}},\"notice\":\"This is the central contract of the system where super agreement, super app and super token features are connected. The Superfluid host contract is also the entry point for the protocol users, where batch call and meta transaction are provided for UX improvements.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":\"ISuperfluid\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"AgreementClassRegistered(bytes32,address)": {
								"notice": "Agreement class registered event"
							},
							"AgreementClassUpdated(bytes32,address)": {
								"notice": "Agreement class updated event"
							}
						},
						"kind": "user",
						"methods": {
							"addToAgreementClassesBitmap(uint256,bytes32)": {
								"notice": "Create a new bitmask by adding a agreement class to it"
							},
							"callAppAction(address,bytes)": {
								"notice": "Call app action"
							},
							"getAgreementClass(bytes32)": {
								"notice": "Get agreement class"
							},
							"isAgreementTypeListed(bytes32)": {
								"notice": "Check if the agreement type is whitelisted"
							},
							"registerAppByFactory(address,uint256)": {
								"notice": "On mainnet deployments, only factory contracts pre-authorized by governance can use this. See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide"
							},
							"registerAppWithKey(uint256,string)": {
								"notice": "See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide On testnets or in dev environment, a placeholder (e.g. empty string) can be used. While the message sender must be the super app itself, the transaction sender (tx.origin) must be the deployer account the registration key was issued for."
							},
							"removeFromAgreementClassesBitmap(uint256,bytes32)": {
								"notice": "Create a new bitmask by removing a agreement class from it"
							},
							"updateSuperTokenLogic(address)": {
								"notice": "Update the super token logic to the latest"
							}
						},
						"notice": "This is the central contract of the system where super agreement, super app and super token features are connected. The Superfluid host contract is also the entry point for the protocol users, where batch call and meta transaction are provided for UX improvements.",
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
				"ISuperfluidGovernance": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_GOV_ARRAYS_NOT_SAME_LENGTH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_GOV_MUST_BE_CONTRACT",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperToken[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "batchUpdateSuperTokenLogic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "clearConfig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "getConfigAsAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "value",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "getConfigAsUint256",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								}
							],
							"name": "registerAgreementClass",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "newGov",
									"type": "address"
								}
							],
							"name": "replaceGovernance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "value",
									"type": "address"
								}
							],
							"name": "setConfig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "setConfig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "hostNewLogic",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "agreementClassNewLogics",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "superTokenFactoryNewLogic",
									"type": "address"
								}
							],
							"name": "updateContracts",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {
							"batchUpdateSuperTokenLogic(address,address[])": {
								"details": "Update supertoken logic contract to the latest that is managed by the super token factory"
							},
							"clearConfig(address,address,bytes32)": {
								"details": "Clear configuration"
							},
							"getConfigAsAddress(address,address,bytes32)": {
								"details": "Get configuration as address value"
							},
							"getConfigAsUint256(address,address,bytes32)": {
								"details": "Get configuration as uint256 value"
							},
							"registerAgreementClass(address,address)": {
								"details": "Register a new agreement class"
							},
							"replaceGovernance(address,address)": {
								"details": "Replace the current governance with a new governance"
							},
							"setConfig(address,address,bytes32,address)": {
								"details": "Set configuration as address value"
							},
							"setConfig(address,address,bytes32,uint256)": {
								"details": "Set configuration as uint256 value"
							},
							"updateContracts(address,address,address[],address)": {
								"custom:note": " - Because they might have inter-dependencies, it is good to have one single function to update them all",
								"details": "Update logics of the contracts"
							}
						},
						"title": "Superfluid governance interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"batchUpdateSuperTokenLogic(address,address[])": "42148deb",
							"clearConfig(address,address,bytes32)": "640b6cc9",
							"getConfigAsAddress(address,address,bytes32)": "8369a0f1",
							"getConfigAsUint256(address,address,bytes32)": "80f70cba",
							"registerAgreementClass(address,address)": "cadf8f85",
							"replaceGovernance(address,address)": "44864b25",
							"setConfig(address,address,bytes32,address)": "78707cb8",
							"setConfig(address,address,bytes32,uint256)": "f79a8e63",
							"updateContracts(address,address,address[],address)": "427942a4"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_GOV_ARRAYS_NOT_SAME_LENGTH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_GOV_MUST_BE_CONTRACT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperToken[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"batchUpdateSuperTokenLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"clearConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfigAsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfigAsUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"}],\"name\":\"registerAgreementClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"replaceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hostNewLogic\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"agreementClassNewLogics\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"superTokenFactoryNewLogic\",\"type\":\"address\"}],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{\"batchUpdateSuperTokenLogic(address,address[])\":{\"details\":\"Update supertoken logic contract to the latest that is managed by the super token factory\"},\"clearConfig(address,address,bytes32)\":{\"details\":\"Clear configuration\"},\"getConfigAsAddress(address,address,bytes32)\":{\"details\":\"Get configuration as address value\"},\"getConfigAsUint256(address,address,bytes32)\":{\"details\":\"Get configuration as uint256 value\"},\"registerAgreementClass(address,address)\":{\"details\":\"Register a new agreement class\"},\"replaceGovernance(address,address)\":{\"details\":\"Replace the current governance with a new governance\"},\"setConfig(address,address,bytes32,address)\":{\"details\":\"Set configuration as address value\"},\"setConfig(address,address,bytes32,uint256)\":{\"details\":\"Set configuration as uint256 value\"},\"updateContracts(address,address,address[],address)\":{\"custom:note\":\" - Because they might have inter-dependencies, it is good to have one single function to update them all\",\"details\":\"Update logics of the contracts\"}},\"title\":\"Superfluid governance interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":\"ISuperfluidGovernance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ISuperfluidToken": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "rewardAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidatedBy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "rewardAmountReceiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								}
							],
							"name": "AgreementLiquidatedV2",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								}
							],
							"name": "AgreementStateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "AgreementTerminated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "bailoutAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "Bailout",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "createAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountActiveAgreements",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "activeAgreements",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementData",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementStateSlot",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountCritical",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountCriticalNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountSolvent",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountSolventNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "useDefaultRewardAccount",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								}
							],
							"name": "makeLiquidationPayoutsV2",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "realtimeBalanceOfNow",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "settleBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "terminateAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementStateSlot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementCreated(address,bytes32,bytes32[])": {
								"details": "Agreement created event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"AgreementLiquidated(address,bytes32,address,address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAccount": "Account that collect the reward",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"custom:note": " Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"bailoutAmount": "Amount of liquidation bailouot",
									"bondAccount": "Account that collect the reward or bailout accounts",
									"id": "Agreement ID",
									"liquidatorAccount": "Account of the agent that performed the liquidation.",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": {
								"custom:note": " Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount",
								"details": "Agreement liquidation event v2 (including agent account)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"liquidationTypeData": "The encoded liquidation type data including the version (how to decode)",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the reward recipient account balance should change by",
									"rewardAmountReceiver": "Account that collects the reward or bails out insolvent accounts",
									"targetAccount": "Account of the stream sender",
									"targetAccountBalanceDelta": "The amount the sender account balance should change by"
								}
							},
							"AgreementStateUpdated(address,address,uint256)": {
								"details": "Agreement account state updated event",
								"params": {
									"account": "Account updated",
									"agreementClass": "Contract address of the agreement",
									"slotId": "slot id of the agreement state"
								}
							},
							"AgreementTerminated(address,bytes32)": {
								"details": "Agreement terminated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								}
							},
							"AgreementUpdated(address,bytes32,bytes32[])": {
								"details": "Agreement updated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"Bailout(address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"bailoutAccount": "Account that bailout the penalty account",
									"bailoutAmount": "Amount of account bailout"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createAgreement(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"getAccountActiveAgreements(address)": {
								"details": "An active agreement is one that has state for the account",
								"params": {
									"account": "Account to query"
								},
								"returns": {
									"activeAgreements": "List of accounts that have non-zero states for the account"
								}
							},
							"getAgreementData(address,bytes32,uint256)": {
								"details": "Get data of the agreement",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								},
								"returns": {
									"data": "Data of the agreement"
								}
							},
							"getAgreementStateSlot(address,address,uint256,uint256)": {
								"details": "Get data of the slot of the state of an agreement",
								"params": {
									"account": "Account to query",
									"agreementClass": "Contract address of the agreement",
									"dataLength": "length of the state data",
									"slotId": "slot id of the state"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"isAccountCritical(address,uint256)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is critical (should use future)"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountCriticalNow(address)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountSolvent(address,uint256)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is solvent (should use future)"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isAccountSolventNow(address)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"custom:note": " - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount",
								"details": "Make liquidation payouts (v2)",
								"params": {
									"id": "Agreement ID",
									"liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the rewarded account will receive",
									"targetAccount": "Account to be liquidated",
									"targetAccountBalanceDelta": "The delta amount the target account balance should change by",
									"useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
								}
							},
							"realtimeBalanceOf(address,uint256)": {
								"details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
								"params": {
									"account": "for the query",
									"timestamp": "Time of balance"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"realtimeBalanceOfNow(address)": {
								"details": "realtimeBalanceOf with timestamp equals to block timestamp",
								"params": {
									"account": "for the query"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"settleBalance(address,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"details": "The agreement needs to make sure that the balance delta is balanced afterwards",
								"params": {
									"account": "Account to query.",
									"delta": "Amount of balance delta to be settled"
								}
							},
							"terminateAgreement(bytes32,uint256)": {
								"details": "Close the agreement",
								"params": {
									"id": "Agreement ID"
								}
							},
							"updateAgreementData(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"updateAgreementStateSlot(address,uint256,bytes32[])": {
								"custom:note": " - To clear the storage out, provide zero-ed array of intended length",
								"details": "Update agreement state slot",
								"params": {
									"account": "Account to be updated"
								}
							}
						},
						"title": "Superfluid token interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAgreement(bytes32,bytes32[])": "12a6a3f8",
							"getAccountActiveAgreements(address)": "386fa221",
							"getAgreementData(address,bytes32,uint256)": "6c2d9f2f",
							"getAgreementStateSlot(address,address,uint256,uint256)": "4b61cc33",
							"getHost()": "20bc4425",
							"isAccountCritical(address,uint256)": "d9d078d6",
							"isAccountCriticalNow(address)": "79359f6f",
							"isAccountSolvent(address,uint256)": "b84cdd4a",
							"isAccountSolventNow(address)": "bb0d196e",
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": "1863e809",
							"realtimeBalanceOf(address,uint256)": "eb3537cc",
							"realtimeBalanceOfNow(address)": "2ec8eec7",
							"settleBalance(address,int256)": "cf97256d",
							"terminateAgreement(bytes32,uint256)": "27048397",
							"updateAgreementData(bytes32,bytes32[])": "a1b2bf8b",
							"updateAgreementStateSlot(address,uint256,bytes32[])": "090c415e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_BURN_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_MOVE_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"}],\"name\":\"AgreementLiquidatedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bailoutAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"Bailout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"activeAgreements\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountCriticalNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountSolventNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDefaultRewardAccount\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"}],\"name\":\"makeLiquidationPayoutsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementCreated(address,bytes32,bytes32[])\":{\"details\":\"Agreement created event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"AgreementLiquidated(address,bytes32,address,address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAccount\":\"Account that collect the reward\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"custom:note\":\" Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"bailoutAmount\":\"Amount of liquidation bailouot\",\"bondAccount\":\"Account that collect the reward or bailout accounts\",\"id\":\"Agreement ID\",\"liquidatorAccount\":\"Account of the agent that performed the liquidation.\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)\":{\"custom:note\":\" Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount\",\"details\":\"Agreement liquidation event v2 (including agent account)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"liquidationTypeData\":\"The encoded liquidation type data including the version (how to decode)\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the reward recipient account balance should change by\",\"rewardAmountReceiver\":\"Account that collects the reward or bails out insolvent accounts\",\"targetAccount\":\"Account of the stream sender\",\"targetAccountBalanceDelta\":\"The amount the sender account balance should change by\"}},\"AgreementStateUpdated(address,address,uint256)\":{\"details\":\"Agreement account state updated event\",\"params\":{\"account\":\"Account updated\",\"agreementClass\":\"Contract address of the agreement\",\"slotId\":\"slot id of the agreement state\"}},\"AgreementTerminated(address,bytes32)\":{\"details\":\"Agreement terminated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"}},\"AgreementUpdated(address,bytes32,bytes32[])\":{\"details\":\"Agreement updated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"Bailout(address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"bailoutAccount\":\"Account that bailout the penalty account\",\"bailoutAmount\":\"Amount of account bailout\"}}},\"kind\":\"dev\",\"methods\":{\"createAgreement(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"getAccountActiveAgreements(address)\":{\"details\":\"An active agreement is one that has state for the account\",\"params\":{\"account\":\"Account to query\"},\"returns\":{\"activeAgreements\":\"List of accounts that have non-zero states for the account\"}},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"Get data of the agreement\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"},\"returns\":{\"data\":\"Data of the agreement\"}},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"Get data of the slot of the state of an agreement\",\"params\":{\"account\":\"Account to query\",\"agreementClass\":\"Contract address of the agreement\",\"dataLength\":\"length of the state data\",\"slotId\":\"slot id of the state\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"isAccountCritical(address,uint256)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is critical (should use future)\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountCriticalNow(address)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountSolvent(address,uint256)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is solvent (should use future)\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isAccountSolventNow(address)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"custom:note\":\" - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount\",\"details\":\"Make liquidation payouts (v2)\",\"params\":{\"id\":\"Agreement ID\",\"liquidationTypeData\":\"Data regarding the version of the liquidation schema and the type\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the rewarded account will receive\",\"targetAccount\":\"Account to be liquidated\",\"targetAccountBalanceDelta\":\"The delta amount the target account balance should change by\",\"useDefaultRewardAccount\":\"Whether or not the default reward account receives the rewardAmount\"}},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"Calculate the real balance of a user, taking in consideration all agreements of the account\",\"params\":{\"account\":\"for the query\",\"timestamp\":\"Time of balance\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block timestamp\",\"params\":{\"account\":\"for the query\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"settleBalance(address,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"details\":\"The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"Close the agreement\",\"params\":{\"id\":\"Agreement ID\"}},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"custom:note\":\" - To clear the storage out, provide zero-ed array of intended length\",\"details\":\"Update agreement state slot\",\"params\":{\"account\":\"Account to be updated\"}}},\"title\":\"Superfluid token interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAccountActiveAgreements(address)\":{\"notice\":\"Get a list of agreements that is active for the account\"},\"isAccountCritical(address,uint256)\":{\"notice\":\"Check if account is critical\"},\"isAccountCriticalNow(address)\":{\"notice\":\"Check if account is critical now (current host.getNow())\"},\"isAccountSolvent(address,uint256)\":{\"notice\":\"Check if account is solvent\"},\"isAccountSolventNow(address)\":{\"notice\":\"Check if account is solvent now\"},\"realtimeBalanceOfNow(address)\":{\"notice\":\"Calculate the realtime balance given the current host.getNow() value\"},\"settleBalance(address,int256)\":{\"notice\":\"Settle balance from an account by the agreement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":\"ISuperfluidToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getAccountActiveAgreements(address)": {
								"notice": "Get a list of agreements that is active for the account"
							},
							"isAccountCritical(address,uint256)": {
								"notice": "Check if account is critical"
							},
							"isAccountCriticalNow(address)": {
								"notice": "Check if account is critical now (current host.getNow())"
							},
							"isAccountSolvent(address,uint256)": {
								"notice": "Check if account is solvent"
							},
							"isAccountSolventNow(address)": {
								"notice": "Check if account is solvent now"
							},
							"realtimeBalanceOfNow(address)": {
								"notice": "Calculate the realtime balance given the current host.getNow() value"
							},
							"settleBalance(address,int256)": {
								"notice": "Settle balance from an account by the agreement"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
				"ERC20WithTokenInfo": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"details": "Using abstract contract instead of interfaces because old solidity      does not support interface inheriting other interfaces solhint-disable-next-line no-empty-blocks",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"title": "ERC20 token with token info interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"Using abstract contract instead of interfaces because old solidity      does not support interface inheriting other interfaces solhint-disable-next-line no-empty-blocks\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"ERC20 token with token info interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":\"ERC20WithTokenInfo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
				"TokenInfo": {
					"abi": [
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"details": "ERC20 standard interface does not specify these functions, but      often the token implementations have them.",
						"kind": "dev",
						"methods": {
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							}
						},
						"title": "ERC20 token info interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"ERC20 standard interface does not specify these functions, but      often the token implementations have them.\",\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"}},\"title\":\"ERC20 token info interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":\"TokenInfo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"premiere/IRegistry.sol": {
				"IRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "AccountCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenContract",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "account",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenContract",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "createAccount",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"account(address,uint256)": "192df655",
							"createAccount(address,uint256)": "5fbfb9cf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"premiere/IRegistry.sol\":\"IRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"premiere/IRegistry.sol\":{\"keccak256\":\"0x943209b5f4797b7dadf290f4bd6f985622f1ebf8066babce3d33f6f34477d089\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://c2694ee4c4a62c87a7ee88550b22bd341d3cabbea606f474403667a158ce57f6\",\"dweb:/ipfs/QmQu2XCSxau6LF4MsukgwrjV5PgSC1CnNGYDiZAEHhKesJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"premiere/Premiere_v2.sol": {
				"Premiere": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"premiere/Premiere_v2.sol\":914:2896  contract Premiere {... */\n  mstore(0x40, 0x80)\n    /* \"premiere/Premiere_v2.sol\":971:1013  0x60Ae865ee4C725cd04353b5AAb364553f56ceF82 */\n  0x60ae865ee4c725cd04353b5aab364553f56cef82\n    /* \"premiere/Premiere_v2.sol\":938:1013  address private lensHubAddress = 0x60Ae865ee4C725cd04353b5AAb364553f56ceF82 */\n  0x00\n  dup1\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere_v2.sol\":1092:1134  0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873 */\n  0x49e565ed1bdc17f3d220f72df0857c26fa83f873\n    /* \"premiere/Premiere_v2.sol\":1020:1135  IConstantFlowAgreementV1 private cfa =... */\n  0x01\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere_v2.sol\":1204:1246  0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f */\n  0x5d8b4c2554aeb7e86f387b4d6c00ac33499ed01f\n    /* \"premiere/Premiere_v2.sol\":1141:1247  ISuperfluidToken private superToken =... */\n  0x02\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere_v2.sol\":1287:1301  lensHubAddress */\n  0x00\n  dup1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"premiere/Premiere_v2.sol\":1253:1302  IERC721 private lensHub = IERC721(lensHubAddress) */\n  0x03\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere_v2.sol\":1358:1400  0x02101dfB77FDE026414827Fdc604ddAF224F0921 */\n  0x02101dfb77fde026414827fdc604ddaf224f0921\n    /* \"premiere/Premiere_v2.sol\":1308:1401  IRegistry private tbaRegistry =... */\n  0x04\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere_v2.sol\":1427:1439  761035007610 */\n  0xb13138a67a\n    /* \"premiere/Premiere_v2.sol\":1407:1439  int96 minFlowRate = 761035007610 */\n  0x04\n  exp(0x0100, 0x14)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0x0b\n  signextend\n  0xffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere_v2.sol\":914:2896  contract Premiere {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"premiere/Premiere_v2.sol\":914:2896  contract Premiere {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xfdd58e\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"premiere/Premiere_v2.sol\":1446:1878  function balanceOf(... */\n    tag_3:\n      tag_4\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_5\n      swap2\n      swap1\n      tag_6\n      jump\t// in\n    tag_5:\n      tag_7\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_8\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_7:\n        /* \"premiere/Premiere_v2.sol\":1539:1546  uint256 */\n      0x00\n        /* \"premiere/Premiere_v2.sol\":1558:1569  address tba */\n      dup1\n        /* \"premiere/Premiere_v2.sol\":1582:1593  tbaRegistry */\n      0x04\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere_v2.sol\":1572:1602  IRegistry(tbaRegistry).account */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x192df655\n        /* \"premiere/Premiere_v2.sol\":1603:1617  lensHubAddress */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere_v2.sol\":1619:1622  _id */\n      dup6\n        /* \"premiere/Premiere_v2.sol\":1572:1623  IRegistry(tbaRegistry).account(lensHubAddress, _id) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_11\n      swap3\n      swap2\n      swap1\n      tag_12\n      jump\t// in\n    tag_11:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_14\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_14:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n        /* \"premiere/Premiere_v2.sol\":1558:1623  address tba = IRegistry(tbaRegistry).account(lensHubAddress, _id) */\n      swap1\n      pop\n        /* \"premiere/Premiere_v2.sol\":1637:1651  int96 flowRate */\n      0x00\n        /* \"premiere/Premiere_v2.sol\":1659:1662  cfa */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere_v2.sol\":1659:1670  cfa.getFlow */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xe6a1e888\n        /* \"premiere/Premiere_v2.sol\":1671:1681  superToken */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere_v2.sol\":1683:1689  _owner */\n      dup8\n        /* \"premiere/Premiere_v2.sol\":1691:1694  tba */\n      dup6\n        /* \"premiere/Premiere_v2.sol\":1659:1695  cfa.getFlow(superToken, _owner, tba) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_17\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      0x80\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_20\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_20:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_21\n      swap2\n      swap1\n      tag_22\n      jump\t// in\n    tag_21:\n        /* \"premiere/Premiere_v2.sol\":1634:1695  (, int96 flowRate, , ) = cfa.getFlow(superToken, _owner, tba) */\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"premiere/Premiere_v2.sol\":1705:1718  address owner */\n      0x00\n        /* \"premiere/Premiere_v2.sol\":1721:1728  lensHub */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere_v2.sol\":1721:1736  lensHub.ownerOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x6352211e\n        /* \"premiere/Premiere_v2.sol\":1737:1740  _id */\n      dup7\n        /* \"premiere/Premiere_v2.sol\":1721:1741  lensHub.ownerOf(_id) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_23\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_23:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_25\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_25:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_26\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_26:\n        /* \"premiere/Premiere_v2.sol\":1705:1741  address owner = lensHub.ownerOf(_id) */\n      swap1\n      pop\n        /* \"premiere/Premiere_v2.sol\":1768:1779  minFlowRate */\n      0x04\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0x0b\n      signextend\n        /* \"premiere/Premiere_v2.sol\":1756:1779  flowRate >= minFlowRate */\n      0x0b\n      signextend\n        /* \"premiere/Premiere_v2.sol\":1756:1764  flowRate */\n      dup3\n        /* \"premiere/Premiere_v2.sol\":1756:1779  flowRate >= minFlowRate */\n      0x0b\n      signextend\n      slt\n      iszero\n        /* \"premiere/Premiere_v2.sol\":1756:1798  flowRate >= minFlowRate || _owner == owner */\n      dup1\n      tag_27\n      jumpi\n      pop\n        /* \"premiere/Premiere_v2.sol\":1793:1798  owner */\n      dup1\n        /* \"premiere/Premiere_v2.sol\":1783:1798  _owner == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere_v2.sol\":1783:1789  _owner */\n      dup7\n        /* \"premiere/Premiere_v2.sol\":1783:1798  _owner == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"premiere/Premiere_v2.sol\":1756:1798  flowRate >= minFlowRate || _owner == owner */\n    tag_27:\n        /* \"premiere/Premiere_v2.sol\":1752:1872  if (flowRate >= minFlowRate || _owner == owner) {... */\n      iszero\n      tag_28\n      jumpi\n        /* \"premiere/Premiere_v2.sol\":1821:1822  1 */\n      0x01\n        /* \"premiere/Premiere_v2.sol\":1814:1822  return 1 */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump(tag_10)\n        /* \"premiere/Premiere_v2.sol\":1752:1872  if (flowRate >= minFlowRate || _owner == owner) {... */\n    tag_28:\n        /* \"premiere/Premiere_v2.sol\":1860:1861  0 */\n      0x00\n        /* \"premiere/Premiere_v2.sol\":1853:1861  return 0 */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"premiere/Premiere_v2.sol\":1446:1878  function balanceOf(... */\n    tag_10:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_31:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_33:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_34:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_58\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_33\n      jump\t// in\n    tag_58:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_35:\n        /* \"#utility.yul\":641:665   */\n      tag_60\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_34\n      jump\t// in\n    tag_60:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_61\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_61:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_36:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_63\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_35\n      jump\t// in\n    tag_63:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:918   */\n    tag_37:\n        /* \"#utility.yul\":878:885   */\n      0x00\n        /* \"#utility.yul\":907:912   */\n      dup2\n        /* \"#utility.yul\":896:912   */\n      swap1\n      pop\n        /* \"#utility.yul\":841:918   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":924:1046   */\n    tag_38:\n        /* \"#utility.yul\":997:1021   */\n      tag_66\n        /* \"#utility.yul\":1015:1020   */\n      dup2\n        /* \"#utility.yul\":997:1021   */\n      tag_37\n      jump\t// in\n    tag_66:\n        /* \"#utility.yul\":990:995   */\n      dup2\n        /* \"#utility.yul\":987:1022   */\n      eq\n        /* \"#utility.yul\":977:1040   */\n      tag_67\n      jumpi\n        /* \"#utility.yul\":1036:1037   */\n      0x00\n        /* \"#utility.yul\":1033:1034   */\n      dup1\n        /* \"#utility.yul\":1026:1038   */\n      revert\n        /* \"#utility.yul\":977:1040   */\n    tag_67:\n        /* \"#utility.yul\":924:1046   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1052:1191   */\n    tag_39:\n        /* \"#utility.yul\":1098:1103   */\n      0x00\n        /* \"#utility.yul\":1136:1142   */\n      dup2\n        /* \"#utility.yul\":1123:1143   */\n      calldataload\n        /* \"#utility.yul\":1114:1143   */\n      swap1\n      pop\n        /* \"#utility.yul\":1152:1185   */\n      tag_69\n        /* \"#utility.yul\":1179:1184   */\n      dup2\n        /* \"#utility.yul\":1152:1185   */\n      tag_38\n      jump\t// in\n    tag_69:\n        /* \"#utility.yul\":1052:1191   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1197:1671   */\n    tag_6:\n        /* \"#utility.yul\":1265:1271   */\n      0x00\n        /* \"#utility.yul\":1273:1279   */\n      dup1\n        /* \"#utility.yul\":1322:1324   */\n      0x40\n        /* \"#utility.yul\":1310:1319   */\n      dup4\n        /* \"#utility.yul\":1301:1308   */\n      dup6\n        /* \"#utility.yul\":1297:1320   */\n      sub\n        /* \"#utility.yul\":1293:1325   */\n      slt\n        /* \"#utility.yul\":1290:1409   */\n      iszero\n      tag_71\n      jumpi\n        /* \"#utility.yul\":1328:1407   */\n      tag_72\n      tag_31\n      jump\t// in\n    tag_72:\n        /* \"#utility.yul\":1290:1409   */\n    tag_71:\n        /* \"#utility.yul\":1448:1449   */\n      0x00\n        /* \"#utility.yul\":1473:1526   */\n      tag_73\n        /* \"#utility.yul\":1518:1525   */\n      dup6\n        /* \"#utility.yul\":1509:1515   */\n      dup3\n        /* \"#utility.yul\":1498:1507   */\n      dup7\n        /* \"#utility.yul\":1494:1516   */\n      add\n        /* \"#utility.yul\":1473:1526   */\n      tag_36\n      jump\t// in\n    tag_73:\n        /* \"#utility.yul\":1463:1526   */\n      swap3\n      pop\n        /* \"#utility.yul\":1419:1536   */\n      pop\n        /* \"#utility.yul\":1575:1577   */\n      0x20\n        /* \"#utility.yul\":1601:1654   */\n      tag_74\n        /* \"#utility.yul\":1646:1653   */\n      dup6\n        /* \"#utility.yul\":1637:1643   */\n      dup3\n        /* \"#utility.yul\":1626:1635   */\n      dup7\n        /* \"#utility.yul\":1622:1644   */\n      add\n        /* \"#utility.yul\":1601:1654   */\n      tag_39\n      jump\t// in\n    tag_74:\n        /* \"#utility.yul\":1591:1654   */\n      swap2\n      pop\n        /* \"#utility.yul\":1546:1664   */\n      pop\n        /* \"#utility.yul\":1197:1671   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1677:1795   */\n    tag_40:\n        /* \"#utility.yul\":1764:1788   */\n      tag_76\n        /* \"#utility.yul\":1782:1787   */\n      dup2\n        /* \"#utility.yul\":1764:1788   */\n      tag_37\n      jump\t// in\n    tag_76:\n        /* \"#utility.yul\":1759:1762   */\n      dup3\n        /* \"#utility.yul\":1752:1789   */\n      mstore\n        /* \"#utility.yul\":1677:1795   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1801:2023   */\n    tag_9:\n        /* \"#utility.yul\":1894:1898   */\n      0x00\n        /* \"#utility.yul\":1932:1934   */\n      0x20\n        /* \"#utility.yul\":1921:1930   */\n      dup3\n        /* \"#utility.yul\":1917:1935   */\n      add\n        /* \"#utility.yul\":1909:1935   */\n      swap1\n      pop\n        /* \"#utility.yul\":1945:2016   */\n      tag_78\n        /* \"#utility.yul\":2013:2014   */\n      0x00\n        /* \"#utility.yul\":2002:2011   */\n      dup4\n        /* \"#utility.yul\":1998:2015   */\n      add\n        /* \"#utility.yul\":1989:1995   */\n      dup5\n        /* \"#utility.yul\":1945:2016   */\n      tag_40\n      jump\t// in\n    tag_78:\n        /* \"#utility.yul\":1801:2023   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2029:2147   */\n    tag_41:\n        /* \"#utility.yul\":2116:2140   */\n      tag_80\n        /* \"#utility.yul\":2134:2139   */\n      dup2\n        /* \"#utility.yul\":2116:2140   */\n      tag_34\n      jump\t// in\n    tag_80:\n        /* \"#utility.yul\":2111:2114   */\n      dup3\n        /* \"#utility.yul\":2104:2141   */\n      mstore\n        /* \"#utility.yul\":2029:2147   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2153:2485   */\n    tag_12:\n        /* \"#utility.yul\":2274:2278   */\n      0x00\n        /* \"#utility.yul\":2312:2314   */\n      0x40\n        /* \"#utility.yul\":2301:2310   */\n      dup3\n        /* \"#utility.yul\":2297:2315   */\n      add\n        /* \"#utility.yul\":2289:2315   */\n      swap1\n      pop\n        /* \"#utility.yul\":2325:2396   */\n      tag_82\n        /* \"#utility.yul\":2393:2394   */\n      0x00\n        /* \"#utility.yul\":2382:2391   */\n      dup4\n        /* \"#utility.yul\":2378:2395   */\n      add\n        /* \"#utility.yul\":2369:2375   */\n      dup6\n        /* \"#utility.yul\":2325:2396   */\n      tag_41\n      jump\t// in\n    tag_82:\n        /* \"#utility.yul\":2406:2478   */\n      tag_83\n        /* \"#utility.yul\":2474:2476   */\n      0x20\n        /* \"#utility.yul\":2463:2472   */\n      dup4\n        /* \"#utility.yul\":2459:2477   */\n      add\n        /* \"#utility.yul\":2450:2456   */\n      dup5\n        /* \"#utility.yul\":2406:2478   */\n      tag_40\n      jump\t// in\n    tag_83:\n        /* \"#utility.yul\":2153:2485   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2491:2634   */\n    tag_42:\n        /* \"#utility.yul\":2548:2553   */\n      0x00\n        /* \"#utility.yul\":2579:2585   */\n      dup2\n        /* \"#utility.yul\":2573:2586   */\n      mload\n        /* \"#utility.yul\":2564:2586   */\n      swap1\n      pop\n        /* \"#utility.yul\":2595:2628   */\n      tag_85\n        /* \"#utility.yul\":2622:2627   */\n      dup2\n        /* \"#utility.yul\":2595:2628   */\n      tag_35\n      jump\t// in\n    tag_85:\n        /* \"#utility.yul\":2491:2634   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2640:2991   */\n    tag_16:\n        /* \"#utility.yul\":2710:2716   */\n      0x00\n        /* \"#utility.yul\":2759:2761   */\n      0x20\n        /* \"#utility.yul\":2747:2756   */\n      dup3\n        /* \"#utility.yul\":2738:2745   */\n      dup5\n        /* \"#utility.yul\":2734:2757   */\n      sub\n        /* \"#utility.yul\":2730:2762   */\n      slt\n        /* \"#utility.yul\":2727:2846   */\n      iszero\n      tag_87\n      jumpi\n        /* \"#utility.yul\":2765:2844   */\n      tag_88\n      tag_31\n      jump\t// in\n    tag_88:\n        /* \"#utility.yul\":2727:2846   */\n    tag_87:\n        /* \"#utility.yul\":2885:2886   */\n      0x00\n        /* \"#utility.yul\":2910:2974   */\n      tag_89\n        /* \"#utility.yul\":2966:2973   */\n      dup5\n        /* \"#utility.yul\":2957:2963   */\n      dup3\n        /* \"#utility.yul\":2946:2955   */\n      dup6\n        /* \"#utility.yul\":2942:2964   */\n      add\n        /* \"#utility.yul\":2910:2974   */\n      tag_42\n      jump\t// in\n    tag_89:\n        /* \"#utility.yul\":2900:2974   */\n      swap2\n      pop\n        /* \"#utility.yul\":2856:2984   */\n      pop\n        /* \"#utility.yul\":2640:2991   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2997:3057   */\n    tag_43:\n        /* \"#utility.yul\":3025:3028   */\n      0x00\n        /* \"#utility.yul\":3046:3051   */\n      dup2\n        /* \"#utility.yul\":3039:3051   */\n      swap1\n      pop\n        /* \"#utility.yul\":2997:3057   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3063:3205   */\n    tag_44:\n        /* \"#utility.yul\":3113:3122   */\n      0x00\n        /* \"#utility.yul\":3146:3199   */\n      tag_92\n        /* \"#utility.yul\":3164:3198   */\n      tag_93\n        /* \"#utility.yul\":3173:3197   */\n      tag_94\n        /* \"#utility.yul\":3191:3196   */\n      dup5\n        /* \"#utility.yul\":3173:3197   */\n      tag_33\n      jump\t// in\n    tag_94:\n        /* \"#utility.yul\":3164:3198   */\n      tag_43\n      jump\t// in\n    tag_93:\n        /* \"#utility.yul\":3146:3199   */\n      tag_33\n      jump\t// in\n    tag_92:\n        /* \"#utility.yul\":3133:3199   */\n      swap1\n      pop\n        /* \"#utility.yul\":3063:3205   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3211:3337   */\n    tag_45:\n        /* \"#utility.yul\":3261:3270   */\n      0x00\n        /* \"#utility.yul\":3294:3331   */\n      tag_96\n        /* \"#utility.yul\":3325:3330   */\n      dup3\n        /* \"#utility.yul\":3294:3331   */\n      tag_44\n      jump\t// in\n    tag_96:\n        /* \"#utility.yul\":3281:3331   */\n      swap1\n      pop\n        /* \"#utility.yul\":3211:3337   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3343:3494   */\n    tag_46:\n        /* \"#utility.yul\":3418:3427   */\n      0x00\n        /* \"#utility.yul\":3451:3488   */\n      tag_98\n        /* \"#utility.yul\":3482:3487   */\n      dup3\n        /* \"#utility.yul\":3451:3488   */\n      tag_45\n      jump\t// in\n    tag_98:\n        /* \"#utility.yul\":3438:3488   */\n      swap1\n      pop\n        /* \"#utility.yul\":3343:3494   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3500:3681   */\n    tag_47:\n        /* \"#utility.yul\":3612:3674   */\n      tag_100\n        /* \"#utility.yul\":3668:3673   */\n      dup2\n        /* \"#utility.yul\":3612:3674   */\n      tag_46\n      jump\t// in\n    tag_100:\n        /* \"#utility.yul\":3607:3610   */\n      dup3\n        /* \"#utility.yul\":3600:3675   */\n      mstore\n        /* \"#utility.yul\":3500:3681   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3687:4179   */\n    tag_18:\n        /* \"#utility.yul\":3861:3865   */\n      0x00\n        /* \"#utility.yul\":3899:3901   */\n      0x60\n        /* \"#utility.yul\":3888:3897   */\n      dup3\n        /* \"#utility.yul\":3884:3902   */\n      add\n        /* \"#utility.yul\":3876:3902   */\n      swap1\n      pop\n        /* \"#utility.yul\":3912:4008   */\n      tag_102\n        /* \"#utility.yul\":4005:4006   */\n      0x00\n        /* \"#utility.yul\":3994:4003   */\n      dup4\n        /* \"#utility.yul\":3990:4007   */\n      add\n        /* \"#utility.yul\":3981:3987   */\n      dup7\n        /* \"#utility.yul\":3912:4008   */\n      tag_47\n      jump\t// in\n    tag_102:\n        /* \"#utility.yul\":4018:4090   */\n      tag_103\n        /* \"#utility.yul\":4086:4088   */\n      0x20\n        /* \"#utility.yul\":4075:4084   */\n      dup4\n        /* \"#utility.yul\":4071:4089   */\n      add\n        /* \"#utility.yul\":4062:4068   */\n      dup6\n        /* \"#utility.yul\":4018:4090   */\n      tag_41\n      jump\t// in\n    tag_103:\n        /* \"#utility.yul\":4100:4172   */\n      tag_104\n        /* \"#utility.yul\":4168:4170   */\n      0x40\n        /* \"#utility.yul\":4157:4166   */\n      dup4\n        /* \"#utility.yul\":4153:4171   */\n      add\n        /* \"#utility.yul\":4144:4150   */\n      dup5\n        /* \"#utility.yul\":4100:4172   */\n      tag_41\n      jump\t// in\n    tag_104:\n        /* \"#utility.yul\":3687:4179   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4185:4328   */\n    tag_48:\n        /* \"#utility.yul\":4242:4247   */\n      0x00\n        /* \"#utility.yul\":4273:4279   */\n      dup2\n        /* \"#utility.yul\":4267:4280   */\n      mload\n        /* \"#utility.yul\":4258:4280   */\n      swap1\n      pop\n        /* \"#utility.yul\":4289:4322   */\n      tag_106\n        /* \"#utility.yul\":4316:4321   */\n      dup2\n        /* \"#utility.yul\":4289:4322   */\n      tag_38\n      jump\t// in\n    tag_106:\n        /* \"#utility.yul\":4185:4328   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4334:4425   */\n    tag_49:\n        /* \"#utility.yul\":4369:4376   */\n      0x00\n        /* \"#utility.yul\":4413:4418   */\n      dup2\n        /* \"#utility.yul\":4409:4411   */\n      0x0b\n        /* \"#utility.yul\":4398:4419   */\n      signextend\n        /* \"#utility.yul\":4387:4419   */\n      swap1\n      pop\n        /* \"#utility.yul\":4334:4425   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4431:4549   */\n    tag_50:\n        /* \"#utility.yul\":4502:4524   */\n      tag_109\n        /* \"#utility.yul\":4518:4523   */\n      dup2\n        /* \"#utility.yul\":4502:4524   */\n      tag_49\n      jump\t// in\n    tag_109:\n        /* \"#utility.yul\":4495:4500   */\n      dup2\n        /* \"#utility.yul\":4492:4525   */\n      eq\n        /* \"#utility.yul\":4482:4543   */\n      tag_110\n      jumpi\n        /* \"#utility.yul\":4539:4540   */\n      0x00\n        /* \"#utility.yul\":4536:4537   */\n      dup1\n        /* \"#utility.yul\":4529:4541   */\n      revert\n        /* \"#utility.yul\":4482:4543   */\n    tag_110:\n        /* \"#utility.yul\":4431:4549   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4555:4694   */\n    tag_51:\n        /* \"#utility.yul\":4610:4615   */\n      0x00\n        /* \"#utility.yul\":4641:4647   */\n      dup2\n        /* \"#utility.yul\":4635:4648   */\n      mload\n        /* \"#utility.yul\":4626:4648   */\n      swap1\n      pop\n        /* \"#utility.yul\":4657:4688   */\n      tag_112\n        /* \"#utility.yul\":4682:4687   */\n      dup2\n        /* \"#utility.yul\":4657:4688   */\n      tag_50\n      jump\t// in\n    tag_112:\n        /* \"#utility.yul\":4555:4694   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4700:5516   */\n    tag_22:\n        /* \"#utility.yul\":4795:4801   */\n      0x00\n        /* \"#utility.yul\":4803:4809   */\n      dup1\n        /* \"#utility.yul\":4811:4817   */\n      0x00\n        /* \"#utility.yul\":4819:4825   */\n      dup1\n        /* \"#utility.yul\":4868:4871   */\n      0x80\n        /* \"#utility.yul\":4856:4865   */\n      dup6\n        /* \"#utility.yul\":4847:4854   */\n      dup8\n        /* \"#utility.yul\":4843:4866   */\n      sub\n        /* \"#utility.yul\":4839:4872   */\n      slt\n        /* \"#utility.yul\":4836:4956   */\n      iszero\n      tag_114\n      jumpi\n        /* \"#utility.yul\":4875:4954   */\n      tag_115\n      tag_31\n      jump\t// in\n    tag_115:\n        /* \"#utility.yul\":4836:4956   */\n    tag_114:\n        /* \"#utility.yul\":4995:4996   */\n      0x00\n        /* \"#utility.yul\":5020:5084   */\n      tag_116\n        /* \"#utility.yul\":5076:5083   */\n      dup8\n        /* \"#utility.yul\":5067:5073   */\n      dup3\n        /* \"#utility.yul\":5056:5065   */\n      dup9\n        /* \"#utility.yul\":5052:5074   */\n      add\n        /* \"#utility.yul\":5020:5084   */\n      tag_48\n      jump\t// in\n    tag_116:\n        /* \"#utility.yul\":5010:5084   */\n      swap5\n      pop\n        /* \"#utility.yul\":4966:5094   */\n      pop\n        /* \"#utility.yul\":5133:5135   */\n      0x20\n        /* \"#utility.yul\":5159:5221   */\n      tag_117\n        /* \"#utility.yul\":5213:5220   */\n      dup8\n        /* \"#utility.yul\":5204:5210   */\n      dup3\n        /* \"#utility.yul\":5193:5202   */\n      dup9\n        /* \"#utility.yul\":5189:5211   */\n      add\n        /* \"#utility.yul\":5159:5221   */\n      tag_51\n      jump\t// in\n    tag_117:\n        /* \"#utility.yul\":5149:5221   */\n      swap4\n      pop\n        /* \"#utility.yul\":5104:5231   */\n      pop\n        /* \"#utility.yul\":5270:5272   */\n      0x40\n        /* \"#utility.yul\":5296:5360   */\n      tag_118\n        /* \"#utility.yul\":5352:5359   */\n      dup8\n        /* \"#utility.yul\":5343:5349   */\n      dup3\n        /* \"#utility.yul\":5332:5341   */\n      dup9\n        /* \"#utility.yul\":5328:5350   */\n      add\n        /* \"#utility.yul\":5296:5360   */\n      tag_48\n      jump\t// in\n    tag_118:\n        /* \"#utility.yul\":5286:5360   */\n      swap3\n      pop\n        /* \"#utility.yul\":5241:5370   */\n      pop\n        /* \"#utility.yul\":5409:5411   */\n      0x60\n        /* \"#utility.yul\":5435:5499   */\n      tag_119\n        /* \"#utility.yul\":5491:5498   */\n      dup8\n        /* \"#utility.yul\":5482:5488   */\n      dup3\n        /* \"#utility.yul\":5471:5480   */\n      dup9\n        /* \"#utility.yul\":5467:5489   */\n      add\n        /* \"#utility.yul\":5435:5499   */\n      tag_48\n      jump\t// in\n    tag_119:\n        /* \"#utility.yul\":5425:5499   */\n      swap2\n      pop\n        /* \"#utility.yul\":5380:5509   */\n      pop\n        /* \"#utility.yul\":4700:5516   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220515c716c7a89891cd046b4d48119e8a8efd946123d3c9a4ecfd135c394ccec0964736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60806040527360ae865ee4c725cd04353b5aab364553f56cef826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507349e565ed1bdc17f3d220f72df0857c26fa83f873600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735d8b4c2554aeb7e86f387b4d6c00ac33499ed01f600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507302101dfb77fde026414827fdc604ddaf224f0921600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555064b13138a67a600460146101000a8154816bffffffffffffffffffffffff0219169083600b0b6bffffffffffffffffffffffff1602179055503480156101fd57600080fd5b506105f78061020d6000396000f3fe608060405234801561001057600080fd5b506004361061002a5760003560e01c8062fdd58e1461002f575b600080fd5b61004960048036038101906100449190610392565b61005f565b60405161005691906103e1565b60405180910390f35b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663192df65560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b81526004016100df92919061040b565b602060405180830381865afa1580156100fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101209190610449565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a1e888600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687856040518463ffffffff1660e01b81526004016101a5939291906104d5565b608060405180830381865afa1580156101c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e6919061055a565b50509150506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040161024891906103e1565b602060405180830381865afa158015610265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102899190610449565b9050600460149054906101000a9004600b0b600b0b82600b0b1215806102da57508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b156102eb57600193505050506102f3565b600093505050505b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610329826102fe565b9050919050565b6103398161031e565b811461034457600080fd5b50565b60008135905061035681610330565b92915050565b6000819050919050565b61036f8161035c565b811461037a57600080fd5b50565b60008135905061038c81610366565b92915050565b600080604083850312156103a9576103a86102f9565b5b60006103b785828601610347565b92505060206103c88582860161037d565b9150509250929050565b6103db8161035c565b82525050565b60006020820190506103f660008301846103d2565b92915050565b6104058161031e565b82525050565b600060408201905061042060008301856103fc565b61042d60208301846103d2565b9392505050565b60008151905061044381610330565b92915050565b60006020828403121561045f5761045e6102f9565b5b600061046d84828501610434565b91505092915050565b6000819050919050565b600061049b610496610491846102fe565b610476565b6102fe565b9050919050565b60006104ad82610480565b9050919050565b60006104bf826104a2565b9050919050565b6104cf816104b4565b82525050565b60006060820190506104ea60008301866104c6565b6104f760208301856103fc565b61050460408301846103fc565b949350505050565b60008151905061051b81610366565b92915050565b600081600b0b9050919050565b61053781610521565b811461054257600080fd5b50565b6000815190506105548161052e565b92915050565b60008060008060808587031215610574576105736102f9565b5b60006105828782880161050c565b945050602061059387828801610545565b93505060406105a48782880161050c565b92505060606105b58782880161050c565b9150509295919450925056fea2646970667358221220515c716c7a89891cd046b4d48119e8a8efd946123d3c9a4ecfd135c394ccec0964736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0x60AE865EE4C725CD04353B5AAB364553F56CEF82 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0x49E565ED1BDC17F3D220F72DF0857C26FA83F873 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0x5D8B4C2554AEB7E86F387B4D6C00AC33499ED01F PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0x2101DFB77FDE026414827FDC604DDAF224F0921 PUSH1 0x4 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH5 0xB13138A67A PUSH1 0x4 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0xB SIGNEXTEND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F7 DUP1 PUSH2 0x20D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xFDD58E EQ PUSH2 0x2F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x49 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44 SWAP2 SWAP1 PUSH2 0x392 JUMP JUMPDEST PUSH2 0x5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x56 SWAP2 SWAP1 PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x192DF655 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDF SWAP3 SWAP2 SWAP1 PUSH2 0x40B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x120 SWAP2 SWAP1 PUSH2 0x449 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE6A1E888 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E6 SWAP2 SWAP1 PUSH2 0x55A JUMP JUMPDEST POP POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x265 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x289 SWAP2 SWAP1 PUSH2 0x449 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xB SIGNEXTEND PUSH1 0xB SIGNEXTEND DUP3 PUSH1 0xB SIGNEXTEND SLT ISZERO DUP1 PUSH2 0x2DA JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2EB JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x2F3 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x329 DUP3 PUSH2 0x2FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x339 DUP2 PUSH2 0x31E JUMP JUMPDEST DUP2 EQ PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x356 DUP2 PUSH2 0x330 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x36F DUP2 PUSH2 0x35C JUMP JUMPDEST DUP2 EQ PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x38C DUP2 PUSH2 0x366 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A9 JUMPI PUSH2 0x3A8 PUSH2 0x2F9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B7 DUP6 DUP3 DUP7 ADD PUSH2 0x347 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3C8 DUP6 DUP3 DUP7 ADD PUSH2 0x37D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3DB DUP2 PUSH2 0x35C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3F6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x405 DUP2 PUSH2 0x31E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x420 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x42D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3D2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x443 DUP2 PUSH2 0x330 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x45F JUMPI PUSH2 0x45E PUSH2 0x2F9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46D DUP5 DUP3 DUP6 ADD PUSH2 0x434 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49B PUSH2 0x496 PUSH2 0x491 DUP5 PUSH2 0x2FE JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST PUSH2 0x2FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AD DUP3 PUSH2 0x480 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BF DUP3 PUSH2 0x4A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4CF DUP2 PUSH2 0x4B4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x4EA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x4C6 JUMP JUMPDEST PUSH2 0x4F7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x504 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3FC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x51B DUP2 PUSH2 0x366 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xB SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x537 DUP2 PUSH2 0x521 JUMP JUMPDEST DUP2 EQ PUSH2 0x542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x554 DUP2 PUSH2 0x52E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x574 JUMPI PUSH2 0x573 PUSH2 0x2F9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x582 DUP8 DUP3 DUP9 ADD PUSH2 0x50C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x593 DUP8 DUP3 DUP9 ADD PUSH2 0x545 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x5A4 DUP8 DUP3 DUP9 ADD PUSH2 0x50C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x5B5 DUP8 DUP3 DUP9 ADD PUSH2 0x50C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0x5C PUSH18 0x6C7A89891CD046B4D48119E8A8EFD946123D EXTCODECOPY SWAP11 0x4E 0xCF 0xD1 CALLDATALOAD 0xC3 SWAP5 0xCC 0xEC MULMOD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "914:1982:22:-:0;;;971:42;938:75;;;;;;;;;;;;;;;;;;;;1092:42;1020:115;;;;;;;;;;;;;;;;;;;;1204:42;1141:106;;;;;;;;;;;;;;;;;;;;1287:14;;;;;;;;;;1253:49;;;;;;;;;;;;;;;;;;;;1358:42;1308:93;;;;;;;;;;;;;;;;;;;;1427:12;1407:32;;;;;;;;;;;;;;;;;;;;;;914:1982;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@balanceOf_3276": {
									"entryPoint": 95,
									"id": 3276,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 839,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 1076,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_int96_fromMemory": {
									"entryPoint": 1349,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 893,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 1292,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 1097,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 914,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_int96t_uint256t_uint256_fromMemory": {
									"entryPoint": 1370,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 1020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack": {
									"entryPoint": 1222,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 978,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 1035,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ISuperfluidToken_$3123_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed": {
									"entryPoint": 1237,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 993,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 798,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_int96": {
									"entryPoint": 1313,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 766,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 860,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_ISuperfluidToken_$3123_to_t_address": {
									"entryPoint": 1204,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 1186,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 1152,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 1142,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 761,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 816,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_int96": {
									"entryPoint": 1326,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 870,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5519:23",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:23",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:23"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:23"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:23",
														"type": ""
													}
												],
												"src": "7:75:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:23"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:23"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:23"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:23",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:23",
														"type": ""
													}
												],
												"src": "334:126:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:23",
														"type": ""
													}
												],
												"src": "466:96:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:23",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:23"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:23"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:23"
															},
															"nodeType": "YulIf",
															"src": "621:63:23"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:23",
														"type": ""
													}
												],
												"src": "568:122:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "748:87:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "758:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "767:20:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "796:33:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "796:33:23"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "726:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "734:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "742:5:23",
														"type": ""
													}
												],
												"src": "696:139:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "886:32:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "896:16:23",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "907:5:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "896:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "868:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "878:7:23",
														"type": ""
													}
												],
												"src": "841:77:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "967:79:23",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1024:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1033:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1036:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1026:6:23"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1026:12:23"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1026:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "990:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1015:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "997:17:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "997:24:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "987:2:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "987:35:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "980:6:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "980:43:23"
															},
															"nodeType": "YulIf",
															"src": "977:63:23"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "960:5:23",
														"type": ""
													}
												],
												"src": "924:122:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1104:87:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1114:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1136:6:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1123:12:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:20:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1114:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1179:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1152:26:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "1152:33:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1152:33:23"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1082:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1090:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1098:5:23",
														"type": ""
													}
												],
												"src": "1052:139:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1280:391:23",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1326:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1328:77:23"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1328:79:23"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1328:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1301:7:23"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1310:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1297:3:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1297:23:23"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1322:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1293:3:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "1293:32:23"
															},
															"nodeType": "YulIf",
															"src": "1290:119:23"
														},
														{
															"nodeType": "YulBlock",
															"src": "1419:117:23",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1434:15:23",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1448:1:23",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1438:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1463:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1498:9:23"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1509:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1494:3:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1494:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1518:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1473:20:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1473:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1463:6:23"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1546:118:23",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1561:16:23",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1575:2:23",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1565:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1591:63:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1626:9:23"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1637:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1622:3:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1622:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1646:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1601:20:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1601:53:23"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1591:6:23"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1242:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1253:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1265:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1273:6:23",
														"type": ""
													}
												],
												"src": "1197:474:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1742:53:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1759:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1782:5:23"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1764:17:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1764:24:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1752:6:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "1752:37:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1752:37:23"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1730:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1737:3:23",
														"type": ""
													}
												],
												"src": "1677:118:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1899:124:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1909:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1921:9:23"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1932:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1917:3:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "1917:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1909:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1989:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2002:9:23"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2013:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1998:3:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1998:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1945:43:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "1945:71:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1945:71:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1871:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1883:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1894:4:23",
														"type": ""
													}
												],
												"src": "1801:222:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2094:53:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2111:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2134:5:23"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2116:17:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2116:24:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2104:6:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "2104:37:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2104:37:23"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2082:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2089:3:23",
														"type": ""
													}
												],
												"src": "2029:118:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2279:206:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2289:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2301:9:23"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2312:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2297:3:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "2297:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2289:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2369:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2382:9:23"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2393:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2378:3:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2378:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2325:43:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "2325:71:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2325:71:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2450:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2463:9:23"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2474:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2459:3:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2459:18:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2406:43:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "2406:72:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2406:72:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2243:9:23",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2255:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2263:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2274:4:23",
														"type": ""
													}
												],
												"src": "2153:332:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2554:80:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2564:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2579:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2573:5:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "2573:13:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2564:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2622:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2595:26:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "2595:33:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2595:33:23"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2532:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2540:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2548:5:23",
														"type": ""
													}
												],
												"src": "2491:143:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2717:274:23",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2763:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2765:77:23"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2765:79:23"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2765:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2738:7:23"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2747:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2734:3:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2734:23:23"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2759:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2730:3:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "2730:32:23"
															},
															"nodeType": "YulIf",
															"src": "2727:119:23"
														},
														{
															"nodeType": "YulBlock",
															"src": "2856:128:23",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2871:15:23",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2885:1:23",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2875:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2900:74:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2946:9:23"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2957:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2942:3:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2942:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2966:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "2910:31:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2910:64:23"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2900:6:23"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2687:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2698:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2710:6:23",
														"type": ""
													}
												],
												"src": "2640:351:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3029:28:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3039:12:23",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3046:5:23"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3039:3:23"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3015:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3025:3:23",
														"type": ""
													}
												],
												"src": "2997:60:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3123:82:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3133:66:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3191:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nodeType": "YulIdentifier",
																					"src": "3173:17:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3173:24:23"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "3164:8:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3164:34:23"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3146:17:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "3146:53:23"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "3133:9:23"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3103:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "3113:9:23",
														"type": ""
													}
												],
												"src": "3063:142:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3271:66:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3281:50:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3325:5:23"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3294:30:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "3294:37:23"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "3281:9:23"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3251:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "3261:9:23",
														"type": ""
													}
												],
												"src": "3211:126:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3428:66:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3438:50:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3482:5:23"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "3451:30:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "3451:37:23"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "3438:9:23"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_ISuperfluidToken_$3123_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3408:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "3418:9:23",
														"type": ""
													}
												],
												"src": "3343:151:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3590:91:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3607:3:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3668:5:23"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_ISuperfluidToken_$3123_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3612:55:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3612:62:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3600:6:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "3600:75:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3600:75:23"
														}
													]
												},
												"name": "abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3578:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3585:3:23",
														"type": ""
													}
												],
												"src": "3500:181:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3866:313:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3876:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3888:9:23"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3899:2:23",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3884:3:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "3884:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3876:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3981:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3994:9:23"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4005:1:23",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3990:3:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3990:17:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3912:68:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "3912:96:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3912:96:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4062:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4075:9:23"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4086:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4071:3:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4071:18:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4018:43:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "4018:72:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4018:72:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4144:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4157:9:23"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4168:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4153:3:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4153:18:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4100:43:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "4100:72:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4100:72:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ISuperfluidToken_$3123_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3822:9:23",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3834:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3842:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3850:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3861:4:23",
														"type": ""
													}
												],
												"src": "3687:492:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4248:80:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4258:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4273:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4267:5:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "4267:13:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4258:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4316:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4289:26:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "4289:33:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4289:33:23"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4226:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4234:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4242:5:23",
														"type": ""
													}
												],
												"src": "4185:143:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4377:48:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4387:32:23",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4409:2:23",
																		"type": "",
																		"value": "11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4413:5:23"
																	}
																],
																"functionName": {
																	"name": "signextend",
																	"nodeType": "YulIdentifier",
																	"src": "4398:10:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "4398:21:23"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4387:7:23"
																}
															]
														}
													]
												},
												"name": "cleanup_t_int96",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4359:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4369:7:23",
														"type": ""
													}
												],
												"src": "4334:91:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4472:77:23",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4527:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4536:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4539:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4529:6:23"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4529:12:23"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4529:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4495:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4518:5:23"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_int96",
																					"nodeType": "YulIdentifier",
																					"src": "4502:15:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4502:22:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4492:2:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4492:33:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4485:6:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "4485:41:23"
															},
															"nodeType": "YulIf",
															"src": "4482:61:23"
														}
													]
												},
												"name": "validator_revert_t_int96",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4465:5:23",
														"type": ""
													}
												],
												"src": "4431:118:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4616:78:23",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4626:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4641:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4635:5:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "4635:13:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4626:5:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4682:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_int96",
																	"nodeType": "YulIdentifier",
																	"src": "4657:24:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "4657:31:23"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4657:31:23"
														}
													]
												},
												"name": "abi_decode_t_int96_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4594:6:23",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4602:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4610:5:23",
														"type": ""
													}
												],
												"src": "4555:139:23"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4826:690:23",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4873:83:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4875:77:23"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4875:79:23"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4875:79:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4847:7:23"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4856:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4843:3:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4843:23:23"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4868:3:23",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4839:3:23"
																},
																"nodeType": "YulFunctionCall",
																"src": "4839:33:23"
															},
															"nodeType": "YulIf",
															"src": "4836:120:23"
														},
														{
															"nodeType": "YulBlock",
															"src": "4966:128:23",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4981:15:23",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4995:1:23",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4985:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5010:74:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5056:9:23"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5067:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5052:3:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5052:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5076:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "5020:31:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5020:64:23"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5010:6:23"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5104:127:23",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5119:16:23",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5133:2:23",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5123:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5149:72:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5193:9:23"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5204:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5189:3:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5189:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5213:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_int96_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "5159:29:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5159:62:23"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "5149:6:23"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5241:129:23",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5256:16:23",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5270:2:23",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5260:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5286:74:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5332:9:23"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5343:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5328:3:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5328:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5352:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "5296:31:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5296:64:23"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "5286:6:23"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5380:129:23",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5395:16:23",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5409:2:23",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5399:6:23",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5425:74:23",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5471:9:23"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5482:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5467:3:23"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5467:22:23"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5491:7:23"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "5435:31:23"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5435:64:23"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "5425:6:23"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_int96t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4772:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4783:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4795:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4803:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4811:6:23",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4819:6:23",
														"type": ""
													}
												],
												"src": "4700:816:23"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ISuperfluidToken_$3123_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ISuperfluidToken_$3123_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_ISuperfluidToken_$3123_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_int96(value) -> cleaned {\n        cleaned := signextend(11, value)\n    }\n\n    function validator_revert_t_int96(value) {\n        if iszero(eq(value, cleanup_t_int96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_int96_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int96(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_int96t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_int96_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 23,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061002a5760003560e01c8062fdd58e1461002f575b600080fd5b61004960048036038101906100449190610392565b61005f565b60405161005691906103e1565b60405180910390f35b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663192df65560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b81526004016100df92919061040b565b602060405180830381865afa1580156100fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101209190610449565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a1e888600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687856040518463ffffffff1660e01b81526004016101a5939291906104d5565b608060405180830381865afa1580156101c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e6919061055a565b50509150506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040161024891906103e1565b602060405180830381865afa158015610265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102899190610449565b9050600460149054906101000a9004600b0b600b0b82600b0b1215806102da57508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b156102eb57600193505050506102f3565b600093505050505b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610329826102fe565b9050919050565b6103398161031e565b811461034457600080fd5b50565b60008135905061035681610330565b92915050565b6000819050919050565b61036f8161035c565b811461037a57600080fd5b50565b60008135905061038c81610366565b92915050565b600080604083850312156103a9576103a86102f9565b5b60006103b785828601610347565b92505060206103c88582860161037d565b9150509250929050565b6103db8161035c565b82525050565b60006020820190506103f660008301846103d2565b92915050565b6104058161031e565b82525050565b600060408201905061042060008301856103fc565b61042d60208301846103d2565b9392505050565b60008151905061044381610330565b92915050565b60006020828403121561045f5761045e6102f9565b5b600061046d84828501610434565b91505092915050565b6000819050919050565b600061049b610496610491846102fe565b610476565b6102fe565b9050919050565b60006104ad82610480565b9050919050565b60006104bf826104a2565b9050919050565b6104cf816104b4565b82525050565b60006060820190506104ea60008301866104c6565b6104f760208301856103fc565b61050460408301846103fc565b949350505050565b60008151905061051b81610366565b92915050565b600081600b0b9050919050565b61053781610521565b811461054257600080fd5b50565b6000815190506105548161052e565b92915050565b60008060008060808587031215610574576105736102f9565b5b60006105828782880161050c565b945050602061059387828801610545565b93505060406105a48782880161050c565b92505060606105b58782880161050c565b9150509295919450925056fea2646970667358221220515c716c7a89891cd046b4d48119e8a8efd946123d3c9a4ecfd135c394ccec0964736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xFDD58E EQ PUSH2 0x2F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x49 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x44 SWAP2 SWAP1 PUSH2 0x392 JUMP JUMPDEST PUSH2 0x5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x56 SWAP2 SWAP1 PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x192DF655 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDF SWAP3 SWAP2 SWAP1 PUSH2 0x40B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x120 SWAP2 SWAP1 PUSH2 0x449 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE6A1E888 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4D5 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E6 SWAP2 SWAP1 PUSH2 0x55A JUMP JUMPDEST POP POP SWAP2 POP POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x3E1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x265 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x289 SWAP2 SWAP1 PUSH2 0x449 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xB SIGNEXTEND PUSH1 0xB SIGNEXTEND DUP3 PUSH1 0xB SIGNEXTEND SLT ISZERO DUP1 PUSH2 0x2DA JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x2EB JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x2F3 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x329 DUP3 PUSH2 0x2FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x339 DUP2 PUSH2 0x31E JUMP JUMPDEST DUP2 EQ PUSH2 0x344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x356 DUP2 PUSH2 0x330 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x36F DUP2 PUSH2 0x35C JUMP JUMPDEST DUP2 EQ PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x38C DUP2 PUSH2 0x366 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A9 JUMPI PUSH2 0x3A8 PUSH2 0x2F9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B7 DUP6 DUP3 DUP7 ADD PUSH2 0x347 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3C8 DUP6 DUP3 DUP7 ADD PUSH2 0x37D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3DB DUP2 PUSH2 0x35C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3F6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x405 DUP2 PUSH2 0x31E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x420 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x42D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3D2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x443 DUP2 PUSH2 0x330 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x45F JUMPI PUSH2 0x45E PUSH2 0x2F9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46D DUP5 DUP3 DUP6 ADD PUSH2 0x434 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49B PUSH2 0x496 PUSH2 0x491 DUP5 PUSH2 0x2FE JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST PUSH2 0x2FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AD DUP3 PUSH2 0x480 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4BF DUP3 PUSH2 0x4A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4CF DUP2 PUSH2 0x4B4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x4EA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x4C6 JUMP JUMPDEST PUSH2 0x4F7 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x3FC JUMP JUMPDEST PUSH2 0x504 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x3FC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x51B DUP2 PUSH2 0x366 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xB SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x537 DUP2 PUSH2 0x521 JUMP JUMPDEST DUP2 EQ PUSH2 0x542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x554 DUP2 PUSH2 0x52E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x574 JUMPI PUSH2 0x573 PUSH2 0x2F9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x582 DUP8 DUP3 DUP9 ADD PUSH2 0x50C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x593 DUP8 DUP3 DUP9 ADD PUSH2 0x545 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x5A4 DUP8 DUP3 DUP9 ADD PUSH2 0x50C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x5B5 DUP8 DUP3 DUP9 ADD PUSH2 0x50C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0x5C PUSH18 0x6C7A89891CD046B4D48119E8A8EFD946123D EXTCODECOPY SWAP11 0x4E 0xCF 0xD1 CALLDATALOAD 0xC3 SWAP5 0xCC 0xEC MULMOD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "914:1982:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1446:432;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;1539:7;1558:11;1582;;;;;;;;;;;1572:30;;;1603:14;;;;;;;;;;1619:3;1572:51;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1558:65;;1637:14;1659:3;;;;;;;;;;;:11;;;1671:10;;;;;;;;;;;1683:6;1691:3;1659:36;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1634:61;;;;;1705:13;1721:7;;;;;;;;;;;:15;;;1737:3;1721:20;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1705:36;;1768:11;;;;;;;;;;;1756:23;;:8;:23;;;;:42;;;;1793:5;1783:15;;:6;:15;;;1756:42;1752:120;;;1821:1;1814:8;;;;;;;1752:120;1860:1;1853:8;;;;;1446:432;;;;;:::o;88:117:23:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:118::-;1764:24;1782:5;1764:24;:::i;:::-;1759:3;1752:37;1677:118;;:::o;1801:222::-;1894:4;1932:2;1921:9;1917:18;1909:26;;1945:71;2013:1;2002:9;1998:17;1989:6;1945:71;:::i;:::-;1801:222;;;;:::o;2029:118::-;2116:24;2134:5;2116:24;:::i;:::-;2111:3;2104:37;2029:118;;:::o;2153:332::-;2274:4;2312:2;2301:9;2297:18;2289:26;;2325:71;2393:1;2382:9;2378:17;2369:6;2325:71;:::i;:::-;2406:72;2474:2;2463:9;2459:18;2450:6;2406:72;:::i;:::-;2153:332;;;;;:::o;2491:143::-;2548:5;2579:6;2573:13;2564:22;;2595:33;2622:5;2595:33;:::i;:::-;2491:143;;;;:::o;2640:351::-;2710:6;2759:2;2747:9;2738:7;2734:23;2730:32;2727:119;;;2765:79;;:::i;:::-;2727:119;2885:1;2910:64;2966:7;2957:6;2946:9;2942:22;2910:64;:::i;:::-;2900:74;;2856:128;2640:351;;;;:::o;2997:60::-;3025:3;3046:5;3039:12;;2997:60;;;:::o;3063:142::-;3113:9;3146:53;3164:34;3173:24;3191:5;3173:24;:::i;:::-;3164:34;:::i;:::-;3146:53;:::i;:::-;3133:66;;3063:142;;;:::o;3211:126::-;3261:9;3294:37;3325:5;3294:37;:::i;:::-;3281:50;;3211:126;;;:::o;3343:151::-;3418:9;3451:37;3482:5;3451:37;:::i;:::-;3438:50;;3343:151;;;:::o;3500:181::-;3612:62;3668:5;3612:62;:::i;:::-;3607:3;3600:75;3500:181;;:::o;3687:492::-;3861:4;3899:2;3888:9;3884:18;3876:26;;3912:96;4005:1;3994:9;3990:17;3981:6;3912:96;:::i;:::-;4018:72;4086:2;4075:9;4071:18;4062:6;4018:72;:::i;:::-;4100;4168:2;4157:9;4153:18;4144:6;4100:72;:::i;:::-;3687:492;;;;;;:::o;4185:143::-;4242:5;4273:6;4267:13;4258:22;;4289:33;4316:5;4289:33;:::i;:::-;4185:143;;;;:::o;4334:91::-;4369:7;4413:5;4409:2;4398:21;4387:32;;4334:91;;;:::o;4431:118::-;4502:22;4518:5;4502:22;:::i;:::-;4495:5;4492:33;4482:61;;4539:1;4536;4529:12;4482:61;4431:118;:::o;4555:139::-;4610:5;4641:6;4635:13;4626:22;;4657:31;4682:5;4657:31;:::i;:::-;4555:139;;;;:::o;4700:816::-;4795:6;4803;4811;4819;4868:3;4856:9;4847:7;4843:23;4839:33;4836:120;;;4875:79;;:::i;:::-;4836:120;4995:1;5020:64;5076:7;5067:6;5056:9;5052:22;5020:64;:::i;:::-;5010:74;;4966:128;5133:2;5159:62;5213:7;5204:6;5193:9;5189:22;5159:62;:::i;:::-;5149:72;;5104:127;5270:2;5296:64;5352:7;5343:6;5332:9;5328:22;5296:64;:::i;:::-;5286:74;;5241:129;5409:2;5435:64;5491:7;5482:6;5471:9;5467:22;5435:64;:::i;:::-;5425:74;;5380:129;4700:816;;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "305400",
								"executionCost": "148136",
								"totalCost": "453536"
							},
							"external": {
								"balanceOf(address,uint256)": "infinite"
							},
							"internal": {
								"parseInt(string memory)": "infinite",
								"parseInt(string memory,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 914,
									"end": 2896,
									"name": "PUSH",
									"source": 22,
									"value": "80"
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "PUSH",
									"source": 22,
									"value": "40"
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 971,
									"end": 1013,
									"name": "PUSH",
									"source": 22,
									"value": "60AE865EE4C725CD04353B5AAB364553F56CEF82"
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "PUSH",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "EXP",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "SLOAD",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "OR",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 938,
									"end": 1013,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1092,
									"end": 1134,
									"name": "PUSH",
									"source": 22,
									"value": "49E565ED1BDC17F3D220F72DF0857C26FA83F873"
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "PUSH",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "PUSH",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "EXP",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "SLOAD",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "OR",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 1020,
									"end": 1135,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1204,
									"end": 1246,
									"name": "PUSH",
									"source": 22,
									"value": "5D8B4C2554AEB7E86F387B4D6C00AC33499ED01F"
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "PUSH",
									"source": 22,
									"value": "2"
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "PUSH",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "EXP",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "SLOAD",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "OR",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 1141,
									"end": 1247,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "SLOAD",
									"source": 22
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "PUSH",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "EXP",
									"source": 22
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "DIV",
									"source": 22
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1287,
									"end": 1301,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "PUSH",
									"source": 22,
									"value": "3"
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "PUSH",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "EXP",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "SLOAD",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "OR",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 1253,
									"end": 1302,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1358,
									"end": 1400,
									"name": "PUSH",
									"source": 22,
									"value": "2101DFB77FDE026414827FDC604DDAF224F0921"
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "PUSH",
									"source": 22,
									"value": "4"
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "PUSH",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "EXP",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "SLOAD",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "OR",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 1308,
									"end": 1401,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1427,
									"end": 1439,
									"name": "PUSH",
									"source": 22,
									"value": "B13138A67A"
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "PUSH",
									"source": 22,
									"value": "4"
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "PUSH",
									"source": 22,
									"value": "14"
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "PUSH",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "EXP",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "SLOAD",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "PUSH",
									"source": 22,
									"value": "B"
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "SIGNEXTEND",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "OR",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 1407,
									"end": 1439,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "CALLVALUE",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "REVERT",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "tag",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "PUSH #[$]",
									"source": 22,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "PUSH [$]",
									"source": 22,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "CODECOPY",
									"source": 22
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 914,
									"end": 2896,
									"name": "RETURN",
									"source": 22
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220515c716c7a89891cd046b4d48119e8a8efd946123d3c9a4ecfd135c394ccec0964736f6c63430008120033",
									".code": [
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "CALLVALUE",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "tag",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "CALLDATASIZE",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "2"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "SHR",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH",
											"source": 22,
											"value": "FDD58E"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "3"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "tag",
											"source": 22,
											"value": "2"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 914,
											"end": 2896,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "tag",
											"source": 22,
											"value": "3"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "CALLDATASIZE",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "5"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "6"
										},
										{
											"begin": 1446,
											"end": 1878,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "tag",
											"source": 22,
											"value": "5"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "7"
										},
										{
											"begin": 1446,
											"end": 1878,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "tag",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "8"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "9"
										},
										{
											"begin": 1446,
											"end": 1878,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "tag",
											"source": 22,
											"value": "8"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "RETURN",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "tag",
											"source": 22,
											"value": "7"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1539,
											"end": 1546,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1558,
											"end": 1569,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "SLOAD",
											"source": 22
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "PUSH",
											"source": 22,
											"value": "100"
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "EXP",
											"source": 22
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1582,
											"end": 1593,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1602,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1572,
											"end": 1602,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1602,
											"name": "PUSH",
											"source": 22,
											"value": "192DF655"
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "SLOAD",
											"source": 22
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "PUSH",
											"source": 22,
											"value": "100"
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "EXP",
											"source": 22
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1603,
											"end": 1617,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1619,
											"end": 1622,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "11"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "12"
										},
										{
											"begin": 1572,
											"end": 1623,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "tag",
											"source": 22,
											"value": "11"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "GAS",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "STATICCALL",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "14"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "RETURNDATASIZE",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "RETURNDATACOPY",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "RETURNDATASIZE",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "tag",
											"source": 22,
											"value": "14"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "RETURNDATASIZE",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "15"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "16"
										},
										{
											"begin": 1572,
											"end": 1623,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "tag",
											"source": 22,
											"value": "15"
										},
										{
											"begin": 1572,
											"end": 1623,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1558,
											"end": 1623,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1558,
											"end": 1623,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1637,
											"end": 1651,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "SLOAD",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "PUSH",
											"source": 22,
											"value": "100"
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "EXP",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1659,
											"end": 1662,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1670,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1659,
											"end": 1670,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1670,
											"name": "PUSH",
											"source": 22,
											"value": "E6A1E888"
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "PUSH",
											"source": 22,
											"value": "2"
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "SLOAD",
											"source": 22
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "PUSH",
											"source": 22,
											"value": "100"
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "EXP",
											"source": 22
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1671,
											"end": 1681,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1683,
											"end": 1689,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 1691,
											"end": 1694,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "17"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "18"
										},
										{
											"begin": 1659,
											"end": 1695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "tag",
											"source": 22,
											"value": "17"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "GAS",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "STATICCALL",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "RETURNDATASIZE",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "RETURNDATACOPY",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "RETURNDATASIZE",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "tag",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "RETURNDATASIZE",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "21"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "22"
										},
										{
											"begin": 1659,
											"end": 1695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "tag",
											"source": 22,
											"value": "21"
										},
										{
											"begin": 1659,
											"end": 1695,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1634,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1634,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1634,
											"end": 1695,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1634,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1634,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1705,
											"end": 1718,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "PUSH",
											"source": 22,
											"value": "3"
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "SLOAD",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "PUSH",
											"source": 22,
											"value": "100"
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "EXP",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1721,
											"end": 1728,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1736,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1721,
											"end": 1736,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1736,
											"name": "PUSH",
											"source": 22,
											"value": "6352211E"
										},
										{
											"begin": 1737,
											"end": 1740,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "SHL",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "23"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "9"
										},
										{
											"begin": 1721,
											"end": 1741,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "tag",
											"source": 22,
											"value": "23"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "GAS",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "STATICCALL",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "25"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "RETURNDATASIZE",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "RETURNDATACOPY",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "RETURNDATASIZE",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "tag",
											"source": 22,
											"value": "25"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "RETURNDATASIZE",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "26"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "16"
										},
										{
											"begin": 1721,
											"end": 1741,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "tag",
											"source": 22,
											"value": "26"
										},
										{
											"begin": 1721,
											"end": 1741,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1705,
											"end": 1741,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1705,
											"end": 1741,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "PUSH",
											"source": 22,
											"value": "14"
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "SLOAD",
											"source": 22
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "PUSH",
											"source": 22,
											"value": "100"
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "EXP",
											"source": 22
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "PUSH",
											"source": 22,
											"value": "B"
										},
										{
											"begin": 1768,
											"end": 1779,
											"name": "SIGNEXTEND",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1779,
											"name": "PUSH",
											"source": 22,
											"value": "B"
										},
										{
											"begin": 1756,
											"end": 1779,
											"name": "SIGNEXTEND",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1764,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1779,
											"name": "PUSH",
											"source": 22,
											"value": "B"
										},
										{
											"begin": 1756,
											"end": 1779,
											"name": "SIGNEXTEND",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1779,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1779,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1798,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "27"
										},
										{
											"begin": 1756,
											"end": 1798,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1798,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1793,
											"end": 1798,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1783,
											"end": 1798,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1783,
											"end": 1798,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1783,
											"end": 1789,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 1783,
											"end": 1798,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1783,
											"end": 1798,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1783,
											"end": 1798,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1798,
											"name": "tag",
											"source": 22,
											"value": "27"
										},
										{
											"begin": 1756,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1752,
											"end": 1872,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1752,
											"end": 1872,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "28"
										},
										{
											"begin": 1752,
											"end": 1872,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1821,
											"end": 1822,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 1814,
											"end": 1822,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 1814,
											"end": 1822,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1814,
											"end": 1822,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1814,
											"end": 1822,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1814,
											"end": 1822,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1814,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "10"
										},
										{
											"begin": 1814,
											"end": 1822,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1752,
											"end": 1872,
											"name": "tag",
											"source": 22,
											"value": "28"
										},
										{
											"begin": 1752,
											"end": 1872,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1860,
											"end": 1861,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1853,
											"end": 1861,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 1853,
											"end": 1861,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1853,
											"end": 1861,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1853,
											"end": 1861,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1853,
											"end": 1861,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "tag",
											"source": 22,
											"value": "10"
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1446,
											"end": 1878,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 23,
											"value": "31"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 23,
											"value": "33"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 23,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 23,
											"value": "34"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "58"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "33"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 23,
											"value": "58"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 23,
											"value": "35"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "34"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "61"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 23,
											"value": "61"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 23,
											"value": "36"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "63"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "35"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 23,
											"value": "63"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 841,
											"end": 918,
											"name": "tag",
											"source": 23,
											"value": "37"
										},
										{
											"begin": 841,
											"end": 918,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 878,
											"end": 885,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 907,
											"end": 912,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 896,
											"end": 912,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 896,
											"end": 912,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 841,
											"end": 918,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 841,
											"end": 918,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "tag",
											"source": 23,
											"value": "38"
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "66"
										},
										{
											"begin": 1015,
											"end": 1020,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "37"
										},
										{
											"begin": 997,
											"end": 1021,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "tag",
											"source": 23,
											"value": "66"
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 990,
											"end": 995,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 987,
											"end": 1022,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "67"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1034,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 1026,
											"end": 1038,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "tag",
											"source": 23,
											"value": "67"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 924,
											"end": 1046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "tag",
											"source": 23,
											"value": "39"
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1098,
											"end": 1103,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1123,
											"end": 1143,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "69"
										},
										{
											"begin": 1179,
											"end": 1184,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "38"
										},
										{
											"begin": 1152,
											"end": 1185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "tag",
											"source": 23,
											"value": "69"
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1052,
											"end": 1191,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "tag",
											"source": 23,
											"value": "6"
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1265,
											"end": 1271,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 1322,
											"end": 1324,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 1310,
											"end": 1319,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 1301,
											"end": 1308,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 1293,
											"end": 1325,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "71"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "72"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "31"
										},
										{
											"begin": 1328,
											"end": 1407,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "tag",
											"source": 23,
											"value": "72"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "tag",
											"source": 23,
											"value": "71"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1448,
											"end": 1449,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "73"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 1509,
											"end": 1515,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 1494,
											"end": 1516,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "36"
										},
										{
											"begin": 1473,
											"end": 1526,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "tag",
											"source": 23,
											"value": "73"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1419,
											"end": 1536,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1575,
											"end": 1577,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "74"
										},
										{
											"begin": 1646,
											"end": 1653,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 1637,
											"end": 1643,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1626,
											"end": 1635,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 1622,
											"end": 1644,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "39"
										},
										{
											"begin": 1601,
											"end": 1654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "tag",
											"source": 23,
											"value": "74"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1546,
											"end": 1664,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1197,
											"end": 1671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "tag",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "76"
										},
										{
											"begin": 1782,
											"end": 1787,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "37"
										},
										{
											"begin": 1764,
											"end": 1788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "tag",
											"source": 23,
											"value": "76"
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1759,
											"end": 1762,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1752,
											"end": 1789,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1677,
											"end": 1795,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "tag",
											"source": 23,
											"value": "9"
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1894,
											"end": 1898,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1932,
											"end": 1934,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 1921,
											"end": 1930,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1917,
											"end": 1935,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1909,
											"end": 1935,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1909,
											"end": 1935,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "78"
										},
										{
											"begin": 2013,
											"end": 2014,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2002,
											"end": 2011,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 1998,
											"end": 2015,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1989,
											"end": 1995,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 1945,
											"end": 2016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "tag",
											"source": 23,
											"value": "78"
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 1801,
											"end": 2023,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2029,
											"end": 2147,
											"name": "tag",
											"source": 23,
											"value": "41"
										},
										{
											"begin": 2029,
											"end": 2147,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2116,
											"end": 2140,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 2134,
											"end": 2139,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2116,
											"end": 2140,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "34"
										},
										{
											"begin": 2116,
											"end": 2140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2116,
											"end": 2140,
											"name": "tag",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 2116,
											"end": 2140,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2111,
											"end": 2114,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 2104,
											"end": 2141,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 2029,
											"end": 2147,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2029,
											"end": 2147,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2029,
											"end": 2147,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2153,
											"end": 2485,
											"name": "tag",
											"source": 23,
											"value": "12"
										},
										{
											"begin": 2153,
											"end": 2485,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2274,
											"end": 2278,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2312,
											"end": 2314,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 2301,
											"end": 2310,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 2297,
											"end": 2315,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2289,
											"end": 2315,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2289,
											"end": 2315,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2325,
											"end": 2396,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "82"
										},
										{
											"begin": 2393,
											"end": 2394,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2382,
											"end": 2391,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2369,
											"end": 2375,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 2325,
											"end": 2396,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "41"
										},
										{
											"begin": 2325,
											"end": 2396,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2325,
											"end": 2396,
											"name": "tag",
											"source": 23,
											"value": "82"
										},
										{
											"begin": 2325,
											"end": 2396,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2406,
											"end": 2478,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "83"
										},
										{
											"begin": 2474,
											"end": 2476,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 2463,
											"end": 2472,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 2459,
											"end": 2477,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2450,
											"end": 2456,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 2406,
											"end": 2478,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 2406,
											"end": 2478,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2406,
											"end": 2478,
											"name": "tag",
											"source": 23,
											"value": "83"
										},
										{
											"begin": 2406,
											"end": 2478,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2153,
											"end": 2485,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 2153,
											"end": 2485,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 2153,
											"end": 2485,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2153,
											"end": 2485,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2153,
											"end": 2485,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2153,
											"end": 2485,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2491,
											"end": 2634,
											"name": "tag",
											"source": 23,
											"value": "42"
										},
										{
											"begin": 2491,
											"end": 2634,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2548,
											"end": 2553,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2579,
											"end": 2585,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2573,
											"end": 2586,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 2564,
											"end": 2586,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2564,
											"end": 2586,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2595,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "85"
										},
										{
											"begin": 2622,
											"end": 2627,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2595,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "35"
										},
										{
											"begin": 2595,
											"end": 2628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2595,
											"end": 2628,
											"name": "tag",
											"source": 23,
											"value": "85"
										},
										{
											"begin": 2595,
											"end": 2628,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2491,
											"end": 2634,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 2491,
											"end": 2634,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 2491,
											"end": 2634,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2491,
											"end": 2634,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2491,
											"end": 2634,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2640,
											"end": 2991,
											"name": "tag",
											"source": 23,
											"value": "16"
										},
										{
											"begin": 2640,
											"end": 2991,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2710,
											"end": 2716,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2759,
											"end": 2761,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 2747,
											"end": 2756,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 2738,
											"end": 2745,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 2734,
											"end": 2757,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 2730,
											"end": 2762,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 2727,
											"end": 2846,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 2727,
											"end": 2846,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "87"
										},
										{
											"begin": 2727,
											"end": 2846,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 2765,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "88"
										},
										{
											"begin": 2765,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "31"
										},
										{
											"begin": 2765,
											"end": 2844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2765,
											"end": 2844,
											"name": "tag",
											"source": 23,
											"value": "88"
										},
										{
											"begin": 2765,
											"end": 2844,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2727,
											"end": 2846,
											"name": "tag",
											"source": 23,
											"value": "87"
										},
										{
											"begin": 2727,
											"end": 2846,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2885,
											"end": 2886,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2910,
											"end": 2974,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "89"
										},
										{
											"begin": 2966,
											"end": 2973,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 2957,
											"end": 2963,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 2946,
											"end": 2955,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 2942,
											"end": 2964,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2910,
											"end": 2974,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "42"
										},
										{
											"begin": 2910,
											"end": 2974,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2910,
											"end": 2974,
											"name": "tag",
											"source": 23,
											"value": "89"
										},
										{
											"begin": 2910,
											"end": 2974,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2900,
											"end": 2974,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 2900,
											"end": 2974,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2856,
											"end": 2984,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2640,
											"end": 2991,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 2640,
											"end": 2991,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 2640,
											"end": 2991,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2640,
											"end": 2991,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2640,
											"end": 2991,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2997,
											"end": 3057,
											"name": "tag",
											"source": 23,
											"value": "43"
										},
										{
											"begin": 2997,
											"end": 3057,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3025,
											"end": 3028,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3046,
											"end": 3051,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3039,
											"end": 3051,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3039,
											"end": 3051,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2997,
											"end": 3057,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 2997,
											"end": 3057,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2997,
											"end": 3057,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 2997,
											"end": 3057,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3063,
											"end": 3205,
											"name": "tag",
											"source": 23,
											"value": "44"
										},
										{
											"begin": 3063,
											"end": 3205,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3113,
											"end": 3122,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3146,
											"end": 3199,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "92"
										},
										{
											"begin": 3164,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "93"
										},
										{
											"begin": 3173,
											"end": 3197,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "94"
										},
										{
											"begin": 3191,
											"end": 3196,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 3173,
											"end": 3197,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "33"
										},
										{
											"begin": 3173,
											"end": 3197,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3173,
											"end": 3197,
											"name": "tag",
											"source": 23,
											"value": "94"
										},
										{
											"begin": 3173,
											"end": 3197,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3164,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "43"
										},
										{
											"begin": 3164,
											"end": 3198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3164,
											"end": 3198,
											"name": "tag",
											"source": 23,
											"value": "93"
										},
										{
											"begin": 3164,
											"end": 3198,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3146,
											"end": 3199,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "33"
										},
										{
											"begin": 3146,
											"end": 3199,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3146,
											"end": 3199,
											"name": "tag",
											"source": 23,
											"value": "92"
										},
										{
											"begin": 3146,
											"end": 3199,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3133,
											"end": 3199,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3133,
											"end": 3199,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3063,
											"end": 3205,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 3063,
											"end": 3205,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3063,
											"end": 3205,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3063,
											"end": 3205,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3211,
											"end": 3337,
											"name": "tag",
											"source": 23,
											"value": "45"
										},
										{
											"begin": 3211,
											"end": 3337,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3261,
											"end": 3270,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3294,
											"end": 3331,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "96"
										},
										{
											"begin": 3325,
											"end": 3330,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3294,
											"end": 3331,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "44"
										},
										{
											"begin": 3294,
											"end": 3331,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3294,
											"end": 3331,
											"name": "tag",
											"source": 23,
											"value": "96"
										},
										{
											"begin": 3294,
											"end": 3331,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3281,
											"end": 3331,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3281,
											"end": 3331,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3211,
											"end": 3337,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 3211,
											"end": 3337,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3211,
											"end": 3337,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3211,
											"end": 3337,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3343,
											"end": 3494,
											"name": "tag",
											"source": 23,
											"value": "46"
										},
										{
											"begin": 3343,
											"end": 3494,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3418,
											"end": 3427,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3451,
											"end": 3488,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "98"
										},
										{
											"begin": 3482,
											"end": 3487,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3451,
											"end": 3488,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "45"
										},
										{
											"begin": 3451,
											"end": 3488,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3451,
											"end": 3488,
											"name": "tag",
											"source": 23,
											"value": "98"
										},
										{
											"begin": 3451,
											"end": 3488,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3438,
											"end": 3488,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3438,
											"end": 3488,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3343,
											"end": 3494,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 3343,
											"end": 3494,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3343,
											"end": 3494,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3343,
											"end": 3494,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3500,
											"end": 3681,
											"name": "tag",
											"source": 23,
											"value": "47"
										},
										{
											"begin": 3500,
											"end": 3681,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3612,
											"end": 3674,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "100"
										},
										{
											"begin": 3668,
											"end": 3673,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3612,
											"end": 3674,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "46"
										},
										{
											"begin": 3612,
											"end": 3674,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3612,
											"end": 3674,
											"name": "tag",
											"source": 23,
											"value": "100"
										},
										{
											"begin": 3612,
											"end": 3674,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3607,
											"end": 3610,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3600,
											"end": 3675,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 3500,
											"end": 3681,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3500,
											"end": 3681,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3500,
											"end": 3681,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3687,
											"end": 4179,
											"name": "tag",
											"source": 23,
											"value": "18"
										},
										{
											"begin": 3687,
											"end": 4179,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3861,
											"end": 3865,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3899,
											"end": 3901,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 3888,
											"end": 3897,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3884,
											"end": 3902,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3876,
											"end": 3902,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 3876,
											"end": 3902,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3912,
											"end": 4008,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "102"
										},
										{
											"begin": 4005,
											"end": 4006,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3994,
											"end": 4003,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 3990,
											"end": 4007,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3981,
											"end": 3987,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 3912,
											"end": 4008,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "47"
										},
										{
											"begin": 3912,
											"end": 4008,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3912,
											"end": 4008,
											"name": "tag",
											"source": 23,
											"value": "102"
										},
										{
											"begin": 3912,
											"end": 4008,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4018,
											"end": 4090,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "103"
										},
										{
											"begin": 4086,
											"end": 4088,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 4075,
											"end": 4084,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 4071,
											"end": 4089,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4062,
											"end": 4068,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 4018,
											"end": 4090,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "41"
										},
										{
											"begin": 4018,
											"end": 4090,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4018,
											"end": 4090,
											"name": "tag",
											"source": 23,
											"value": "103"
										},
										{
											"begin": 4018,
											"end": 4090,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4100,
											"end": 4172,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "104"
										},
										{
											"begin": 4168,
											"end": 4170,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 4157,
											"end": 4166,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 4153,
											"end": 4171,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4144,
											"end": 4150,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 4100,
											"end": 4172,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "41"
										},
										{
											"begin": 4100,
											"end": 4172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4100,
											"end": 4172,
											"name": "tag",
											"source": 23,
											"value": "104"
										},
										{
											"begin": 4100,
											"end": 4172,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3687,
											"end": 4179,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 3687,
											"end": 4179,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 3687,
											"end": 4179,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3687,
											"end": 4179,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3687,
											"end": 4179,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3687,
											"end": 4179,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 3687,
											"end": 4179,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4185,
											"end": 4328,
											"name": "tag",
											"source": 23,
											"value": "48"
										},
										{
											"begin": 4185,
											"end": 4328,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4242,
											"end": 4247,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4273,
											"end": 4279,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4267,
											"end": 4280,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 4258,
											"end": 4280,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4258,
											"end": 4280,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4289,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "106"
										},
										{
											"begin": 4316,
											"end": 4321,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4289,
											"end": 4322,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "38"
										},
										{
											"begin": 4289,
											"end": 4322,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4289,
											"end": 4322,
											"name": "tag",
											"source": 23,
											"value": "106"
										},
										{
											"begin": 4289,
											"end": 4322,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4185,
											"end": 4328,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 4185,
											"end": 4328,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4185,
											"end": 4328,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4185,
											"end": 4328,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4185,
											"end": 4328,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4334,
											"end": 4425,
											"name": "tag",
											"source": 23,
											"value": "49"
										},
										{
											"begin": 4334,
											"end": 4425,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4369,
											"end": 4376,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4413,
											"end": 4418,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4409,
											"end": 4411,
											"name": "PUSH",
											"source": 23,
											"value": "B"
										},
										{
											"begin": 4398,
											"end": 4419,
											"name": "SIGNEXTEND",
											"source": 23
										},
										{
											"begin": 4387,
											"end": 4419,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4387,
											"end": 4419,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4334,
											"end": 4425,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4334,
											"end": 4425,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4334,
											"end": 4425,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4334,
											"end": 4425,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4431,
											"end": 4549,
											"name": "tag",
											"source": 23,
											"value": "50"
										},
										{
											"begin": 4431,
											"end": 4549,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4502,
											"end": 4524,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "109"
										},
										{
											"begin": 4518,
											"end": 4523,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4502,
											"end": 4524,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "49"
										},
										{
											"begin": 4502,
											"end": 4524,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4502,
											"end": 4524,
											"name": "tag",
											"source": 23,
											"value": "109"
										},
										{
											"begin": 4502,
											"end": 4524,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4495,
											"end": 4500,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4492,
											"end": 4525,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 4482,
											"end": 4543,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "110"
										},
										{
											"begin": 4482,
											"end": 4543,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 4539,
											"end": 4540,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4536,
											"end": 4537,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 4529,
											"end": 4541,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 4482,
											"end": 4543,
											"name": "tag",
											"source": 23,
											"value": "110"
										},
										{
											"begin": 4482,
											"end": 4543,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4431,
											"end": 4549,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4431,
											"end": 4549,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4555,
											"end": 4694,
											"name": "tag",
											"source": 23,
											"value": "51"
										},
										{
											"begin": 4555,
											"end": 4694,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4610,
											"end": 4615,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4641,
											"end": 4647,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4635,
											"end": 4648,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 4626,
											"end": 4648,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4626,
											"end": 4648,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4657,
											"end": 4688,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "112"
										},
										{
											"begin": 4682,
											"end": 4687,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4657,
											"end": 4688,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "50"
										},
										{
											"begin": 4657,
											"end": 4688,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4657,
											"end": 4688,
											"name": "tag",
											"source": 23,
											"value": "112"
										},
										{
											"begin": 4657,
											"end": 4688,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4555,
											"end": 4694,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 4555,
											"end": 4694,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4555,
											"end": 4694,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4555,
											"end": 4694,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4555,
											"end": 4694,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4700,
											"end": 5516,
											"name": "tag",
											"source": 23,
											"value": "22"
										},
										{
											"begin": 4700,
											"end": 5516,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4795,
											"end": 4801,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4803,
											"end": 4809,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 4811,
											"end": 4817,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4819,
											"end": 4825,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 4868,
											"end": 4871,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 4856,
											"end": 4865,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 4847,
											"end": 4854,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 4843,
											"end": 4866,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 4839,
											"end": 4872,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 4836,
											"end": 4956,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 4836,
											"end": 4956,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "114"
										},
										{
											"begin": 4836,
											"end": 4956,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 4875,
											"end": 4954,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "115"
										},
										{
											"begin": 4875,
											"end": 4954,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "31"
										},
										{
											"begin": 4875,
											"end": 4954,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4875,
											"end": 4954,
											"name": "tag",
											"source": 23,
											"value": "115"
										},
										{
											"begin": 4875,
											"end": 4954,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4836,
											"end": 4956,
											"name": "tag",
											"source": 23,
											"value": "114"
										},
										{
											"begin": 4836,
											"end": 4956,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4995,
											"end": 4996,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5020,
											"end": 5084,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "116"
										},
										{
											"begin": 5076,
											"end": 5083,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 5067,
											"end": 5073,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 5056,
											"end": 5065,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 5052,
											"end": 5074,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5020,
											"end": 5084,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "48"
										},
										{
											"begin": 5020,
											"end": 5084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5020,
											"end": 5084,
											"name": "tag",
											"source": 23,
											"value": "116"
										},
										{
											"begin": 5020,
											"end": 5084,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5010,
											"end": 5084,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 5010,
											"end": 5084,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4966,
											"end": 5094,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5133,
											"end": 5135,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 5159,
											"end": 5221,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "117"
										},
										{
											"begin": 5213,
											"end": 5220,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 5204,
											"end": 5210,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 5193,
											"end": 5202,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 5189,
											"end": 5211,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5159,
											"end": 5221,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "51"
										},
										{
											"begin": 5159,
											"end": 5221,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5159,
											"end": 5221,
											"name": "tag",
											"source": 23,
											"value": "117"
										},
										{
											"begin": 5159,
											"end": 5221,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5149,
											"end": 5221,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 5149,
											"end": 5221,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5104,
											"end": 5231,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5270,
											"end": 5272,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 5296,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "118"
										},
										{
											"begin": 5352,
											"end": 5359,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 5343,
											"end": 5349,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 5332,
											"end": 5341,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 5328,
											"end": 5350,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5296,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "48"
										},
										{
											"begin": 5296,
											"end": 5360,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5296,
											"end": 5360,
											"name": "tag",
											"source": 23,
											"value": "118"
										},
										{
											"begin": 5296,
											"end": 5360,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5286,
											"end": 5360,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 5286,
											"end": 5360,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5241,
											"end": 5370,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5409,
											"end": 5411,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 5435,
											"end": 5499,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "119"
										},
										{
											"begin": 5491,
											"end": 5498,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 5482,
											"end": 5488,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 5471,
											"end": 5480,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 5467,
											"end": 5489,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5435,
											"end": 5499,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "48"
										},
										{
											"begin": 5435,
											"end": 5499,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5435,
											"end": 5499,
											"name": "tag",
											"source": 23,
											"value": "119"
										},
										{
											"begin": 5435,
											"end": 5499,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5425,
											"end": 5499,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 5425,
											"end": 5499,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 5380,
											"end": 5509,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4700,
											"end": 5516,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 4700,
											"end": 5516,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": 4700,
											"end": 5516,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4700,
											"end": 5516,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 4700,
											"end": 5516,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4700,
											"end": 5516,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 4700,
											"end": 5516,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 4700,
											"end": 5516,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere_v2.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"balanceOf(address,uint256)": "00fdd58e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"premiere/Premiere_v2.sol\":\"Premiere\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0x8a191d6f5dcdfd97e8fbbe17382fa96f51dbaddea6ed704206e7cbda5d12cc65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5bed573cf54d2406d0e7566ab6cd37c31025c6fab3b5b8d8ef9b79b1cab098fd\",\"dweb:/ipfs/QmegphCXp9qTAvefUYyW8eGdaGQMLJ4JrEXELU7WhisRcS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]},\"premiere/IRegistry.sol\":{\"keccak256\":\"0x943209b5f4797b7dadf290f4bd6f985622f1ebf8066babce3d33f6f34477d089\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://c2694ee4c4a62c87a7ee88550b22bd341d3cabbea606f474403667a158ce57f6\",\"dweb:/ipfs/QmQu2XCSxau6LF4MsukgwrjV5PgSC1CnNGYDiZAEHhKesJ\"]},\"premiere/Premiere_v2.sol\":{\"keccak256\":\"0xb89303e1fdeae5c623c36c58c68723d6beb8c97da32812709fa05a7802fe75eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eef40691c93caa0d26aa22a7e89e2147034f239a4ccb417e56197e2dfbc97f11\",\"dweb:/ipfs/QmcSfRW1MSXuuWhc45KD83wJeDDMSqiKdZwfML6P7pmKDk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 3199,
								"contract": "premiere/Premiere_v2.sol:Premiere",
								"label": "lensHubAddress",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 3205,
								"contract": "premiere/Premiere_v2.sol:Premiere",
								"label": "cfa",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IConstantFlowAgreementV1)805"
							},
							{
								"astId": 3211,
								"contract": "premiere/Premiere_v2.sol:Premiere",
								"label": "superToken",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(ISuperfluidToken)3123"
							},
							{
								"astId": 3217,
								"contract": "premiere/Premiere_v2.sol:Premiere",
								"label": "lensHub",
								"offset": 0,
								"slot": "3",
								"type": "t_contract(IERC721)193"
							},
							{
								"astId": 3223,
								"contract": "premiere/Premiere_v2.sol:Premiere",
								"label": "tbaRegistry",
								"offset": 0,
								"slot": "4",
								"type": "t_contract(IRegistry)3186"
							},
							{
								"astId": 3226,
								"contract": "premiere/Premiere_v2.sol:Premiere",
								"label": "minFlowRate",
								"offset": 20,
								"slot": "4",
								"type": "t_int96"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(IConstantFlowAgreementV1)805": {
								"encoding": "inplace",
								"label": "contract IConstantFlowAgreementV1",
								"numberOfBytes": "20"
							},
							"t_contract(IERC721)193": {
								"encoding": "inplace",
								"label": "contract IERC721",
								"numberOfBytes": "20"
							},
							"t_contract(IRegistry)3186": {
								"encoding": "inplace",
								"label": "contract IRegistry",
								"numberOfBytes": "20"
							},
							"t_contract(ISuperfluidToken)3123": {
								"encoding": "inplace",
								"label": "contract ISuperfluidToken",
								"numberOfBytes": "20"
							},
							"t_int96": {
								"encoding": "inplace",
								"label": "int96",
								"numberOfBytes": "12"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2676:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2668:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2690:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2682:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2702:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2694:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2694:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:42:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2728:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2728:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2727:6:0"
									},
									"scope": 77,
									"src": "2646:88:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2534:0",
							"usedErrors": []
						}
					],
					"src": "106:2631:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							395
						],
						"IERC721": [
							193
						]
					},
					"id": 194,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 80,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 194,
							"sourceUnit": 396,
							"src": "133:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 82,
										"name": "IERC165",
										"nameLocations": [
											"271:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 395,
										"src": "271:7:1"
									},
									"id": 83,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:1"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 81,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 193,
							"linearizedBaseContracts": [
								193,
								395
							],
							"name": "IERC721",
							"nameLocation": "260:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 92,
									"name": "Transfer",
									"nameLocation": "384:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "393:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 88,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "415:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 87,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "435:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 89,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:1"
									},
									"src": "378:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 101,
									"name": "Approval",
									"nameLocation": "571:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "580:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 94,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "603:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "629:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:1"
									},
									"src": "565:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 110,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "803:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "826:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "852:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 107,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:1"
									},
									"src": "782:85:1"
								},
								{
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 118,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "973:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "1011:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:1"
									},
									"scope": 193,
									"src": "954:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "1187:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "1227:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:1"
									},
									"scope": 193,
									"src": "1170:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1843:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1835:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1835:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1857:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1849:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1849:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1869:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1861:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1861:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1893:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1878:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 134,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1878:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:64:1"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1907:0:1"
									},
									"scope": 193,
									"src": "1809:99:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "1914:687:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2615:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2640:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2632:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 140,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2632:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2654:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2646:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2646:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2666:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2658:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2658:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2631:43:1"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2683:0:1"
									},
									"scope": 193,
									"src": "2606:78:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "2690:732:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3436:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3457:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "3449:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3449:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3471:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "3463:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3463:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3483:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "3475:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3448:43:1"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3500:0:1"
									},
									"scope": 193,
									"src": "3427:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "3507:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3973:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3989:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "3981:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3981:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4001:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "3993:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3993:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3980:29:1"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4018:0:1"
									},
									"scope": 193,
									"src": "3964:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "4025:309:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 174,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4348:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4374:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "4366:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4366:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4389:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "4384:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 170,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4384:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:33:1"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4407:0:1"
									},
									"scope": 193,
									"src": "4339:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 175,
										"nodeType": "StructuredDocumentation",
										"src": "4414:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 182,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4567:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4587:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "4579:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4579:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4578:17:1"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4627:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "4619:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4619:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4618:18:1"
									},
									"scope": 193,
									"src": "4558:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "4643:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4795:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4820:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "4812:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4835:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "4827:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4827:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4811:33:1"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "4868:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4868:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4867:6:1"
									},
									"scope": 193,
									"src": "4786:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 194,
							"src": "250:4626:1",
							"usedErrors": []
						}
					],
					"src": "108:4769:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							395
						],
						"IERC721": [
							193
						],
						"IERC721Metadata": [
							220
						]
					},
					"id": 221,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 195,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 196,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 221,
							"sourceUnit": 194,
							"src": "137:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 198,
										"name": "IERC721",
										"nameLocations": [
											"326:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 193,
										"src": "326:7:2"
									},
									"id": 199,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:2"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 197,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:2",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 220,
							"linearizedBaseContracts": [
								220,
								193,
								395
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:2",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 205,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:2"
									},
									"returnParameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "442:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 202,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:2"
									},
									"scope": 220,
									"src": "403:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:2",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "569:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 208,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:2"
									},
									"scope": 220,
									"src": "528:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:2",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "703:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "743:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 216,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:2"
									},
									"scope": 220,
									"src": "685:73:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 221,
							"src": "297:463:2",
							"usedErrors": []
						}
					],
					"src": "112:649:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
					"exportedSymbols": {
						"IERC777": [
							383
						]
					},
					"id": 384,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 222,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC777",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 223,
								"nodeType": "StructuredDocumentation",
								"src": "133:372:3",
								"text": " @dev Interface of the ERC777Token standard as defined in the EIP.\n This contract uses the\n https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n token holders and recipients react to token movements by using setting implementers\n for the associated interfaces in said registry. See {IERC1820Registry} and\n {ERC1820Implementer}."
							},
							"fullyImplemented": false,
							"id": 383,
							"linearizedBaseContracts": [
								383
							],
							"name": "IERC777",
							"nameLocation": "516:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 224,
										"nodeType": "StructuredDocumentation",
										"src": "530:199:3",
										"text": " @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n Note that some additional user `data` and `operatorData` can be logged in the event."
									},
									"eventSelector": "2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d",
									"id": 236,
									"name": "Minted",
									"nameLocation": "740:6:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "763:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "747:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "747:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "789:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "773:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "773:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "801:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "793:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "815:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "809:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 231,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "827:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "821:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 233,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "821:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "746:94:3"
									},
									"src": "734:107:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "847:187:3",
										"text": " @dev Emitted when `operator` destroys `amount` tokens from `account`.\n Note that some additional user `data` and `operatorData` can be logged in the event."
									},
									"eventSelector": "a78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098",
									"id": 249,
									"name": "Burned",
									"nameLocation": "1045:6:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1068:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1052:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1052:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1094:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1078:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1078:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1108:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1100:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1100:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1122:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1116:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 244,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1116:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "1134:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1128:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 246,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1128:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1051:96:3"
									},
									"src": "1039:109:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "1154:83:3",
										"text": " @dev Emitted when `operator` is made operator for `tokenHolder`."
									},
									"eventSelector": "f4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f9",
									"id": 256,
									"name": "AuthorizedOperator",
									"nameLocation": "1248:18:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1283:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "1267:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "1309:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "1293:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1293:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:55:3"
									},
									"src": "1242:80:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "1328:97:3",
										"text": " @dev Emitted when `operator` is revoked its operator status for `tokenHolder`."
									},
									"eventSelector": "50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa1",
									"id": 263,
									"name": "RevokedOperator",
									"nameLocation": "1436:15:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1468:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1452:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "1494:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1478:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1478:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1451:55:3"
									},
									"src": "1430:77:3"
								},
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "1513:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1581:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1585:2:3"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "1611:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1611:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1610:15:3"
									},
									"scope": 383,
									"src": "1572:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "1632:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 275,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1748:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1754:2:3"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "1780:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 272,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1780:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1779:15:3"
									},
									"scope": 383,
									"src": "1739:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 276,
										"nodeType": "StructuredDocumentation",
										"src": "1801:287:3",
										"text": " @dev Returns the smallest part of the token that is not divisible. This\n means all token operations (creation, movement and destruction) must have\n amounts that are a multiple of this number.\n For most token contracts, this value will equal 1."
									},
									"functionSelector": "556f0dc7",
									"id": 281,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "granularity",
									"nameLocation": "2102:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2113:2:3"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "2139:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2139:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2138:9:3"
									},
									"scope": 383,
									"src": "2093:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "2154:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2234:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2245:2:3"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "2271:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2271:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2270:9:3"
									},
									"scope": 383,
									"src": "2225:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "2286:83:3",
										"text": " @dev Returns the amount of tokens owned by an account (`owner`)."
									},
									"functionSelector": "70a08231",
									"id": 295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2383:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2401:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "2393:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2393:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2392:15:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "2431:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2431:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:9:3"
									},
									"scope": 383,
									"src": "2374:66:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "2446:585:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n If send or receive hooks are registered for the caller and `recipient`,\n the corresponding functions will be called with `data` and empty\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "9bd9bbc6",
									"id": 305,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "3045:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "3058:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3050:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3050:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3077:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3069:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3069:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3100:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3085:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 301,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3085:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3049:56:3"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3114:0:3"
									},
									"scope": 383,
									"src": "3036:79:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "3121:404:3",
										"text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply.\n If a send hook is registered for the caller, the corresponding function\n will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - the caller must have at least `amount` tokens."
									},
									"functionSelector": "fe9d9303",
									"id": 313,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "3539:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3552:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "3544:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3544:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3575:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "3560:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 309,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3560:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3543:37:3"
									},
									"returnParameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3589:0:3"
									},
									"scope": 383,
									"src": "3530:60:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "3596:249:3",
										"text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
									},
									"functionSelector": "d95b6371",
									"id": 323,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOperatorFor",
									"nameLocation": "3859:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3881:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "3873:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3873:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "3899:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "3891:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 317,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3891:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3872:39:3"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "3935:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 320,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3935:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3934:6:3"
									},
									"scope": 383,
									"src": "3850:91:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 324,
										"nodeType": "StructuredDocumentation",
										"src": "3947:233:3",
										"text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n Emits an {AuthorizedOperator} event.\n Requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "959b8c3f",
									"id": 329,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeOperator",
									"nameLocation": "4194:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4220:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "4212:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 325,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4212:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4211:18:3"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4238:0:3"
									},
									"scope": 383,
									"src": "4185:54:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "4245:261:3",
										"text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n Emits a {RevokedOperator} event.\n Requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "fad8b32a",
									"id": 335,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeOperator",
									"nameLocation": "4520:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4543:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "4535:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4535:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4534:18:3"
									},
									"returnParameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4561:0:3"
									},
									"scope": 383,
									"src": "4511:51:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "4568:338:3",
										"text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
									},
									"functionSelector": "06e48538",
									"id": 342,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultOperators",
									"nameLocation": "4920:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4936:2:3"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 342,
												"src": "4962:16:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 338,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "4962:7:3",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 339,
													"nodeType": "ArrayTypeName",
													"src": "4962:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4961:18:3"
									},
									"scope": 383,
									"src": "4911:69:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 343,
										"nodeType": "StructuredDocumentation",
										"src": "4986:714:3",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `data` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "62ad1b83",
									"id": 356,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorSend",
									"nameLocation": "5714:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5744:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5736:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5736:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5768:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5760:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5760:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5795:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5787:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5826:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5811:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 350,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5811:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "5855:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5840:27:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 352,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5840:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5726:147:3"
									},
									"returnParameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5882:0:3"
									},
									"scope": 383,
									"src": "5705:178:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 357,
										"nodeType": "StructuredDocumentation",
										"src": "5889:532:3",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `data` and `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
									},
									"functionSelector": "fc673c4f",
									"id": 368,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorBurn",
									"nameLocation": "6435:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6456:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6448:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6448:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6473:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6465:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6465:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6496:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6481:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 362,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6481:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "6517:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6502:27:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 364,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6502:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6447:83:3"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6539:0:3"
									},
									"scope": 383,
									"src": "6426:114:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"eventSelector": "06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987",
									"id": 382,
									"name": "Sent",
									"nameLocation": "6552:4:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6582:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6566:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6616:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6600:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6646:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6630:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6630:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6666:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6658:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6658:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6688:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6682:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 377,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6682:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 380,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "6708:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6702:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 379,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6702:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6556:170:3"
									},
									"src": "6546:181:3"
								}
							],
							"scope": 384,
							"src": "506:6223:3",
							"usedErrors": []
						}
					],
					"src": "108:6622:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							395
						]
					},
					"id": 396,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 385,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 386,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:4",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 395,
							"linearizedBaseContracts": [
								395
							],
							"name": "IERC165",
							"nameLocation": "415:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 387,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:4",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 394,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "801:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 388,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:4"
									},
									"returnParameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "844:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 391,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:4"
									},
									"scope": 395,
									"src": "774:76:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 396,
							"src": "405:447:4",
							"usedErrors": []
						}
					],
					"src": "100:753:4"
				},
				"id": 4
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
					"exportedSymbols": {
						"IConstantFlowAgreementV1": [
							805
						],
						"ISuperAgreement": [
							1466
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 806,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 397,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:5"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "../superfluid/ISuperAgreement.sol",
							"id": 399,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 806,
							"sourceUnit": 1467,
							"src": "59:68:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 398,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1466,
										"src": "68:15:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "../superfluid/ISuperfluidToken.sol",
							"id": 401,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 806,
							"sourceUnit": 3124,
							"src": "128:70:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 400,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3123,
										"src": "137:16:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 403,
										"name": "ISuperAgreement",
										"nameLocations": [
											"320:15:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1466,
										"src": "320:15:5"
									},
									"id": 404,
									"nodeType": "InheritanceSpecifier",
									"src": "320:15:5"
								}
							],
							"canonicalName": "IConstantFlowAgreementV1",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 402,
								"nodeType": "StructuredDocumentation",
								"src": "200:73:5",
								"text": " @title Constant Flow Agreement interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 805,
							"linearizedBaseContracts": [
								805,
								1466
							],
							"name": "IConstantFlowAgreementV1",
							"nameLocation": "292:24:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "4b993136",
									"id": 406,
									"name": "CFA_ACL_NO_SENDER_CREATE",
									"nameLocation": "523:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "547:2:5"
									},
									"src": "517:33:5"
								},
								{
									"errorSelector": "edfa0d3b",
									"id": 408,
									"name": "CFA_ACL_NO_SENDER_UPDATE",
									"nameLocation": "589:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "613:2:5"
									},
									"src": "583:33:5"
								},
								{
									"errorSelector": "a3eab6ac",
									"id": 410,
									"name": "CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS",
									"nameLocation": "655:38:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "693:2:5"
									},
									"src": "649:47:5"
								},
								{
									"errorSelector": "ac434b5f",
									"id": 412,
									"name": "CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS",
									"nameLocation": "721:38:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"src": "715:47:5"
								},
								{
									"errorSelector": "e30f1bff",
									"id": 414,
									"name": "CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS",
									"nameLocation": "787:38:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "825:2:5"
									},
									"src": "781:47:5"
								},
								{
									"errorSelector": "a0645c1f",
									"id": 416,
									"name": "CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED",
									"nameLocation": "853:36:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "889:2:5"
									},
									"src": "847:45:5"
								},
								{
									"errorSelector": "7939d66c",
									"id": 418,
									"name": "CFA_ACL_UNCLEAN_PERMISSIONS",
									"nameLocation": "919:27:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "946:2:5"
									},
									"src": "913:36:5"
								},
								{
									"errorSelector": "b0ed394d",
									"id": 420,
									"name": "CFA_ACL_NO_SENDER_FLOW_OPERATOR",
									"nameLocation": "985:31:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1016:2:5"
									},
									"src": "979:40:5"
								},
								{
									"errorSelector": "86e0377d",
									"id": 422,
									"name": "CFA_ACL_NO_NEGATIVE_ALLOWANCE",
									"nameLocation": "1051:29:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1080:2:5"
									},
									"src": "1045:38:5"
								},
								{
									"errorSelector": "801b6863",
									"id": 424,
									"name": "CFA_FLOW_ALREADY_EXISTS",
									"nameLocation": "1117:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1140:2:5"
									},
									"src": "1111:32:5"
								},
								{
									"errorSelector": "5a32bf24",
									"id": 426,
									"name": "CFA_FLOW_DOES_NOT_EXIST",
									"nameLocation": "1183:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1206:2:5"
									},
									"src": "1177:32:5"
								},
								{
									"errorSelector": "ea76c9b3",
									"id": 428,
									"name": "CFA_INSUFFICIENT_BALANCE",
									"nameLocation": "1249:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1273:2:5"
									},
									"src": "1243:33:5"
								},
								{
									"errorSelector": "1ce9b067",
									"id": 430,
									"name": "CFA_ZERO_ADDRESS_SENDER",
									"nameLocation": "1315:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:5"
									},
									"src": "1309:32:5"
								},
								{
									"errorSelector": "78e02b2a",
									"id": 432,
									"name": "CFA_ZERO_ADDRESS_RECEIVER",
									"nameLocation": "1381:25:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1406:2:5"
									},
									"src": "1375:34:5"
								},
								{
									"errorSelector": "9f76430b",
									"id": 434,
									"name": "CFA_HOOK_OUT_OF_GAS",
									"nameLocation": "1447:19:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1466:2:5"
									},
									"src": "1441:28:5"
								},
								{
									"errorSelector": "752c2b9c",
									"id": 436,
									"name": "CFA_DEPOSIT_TOO_BIG",
									"nameLocation": "1513:19:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1532:2:5"
									},
									"src": "1507:28:5"
								},
								{
									"errorSelector": "0c9c55c1",
									"id": 438,
									"name": "CFA_FLOW_RATE_TOO_BIG",
									"nameLocation": "1579:21:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1600:2:5"
									},
									"src": "1573:30:5"
								},
								{
									"errorSelector": "ce11b5d1",
									"id": 440,
									"name": "CFA_NON_CRITICAL_SENDER",
									"nameLocation": "1645:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1668:2:5"
									},
									"src": "1639:32:5"
								},
								{
									"errorSelector": "91acad16",
									"id": 442,
									"name": "CFA_INVALID_FLOW_RATE",
									"nameLocation": "1711:21:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1732:2:5"
									},
									"src": "1705:30:5"
								},
								{
									"errorSelector": "a47338ef",
									"id": 444,
									"name": "CFA_NO_SELF_FLOW",
									"nameLocation": "1777:16:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:5"
									},
									"src": "1771:25:5"
								},
								{
									"baseFunctions": [
										1448
									],
									"body": {
										"id": 455,
										"nodeType": "Block",
										"src": "1962:95:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e61677265656d656e74732e436f6e7374616e74466c6f7741677265656d656e742e7631",
															"id": 452,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1989:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3",
																"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\""
															},
															"value": "org.superfluid-finance.agreements.ConstantFlowAgreement.v1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_a9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3",
																"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\""
															}
														],
														"id": 451,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "1979:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 453,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1979:71:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 450,
												"id": 454,
												"nodeType": "Return",
												"src": "1972:78:5"
											}
										]
									},
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "1838:53:5",
										"text": "@dev ISuperAgreement.agreementType implementation"
									},
									"functionSelector": "7730599e",
									"id": 456,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "agreementType",
									"nameLocation": "1905:13:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 447,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1930:8:5"
									},
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1918:2:5"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "1953:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 448,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1953:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1952:9:5"
									},
									"scope": 805,
									"src": "1896:161:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 457,
										"nodeType": "StructuredDocumentation",
										"src": "2063:239:5",
										"text": " @notice Get the maximum flow rate allowed with the deposit\n @dev The deposit is clipped and rounded down\n @param deposit Deposit amount used for creating the flow\n @return flowRate The maximum flow rate"
									},
									"functionSelector": "0602f7db",
									"id": 467,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getMaximumFlowRateFromDeposit",
									"nameLocation": "2316:29:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2372:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "2355:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 459,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 458,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2355:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2355:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "2355:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2395:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "2387:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 461,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2387:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:58:5"
									},
									"returnParameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "2457:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "2451:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 464,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "2451:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2450:16:5"
									},
									"scope": 805,
									"src": "2307:160:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 468,
										"nodeType": "StructuredDocumentation",
										"src": "2473:482:5",
										"text": " @notice Get the deposit required for creating the flow\n @dev Calculates the deposit based on the liquidationPeriod and flowRate\n @param flowRate Flow rate to be tested\n @return deposit The deposit amount based on flowRate and liquidationPeriod\n @custom:note \n - if calculated deposit (flowRate * liquidationPeriod) is less\n   than the minimum deposit, we use the minimum deposit otherwise\n   we use the calculated deposit"
									},
									"functionSelector": "8d997f6e",
									"id": 478,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDepositRequiredForFlowRate",
									"nameLocation": "2969:29:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3025:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "3008:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 470,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 469,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"3008:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "3008:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "3008:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "3046:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "3040:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 472,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "3040:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2998:57:5"
									},
									"returnParameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "3111:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "3103:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3102:17:5"
									},
									"scope": 805,
									"src": "2960:160:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 479,
										"nodeType": "StructuredDocumentation",
										"src": "3126:306:5",
										"text": " @dev Returns whether it is the patrician period based on host.getNow()\n @param account The account we are interested in\n @return isCurrentlyPatricianPeriod Whether it is currently the patrician period dictated by governance\n @return timestamp The value of host.getNow()"
									},
									"functionSelector": "4fe9c291",
									"id": 491,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPatricianPeriodNow",
									"nameLocation": "3446:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3493:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3476:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 481,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 480,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"3476:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "3476:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "3476:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3516:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3508:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 483,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3508:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3466:58:5"
									},
									"returnParameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "isCurrentlyPatricianPeriod",
												"nameLocation": "3577:26:5",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3572:31:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 486,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3572:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3613:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3605:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3605:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3571:52:5"
									},
									"scope": 805,
									"src": "3437:187:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "3630:329:5",
										"text": " @dev Returns whether it is the patrician period based on timestamp\n @param account The account we are interested in\n @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n @return bool Whether it is currently the patrician period dictated by governance"
									},
									"functionSelector": "4b839e0b",
									"id": 504,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPatricianPeriod",
									"nameLocation": "3973:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4017:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "4000:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 494,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 493,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"4000:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "4000:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "4000:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4040:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "4032:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 496,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4032:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "4065:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "4057:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4057:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3990:90:5"
									},
									"returnParameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 502,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "4126:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 501,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4126:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4125:6:5"
									},
									"scope": 805,
									"src": "3964:168:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 505,
										"nodeType": "StructuredDocumentation",
										"src": "4138:464:5",
										"text": " @dev msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\n @param token Super token address\n @param flowOperator The permission grantee address\n @param permissions A bitmask representation of the granted permissions\n @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "811b3d40",
									"id": 521,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlowOperatorPermissions",
									"nameLocation": "4616:29:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4672:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4655:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 507,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 506,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"4655:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "4655:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "4655:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "4695:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4687:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4687:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "4723:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4717:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 511,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4717:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "4750:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4744:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 513,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "4744:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "4792:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4777:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 515,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4777:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4645:156:5"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "4857:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4844:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 518,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4844:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4843:21:5"
									},
									"scope": 805,
									"src": "4607:258:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 522,
										"nodeType": "StructuredDocumentation",
										"src": "4871:508:5",
										"text": " @notice msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\n @dev if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n @param token Super token address\n @param flowOperator The permission grantee address\n @param addedFlowRateAllowance The flow rate allowance delta\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @return newCtx The new context bytes"
									},
									"functionSelector": "ac5f5d00",
									"id": 536,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseFlowRateAllowance",
									"nameLocation": "5393:25:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5445:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5428:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 524,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 523,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"5428:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "5428:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "5428:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "5468:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5460:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5460:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "addedFlowRateAllowance",
												"nameLocation": "5496:22:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5490:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 528,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "5490:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "5543:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5528:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 530,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5528:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5418:134:5"
									},
									"returnParameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "5591:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5578:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 533,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5578:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5577:21:5"
									},
									"scope": 805,
									"src": "5384:215:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 537,
										"nodeType": "StructuredDocumentation",
										"src": "5605:520:5",
										"text": " @dev msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`\n @dev if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n @param token Super token address\n @param flowOperator The permission grantee address\n @param subtractedFlowRateAllowance The flow rate allowance delta\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @return newCtx The new context bytes"
									},
									"functionSelector": "5f51fb23",
									"id": 551,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseFlowRateAllowance",
									"nameLocation": "6139:25:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6191:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6174:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 539,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 538,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"6174:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "6174:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "6174:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "6214:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6206:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "subtractedFlowRateAllowance",
												"nameLocation": "6242:27:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6236:33:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 543,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "6236:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "6294:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6279:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 545,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6279:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6164:139:5"
									},
									"returnParameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "6342:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6329:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 548,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6329:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6328:21:5"
									},
									"scope": 805,
									"src": "6130:220:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 552,
										"nodeType": "StructuredDocumentation",
										"src": "6356:295:5",
										"text": " @dev msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\n @param token Super token address\n @param flowOperator The permission grantee address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "54b770e3",
									"id": 564,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeFlowOperatorWithFullControl",
									"nameLocation": "6665:36:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6728:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "6711:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 554,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 553,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"6711:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "6711:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "6711:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "6751:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "6743:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6743:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "6788:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "6773:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 558,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6773:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6701:96:5"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "6852:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "6839:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 561,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6839:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6838:21:5"
									},
									"scope": 805,
									"src": "6656:204:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 565,
										"nodeType": "StructuredDocumentation",
										"src": "6867:346:5",
										"text": " @notice msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\n @dev `permissions` and `flowRateAllowance` will both be set to 0\n @param token Super token address\n @param flowOperator The permission grantee address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "062e56ec",
									"id": 577,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeFlowOperatorWithFullControl",
									"nameLocation": "7227:33:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7287:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "7270:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 567,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 566,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"7270:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "7270:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "7270:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "7310:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "7302:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7302:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "7347:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "7332:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 571,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7332:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7260:96:5"
									},
									"returnParameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "7411:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "7398:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 574,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7398:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7397:21:5"
									},
									"scope": 805,
									"src": "7218:201:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 578,
										"nodeType": "StructuredDocumentation",
										"src": "7425:553:5",
										"text": " @notice Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\n @param token Super token address\n @param sender The permission granter address\n @param flowOperator The permission grantee address\n @return flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n @return permissions A bitmask representation of the granted permissions\n @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"functionSelector": "00422bbe",
									"id": 594,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowOperatorData",
									"nameLocation": "7992:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8037:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8020:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 580,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 579,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"8020:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "8020:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "8020:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "8059:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8051:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8051:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "8082:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8074:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 584,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8074:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8011:89:5"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "flowOperatorId",
												"nameLocation": "8167:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8159:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 587,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8159:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "8201:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8195:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 589,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8195:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "8232:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8226:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 591,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "8226:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8145:114:5"
									},
									"scope": 805,
									"src": "7983:277:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 595,
										"nodeType": "StructuredDocumentation",
										"src": "8266:394:5",
										"text": " @notice Get flow operator using flowOperatorId\n @param token Super token address\n @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n @return permissions A bitmask representation of the granted permissions\n @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"functionSelector": "09d256ef",
									"id": 607,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowOperatorDataByID",
									"nameLocation": "8674:23:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8723:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8706:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 597,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 596,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"8706:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "8706:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "8706:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "flowOperatorId",
												"nameLocation": "8745:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8737:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 599,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8737:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8697:68:5"
									},
									"returnParameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "8832:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8826:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 602,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8826:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "8863:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8857:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 604,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "8857:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8812:78:5"
									},
									"scope": 805,
									"src": "8665:226:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 608,
										"nodeType": "StructuredDocumentation",
										"src": "8897:741:5",
										"text": " @notice Create a flow betwen ctx.msgSender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @custom:callbacks \n - AgreementCreated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - A deposit is taken as safety margin for the solvency agents\n - A extra gas fee may be taken to pay for solvency agent liquidations"
									},
									"functionSelector": "62fc305e",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createFlow",
									"nameLocation": "9652:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9689:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9672:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 610,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 609,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"9672:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "9672:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "9672:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9712:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9704:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 612,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9704:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "9736:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9730:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 614,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "9730:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "9769:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9754:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 616,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9754:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9662:116:5"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "9833:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9820:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 619,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9820:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9819:21:5"
									},
									"scope": 805,
									"src": "9643:198:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "9847:436:5",
										"text": " @notice Create a flow between sender and receiver\n @dev A flow created by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param sender Flow sender address (has granted permissions)\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "94229ecb",
									"id": 639,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createFlowByOperator",
									"nameLocation": "10297:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "10344:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10327:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 625,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 624,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"10327:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "10327:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "10327:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "10367:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10359:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 627,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10359:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 630,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "10391:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10383:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 629,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10383:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "10415:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10409:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 631,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "10409:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "10448:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10433:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 633,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10433:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10317:140:5"
									},
									"returnParameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "10512:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10499:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 636,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10499:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10498:21:5"
									},
									"scope": 805,
									"src": "10288:232:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 640,
										"nodeType": "StructuredDocumentation",
										"src": "10526:833:5",
										"text": " @notice Update the flow rate between ctx.msgSender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @custom:callbacks \n - AgreementUpdated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - Only the flow sender may update the flow rate\n - Even if the flow rate is zero, the flow is not deleted\n from the system\n - Deposit amount will be adjusted accordingly\n - No new gas fee is charged"
									},
									"functionSelector": "50209a62",
									"id": 654,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlow",
									"nameLocation": "11373:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "11410:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11393:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 642,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 641,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"11393:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "11393:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "11393:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "11433:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11425:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11425:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "11457:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11451:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 646,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "11451:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "11490:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11475:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 648,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11475:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11383:116:5"
									},
									"returnParameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "11554:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11541:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 651,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11541:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11540:21:5"
									},
									"scope": 805,
									"src": "11364:198:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 655,
										"nodeType": "StructuredDocumentation",
										"src": "11568:436:5",
										"text": " @notice Update a flow between sender and receiver\n @dev A flow updated by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param sender Flow sender address (has granted permissions)\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "354b9590",
									"id": 671,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlowByOperator",
									"nameLocation": "12018:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "12065:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12048:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 657,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 656,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"12048:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "12048:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "12048:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "12088:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12080:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12080:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12112:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12104:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 661,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12104:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "12136:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12130:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 663,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "12130:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "12169:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12154:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 665,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12154:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12038:140:5"
									},
									"returnParameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "12233:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12220:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 668,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12220:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12219:21:5"
									},
									"scope": 805,
									"src": "12009:232:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 672,
										"nodeType": "StructuredDocumentation",
										"src": "12247:415:5",
										"text": " @dev Get the flow data between `sender` and `receiver` of `token`\n @param token Super token address\n @param sender Flow receiver\n @param receiver Flow sender\n @return timestamp Timestamp of when the flow is updated\n @return flowRate The flow rate\n @return deposit The amount of deposit the flow\n @return owedDeposit The amount of owed deposit of the flow"
									},
									"functionSelector": "e6a1e888",
									"id": 690,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlow",
									"nameLocation": "12676:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "12710:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12693:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 674,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 673,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"12693:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "12693:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "12693:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "12733:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12725:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12725:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12757:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12749:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12749:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12683:88:5"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "12840:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12832:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12832:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "12869:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12863:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 683,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "12863:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "12899:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12891:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12891:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "12928:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12920:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12920:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12818:131:5"
									},
									"scope": 805,
									"src": "12667:283:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "12956:445:5",
										"text": " @notice Get flow data using agreementId\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param agreementId The agreement ID\n @return timestamp Timestamp of when the flow is updated\n @return flowRate The flow rate\n @return deposit The deposit amount of the flow\n @return owedDeposit The owed deposit amount of the flow"
									},
									"functionSelector": "aabd2668",
									"id": 707,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowByID",
									"nameLocation": "13415:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "13452:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13435:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 693,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 692,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"13435:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "13435:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "13435:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "13474:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13466:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 695,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13466:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13426:65:5"
									},
									"returnParameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "13560:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13552:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 698,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13552:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "13589:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13583:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 700,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "13583:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "13619:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13611:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13611:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "13648:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13640:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 704,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13640:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13538:131:5"
									},
									"scope": 805,
									"src": "13406:264:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 708,
										"nodeType": "StructuredDocumentation",
										"src": "13676:436:5",
										"text": " @dev Get the aggregated flow info of the account\n @param token Super token address\n @param account Account for the query\n @return timestamp Timestamp of when a flow was last updated for account\n @return flowRate The net flow rate of token for account\n @return deposit The sum of all deposits for account's flows\n @return owedDeposit The sum of all owed deposits for account's flows"
									},
									"functionSelector": "0f1ac495",
									"id": 724,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccountFlowInfo",
									"nameLocation": "14126:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14171:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14154:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 710,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 709,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"14154:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "14154:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "14154:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14194:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14186:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14186:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14144:63:5"
									},
									"returnParameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "14276:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14268:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14268:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "14305:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14299:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 717,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "14299:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "14335:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14327:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14327:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "14364:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14356:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14356:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14254:122:5"
									},
									"scope": 805,
									"src": "14117:260:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "14383:182:5",
										"text": " @dev Get the net flow rate of the account\n @param token Super token address\n @param account Account for the query\n @return flowRate Net flow rate"
									},
									"functionSelector": "e8e7e2d1",
									"id": 735,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNetFlow",
									"nameLocation": "14579:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14616:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "14599:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 727,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 726,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"14599:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "14599:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "14599:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14639:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "14631:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14631:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14589:63:5"
									},
									"returnParameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "14706:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "14700:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 732,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "14700:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14699:16:5"
									},
									"scope": 805,
									"src": "14570:146:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "14722:763:5",
										"text": " @notice Delete the flow between sender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @param receiver Flow receiver address\n @custom:callbacks \n - AgreementTerminated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - Both flow sender and receiver may delete the flow\n - If Sender account is insolvent or in critical state, a solvency agent may\n   also terminate the agreement\n - Gas fee may be returned to the sender"
									},
									"functionSelector": "b4b333c6",
									"id": 750,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteFlow",
									"nameLocation": "15499:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 739,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "15536:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15519:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 738,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 737,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"15519:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "15519:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "15519:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 741,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "15559:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15551:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 740,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15551:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 743,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "15583:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15575:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 742,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15575:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "15616:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15601:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 744,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15601:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15509:116:5"
									},
									"returnParameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15680:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15667:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 747,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15667:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15666:21:5"
									},
									"scope": 805,
									"src": "15490:198:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 751,
										"nodeType": "StructuredDocumentation",
										"src": "15694:321:5",
										"text": " @notice Delete the flow between sender and receiver\n @dev A flow deleted by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @param receiver Flow receiver address"
									},
									"functionSelector": "4c8b181f",
									"id": 765,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteFlowByOperator",
									"nameLocation": "16029:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16076:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16059:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 753,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 752,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"16059:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "16059:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "16059:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "16099:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16091:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16091:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 758,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "16123:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16115:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16115:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16156:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16141:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 759,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16141:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16049:116:5"
									},
									"returnParameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16220:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16207:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 762,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16207:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16206:21:5"
									},
									"scope": 805,
									"src": "16020:208:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 766,
										"nodeType": "StructuredDocumentation",
										"src": "16239:353:5",
										"text": " @dev Flow operator updated event\n @param token Super token address\n @param sender Flow sender address\n @param flowOperator Flow operator address\n @param permissions Octo bitmask representation of permissions\n @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"eventSelector": "c0d5d3a6ac18cc1769788c925e6e7fc89cd47e4270a42884736fa9b3ec09f3a8",
									"id": 779,
									"name": "FlowOperatorUpdated",
									"nameLocation": "16603:19:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 769,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16657:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16632:30:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 768,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 767,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"16632:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "16632:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "16632:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 771,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "16688:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16672:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 770,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16672:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 773,
												"indexed": true,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "16720:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16704:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 772,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16704:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 775,
												"indexed": false,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "16748:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16742:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 774,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "16742:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 777,
												"indexed": false,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "16775:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16769:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 776,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "16769:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16622:176:5"
									},
									"src": "16597:202:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 780,
										"nodeType": "StructuredDocumentation",
										"src": "16805:466:5",
										"text": " @dev Flow updated event\n @param token Super token address\n @param sender Flow sender address\n @param receiver Flow recipient address\n @param flowRate Flow rate in amount per second for this flow\n @param totalSenderFlowRate Total flow rate in amount per second for the sender\n @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n @param userData The user provided data"
									},
									"eventSelector": "57269d2ebcccecdcc0d9d2c0a0b80ead95f344e28ec20f50f709811f209d4e0e",
									"id": 797,
									"name": "FlowUpdated",
									"nameLocation": "17282:11:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "17328:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17303:30:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 782,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 781,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"17303:16:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "17303:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "17303:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "17359:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17343:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17343:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "17391:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17375:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 786,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17375:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"indexed": false,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "17415:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17409:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 788,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "17409:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 791,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalSenderFlowRate",
												"nameLocation": "17440:19:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17433:26:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 790,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "17433:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 793,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalReceiverFlowRate",
												"nameLocation": "17476:21:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17469:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 792,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "17469:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 795,
												"indexed": false,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "17513:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17507:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 794,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17507:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17293:234:5"
									},
									"src": "17276:252:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 798,
										"nodeType": "StructuredDocumentation",
										"src": "17534:181:5",
										"text": " @dev Flow updated extension event\n @param flowOperator Flow operator address - the Context.msgSender\n @param deposit The deposit amount for the stream"
									},
									"eventSelector": "71e0c98e270fc3084227b473f176924d5303ece8c639e679998a2d7dc8e70f74",
									"id": 804,
									"name": "FlowUpdatedExtension",
									"nameLocation": "17726:20:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 800,
												"indexed": true,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "17772:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "17756:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 799,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17756:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 802,
												"indexed": false,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "17802:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "17794:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 801,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17794:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17746:69:5"
									},
									"src": "17720:96:5"
								}
							],
							"scope": 806,
							"src": "274:17544:5",
							"usedErrors": [
								406,
								408,
								410,
								412,
								414,
								416,
								418,
								420,
								422,
								424,
								426,
								428,
								430,
								432,
								434,
								436,
								438,
								440,
								442,
								444
							]
						}
					],
					"src": "32:17787:5"
				},
				"id": 5
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
					"exportedSymbols": {
						"BatchOperation": [
							1177
						],
						"ContextDefinitions": [
							1044
						],
						"FlowOperatorDefinitions": [
							1131
						],
						"SuperAppDefinitions": [
							968
						],
						"SuperfluidGovernanceConfigs": [
							1278
						]
					},
					"id": 1279,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 807,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SuperAppDefinitions",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 808,
								"nodeType": "StructuredDocumentation",
								"src": "59:69:6",
								"text": " @title Super app definitions library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 968,
							"linearizedBaseContracts": [
								968
							],
							"name": "SuperAppDefinitions",
							"nameLocation": "137:19:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 811,
									"mutability": "constant",
									"name": "APP_LEVEL_MASK",
									"nameLocation": "612:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "586:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 809,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "586:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "30784646",
										"id": 810,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "629:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0xFF"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 816,
									"mutability": "constant",
									"name": "APP_LEVEL_FINAL",
									"nameLocation": "757:15:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "731:50:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 812,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "731:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"id": 815,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 813,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "775:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "30",
											"id": 814,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "780:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_0_by_1",
												"typeString": "int_const 0"
											},
											"value": "0"
										},
										"src": "775:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 821,
									"mutability": "constant",
									"name": "APP_LEVEL_SECOND",
									"nameLocation": "912:16:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "886:51:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 817,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "886:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"id": 820,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 818,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "931:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "31",
											"id": 819,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "936:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"src": "931:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 835,
										"nodeType": "Block",
										"src": "1023:58:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 830,
																"name": "configWord",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "1046:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"id": 831,
																"name": "APP_LEVEL_MASK",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 811,
																"src": "1059:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1046:27:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 829,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1040:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint8_$",
															"typeString": "type(uint8)"
														},
														"typeName": {
															"id": 828,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "1040:5:6",
															"typeDescriptions": {}
														}
													},
													"id": 833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1040:34:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 827,
												"id": 834,
												"nodeType": "Return",
												"src": "1033:41:6"
											}
										]
									},
									"id": 836,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAppCallbackLevel",
									"nameLocation": "953:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "981:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "973:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 822,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:20:6"
									},
									"returnParameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "1016:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 825,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1016:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1015:7:6"
									},
									"scope": 968,
									"src": "944:137:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 841,
									"mutability": "constant",
									"name": "APP_JAIL_BIT",
									"nameLocation": "1113:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1087:48:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 837,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1087:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_32768_by_1",
											"typeString": "int_const 32768"
										},
										"id": 840,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 838,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1128:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "3135",
											"id": 839,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1133:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_15_by_1",
												"typeString": "int_const 15"
											},
											"value": "15"
										},
										"src": "1128:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_32768_by_1",
											"typeString": "int_const 32768"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 856,
										"nodeType": "Block",
										"src": "1211:75:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 851,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 848,
																	"name": "configWord",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 843,
																	"src": "1229:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"expression": {
																		"id": 849,
																		"name": "SuperAppDefinitions",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 968,
																		"src": "1242:19:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SuperAppDefinitions_$968_$",
																			"typeString": "type(library SuperAppDefinitions)"
																		}
																	},
																	"id": 850,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "1262:12:6",
																	"memberName": "APP_JAIL_BIT",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 841,
																	"src": "1242:32:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1229:45:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 852,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1228:47:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 853,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1278:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1228:51:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 847,
												"id": 855,
												"nodeType": "Return",
												"src": "1221:58:6"
											}
										]
									},
									"id": 857,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isAppJailed",
									"nameLocation": "1150:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "1170:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "1162:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1162:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:20:6"
									},
									"returnParameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "1205:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 845,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1205:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1204:6:6"
									},
									"scope": 968,
									"src": "1141:145:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 862,
									"mutability": "constant",
									"name": "AGREEMENT_CALLBACK_NOOP_BITMASKS",
									"nameLocation": "1519:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1493:71:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 858,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1493:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_1095216660480_by_1",
											"typeString": "int_const 1095216660480"
										},
										"id": 861,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "30784646",
											"id": 859,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1554:4:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_255_by_1",
												"typeString": "int_const 255"
											},
											"value": "0xFF"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "3332",
											"id": 860,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1562:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_32_by_1",
												"typeString": "int_const 32"
											},
											"value": "32"
										},
										"src": "1554:10:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1095216660480_by_1",
											"typeString": "int_const 1095216660480"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 870,
									"mutability": "constant",
									"name": "BEFORE_AGREEMENT_CREATED_NOOP",
									"nameLocation": "1596:29:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1570:71:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 863,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1570:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_4294967296_by_1",
											"typeString": "int_const 4294967296"
										},
										"id": 869,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 864,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1628:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_32_by_1",
														"typeString": "int_const 32"
													},
													"id": 867,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 865,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1634:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "30",
														"id": 866,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1639:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1634:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_32_by_1",
														"typeString": "int_const 32"
													}
												}
											],
											"id": 868,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1633:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_32_by_1",
												"typeString": "int_const 32"
											}
										},
										"src": "1628:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4294967296_by_1",
											"typeString": "int_const 4294967296"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 878,
									"mutability": "constant",
									"name": "AFTER_AGREEMENT_CREATED_NOOP",
									"nameLocation": "1673:28:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1647:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 871,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1647:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_8589934592_by_1",
											"typeString": "int_const 8589934592"
										},
										"id": 877,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 872,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1704:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_33_by_1",
														"typeString": "int_const 33"
													},
													"id": 875,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 873,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1710:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 874,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1715:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1710:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_33_by_1",
														"typeString": "int_const 33"
													}
												}
											],
											"id": 876,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1709:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_33_by_1",
												"typeString": "int_const 33"
											}
										},
										"src": "1704:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_8589934592_by_1",
											"typeString": "int_const 8589934592"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 886,
									"mutability": "constant",
									"name": "BEFORE_AGREEMENT_UPDATED_NOOP",
									"nameLocation": "1749:29:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1723:71:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 879,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_17179869184_by_1",
											"typeString": "int_const 17179869184"
										},
										"id": 885,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 880,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1781:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_34_by_1",
														"typeString": "int_const 34"
													},
													"id": 883,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 881,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1787:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "32",
														"id": 882,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1792:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "1787:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_34_by_1",
														"typeString": "int_const 34"
													}
												}
											],
											"id": 884,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1786:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_34_by_1",
												"typeString": "int_const 34"
											}
										},
										"src": "1781:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_17179869184_by_1",
											"typeString": "int_const 17179869184"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 894,
									"mutability": "constant",
									"name": "AFTER_AGREEMENT_UPDATED_NOOP",
									"nameLocation": "1826:28:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1800:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 887,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1800:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_34359738368_by_1",
											"typeString": "int_const 34359738368"
										},
										"id": 893,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 888,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1857:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_35_by_1",
														"typeString": "int_const 35"
													},
													"id": 891,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 889,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1863:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "33",
														"id": 890,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1868:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "1863:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_35_by_1",
														"typeString": "int_const 35"
													}
												}
											],
											"id": 892,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1862:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_35_by_1",
												"typeString": "int_const 35"
											}
										},
										"src": "1857:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_34359738368_by_1",
											"typeString": "int_const 34359738368"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 902,
									"mutability": "constant",
									"name": "BEFORE_AGREEMENT_TERMINATED_NOOP",
									"nameLocation": "1902:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1876:74:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 895,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1876:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_68719476736_by_1",
											"typeString": "int_const 68719476736"
										},
										"id": 901,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 896,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1937:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_36_by_1",
														"typeString": "int_const 36"
													},
													"id": 899,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 897,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1943:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "34",
														"id": 898,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1948:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "4"
													},
													"src": "1943:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_36_by_1",
														"typeString": "int_const 36"
													}
												}
											],
											"id": 900,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1942:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_36_by_1",
												"typeString": "int_const 36"
											}
										},
										"src": "1937:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_68719476736_by_1",
											"typeString": "int_const 68719476736"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 910,
									"mutability": "constant",
									"name": "AFTER_AGREEMENT_TERMINATED_NOOP",
									"nameLocation": "1982:31:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1956:73:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 903,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1956:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_137438953472_by_1",
											"typeString": "int_const 137438953472"
										},
										"id": 909,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 904,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2016:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_37_by_1",
														"typeString": "int_const 37"
													},
													"id": 907,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 905,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2022:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "35",
														"id": 906,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2027:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_5_by_1",
															"typeString": "int_const 5"
														},
														"value": "5"
													},
													"src": "2022:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_37_by_1",
														"typeString": "int_const 37"
													}
												}
											],
											"id": 908,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "2021:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_37_by_1",
												"typeString": "int_const 37"
											}
										},
										"src": "2016:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_137438953472_by_1",
											"typeString": "int_const 137438953472"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 913,
									"mutability": "constant",
									"name": "APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR",
									"nameLocation": "2247:41:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2221:71:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 911,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2221:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 912,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2291:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 916,
									"mutability": "constant",
									"name": "APP_RULE_NO_REGISTRATION_FOR_EOA",
									"nameLocation": "2324:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2298:62:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 914,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2298:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 915,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2359:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 919,
									"mutability": "constant",
									"name": "APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK",
									"nameLocation": "2392:42:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2366:73:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 917,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2366:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3130",
										"id": 918,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2437:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10_by_1",
											"typeString": "int_const 10"
										},
										"value": "10"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 922,
									"mutability": "constant",
									"name": "APP_RULE_NO_CRITICAL_SENDER_ACCOUNT",
									"nameLocation": "2471:35:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2445:66:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 920,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2445:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3131",
										"id": 921,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2509:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_11_by_1",
											"typeString": "int_const 11"
										},
										"value": "11"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 925,
									"mutability": "constant",
									"name": "APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT",
									"nameLocation": "2543:37:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2517:68:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 923,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2517:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3132",
										"id": 924,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2583:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_12_by_1",
											"typeString": "int_const 12"
										},
										"value": "12"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 928,
									"mutability": "constant",
									"name": "APP_RULE_CTX_IS_READONLY",
									"nameLocation": "2617:24:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2591:55:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 926,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2591:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 927,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2644:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 931,
									"mutability": "constant",
									"name": "APP_RULE_CTX_IS_NOT_CLEAN",
									"nameLocation": "2678:25:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2652:56:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 929,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2652:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3231",
										"id": 930,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2706:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_21_by_1",
											"typeString": "int_const 21"
										},
										"value": "21"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 934,
									"mutability": "constant",
									"name": "APP_RULE_CTX_IS_MALFORMATED",
									"nameLocation": "2740:27:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2714:58:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 932,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2714:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3232",
										"id": 933,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2770:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_22_by_1",
											"typeString": "int_const 22"
										},
										"value": "22"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 937,
									"mutability": "constant",
									"name": "APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED",
									"nameLocation": "2804:41:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2778:72:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 935,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2778:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3330",
										"id": 936,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2848:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_30_by_1",
											"typeString": "int_const 30"
										},
										"value": "30"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 940,
									"mutability": "constant",
									"name": "APP_RULE_COMPOSITE_APP_IS_JAILED",
									"nameLocation": "2882:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2856:63:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 938,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2856:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3331",
										"id": 939,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2917:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_31_by_1",
											"typeString": "int_const 31"
										},
										"value": "31"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 943,
									"mutability": "constant",
									"name": "APP_RULE_MAX_APP_LEVEL_REACHED",
									"nameLocation": "2951:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2925:61:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 941,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2925:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3430",
										"id": 942,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2984:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_40_by_1",
											"typeString": "int_const 40"
										},
										"value": "40"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 966,
										"nodeType": "Block",
										"src": "3179:120:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 950,
																	"name": "configWord",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 945,
																	"src": "3197:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 957,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "~",
																	"prefix": true,
																	"src": "3210:67:6",
																	"subExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 955,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 953,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 951,
																						"name": "APP_LEVEL_MASK",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 811,
																						"src": "3212:14:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "|",
																					"rightExpression": {
																						"id": 952,
																						"name": "APP_JAIL_BIT",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 841,
																						"src": "3229:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3212:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "|",
																				"rightExpression": {
																					"id": 954,
																					"name": "AGREEMENT_CALLBACK_NOOP_BITMASKS",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 862,
																					"src": "3244:32:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3212:64:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 956,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "3211:66:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3197:80:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 959,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3196:82:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 962,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3290:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3282:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 960,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3282:7:6",
																"typeDescriptions": {}
															}
														},
														"id": 963,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3282:10:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3196:96:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 949,
												"id": 965,
												"nodeType": "Return",
												"src": "3189:103:6"
											}
										]
									},
									"id": 967,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isConfigWordClean",
									"nameLocation": "3112:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "3138:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3130:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3130:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3129:20:6"
									},
									"returnParameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3173:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 947,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3173:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3172:6:6"
									},
									"scope": 968,
									"src": "3103:196:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "129:3172:6",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ContextDefinitions",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 969,
								"nodeType": "StructuredDocumentation",
								"src": "3303:67:6",
								"text": " @title Context definitions library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 1044,
							"linearizedBaseContracts": [
								1044
							],
							"name": "ContextDefinitions",
							"nameLocation": "3379:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 972,
									"mutability": "constant",
									"name": "CALL_INFO_APP_LEVEL_MASK",
									"nameLocation": "3626:24:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3600:57:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 970,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3600:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "30784646",
										"id": 971,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3653:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0xFF"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 975,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_SHIFT",
									"nameLocation": "3707:25:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3681:56:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 973,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3681:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3332",
										"id": 974,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3735:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_32_by_1",
											"typeString": "int_const 32"
										},
										"value": "32"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 980,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_MASK",
									"nameLocation": "3769:24:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3743:85:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 976,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3743:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 979,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "307846",
											"id": 977,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3796:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_15_by_1",
												"typeString": "int_const 15"
											},
											"value": "0xF"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"id": 978,
											"name": "CALL_INFO_CALL_TYPE_SHIFT",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 975,
											"src": "3803:25:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "3796:32:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 983,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_AGREEMENT",
									"nameLocation": "3858:29:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3834:57:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 981,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3834:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 982,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3890:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 986,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_APP_ACTION",
									"nameLocation": "3921:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3897:58:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 984,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3897:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 985,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3954:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 989,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_APP_CALLBACK",
									"nameLocation": "3985:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3961:60:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 987,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3961:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 988,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "4020:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1019,
										"nodeType": "Block",
										"src": "4153:172:6",
										"statements": [
											{
												"expression": {
													"id": 1005,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 998,
														"name": "appCallbackLevel",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 994,
														"src": "4163:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1003,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1001,
																	"name": "callInfo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 991,
																	"src": "4188:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1002,
																	"name": "CALL_INFO_APP_LEVEL_MASK",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 972,
																	"src": "4199:24:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4188:35:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1000,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4182:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 999,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "4182:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1004,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4182:42:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4163:61:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1006,
												"nodeType": "ExpressionStatement",
												"src": "4163:61:6"
											},
											{
												"expression": {
													"id": 1017,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1007,
														"name": "callType",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 996,
														"src": "4234:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1015,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1012,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1010,
																				"name": "callInfo",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 991,
																				"src": "4252:8:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&",
																			"rightExpression": {
																				"id": 1011,
																				"name": "CALL_INFO_CALL_TYPE_MASK",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 980,
																				"src": "4263:24:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4252:35:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1013,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4251:37:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"id": 1014,
																	"name": "CALL_INFO_CALL_TYPE_SHIFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 975,
																	"src": "4292:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4251:66:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1009,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4245:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1008,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "4245:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1016,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4245:73:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4234:84:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1018,
												"nodeType": "ExpressionStatement",
												"src": "4234:84:6"
											}
										]
									},
									"id": 1020,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodeCallInfo",
									"nameLocation": "4037:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "callInfo",
												"nameLocation": "4060:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4052:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 990,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4052:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4051:18:6"
									},
									"returnParameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "appCallbackLevel",
												"nameLocation": "4115:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4109:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 993,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4109:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "callType",
												"nameLocation": "4139:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4133:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 995,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4133:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4108:40:6"
									},
									"scope": 1044,
									"src": "4028:297:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1042,
										"nodeType": "Block",
										"src": "4456:100:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1031,
																"name": "appCallbackLevel",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1022,
																"src": "4481:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"id": 1030,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4473:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1029,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4473:7:6",
																"typeDescriptions": {}
															}
														},
														"id": 1032,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4473:25:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "|",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1038,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1035,
																			"name": "callType",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1024,
																			"src": "4510:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 1034,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4502:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1033,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "4502:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1036,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4502:17:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<<",
																"rightExpression": {
																	"id": 1037,
																	"name": "CALL_INFO_CALL_TYPE_SHIFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 975,
																	"src": "4523:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4502:46:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1039,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4501:48:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4473:76:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1028,
												"id": 1041,
												"nodeType": "Return",
												"src": "4466:83:6"
											}
										]
									},
									"id": 1043,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "encodeCallInfo",
									"nameLocation": "4340:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "appCallbackLevel",
												"nameLocation": "4361:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "4355:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1021,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4355:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "callType",
												"nameLocation": "4385:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "4379:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1023,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4379:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4354:40:6"
									},
									"returnParameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "callInfo",
												"nameLocation": "4442:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "4434:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4434:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:18:6"
									},
									"scope": 1044,
									"src": "4331:225:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "3371:1188:6",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "FlowOperatorDefinitions",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1045,
								"nodeType": "StructuredDocumentation",
								"src": "4561:74:6",
								"text": " @title Flow Operator definitions library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 1131,
							"linearizedBaseContracts": [
								1131
							],
							"name": "FlowOperatorDefinitions",
							"nameLocation": "4645:23:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1053,
									"mutability": "constant",
									"name": "AUTHORIZE_FLOW_OPERATOR_CREATE",
									"nameLocation": "4699:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "4675:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1046,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4675:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 1052,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"arguments": [
												{
													"hexValue": "31",
													"id": 1049,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4738:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													}
												],
												"id": 1048,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "4732:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint8_$",
													"typeString": "type(uint8)"
												},
												"typeName": {
													"id": 1047,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4732:5:6",
													"typeDescriptions": {}
												}
											},
											"id": 1050,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "4732:8:6",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "30",
											"id": 1051,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4744:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_0_by_1",
												"typeString": "int_const 0"
											},
											"value": "0"
										},
										"src": "4732:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1061,
									"mutability": "constant",
									"name": "AUTHORIZE_FLOW_OPERATOR_UPDATE",
									"nameLocation": "4775:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "4751:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1054,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4751:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 1060,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"arguments": [
												{
													"hexValue": "31",
													"id": 1057,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4814:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													}
												],
												"id": 1056,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "4808:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint8_$",
													"typeString": "type(uint8)"
												},
												"typeName": {
													"id": 1055,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4808:5:6",
													"typeDescriptions": {}
												}
											},
											"id": 1058,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "4808:8:6",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "31",
											"id": 1059,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4820:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"src": "4808:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1069,
									"mutability": "constant",
									"name": "AUTHORIZE_FLOW_OPERATOR_DELETE",
									"nameLocation": "4851:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "4827:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1062,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4827:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 1068,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"arguments": [
												{
													"hexValue": "31",
													"id": 1065,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4890:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													}
												],
												"id": 1064,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "4884:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint8_$",
													"typeString": "type(uint8)"
												},
												"typeName": {
													"id": 1063,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4884:5:6",
													"typeDescriptions": {}
												}
											},
											"id": 1066,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "4884:8:6",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "32",
											"id": 1067,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4896:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"src": "4884:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1076,
									"mutability": "constant",
									"name": "AUTHORIZE_FULL_CONTROL",
									"nameLocation": "4927:22:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "4903:153:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1070,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4903:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 1075,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"commonType": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"id": 1073,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"leftExpression": {
												"id": 1071,
												"name": "AUTHORIZE_FLOW_OPERATOR_CREATE",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1053,
												"src": "4960:30:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "|",
											"rightExpression": {
												"id": 1072,
												"name": "AUTHORIZE_FLOW_OPERATOR_UPDATE",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1061,
												"src": "4993:30:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"src": "4960:63:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "|",
										"rightExpression": {
											"id": 1074,
											"name": "AUTHORIZE_FLOW_OPERATOR_DELETE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1069,
											"src": "5026:30:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"src": "4960:96:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1086,
									"mutability": "constant",
									"name": "REVOKE_FLOW_OPERATOR_CREATE",
									"nameLocation": "5086:27:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "5062:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1077,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "5062:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"id": 1085,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "~",
										"prefix": true,
										"src": "5116:16:6",
										"subExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1083,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 1080,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5124:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"id": 1079,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5118:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1078,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5118:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1081,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5118:8:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "30",
														"id": 1082,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5130:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5118:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												}
											],
											"id": 1084,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "5117:15:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1096,
									"mutability": "constant",
									"name": "REVOKE_FLOW_OPERATOR_UPDATE",
									"nameLocation": "5162:27:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "5138:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1087,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "5138:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"id": 1095,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "~",
										"prefix": true,
										"src": "5192:16:6",
										"subExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1093,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5200:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"id": 1089,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5194:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1088,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5194:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1091,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5194:8:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "31",
														"id": 1092,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5206:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5194:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												}
											],
											"id": 1094,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "5193:15:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1106,
									"mutability": "constant",
									"name": "REVOKE_FLOW_OPERATOR_DELETE",
									"nameLocation": "5238:27:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "5214:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1097,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "5214:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"id": 1105,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "~",
										"prefix": true,
										"src": "5268:16:6",
										"subExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1103,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 1100,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5276:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"id": 1099,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5270:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1098,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5270:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1101,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5270:8:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "32",
														"id": 1102,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5282:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "5270:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												}
											],
											"id": 1104,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "5269:15:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1129,
										"nodeType": "Block",
										"src": "5367:209:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 1121,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1113,
																	"name": "permissions",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1108,
																	"src": "5398:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "~",
																	"prefix": true,
																	"src": "5412:131:6",
																	"subExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				},
																				"id": 1118,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					},
																					"id": 1116,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1114,
																						"name": "AUTHORIZE_FLOW_OPERATOR_CREATE",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1053,
																						"src": "5414:30:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "|",
																					"rightExpression": {
																						"id": 1115,
																						"name": "AUTHORIZE_FLOW_OPERATOR_UPDATE",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1061,
																						"src": "5463:30:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					},
																					"src": "5414:79:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "|",
																				"rightExpression": {
																					"id": 1117,
																					"name": "AUTHORIZE_FLOW_OPERATOR_DELETE",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1069,
																					"src": "5512:30:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"src": "5414:128:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			}
																		],
																		"id": 1119,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5413:130:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "5398:145:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"id": 1122,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5384:173:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1125,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5567:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1124,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5561:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1123,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5561:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1126,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5561:8:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5384:185:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1112,
												"id": 1128,
												"nodeType": "Return",
												"src": "5377:192:6"
											}
										]
									},
									"id": 1130,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isPermissionsClean",
									"nameLocation": "5300:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "5325:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "5319:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1107,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5319:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:19:6"
									},
									"returnParameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "5361:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1110,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5361:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5360:6:6"
									},
									"scope": 1131,
									"src": "5291:285:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "4637:942:6",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "BatchOperation",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1132,
								"nodeType": "StructuredDocumentation",
								"src": "5581:63:6",
								"text": " @title Batch operation library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 1177,
							"linearizedBaseContracts": [
								1177
							],
							"name": "BatchOperation",
							"nameLocation": "5653:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 1133,
										"nodeType": "StructuredDocumentation",
										"src": "5674:200:6",
										"text": " @dev ERC20.approve batch operation type\n Call spec:\n ISuperToken(target).operationApprove(\n     abi.decode(data, (address spender, uint256 amount))\n )"
									},
									"id": 1136,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_APPROVE",
									"nameLocation": "5904:28:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "5879:57:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1134,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "5879:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 1135,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5935:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1137,
										"nodeType": "StructuredDocumentation",
										"src": "5942:227:6",
										"text": " @dev ERC20.transferFrom batch operation type\n Call spec:\n ISuperToken(target).operationTransferFrom(\n     abi.decode(data, (address sender, address recipient, uint256 amount)\n )"
									},
									"id": 1140,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_TRANSFER_FROM",
									"nameLocation": "6199:34:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "6174:63:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1138,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "6174:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 1139,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6236:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1141,
										"nodeType": "StructuredDocumentation",
										"src": "6243:212:6",
										"text": " @dev ERC777.send batch operation type\n Call spec:\n ISuperToken(target).operationSend(\n     abi.decode(data, (address recipient, uint256 amount, bytes userData)\n )"
									},
									"id": 1144,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC777_SEND",
									"nameLocation": "6485:26:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "6460:55:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1142,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "6460:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 1143,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6514:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1145,
										"nodeType": "StructuredDocumentation",
										"src": "6521:241:6",
										"text": " @dev ERC20.increaseAllowance batch operation type\n Call spec:\n ISuperToken(target).operationIncreaseAllowance(\n     abi.decode(data, (address account, address spender, uint256 addedValue))\n )"
									},
									"id": 1148,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE",
									"nameLocation": "6792:39:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "6767:68:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1146,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "6767:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "34",
										"id": 1147,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6834:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4_by_1",
											"typeString": "int_const 4"
										},
										"value": "4"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1149,
										"nodeType": "StructuredDocumentation",
										"src": "6841:246:6",
										"text": " @dev ERC20.decreaseAllowance batch operation type\n Call spec:\n ISuperToken(target).operationDecreaseAllowance(\n     abi.decode(data, (address account, address spender, uint256 subtractedValue))\n )"
									},
									"id": 1152,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE",
									"nameLocation": "7117:39:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "7092:68:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1150,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7092:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "35",
										"id": 1151,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7159:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_5_by_1",
											"typeString": "int_const 5"
										},
										"value": "5"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1153,
										"nodeType": "StructuredDocumentation",
										"src": "7166:187:6",
										"text": " @dev SuperToken.upgrade batch operation type\n Call spec:\n ISuperToken(target).operationUpgrade(\n     abi.decode(data, (uint256 amount)\n )"
									},
									"id": 1158,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERTOKEN_UPGRADE",
									"nameLocation": "7383:33:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "7358:68:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1154,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7358:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_101_by_1",
											"typeString": "int_const 101"
										},
										"id": 1157,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 1155,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7419:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "313030",
											"id": 1156,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7423:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_100_by_1",
												"typeString": "int_const 100"
											},
											"value": "100"
										},
										"src": "7419:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_101_by_1",
											"typeString": "int_const 101"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1159,
										"nodeType": "StructuredDocumentation",
										"src": "7432:191:6",
										"text": " @dev SuperToken.downgrade batch operation type\n Call spec:\n ISuperToken(target).operationDowngrade(\n     abi.decode(data, (uint256 amount)\n )"
									},
									"id": 1164,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERTOKEN_DOWNGRADE",
									"nameLocation": "7653:35:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "7628:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1160,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7628:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_102_by_1",
											"typeString": "int_const 102"
										},
										"id": 1163,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "32",
											"id": 1161,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7691:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "313030",
											"id": 1162,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7695:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_100_by_1",
												"typeString": "int_const 100"
											},
											"value": "100"
										},
										"src": "7691:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102_by_1",
											"typeString": "int_const 102"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1165,
										"nodeType": "StructuredDocumentation",
										"src": "7704:223:6",
										"text": " @dev Superfluid.callAgreement batch operation type\n Call spec:\n callAgreement(\n     ISuperAgreement(target)),\n     abi.decode(data, (bytes callData, bytes userData)\n )"
									},
									"id": 1170,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT",
									"nameLocation": "7957:40:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "7932:75:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1166,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7932:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_201_by_1",
											"typeString": "int_const 201"
										},
										"id": 1169,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 1167,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8000:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "323030",
											"id": 1168,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8004:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_200_by_1",
												"typeString": "int_const 200"
											},
											"value": "200"
										},
										"src": "8000:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_201_by_1",
											"typeString": "int_const 201"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1171,
										"nodeType": "StructuredDocumentation",
										"src": "8013:172:6",
										"text": " @dev Superfluid.callAppAction batch operation type\n Call spec:\n callAppAction(\n     ISuperApp(target)),\n     data\n )"
									},
									"id": 1176,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION",
									"nameLocation": "8215:41:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "8190:76:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1172,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "8190:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_202_by_1",
											"typeString": "int_const 202"
										},
										"id": 1175,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "32",
											"id": 1173,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8259:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "323030",
											"id": 1174,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8263:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_200_by_1",
												"typeString": "int_const 200"
											},
											"value": "200"
										},
										"src": "8259:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_202_by_1",
											"typeString": "int_const 202"
										}
									},
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "5645:2624:6",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SuperfluidGovernanceConfigs",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1178,
								"nodeType": "StructuredDocumentation",
								"src": "8271:77:6",
								"text": " @title Superfluid governance configs library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 1278,
							"linearizedBaseContracts": [
								1278
							],
							"name": "SuperfluidGovernanceConfigs",
							"nameLocation": "8357:27:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1183,
									"mutability": "constant",
									"name": "SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY",
									"nameLocation": "8418:36:6",
									"nodeType": "VariableDeclaration",
									"scope": 1278,
									"src": "8392:133:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1179,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8392:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e72657761726441646472657373",
												"id": 1181,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "8475:49:6",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_9f60ae461adf056670e03ae602566409933242392cb06744f5747c9f38b05d09",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.rewardAddress\""
												},
												"value": "org.superfluid-finance.superfluid.rewardAddress"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_9f60ae461adf056670e03ae602566409933242392cb06744f5747c9f38b05d09",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.rewardAddress\""
												}
											],
											"id": 1180,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "8465:9:6",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1182,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "8465:60:6",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1188,
									"mutability": "constant",
									"name": "CFAV1_PPP_CONFIG_KEY",
									"nameLocation": "8557:20:6",
									"nodeType": "VariableDeclaration",
									"scope": 1278,
									"src": "8531:145:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1184,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8531:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e61677265656d656e74732e436f6e7374616e74466c6f7741677265656d656e742e76312e505050436f6e66696775726174696f6e",
												"id": 1186,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "8598:77:6",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_e420d96e81cb4a6b2abb2366c4f93312d4e2ae878a7d4b22e73472fdad891f78",
													"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\""
												},
												"value": "org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_e420d96e81cb4a6b2abb2366c4f93312d4e2ae878a7d4b22e73472fdad891f78",
													"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\""
												}
											],
											"id": 1185,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "8588:9:6",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1187,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "8588:88:6",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1193,
									"mutability": "constant",
									"name": "SUPERTOKEN_MINIMUM_DEPOSIT_KEY",
									"nameLocation": "8708:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1278,
									"src": "8682:138:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1189,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8682:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e7375706572546f6b656e4d696e696d756d4465706f736974",
												"id": 1191,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "8759:60:6",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_eae305fa863b373417e615b1044222e2806cefc7788d169ce6748a443c3f6cc4",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.superTokenMinimumDeposit\""
												},
												"value": "org.superfluid-finance.superfluid.superTokenMinimumDeposit"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_eae305fa863b373417e615b1044222e2806cefc7788d169ce6748a443c3f6cc4",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.superTokenMinimumDeposit\""
												}
											],
											"id": 1190,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "8749:9:6",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1192,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "8749:71:6",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1208,
										"nodeType": "Block",
										"src": "8916:135:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e74727573746564466f72776172646572",
																	"id": 1203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8967:52:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_5e8d8c86403ce515d0afc5f813484261c20de0e66deea95df3a7de50a4365fdd",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.trustedForwarder\""
																	},
																	"value": "org.superfluid-finance.superfluid.trustedForwarder"
																},
																{
																	"id": 1204,
																	"name": "forwarder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1195,
																	"src": "9033:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_5e8d8c86403ce515d0afc5f813484261c20de0e66deea95df3a7de50a4365fdd",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.trustedForwarder\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1201,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8943:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "8947:6:6",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "8943:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8943:100:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1200,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "8933:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8933:111:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1199,
												"id": 1207,
												"nodeType": "Return",
												"src": "8926:118:6"
											}
										]
									},
									"id": 1209,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTrustedForwarderConfigKey",
									"nameLocation": "8836:28:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "forwarder",
												"nameLocation": "8873:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "8865:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8865:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8864:19:6"
									},
									"returnParameters": {
										"id": 1199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "8907:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1197,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8907:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8906:9:6"
									},
									"scope": 1278,
									"src": "8827:224:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1227,
										"nodeType": "Block",
										"src": "9187:178:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e61707057686974654c697374696e672e726567697374726174696f6e4b6579",
																	"id": 1221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9238:67:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2ac2eda5c308a51ed3bd3433d0d20fe487916751b3404fa382719429ef24259a",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\""
																	},
																	"value": "org.superfluid-finance.superfluid.appWhiteListing.registrationKey"
																},
																{
																	"id": 1222,
																	"name": "deployer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1211,
																	"src": "9319:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1223,
																	"name": "registrationKey",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1213,
																	"src": "9341:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_2ac2eda5c308a51ed3bd3433d0d20fe487916751b3404fa382719429ef24259a",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 1219,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9214:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1220,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9218:6:6",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "9214:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9214:143:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1218,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9204:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9204:154:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1217,
												"id": 1226,
												"nodeType": "Return",
												"src": "9197:161:6"
											}
										]
									},
									"id": 1228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAppRegistrationConfigKey",
									"nameLocation": "9066:27:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "deployer",
												"nameLocation": "9102:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "9094:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9094:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "registrationKey",
												"nameLocation": "9126:15:6",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "9112:29:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1212,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9112:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9093:49:6"
									},
									"returnParameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1216,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "9174:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1215,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9174:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9173:9:6"
									},
									"scope": 1278,
									"src": "9057:308:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1243,
										"nodeType": "Block",
										"src": "9456:140:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e61707057686974654c697374696e672e666163746f7279",
																	"id": 1238,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9507:59:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_3a9ec29d76a01dd4676b43ee8f5ae7a021577f823fb495dfb5627ad6bbb890b6",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.factory\""
																	},
																	"value": "org.superfluid-finance.superfluid.appWhiteListing.factory"
																},
																{
																	"id": 1239,
																	"name": "factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1230,
																	"src": "9580:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_3a9ec29d76a01dd4676b43ee8f5ae7a021577f823fb495dfb5627ad6bbb890b6",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.factory\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1236,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9483:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1237,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9487:6:6",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "9483:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1240,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9483:105:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1235,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9473:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9473:116:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1234,
												"id": 1242,
												"nodeType": "Return",
												"src": "9466:123:6"
											}
										]
									},
									"id": 1244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAppFactoryConfigKey",
									"nameLocation": "9380:22:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "9411:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "9403:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9402:17:6"
									},
									"returnParameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "9443:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1232,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9443:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9442:9:6"
									},
									"scope": 1278,
									"src": "9371:225:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1276,
										"nodeType": "Block",
										"src": "9733:129:6",
										"statements": [
											{
												"expression": {
													"id": 1264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1253,
														"name": "liquidationPeriod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1249,
														"src": "9743:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1254,
																		"name": "pppConfig",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1246,
																		"src": "9764:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">>",
																	"rightExpression": {
																		"hexValue": "3332",
																		"id": 1255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9777:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_32_by_1",
																			"typeString": "int_const 32"
																		},
																		"value": "32"
																	},
																	"src": "9764:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1257,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "9763:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1260,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9788:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		},
																		"typeName": {
																			"id": 1259,
																			"name": "uint32",
																			"nodeType": "ElementaryTypeName",
																			"src": "9788:6:6",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		}
																	],
																	"id": 1258,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "9783:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1261,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9783:12:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint32",
																	"typeString": "type(uint32)"
																}
															},
															"id": 1262,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "9796:3:6",
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "9783:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "9763:36:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9743:56:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1265,
												"nodeType": "ExpressionStatement",
												"src": "9743:56:6"
											},
											{
												"expression": {
													"id": 1274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1266,
														"name": "patricianPeriod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1251,
														"src": "9809:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1273,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1267,
															"name": "pppConfig",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "9827:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9844:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		},
																		"typeName": {
																			"id": 1269,
																			"name": "uint32",
																			"nodeType": "ElementaryTypeName",
																			"src": "9844:6:6",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		}
																	],
																	"id": 1268,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "9839:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1271,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9839:12:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint32",
																	"typeString": "type(uint32)"
																}
															},
															"id": 1272,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "9852:3:6",
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "9839:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "9827:28:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9809:46:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1275,
												"nodeType": "ExpressionStatement",
												"src": "9809:46:6"
											}
										]
									},
									"id": 1277,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodePPPConfig",
									"nameLocation": "9611:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "pppConfig",
												"nameLocation": "9635:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "9627:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9627:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9626:19:6"
									},
									"returnParameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "liquidationPeriod",
												"nameLocation": "9685:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "9677:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9677:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "patricianPeriod",
												"nameLocation": "9712:15:6",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "9704:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9704:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9676:52:6"
									},
									"scope": 1278,
									"src": "9602:260:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "8349:1515:6",
							"usedErrors": []
						}
					],
					"src": "32:9833:6"
				},
				"id": 6
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
					"exportedSymbols": {
						"IConstantInflowNFT": [
							1303
						],
						"IFlowNFTBase": [
							1431
						],
						"ISuperToken": [
							2054
						]
					},
					"id": 1304,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1280,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:7"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 1282,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1304,
							"sourceUnit": 2055,
							"src": "58:48:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1281,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2054,
										"src": "67:11:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
							"file": "./IFlowNFTBase.sol",
							"id": 1284,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1304,
							"sourceUnit": 1432,
							"src": "107:50:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1283,
										"name": "IFlowNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1431,
										"src": "116:12:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1285,
										"name": "IFlowNFTBase",
										"nameLocations": [
											"191:12:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1431,
										"src": "191:12:7"
									},
									"id": 1286,
									"nodeType": "InheritanceSpecifier",
									"src": "191:12:7"
								}
							],
							"canonicalName": "IConstantInflowNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1303,
							"linearizedBaseContracts": [
								1303,
								1431,
								220,
								193,
								395
							],
							"name": "IConstantInflowNFT",
							"nameLocation": "169:18:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "e81ef57a",
									"id": 1288,
									"name": "CIF_NFT_ONLY_CONSTANT_OUTFLOW",
									"nameLocation": "397:29:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "426:2:7"
									},
									"src": "391:38:7"
								},
								{
									"documentation": {
										"id": 1289,
										"nodeType": "StructuredDocumentation",
										"src": "633:333:7",
										"text": "@notice The mint function emits the \"mint\" `Transfer` event.\n @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n is to inform clients that search for events.\n @param to the flow receiver (inflow NFT receiver)\n @param newTokenId the new token id"
									},
									"functionSelector": "40c10f19",
									"id": 1296,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "980:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "993:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "985:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "985:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "newTokenId",
												"nameLocation": "1005:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "997:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "997:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "984:32:7"
									},
									"returnParameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1025:0:7"
									},
									"scope": 1303,
									"src": "971:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1297,
										"nodeType": "StructuredDocumentation",
										"src": "1032:281:7",
										"text": "@notice This burn function emits the \"burn\" `Transfer` event.\n @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n is to inform clients that search for events.\n @param tokenId desired token id to burn"
									},
									"functionSelector": "42966c68",
									"id": 1302,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "1327:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1340:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "1332:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:17:7"
									},
									"returnParameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1357:0:7"
									},
									"scope": 1303,
									"src": "1318:40:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1304,
							"src": "159:1201:7",
							"usedErrors": [
								1288,
								1376,
								1378,
								1380,
								1382,
								1384,
								1386,
								1388,
								1390,
								1392
							]
						}
					],
					"src": "32:1329:7"
				},
				"id": 7
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
					"exportedSymbols": {
						"IConstantOutflowNFT": [
							1357
						],
						"IFlowNFTBase": [
							1431
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 1358,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1305,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:8"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 1307,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1358,
							"sourceUnit": 3124,
							"src": "58:58:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1306,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3123,
										"src": "67:16:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
							"file": "./IFlowNFTBase.sol",
							"id": 1309,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1358,
							"sourceUnit": 1432,
							"src": "117:50:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1308,
										"name": "IFlowNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1431,
										"src": "126:12:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1310,
										"name": "IFlowNFTBase",
										"nameLocations": [
											"202:12:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1431,
										"src": "202:12:8"
									},
									"id": 1311,
									"nodeType": "InheritanceSpecifier",
									"src": "202:12:8"
								}
							],
							"canonicalName": "IConstantOutflowNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1357,
							"linearizedBaseContracts": [
								1357,
								1431,
								220,
								193,
								395
							],
							"name": "IConstantOutflowNFT",
							"nameLocation": "179:19:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "6de98774",
									"id": 1313,
									"name": "COF_NFT_INVALID_SUPER_TOKEN",
									"nameLocation": "409:27:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "436:2:8"
									},
									"src": "403:36:8"
								},
								{
									"errorSelector": "a07fa909",
									"id": 1315,
									"name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
									"nameLocation": "475:38:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:8"
									},
									"src": "469:47:8"
								},
								{
									"errorSelector": "43d05e51",
									"id": 1317,
									"name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
									"nameLocation": "541:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "569:2:8"
									},
									"src": "535:37:8"
								},
								{
									"errorSelector": "a495a718",
									"id": 1319,
									"name": "COF_NFT_ONLY_CONSTANT_INFLOW",
									"nameLocation": "607:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:8"
									},
									"src": "601:37:8"
								},
								{
									"errorSelector": "d367b64f",
									"id": 1321,
									"name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
									"nameLocation": "673:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "701:2:8"
									},
									"src": "667:37:8"
								},
								{
									"errorSelector": "e2480183",
									"id": 1323,
									"name": "COF_NFT_TOKEN_ALREADY_EXISTS",
									"nameLocation": "739:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "767:2:8"
									},
									"src": "733:37:8"
								},
								{
									"documentation": {
										"id": 1324,
										"nodeType": "StructuredDocumentation",
										"src": "985:227:8",
										"text": "@notice The onCreate function is called when a new flow is created.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "f7e3d983",
									"id": 1334,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onCreate",
									"nameLocation": "1226:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1252:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "1235:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1326,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1325,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1235:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "1235:16:8"
													},
													"referencedDeclaration": 3123,
													"src": "1235:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1267:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "1259:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1328,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1259:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1287:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "1279:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1279:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:66:8"
									},
									"returnParameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1309:0:8"
									},
									"scope": 1357,
									"src": "1217:93:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1335,
										"nodeType": "StructuredDocumentation",
										"src": "1316:223:8",
										"text": "@notice The onUpdate function is called when a flow is updated.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "eb54a7ca",
									"id": 1345,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onUpdate",
									"nameLocation": "1553:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1338,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1579:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "1562:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1337,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1336,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1562:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "1562:16:8"
													},
													"referencedDeclaration": 3123,
													"src": "1562:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1340,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1594:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "1586:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1586:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1614:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "1606:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1606:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1561:66:8"
									},
									"returnParameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1636:0:8"
									},
									"scope": 1357,
									"src": "1544:93:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1346,
										"nodeType": "StructuredDocumentation",
										"src": "1643:223:8",
										"text": "@notice The onDelete function is called when a flow is deleted.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "ef1f0237",
									"id": 1356,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onDelete",
									"nameLocation": "1880:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1906:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "1889:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1348,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1347,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1889:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "1889:16:8"
													},
													"referencedDeclaration": 3123,
													"src": "1889:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1921:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "1913:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1941:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "1933:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1933:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1888:66:8"
									},
									"returnParameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1963:0:8"
									},
									"scope": 1357,
									"src": "1871:93:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1358,
							"src": "169:1797:8",
							"usedErrors": [
								1313,
								1315,
								1317,
								1319,
								1321,
								1323,
								1376,
								1378,
								1380,
								1382,
								1384,
								1386,
								1388,
								1390,
								1392
							]
						}
					],
					"src": "32:1935:8"
				},
				"id": 8
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
					"exportedSymbols": {
						"IERC721Metadata": [
							220
						],
						"IFlowNFTBase": [
							1431
						],
						"ISuperToken": [
							2054
						]
					},
					"id": 1432,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1359,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 1361,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1432,
							"sourceUnit": 221,
							"src": "58:106:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1360,
										"name": "IERC721Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 220,
										"src": "71:15:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 1363,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1432,
							"sourceUnit": 2055,
							"src": "165:48:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1362,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2054,
										"src": "174:11:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1364,
										"name": "IERC721Metadata",
										"nameLocations": [
											"241:15:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "241:15:9"
									},
									"id": 1365,
									"nodeType": "InheritanceSpecifier",
									"src": "241:15:9"
								}
							],
							"canonicalName": "IFlowNFTBase",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1431,
							"linearizedBaseContracts": [
								1431,
								220,
								193,
								395
							],
							"name": "IFlowNFTBase",
							"nameLocation": "225:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IFlowNFTBase.FlowNFTData",
									"id": 1374,
									"members": [
										{
											"constant": false,
											"id": 1367,
											"mutability": "mutable",
											"name": "superToken",
											"nameLocation": "628:10:9",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "620:18:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1366,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "620:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1369,
											"mutability": "mutable",
											"name": "flowSender",
											"nameLocation": "656:10:9",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "648:18:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1368,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "648:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1371,
											"mutability": "mutable",
											"name": "flowReceiver",
											"nameLocation": "684:12:9",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "676:20:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1370,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "676:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1373,
											"mutability": "mutable",
											"name": "flowStartDate",
											"nameLocation": "713:13:9",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "706:20:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 1372,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "706:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "FlowNFTData",
									"nameLocation": "598:11:9",
									"nodeType": "StructDefinition",
									"scope": 1431,
									"src": "591:142:9",
									"visibility": "public"
								},
								{
									"errorSelector": "a3352582",
									"id": 1376,
									"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "927:52:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "979:2:9"
									},
									"src": "921:61:9"
								},
								{
									"errorSelector": "d3c77329",
									"id": 1378,
									"name": "CFA_NFT_APPROVE_TO_CALLER",
									"nameLocation": "1009:25:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1034:2:9"
									},
									"src": "1003:34:9"
								},
								{
									"errorSelector": "e4790b25",
									"id": 1380,
									"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
									"nameLocation": "1091:32:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:9"
									},
									"src": "1085:41:9"
								},
								{
									"errorSelector": "eab95e3b",
									"id": 1382,
									"name": "CFA_NFT_INVALID_TOKEN_ID",
									"nameLocation": "1173:24:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1197:2:9"
									},
									"src": "1167:33:9"
								},
								{
									"errorSelector": "ebb7505b",
									"id": 1384,
									"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
									"nameLocation": "1255:32:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1383,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1287:2:9"
									},
									"src": "1249:41:9"
								},
								{
									"errorSelector": "2551d606",
									"id": 1386,
									"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "1337:53:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1385,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1390:2:9"
									},
									"src": "1331:62:9"
								},
								{
									"errorSelector": "5a26c744",
									"id": 1388,
									"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
									"nameLocation": "1419:37:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1456:2:9"
									},
									"src": "1413:46:9"
								},
								{
									"errorSelector": "aa747eca",
									"id": 1390,
									"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
									"nameLocation": "1501:31:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1389,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1532:2:9"
									},
									"src": "1495:40:9"
								},
								{
									"errorSelector": "de06d21e",
									"id": 1392,
									"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
									"nameLocation": "1583:32:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1615:2:9"
									},
									"src": "1577:41:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1393,
										"nodeType": "StructuredDocumentation",
										"src": "1835:233:9",
										"text": "@notice Informs third-party platforms that NFT metadata should be updated\n @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n @param tokenId the id of the token that should have its metadata updated"
									},
									"eventSelector": "f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7",
									"id": 1397,
									"name": "MetadataUpdate",
									"nameLocation": "2079:14:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1395,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2102:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1397,
												"src": "2094:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1394,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2094:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2093:17:9"
									},
									"src": "2073:38:9"
								},
								{
									"documentation": {
										"id": 1398,
										"nodeType": "StructuredDocumentation",
										"src": "2290:170:9",
										"text": "@notice An external function for querying flow data by `tokenId``\n @param tokenId the token id\n @return flowData the flow data associated with `tokenId`"
									},
									"functionSelector": "8d47859e",
									"id": 1406,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flowDataByTokenId",
									"nameLocation": "2474:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1400,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2509:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "2501:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2501:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2491:31:9"
									},
									"returnParameters": {
										"id": 1405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "flowData",
												"nameLocation": "2565:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "2546:27:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FlowNFTData_$1374_memory_ptr",
													"typeString": "struct IFlowNFTBase.FlowNFTData"
												},
												"typeName": {
													"id": 1403,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1402,
														"name": "FlowNFTData",
														"nameLocations": [
															"2546:11:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1374,
														"src": "2546:11:9"
													},
													"referencedDeclaration": 1374,
													"src": "2546:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FlowNFTData_$1374_storage_ptr",
														"typeString": "struct IFlowNFTBase.FlowNFTData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2545:29:9"
									},
									"scope": 1431,
									"src": "2465:110:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1407,
										"nodeType": "StructuredDocumentation",
										"src": "2581:345:9",
										"text": "@notice An external function for computing the deterministic tokenId\n @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n @param superToken the super token\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n @return tokenId the tokenId"
									},
									"functionSelector": "89f71d2d",
									"id": 1418,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenId",
									"nameLocation": "2940:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2968:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "2960:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2960:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "2996:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "2988:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2988:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "3024:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "3016:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2950:92:9"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "3066:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1415,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3066:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3065:9:9"
									},
									"scope": 1431,
									"src": "2931:144:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4cd88b76",
									"id": 1425,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "3264:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1420,
												"mutability": "mutable",
												"name": "nftName",
												"nameLocation": "3298:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "3284:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1419,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3284:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1422,
												"mutability": "mutable",
												"name": "nftSymbol",
												"nameLocation": "3329:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "3315:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1421,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3315:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3274:70:9"
									},
									"returnParameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3353:0:9"
									},
									"scope": 1431,
									"src": "3255:99:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2f388560",
									"id": 1430,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "triggerMetadataUpdate",
									"nameLocation": "3385:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1427,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3415:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "3407:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3407:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3406:17:9"
									},
									"returnParameters": {
										"id": 1429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3432:0:9"
									},
									"scope": 1431,
									"src": "3376:57:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1432,
							"src": "215:3220:9",
							"usedErrors": [
								1376,
								1378,
								1380,
								1382,
								1384,
								1386,
								1388,
								1390,
								1392
							]
						}
					],
					"src": "32:3404:9"
				},
				"id": 9
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
					"exportedSymbols": {
						"IPoolAdminNFT": [
							1434
						]
					},
					"id": 1435,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1433,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolAdminNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 1434,
							"linearizedBaseContracts": [
								1434
							],
							"name": "IPoolAdminNFT",
							"nameLocation": "68:13:10",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1435,
							"src": "58:26:10",
							"usedErrors": []
						}
					],
					"src": "32:52:10"
				},
				"id": 10
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
					"exportedSymbols": {
						"IPoolMemberNFT": [
							1437
						]
					},
					"id": 1438,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1436,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolMemberNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 1437,
							"linearizedBaseContracts": [
								1437
							],
							"name": "IPoolMemberNFT",
							"nameLocation": "68:14:11",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1438,
							"src": "58:27:11",
							"usedErrors": []
						}
					],
					"src": "32:53:11"
				},
				"id": 11
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							1466
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 1467,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1439,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:12"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 1441,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1467,
							"sourceUnit": 3124,
							"src": "59:58:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1440,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3123,
										"src": "68:16:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperAgreement",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1442,
								"nodeType": "StructuredDocumentation",
								"src": "119:65:12",
								"text": " @title Super agreement interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 1466,
							"linearizedBaseContracts": [
								1466
							],
							"name": "ISuperAgreement",
							"nameLocation": "195:15:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1443,
										"nodeType": "StructuredDocumentation",
										"src": "218:59:12",
										"text": " @dev Get the type of the agreement class"
									},
									"functionSelector": "7730599e",
									"id": 1448,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "agreementType",
									"nameLocation": "291:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "304:2:12"
									},
									"returnParameters": {
										"id": 1447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1446,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "330:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1445,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "330:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "329:9:12"
									},
									"scope": 1466,
									"src": "282:57:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1449,
										"nodeType": "StructuredDocumentation",
										"src": "345:425:12",
										"text": " @dev Calculate the real-time balance for the account of this agreement class\n @param account Account the state belongs to\n @param time Time used for the calculation\n @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n @return deposit Account deposit amount of this agreement\n @return owedDeposit Account owed deposit amount of this agreement"
									},
									"functionSelector": "9b2e48bc",
									"id": 1465,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "784:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "828:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "811:22:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1451,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1450,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"811:16:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "811:16:12"
													},
													"referencedDeclaration": 3123,
													"src": "811:16:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1454,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "851:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "843:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "843:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "876:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "868:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "868:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "801:85:12"
									},
									"returnParameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1459,
												"mutability": "mutable",
												"name": "dynamicBalance",
												"nameLocation": "954:14:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "947:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1458,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "947:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "990:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "982:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "1019:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1011:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "933:107:12"
									},
									"scope": 1466,
									"src": "775:266:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1467,
							"src": "185:859:12",
							"usedErrors": []
						}
					],
					"src": "32:1013:12"
				},
				"id": 12
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
					"exportedSymbols": {
						"ISuperApp": [
							1580
						],
						"ISuperToken": [
							2054
						]
					},
					"id": 1581,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1468,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:13"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 1470,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 2055,
							"src": "59:48:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1469,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2054,
										"src": "68:11:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperApp",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1471,
								"nodeType": "StructuredDocumentation",
								"src": "109:133:13",
								"text": " @title SuperApp interface\n @author Superfluid\n @dev Be aware of the app being jailed, when the word permitted is used."
							},
							"fullyImplemented": false,
							"id": 1580,
							"linearizedBaseContracts": [
								1580
							],
							"name": "ISuperApp",
							"nameLocation": "253:9:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1472,
										"nodeType": "StructuredDocumentation",
										"src": "270:630:13",
										"text": " @dev Callback before a new agreement is created.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param ctx The context data.\n @return cbdata A free format in memory data the app can use to pass\n          arbitary information to the after-hook callback.\n @custom:note \n - It will be invoked with `staticcall`, no state changes are permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "30d9c915",
									"id": 1488,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeAgreementCreated",
									"nameLocation": "914:22:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "958:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "946:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1474,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1473,
														"name": "ISuperToken",
														"nameLocations": [
															"946:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "946:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "946:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "986:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "978:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "978:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "1018:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "1010:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1478,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1481,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "1054:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "1039:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1480,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1039:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "1092:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "1077:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1482,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1077:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "936:165:13"
									},
									"returnParameters": {
										"id": 1487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1486,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "1162:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "1149:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1485,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1149:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1148:21:13"
									},
									"scope": 1580,
									"src": "905:265:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1489,
										"nodeType": "StructuredDocumentation",
										"src": "1176:579:13",
										"text": " @dev Callback after a new agreement is created.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param cbdata The data returned from the before-hook callback.\n @param ctx The context data.\n @return newCtx The current context of the transaction.\n @custom:note \n - State changes is permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "d86ed3e5",
									"id": 1507,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "afterAgreementCreated",
									"nameLocation": "1769:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1812:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1800:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1491,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1490,
														"name": "ISuperToken",
														"nameLocations": [
															"1800:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "1800:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "1800:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1494,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "1840:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1832:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1832:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "1872:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1864:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1495,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1864:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "1908:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1893:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1497,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1893:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "1946:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1931:21:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1499,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1931:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "1977:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1962:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1501,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1962:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1790:196:13"
									},
									"returnParameters": {
										"id": 1506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "2034:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "2021:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1504,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2021:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2020:21:13"
									},
									"scope": 1580,
									"src": "1760:282:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1508,
										"nodeType": "StructuredDocumentation",
										"src": "2048:630:13",
										"text": " @dev Callback before a new agreement is updated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param ctx The context data.\n @return cbdata A free format in memory data the app can use to pass\n          arbitary information to the after-hook callback.\n @custom:note \n - It will be invoked with `staticcall`, no state changes are permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "884d1f40",
									"id": 1524,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeAgreementUpdated",
									"nameLocation": "2692:22:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1511,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2736:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2724:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1510,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1509,
														"name": "ISuperToken",
														"nameLocations": [
															"2724:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "2724:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "2724:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1513,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "2764:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2756:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1512,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2756:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1515,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "2796:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2788:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1514,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "2832:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2817:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1516,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2817:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "2870:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2855:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1518,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2855:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2714:165:13"
									},
									"returnParameters": {
										"id": 1523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "2940:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2927:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1521,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2927:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2926:21:13"
									},
									"scope": 1580,
									"src": "2683:265:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1525,
										"nodeType": "StructuredDocumentation",
										"src": "2955:566:13",
										"text": " @dev Callback after a new agreement is updated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param cbdata The data returned from the before-hook callback.\n @param ctx The context data.\n @return newCtx The current context of the transaction.\n @custom:note \n - State changes is permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "230dbd29",
									"id": 1543,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "afterAgreementUpdated",
									"nameLocation": "3535:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "3578:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3566:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1527,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1526,
														"name": "ISuperToken",
														"nameLocations": [
															"3566:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "3566:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "3566:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "3606:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3598:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3598:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "3638:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3630:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1531,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "3674:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3659:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1533,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3659:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "3712:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3697:21:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1535,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3697:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "3743:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3728:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1537,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3728:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3556:196:13"
									},
									"returnParameters": {
										"id": 1542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1541,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "3800:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3787:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1540,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3787:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3786:21:13"
									},
									"scope": 1580,
									"src": "3526:282:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1544,
										"nodeType": "StructuredDocumentation",
										"src": "3814:602:13",
										"text": " @dev Callback before a new agreement is terminated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param ctx The context data.\n @return cbdata A free format in memory data the app can use to pass arbitary information to\n         the after-hook callback.\n @custom:note \n - It will be invoked with `staticcall`, no state changes are permitted.\n - Revert is not permitted."
									},
									"functionSelector": "5f9e7d77",
									"id": 1560,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeAgreementTerminated",
									"nameLocation": "4430:25:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1547,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "4477:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4465:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1546,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1545,
														"name": "ISuperToken",
														"nameLocations": [
															"4465:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "4465:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "4465:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1549,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "4505:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4497:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1548,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4497:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "4537:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4529:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1550,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4529:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "4573:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4558:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1552,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4558:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "4611:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4596:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1554,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4596:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4455:165:13"
									},
									"returnParameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "4681:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4668:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1557,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4668:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4667:21:13"
									},
									"scope": 1580,
									"src": "4421:268:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1561,
										"nodeType": "StructuredDocumentation",
										"src": "4695:552:13",
										"text": " @dev Callback after a new agreement is terminated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param cbdata The data returned from the before-hook callback.\n @param ctx The context data.\n @return newCtx The current context of the transaction.\n @custom:note \n - State changes is permitted.\n - Revert is not permitted."
									},
									"functionSelector": "53c11f99",
									"id": 1579,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "afterAgreementTerminated",
									"nameLocation": "5261:24:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1564,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "5307:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5295:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1563,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1562,
														"name": "ISuperToken",
														"nameLocations": [
															"5295:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "5295:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "5295:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1566,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "5335:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5327:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5327:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1568,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "5367:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5359:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1567,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5359:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1570,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "5403:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5388:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1569,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5388:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1572,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "5441:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5426:21:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1571,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5426:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1574,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "5472:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5457:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1573,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5457:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5285:196:13"
									},
									"returnParameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "5529:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5516:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1576,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5516:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5515:21:13"
									},
									"scope": 1580,
									"src": "5252:285:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1581,
							"src": "243:5296:13",
							"usedErrors": []
						}
					],
					"src": "32:5508:13"
				},
				"id": 13
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
					"exportedSymbols": {
						"IConstantInflowNFT": [
							1303
						],
						"IConstantOutflowNFT": [
							1357
						],
						"IERC20": [
							77
						],
						"IERC777": [
							383
						],
						"IPoolAdminNFT": [
							1434
						],
						"IPoolMemberNFT": [
							1437
						],
						"ISuperToken": [
							2054
						],
						"ISuperfluid": [
							2708
						],
						"ISuperfluidToken": [
							3123
						],
						"TokenInfo": [
							3157
						]
					},
					"id": 2055,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1582,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:14"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"file": "./ISuperfluid.sol",
							"id": 1584,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 2709,
							"src": "59:48:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1583,
										"name": "ISuperfluid",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2708,
										"src": "68:11:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 1586,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 3124,
							"src": "108:58:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1585,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3123,
										"src": "117:16:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
							"file": "../tokens/TokenInfo.sol",
							"id": 1588,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 3158,
							"src": "167:52:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1587,
										"name": "TokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3157,
										"src": "176:9:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"file": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"id": 1590,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 384,
							"src": "220:75:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1589,
										"name": "IERC777",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 383,
										"src": "229:7:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1592,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 78,
							"src": "296:72:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1591,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 77,
										"src": "305:6:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
							"file": "./IConstantOutflowNFT.sol",
							"id": 1594,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 1358,
							"src": "369:64:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1593,
										"name": "IConstantOutflowNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1357,
										"src": "378:19:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
							"file": "./IConstantInflowNFT.sol",
							"id": 1596,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 1304,
							"src": "434:62:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1595,
										"name": "IConstantInflowNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1303,
										"src": "443:18:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
							"file": "./IPoolAdminNFT.sol",
							"id": 1598,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 1435,
							"src": "497:52:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1597,
										"name": "IPoolAdminNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1434,
										"src": "506:13:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
							"file": "./IPoolMemberNFT.sol",
							"id": 1600,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 1438,
							"src": "550:54:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1599,
										"name": "IPoolMemberNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1437,
										"src": "559:14:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1602,
										"name": "ISuperfluidToken",
										"nameLocations": [
											"729:16:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3123,
										"src": "729:16:14"
									},
									"id": 1603,
									"nodeType": "InheritanceSpecifier",
									"src": "729:16:14"
								},
								{
									"baseName": {
										"id": 1604,
										"name": "TokenInfo",
										"nameLocations": [
											"747:9:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3157,
										"src": "747:9:14"
									},
									"id": 1605,
									"nodeType": "InheritanceSpecifier",
									"src": "747:9:14"
								},
								{
									"baseName": {
										"id": 1606,
										"name": "IERC20",
										"nameLocations": [
											"758:6:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 77,
										"src": "758:6:14"
									},
									"id": 1607,
									"nodeType": "InheritanceSpecifier",
									"src": "758:6:14"
								},
								{
									"baseName": {
										"id": 1608,
										"name": "IERC777",
										"nameLocations": [
											"766:7:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 383,
										"src": "766:7:14"
									},
									"id": 1609,
									"nodeType": "InheritanceSpecifier",
									"src": "766:7:14"
								}
							],
							"canonicalName": "ISuperToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1601,
								"nodeType": "StructuredDocumentation",
								"src": "606:97:14",
								"text": " @title Super token (Superfluid Token + ERC20 + ERC777) interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 2054,
							"linearizedBaseContracts": [
								2054,
								383,
								77,
								3157,
								3123
							],
							"name": "ISuperToken",
							"nameLocation": "714:11:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "f7f02227",
									"id": 1611,
									"name": "SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER",
									"nameLocation": "961:45:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1610,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:14"
									},
									"src": "955:54:14"
								},
								{
									"errorSelector": "fe737d05",
									"id": 1613,
									"name": "SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT",
									"nameLocation": "1040:39:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1079:2:14"
									},
									"src": "1034:48:14"
								},
								{
									"errorSelector": "e3e13698",
									"id": 1615,
									"name": "SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED",
									"nameLocation": "1119:51:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1170:2:14"
									},
									"src": "1113:60:14"
								},
								{
									"errorSelector": "f79cf656",
									"id": 1617,
									"name": "SUPER_TOKEN_NO_UNDERLYING_TOKEN",
									"nameLocation": "1198:31:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1616,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1229:2:14"
									},
									"src": "1192:40:14"
								},
								{
									"errorSelector": "7ffa6648",
									"id": 1619,
									"name": "SUPER_TOKEN_ONLY_SELF",
									"nameLocation": "1277:21:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1298:2:14"
									},
									"src": "1271:30:14"
								},
								{
									"errorSelector": "98f73704",
									"id": 1621,
									"name": "SUPER_TOKEN_ONLY_HOST",
									"nameLocation": "1356:21:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1620,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1377:2:14"
									},
									"src": "1350:30:14"
								},
								{
									"errorSelector": "d9c7ed08",
									"id": 1623,
									"name": "SUPER_TOKEN_ONLY_GOV_OWNER",
									"nameLocation": "1435:26:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1622,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1461:2:14"
									},
									"src": "1429:35:14"
								},
								{
									"errorSelector": "81638627",
									"id": 1625,
									"name": "SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS",
									"nameLocation": "1514:37:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1624,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1551:2:14"
									},
									"src": "1508:46:14"
								},
								{
									"errorSelector": "df070274",
									"id": 1627,
									"name": "SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS",
									"nameLocation": "1593:35:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1626,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:2:14"
									},
									"src": "1587:44:14"
								},
								{
									"errorSelector": "ba2ab184",
									"id": 1629,
									"name": "SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS",
									"nameLocation": "1672:34:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1628,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1706:2:14"
									},
									"src": "1666:43:14"
								},
								{
									"errorSelector": "0d243157",
									"id": 1631,
									"name": "SUPER_TOKEN_MINT_TO_ZERO_ADDRESS",
									"nameLocation": "1751:32:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1783:2:14"
									},
									"src": "1745:41:14"
								},
								{
									"errorSelector": "eecd6c9b",
									"id": 1633,
									"name": "SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS",
									"nameLocation": "1830:38:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1632,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1868:2:14"
									},
									"src": "1824:47:14"
								},
								{
									"errorSelector": "e219bd39",
									"id": 1635,
									"name": "SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS",
									"nameLocation": "1909:36:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1634,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:2:14"
									},
									"src": "1903:45:14"
								},
								{
									"errorSelector": "ef1b6ddf",
									"id": 1637,
									"name": "SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED",
									"nameLocation": "1988:37:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2025:2:14"
									},
									"src": "1982:46:14"
								},
								{
									"documentation": {
										"id": 1638,
										"nodeType": "StructuredDocumentation",
										"src": "2062:47:14",
										"text": " @dev Initialize the contract"
									},
									"functionSelector": "42fe0980",
									"id": 1650,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "2123:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1641,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2150:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "2143:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1640,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1639,
														"name": "IERC20",
														"nameLocations": [
															"2143:6:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2143:6:14"
													},
													"referencedDeclaration": 77,
													"src": "2143:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2181:18:14",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "2175:24:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1642,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2175:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1645,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "2225:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "2209:17:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1644,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2209:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1647,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2252:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "2236:17:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1646,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2236:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2133:126:14"
									},
									"returnParameters": {
										"id": 1649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2268:0:14"
									},
									"scope": 2054,
									"src": "2114:155:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "ef43d2c6",
									"id": 1656,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "CONSTANT_OUTFLOW_NFT",
									"nameLocation": "2523:20:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1651,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2543:2:14"
									},
									"returnParameters": {
										"id": 1655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1654,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1656,
												"src": "2569:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantOutflowNFT_$1357",
													"typeString": "contract IConstantOutflowNFT"
												},
												"typeName": {
													"id": 1653,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1652,
														"name": "IConstantOutflowNFT",
														"nameLocations": [
															"2569:19:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1357,
														"src": "2569:19:14"
													},
													"referencedDeclaration": 1357,
													"src": "2569:19:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantOutflowNFT_$1357",
														"typeString": "contract IConstantOutflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2568:21:14"
									},
									"scope": 2054,
									"src": "2514:76:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4c5c0c85",
									"id": 1662,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "CONSTANT_INFLOW_NFT",
									"nameLocation": "2657:19:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2676:2:14"
									},
									"returnParameters": {
										"id": 1661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "2702:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantInflowNFT_$1303",
													"typeString": "contract IConstantInflowNFT"
												},
												"typeName": {
													"id": 1659,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1658,
														"name": "IConstantInflowNFT",
														"nameLocations": [
															"2702:18:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "2702:18:14"
													},
													"referencedDeclaration": 1303,
													"src": "2702:18:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantInflowNFT_$1303",
														"typeString": "contract IConstantInflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2701:20:14"
									},
									"scope": 2054,
									"src": "2648:74:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										269,
										3144
									],
									"documentation": {
										"id": 1663,
										"nodeType": "StructuredDocumentation",
										"src": "2913:54:14",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1671,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2981:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1667,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1665,
												"name": "IERC777",
												"nameLocations": [
													"3011:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "3011:7:14"
											},
											{
												"id": 1666,
												"name": "TokenInfo",
												"nameLocations": [
													"3020:9:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3157,
												"src": "3020:9:14"
											}
										],
										"src": "3002:28:14"
									},
									"parameters": {
										"id": 1664,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2985:2:14"
									},
									"returnParameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1671,
												"src": "3040:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1668,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3040:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3039:15:14"
									},
									"scope": 2054,
									"src": "2972:83:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										275,
										3150
									],
									"documentation": {
										"id": 1672,
										"nodeType": "StructuredDocumentation",
										"src": "3061:102:14",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1680,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3177:6:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1676,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1674,
												"name": "IERC777",
												"nameLocations": [
													"3209:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "3209:7:14"
											},
											{
												"id": 1675,
												"name": "TokenInfo",
												"nameLocations": [
													"3218:9:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3157,
												"src": "3218:9:14"
											}
										],
										"src": "3200:28:14"
									},
									"parameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3183:2:14"
									},
									"returnParameters": {
										"id": 1679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1678,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1680,
												"src": "3238:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1677,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3238:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3237:15:14"
									},
									"scope": 2054,
									"src": "3168:85:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										3156
									],
									"documentation": {
										"id": 1681,
										"nodeType": "StructuredDocumentation",
										"src": "3259:669:14",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n @custom:note SuperToken always uses 18 decimals.\n This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 1688,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3942:8:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1684,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1683,
												"name": "TokenInfo",
												"nameLocations": [
													"3976:9:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3157,
												"src": "3976:9:14"
											}
										],
										"src": "3967:19:14"
									},
									"parameters": {
										"id": 1682,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3950:2:14"
									},
									"returnParameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "3996:5:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1685,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3996:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3995:7:14"
									},
									"scope": 2054,
									"src": "3933:70:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										26,
										287
									],
									"documentation": {
										"id": 1689,
										"nodeType": "StructuredDocumentation",
										"src": "4190:49:14",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 1697,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "4253:11:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1693,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1691,
												"name": "IERC777",
												"nameLocations": [
													"4290:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "4290:7:14"
											},
											{
												"id": 1692,
												"name": "IERC20",
												"nameLocations": [
													"4299:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "4299:6:14"
											}
										],
										"src": "4281:25:14"
									},
									"parameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4264:2:14"
									},
									"returnParameters": {
										"id": 1696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1695,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "4316:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4316:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4315:9:14"
									},
									"scope": 2054,
									"src": "4244:81:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										34,
										295
									],
									"documentation": {
										"id": 1698,
										"nodeType": "StructuredDocumentation",
										"src": "4331:83:14",
										"text": " @dev Returns the amount of tokens owned by an account (`owner`)."
									},
									"functionSelector": "70a08231",
									"id": 1708,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4428:9:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1704,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1702,
												"name": "IERC777",
												"nameLocations": [
													"4478:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "4478:7:14"
											},
											{
												"id": 1703,
												"name": "IERC20",
												"nameLocations": [
													"4487:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "4487:6:14"
											}
										],
										"src": "4469:25:14"
									},
									"parameters": {
										"id": 1701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1700,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4446:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "4438:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4438:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4437:17:14"
									},
									"returnParameters": {
										"id": 1707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1706,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4511:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "4503:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4503:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4502:17:14"
									},
									"scope": 2054,
									"src": "4419:101:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										44
									],
									"documentation": {
										"id": 1709,
										"nodeType": "StructuredDocumentation",
										"src": "4698:233:14",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1720,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4945:8:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1716,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1715,
												"name": "IERC20",
												"nameLocations": [
													"5007:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "5007:6:14"
											}
										],
										"src": "4998:16:14"
									},
									"parameters": {
										"id": 1714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1711,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4962:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1720,
												"src": "4954:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1710,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4954:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1713,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4981:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1720,
												"src": "4973:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1712,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4973:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4953:35:14"
									},
									"returnParameters": {
										"id": 1719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1720,
												"src": "5024:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1717,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5024:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5023:6:14"
									},
									"scope": 2054,
									"src": "4936:94:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										54
									],
									"documentation": {
										"id": 1721,
										"nodeType": "StructuredDocumentation",
										"src": "5036:288:14",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n         allowed to spend on behalf of `owner` through {transferFrom}. This is\n         zero by default.\n @notice This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1732,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "5338:9:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1728,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1727,
												"name": "IERC20",
												"nameLocations": [
													"5398:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "5398:6:14"
											}
										],
										"src": "5389:16:14"
									},
									"parameters": {
										"id": 1726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1723,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5356:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "5348:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1722,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5348:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1725,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5371:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "5363:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1724,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5363:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5347:32:14"
									},
									"returnParameters": {
										"id": 1731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1730,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "5420:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1729,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5420:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5419:9:14"
									},
									"scope": 2054,
									"src": "5329:100:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										64
									],
									"documentation": {
										"id": 1733,
										"nodeType": "StructuredDocumentation",
										"src": "5435:668:14",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:note Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n @custom:emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1744,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "6117:7:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1740,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1739,
												"name": "IERC20",
												"nameLocations": [
													"6176:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "6176:6:14"
											}
										],
										"src": "6167:16:14"
									},
									"parameters": {
										"id": 1738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1735,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6133:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1744,
												"src": "6125:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1734,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6125:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1737,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6150:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1744,
												"src": "6142:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1736,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6142:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6124:33:14"
									},
									"returnParameters": {
										"id": 1743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1742,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1744,
												"src": "6193:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1741,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6193:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6192:6:14"
									},
									"scope": 2054,
									"src": "6108:91:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										76
									],
									"documentation": {
										"id": 1745,
										"nodeType": "StructuredDocumentation",
										"src": "6205:336:14",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n         allowance mechanism. `amount` is then deducted from the caller's\n         allowance.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1758,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6555:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1754,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1753,
												"name": "IERC20",
												"nameLocations": [
													"6637:6:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "6637:6:14"
											}
										],
										"src": "6628:16:14"
									},
									"parameters": {
										"id": 1752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1747,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "6576:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "6568:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6568:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1749,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "6592:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "6584:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6584:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1751,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6611:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "6603:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6603:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6567:51:14"
									},
									"returnParameters": {
										"id": 1757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "6654:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1755,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6654:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6653:6:14"
									},
									"scope": 2054,
									"src": "6546:114:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1759,
										"nodeType": "StructuredDocumentation",
										"src": "6666:393:14",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n @custom:emits an {Approval} event indicating the updated allowance.\n @custom:requirements \n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 1768,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "7073:17:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7099:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "7091:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7091:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "7116:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "7108:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7108:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7090:37:14"
									},
									"returnParameters": {
										"id": 1767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1766,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "7146:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1765,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7146:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7145:6:14"
									},
									"scope": 2054,
									"src": "7064:88:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1769,
										"nodeType": "StructuredDocumentation",
										"src": "7158:485:14",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n @custom:emits an {Approval} event indicating the updated allowance.\n @custom:requirements \n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1778,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "7658:17:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1771,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7684:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1778,
												"src": "7676:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1770,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7676:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1773,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "7701:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1778,
												"src": "7693:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1772,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7693:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7675:42:14"
									},
									"returnParameters": {
										"id": 1777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1776,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1778,
												"src": "7736:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1775,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7736:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:6:14"
									},
									"scope": 2054,
									"src": "7649:93:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										281
									],
									"documentation": {
										"id": 1779,
										"nodeType": "StructuredDocumentation",
										"src": "7921:315:14",
										"text": " @dev Returns the smallest part of the token that is not divisible. This\n         means all token operations (creation, movement and destruction) must have\n         amounts that are a multiple of this number.\n @custom:note For super token contracts, this value is always 1"
									},
									"functionSelector": "556f0dc7",
									"id": 1786,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "granularity",
									"nameLocation": "8250:11:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1782,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1781,
												"name": "IERC777",
												"nameLocations": [
													"8287:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "8287:7:14"
											}
										],
										"src": "8278:17:14"
									},
									"parameters": {
										"id": 1780,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8261:2:14"
									},
									"returnParameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "8305:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8305:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8304:9:14"
									},
									"scope": 2054,
									"src": "8241:73:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										305
									],
									"documentation": {
										"id": 1787,
										"nodeType": "StructuredDocumentation",
										"src": "8320:610:14",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @dev If send or receive hooks are registered for the caller and `recipient`,\n      the corresponding functions will be called with `data` and empty\n      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n @custom:emits a {Sent} event.\n @custom:requirements \n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "9bd9bbc6",
									"id": 1798,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "8944:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1796,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1795,
												"name": "IERC777",
												"nameLocations": [
													"9023:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "9023:7:14"
											}
										],
										"src": "9014:17:14"
									},
									"parameters": {
										"id": 1794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1789,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "8957:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "8949:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1788,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8949:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1791,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8976:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "8968:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8968:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1793,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8999:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "8984:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1792,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8984:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8948:56:14"
									},
									"returnParameters": {
										"id": 1797,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9031:0:14"
									},
									"scope": 2054,
									"src": "8935:97:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										313
									],
									"documentation": {
										"id": 1799,
										"nodeType": "StructuredDocumentation",
										"src": "9038:473:14",
										"text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply and transfers the underlying token to the caller's account.\n If a send hook is registered for the caller, the corresponding function\n will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n @custom:emits a {Burned} event.\n @custom:requirements \n - the caller must have at least `amount` tokens."
									},
									"functionSelector": "fe9d9303",
									"id": 1808,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "9525:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1806,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1805,
												"name": "IERC777",
												"nameLocations": [
													"9585:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "9585:7:14"
											}
										],
										"src": "9576:17:14"
									},
									"parameters": {
										"id": 1804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1801,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9538:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "9530:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9530:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1803,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9561:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "9546:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1802,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9546:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9529:37:14"
									},
									"returnParameters": {
										"id": 1807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9593:0:14"
									},
									"scope": 2054,
									"src": "9516:78:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										323
									],
									"documentation": {
										"id": 1809,
										"nodeType": "StructuredDocumentation",
										"src": "9600:249:14",
										"text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
									},
									"functionSelector": "d95b6371",
									"id": 1820,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOperatorFor",
									"nameLocation": "9863:13:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1816,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1815,
												"name": "IERC777",
												"nameLocations": [
													"9934:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "9934:7:14"
											}
										],
										"src": "9925:17:14"
									},
									"parameters": {
										"id": 1814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "9885:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "9877:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9877:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1813,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "9903:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "9895:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1812,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9895:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9876:39:14"
									},
									"returnParameters": {
										"id": 1819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1818,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "9957:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1817,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9957:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9956:6:14"
									},
									"scope": 2054,
									"src": "9854:109:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										329
									],
									"documentation": {
										"id": 1821,
										"nodeType": "StructuredDocumentation",
										"src": "9969:243:14",
										"text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n @custom:emits an {AuthorizedOperator} event.\n @custom:requirements \n - `operator` cannot be calling address."
									},
									"functionSelector": "959b8c3f",
									"id": 1828,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeOperator",
									"nameLocation": "10226:17:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1826,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1825,
												"name": "IERC777",
												"nameLocations": [
													"10280:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "10280:7:14"
											}
										],
										"src": "10271:17:14"
									},
									"parameters": {
										"id": 1824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1823,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10252:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1828,
												"src": "10244:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1822,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10244:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10243:18:14"
									},
									"returnParameters": {
										"id": 1827,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10288:0:14"
									},
									"scope": 2054,
									"src": "10217:72:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										335
									],
									"documentation": {
										"id": 1829,
										"nodeType": "StructuredDocumentation",
										"src": "10295:271:14",
										"text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n @custom:emits a {RevokedOperator} event.\n @custom:requirements \n - `operator` cannot be calling address."
									},
									"functionSelector": "fad8b32a",
									"id": 1836,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeOperator",
									"nameLocation": "10580:14:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1834,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1833,
												"name": "IERC777",
												"nameLocations": [
													"10631:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "10631:7:14"
											}
										],
										"src": "10622:17:14"
									},
									"parameters": {
										"id": 1832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1831,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10603:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1836,
												"src": "10595:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10595:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10594:18:14"
									},
									"returnParameters": {
										"id": 1835,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10639:0:14"
									},
									"scope": 2054,
									"src": "10571:69:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										342
									],
									"documentation": {
										"id": 1837,
										"nodeType": "StructuredDocumentation",
										"src": "10646:338:14",
										"text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
									},
									"functionSelector": "06e48538",
									"id": 1845,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultOperators",
									"nameLocation": "10998:16:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1840,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1839,
												"name": "IERC777",
												"nameLocations": [
													"11035:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "11035:7:14"
											}
										],
										"src": "11026:17:14"
									},
									"parameters": {
										"id": 1838,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11014:2:14"
									},
									"returnParameters": {
										"id": 1844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1843,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1845,
												"src": "11058:16:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1841,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11058:7:14",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1842,
													"nodeType": "ArrayTypeName",
													"src": "11058:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11057:18:14"
									},
									"scope": 2054,
									"src": "10989:87:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										356
									],
									"documentation": {
										"id": 1846,
										"nodeType": "StructuredDocumentation",
										"src": "11082:724:14",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `data` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n @custom:emits a {Sent} event.\n @custom:requirements \n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "62ad1b83",
									"id": 1861,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorSend",
									"nameLocation": "11820:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1859,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1858,
												"name": "IERC777",
												"nameLocations": [
													"11998:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "11998:7:14"
											}
										],
										"src": "11989:17:14"
									},
									"parameters": {
										"id": 1857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1848,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "11850:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11842:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1847,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11842:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "11874:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11866:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1849,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11866:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11901:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11893:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11893:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "11932:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11917:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1853,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11917:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1856,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "11961:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11946:27:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1855,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11946:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11832:147:14"
									},
									"returnParameters": {
										"id": 1860,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12006:0:14"
									},
									"scope": 2054,
									"src": "11811:196:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										368
									],
									"documentation": {
										"id": 1862,
										"nodeType": "StructuredDocumentation",
										"src": "12013:542:14",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `data` and `operatorData`. See {IERC777Sender}.\n @custom:emits a {Burned} event.\n @custom:requirements \n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
									},
									"functionSelector": "fc673c4f",
									"id": 1875,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorBurn",
									"nameLocation": "12569:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1873,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1872,
												"name": "IERC777",
												"nameLocations": [
													"12721:7:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "12721:7:14"
											}
										],
										"src": "12712:17:14"
									},
									"parameters": {
										"id": 1871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1864,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "12599:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "12591:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1863,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12591:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1866,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12624:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "12616:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1865,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12616:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1868,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "12655:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "12640:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1867,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12640:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "12684:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "12669:27:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1869,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12669:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12581:121:14"
									},
									"returnParameters": {
										"id": 1874,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12729:0:14"
									},
									"scope": 2054,
									"src": "12560:170:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1876,
										"nodeType": "StructuredDocumentation",
										"src": "12938:107:14",
										"text": " @dev Mint new tokens for the account\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "c68d4283",
									"id": 1885,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfMint",
									"nameLocation": "13059:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13085:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "13077:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13077:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1880,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13110:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "13102:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13102:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1882,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "13139:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "13126:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1881,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13126:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13067:86:14"
									},
									"returnParameters": {
										"id": 1884,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13162:0:14"
									},
									"scope": 2054,
									"src": "13050:113:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1886,
										"nodeType": "StructuredDocumentation",
										"src": "13168:107:14",
										"text": " @dev Burn existing tokens for the account\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "9d876741",
									"id": 1895,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfBurn",
									"nameLocation": "13288:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1888,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13313:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "13305:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13305:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1890,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13337:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "13329:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1889,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13329:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "13365:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "13352:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1891,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13352:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13296:82:14"
									},
									"returnParameters": {
										"id": 1894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13387:0:14"
									},
									"scope": 2054,
									"src": "13279:109:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1896,
										"nodeType": "StructuredDocumentation",
										"src": "13393:245:14",
										"text": " @dev Transfer `amount` tokens from the `sender` to `recipient`.\n If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n spend tokens of `sender`.\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "41b706be",
									"id": 1907,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfTransferFrom",
									"nameLocation": "13651:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1898,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "13685:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13677:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1897,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13677:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1900,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "13709:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13701:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1899,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13701:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1902,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "13734:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13726:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1901,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13726:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1904,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13761:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13753:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13753:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13667:105:14"
									},
									"returnParameters": {
										"id": 1906,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13781:0:14"
									},
									"scope": 2054,
									"src": "13642:140:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1908,
										"nodeType": "StructuredDocumentation",
										"src": "13787:145:14",
										"text": " @dev Give `spender`, `amount` allowance to spend the tokens of\n `account`.\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "66a12fb6",
									"id": 1917,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfApproveFor",
									"nameLocation": "13945:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1910,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13977:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "13969:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1909,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13969:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1912,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "14002:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "13994:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13994:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1914,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "14027:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "14019:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1913,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14019:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13959:79:14"
									},
									"returnParameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14047:0:14"
									},
									"scope": 2054,
									"src": "13936:112:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1918,
										"nodeType": "StructuredDocumentation",
										"src": "14249:87:14",
										"text": " @dev Transfer all available balance from `msg.sender` to `recipient`"
									},
									"functionSelector": "a3a7e7f3",
									"id": 1923,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAll",
									"nameLocation": "14350:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1920,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "14370:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1923,
												"src": "14362:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1919,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14362:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14361:19:14"
									},
									"returnParameters": {
										"id": 1922,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14389:0:14"
									},
									"scope": 2054,
									"src": "14341:49:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1924,
										"nodeType": "StructuredDocumentation",
										"src": "14579:110:14",
										"text": " @dev Return the underlying token contract\n @return tokenAddr Underlying token address"
									},
									"functionSelector": "ee719bc8",
									"id": 1929,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUnderlyingToken",
									"nameLocation": "14703:18:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14721:2:14"
									},
									"returnParameters": {
										"id": 1928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1927,
												"mutability": "mutable",
												"name": "tokenAddr",
												"nameLocation": "14754:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1929,
												"src": "14746:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14746:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14745:19:14"
									},
									"scope": 2054,
									"src": "14694:71:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1930,
										"nodeType": "StructuredDocumentation",
										"src": "14771:262:14",
										"text": " @dev Upgrade ERC20 to SuperToken.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @custom:note It will use `transferFrom` to get tokens. Before calling this\n function you should `approve` this contract"
									},
									"functionSelector": "45977d03",
									"id": 1935,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "upgrade",
									"nameLocation": "15047:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1932,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "15063:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1935,
												"src": "15055:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1931,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15055:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15054:16:14"
									},
									"returnParameters": {
										"id": 1934,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15079:0:14"
									},
									"scope": 2054,
									"src": "15038:42:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1936,
										"nodeType": "StructuredDocumentation",
										"src": "15086:679:14",
										"text": " @dev Upgrade ERC20 to SuperToken and transfer immediately\n @param to The account to receive upgraded tokens\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @param data User data for the TokensRecipient callback\n @custom:note It will use `transferFrom` to get tokens. Before calling this\n function you should `approve` this contract\n \n @custom:warning\n - there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.\n @custom:requirements \n - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts."
									},
									"functionSelector": "5b9d09cc",
									"id": 1945,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "upgradeTo",
									"nameLocation": "15779:9:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1938,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "15797:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 1945,
												"src": "15789:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1937,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15789:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1940,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "15809:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1945,
												"src": "15801:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15801:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1942,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "15832:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1945,
												"src": "15817:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1941,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15817:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15788:49:14"
									},
									"returnParameters": {
										"id": 1944,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15846:0:14"
									},
									"scope": 2054,
									"src": "15770:77:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1946,
										"nodeType": "StructuredDocumentation",
										"src": "15853:166:14",
										"text": " @dev Token upgrade event\n @param account Account where tokens are upgraded to\n @param amount Amount of tokens upgraded (in 18 decimals)"
									},
									"eventSelector": "25ca84076773b0455db53621c459ddc84fe40840e4932a62706a032566f399df",
									"id": 1952,
									"name": "TokenUpgraded",
									"nameLocation": "16030:13:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1948,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "16069:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "16053:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1947,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16053:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1950,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16094:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "16086:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16086:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16043:63:14"
									},
									"src": "16024:83:14"
								},
								{
									"documentation": {
										"id": 1953,
										"nodeType": "StructuredDocumentation",
										"src": "16113:158:14",
										"text": " @dev Downgrade SuperToken to ERC20.\n @dev It will call transfer to send tokens\n @param amount Number of tokens to be downgraded"
									},
									"functionSelector": "11bcc81e",
									"id": 1958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "downgrade",
									"nameLocation": "16285:9:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16303:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "16295:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16295:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16294:16:14"
									},
									"returnParameters": {
										"id": 1957,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16319:0:14"
									},
									"scope": 2054,
									"src": "16276:44:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1959,
										"nodeType": "StructuredDocumentation",
										"src": "16326:208:14",
										"text": " @dev Downgrade SuperToken to ERC20 and transfer immediately\n @param to The account to receive downgraded tokens\n @param amount Number of tokens to be downgraded (in 18 decimals)"
									},
									"functionSelector": "83ba2525",
									"id": 1966,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "downgradeTo",
									"nameLocation": "16548:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1961,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16568:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "16560:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16560:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1963,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16580:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "16572:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16572:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16559:28:14"
									},
									"returnParameters": {
										"id": 1965,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16596:0:14"
									},
									"scope": 2054,
									"src": "16539:58:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1967,
										"nodeType": "StructuredDocumentation",
										"src": "16603:152:14",
										"text": " @dev Token downgrade event\n @param account Account whose tokens are downgraded\n @param amount Amount of tokens downgraded"
									},
									"eventSelector": "3bc27981aebbb57f9247dc00fde9d6cd91e4b230083fec3238fedbcba1f9ab3d",
									"id": 1973,
									"name": "TokenDowngraded",
									"nameLocation": "16766:15:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1969,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "16807:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "16791:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1968,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16791:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1971,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16832:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "16824:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1970,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16824:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16781:63:14"
									},
									"src": "16760:85:14"
								},
								{
									"documentation": {
										"id": 1974,
										"nodeType": "StructuredDocumentation",
										"src": "17034:277:14",
										"text": " @dev Perform ERC20 approve by host contract.\n @param account The account owner to be approved.\n @param spender The spender of account owner's funds.\n @param amount Number of tokens to be approved.\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "62aa5287",
									"id": 1983,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationApprove",
									"nameLocation": "17325:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1976,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17359:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1983,
												"src": "17351:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17351:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1978,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "17384:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1983,
												"src": "17376:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1977,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17376:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1980,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "17409:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1983,
												"src": "17401:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1979,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17401:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17341:80:14"
									},
									"returnParameters": {
										"id": 1982,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17430:0:14"
									},
									"scope": 2054,
									"src": "17316:115:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4b2763b3",
									"id": 1992,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationIncreaseAllowance",
									"nameLocation": "17446:26:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1985,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17490:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "17482:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1984,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17482:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1987,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "17515:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "17507:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17507:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1989,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "17540:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "17532:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17532:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17472:84:14"
									},
									"returnParameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17565:0:14"
									},
									"scope": 2054,
									"src": "17437:129:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "c780fd82",
									"id": 2001,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationDecreaseAllowance",
									"nameLocation": "17581:26:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1994,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17625:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2001,
												"src": "17617:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1993,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17617:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "17650:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2001,
												"src": "17642:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1995,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17642:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1998,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "17675:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 2001,
												"src": "17667:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1997,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17667:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17607:89:14"
									},
									"returnParameters": {
										"id": 2000,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17705:0:14"
									},
									"scope": 2054,
									"src": "17572:134:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2002,
										"nodeType": "StructuredDocumentation",
										"src": "17712:343:14",
										"text": " @dev Perform ERC20 transferFrom by host contract.\n @param account The account to spend sender's funds.\n @param spender The account where the funds is sent from.\n @param recipient The recipient of the funds.\n @param amount Number of tokens to be transferred.\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "16d055d6",
									"id": 2013,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationTransferFrom",
									"nameLocation": "18069:21:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2004,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "18108:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2013,
												"src": "18100:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2003,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18100:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2006,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "18133:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2013,
												"src": "18125:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2005,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18125:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "18158:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2013,
												"src": "18150:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18150:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2010,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18185:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2013,
												"src": "18177:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18177:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18090:107:14"
									},
									"returnParameters": {
										"id": 2012,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18206:0:14"
									},
									"scope": 2054,
									"src": "18060:147:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2014,
										"nodeType": "StructuredDocumentation",
										"src": "18213:325:14",
										"text": " @dev Perform ERC777 send by host contract.\n @param spender The account where the funds is sent from.\n @param recipient The recipient of the funds.\n @param amount Number of tokens to be transferred.\n @param data Arbitrary user inputted data\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "ca0c1e7f",
									"id": 2025,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationSend",
									"nameLocation": "18552:13:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2016,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "18583:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "18575:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2015,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18575:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2018,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "18608:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "18600:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2017,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18600:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2020,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18635:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "18627:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2019,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18627:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2022,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "18664:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "18651:17:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2021,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18651:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18565:109:14"
									},
									"returnParameters": {
										"id": 2024,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18683:0:14"
									},
									"scope": 2054,
									"src": "18543:141:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2026,
										"nodeType": "StructuredDocumentation",
										"src": "18690:233:14",
										"text": " @dev Upgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "ca789464",
									"id": 2033,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationUpgrade",
									"nameLocation": "18937:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2028,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "18962:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2033,
												"src": "18954:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18954:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18979:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2033,
												"src": "18971:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2029,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18971:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18953:33:14"
									},
									"returnParameters": {
										"id": 2032,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18995:0:14"
									},
									"scope": 2054,
									"src": "18928:68:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2034,
										"nodeType": "StructuredDocumentation",
										"src": "19002:237:14",
										"text": " @dev Downgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be downgraded (in 18 decimals)\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "245887fc",
									"id": 2041,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationDowngrade",
									"nameLocation": "19253:18:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2036,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "19280:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2041,
												"src": "19272:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2035,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19272:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2038,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "19297:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2041,
												"src": "19289:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2037,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19289:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19271:33:14"
									},
									"returnParameters": {
										"id": 2040,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19313:0:14"
									},
									"scope": 2054,
									"src": "19244:70:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2042,
										"nodeType": "StructuredDocumentation",
										"src": "19343:126:14",
										"text": " @dev Constant Outflow NFT proxy created event\n @param constantOutflowNFT constant outflow nft address"
									},
									"eventSelector": "cf554eb342edf010a94e07701ae91e99e90b769f649f03aeb1153654ddd43c01",
									"id": 2047,
									"name": "ConstantOutflowNFTCreated",
									"nameLocation": "19480:25:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2045,
												"indexed": true,
												"mutability": "mutable",
												"name": "constantOutflowNFT",
												"nameLocation": "19543:18:14",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "19515:46:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantOutflowNFT_$1357",
													"typeString": "contract IConstantOutflowNFT"
												},
												"typeName": {
													"id": 2044,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2043,
														"name": "IConstantOutflowNFT",
														"nameLocations": [
															"19515:19:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1357,
														"src": "19515:19:14"
													},
													"referencedDeclaration": 1357,
													"src": "19515:19:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantOutflowNFT_$1357",
														"typeString": "contract IConstantOutflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19505:62:14"
									},
									"src": "19474:94:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2048,
										"nodeType": "StructuredDocumentation",
										"src": "19574:123:14",
										"text": " @dev Constant Inflow NFT proxy created event\n @param constantInflowNFT constant inflow nft address"
									},
									"eventSelector": "8837af285f4d380af9227df9ebafa13d992b487fa6d7a4366bd4154576085b89",
									"id": 2053,
									"name": "ConstantInflowNFTCreated",
									"nameLocation": "19708:24:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2052,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2051,
												"indexed": true,
												"mutability": "mutable",
												"name": "constantInflowNFT",
												"nameLocation": "19769:17:14",
												"nodeType": "VariableDeclaration",
												"scope": 2053,
												"src": "19742:44:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantInflowNFT_$1303",
													"typeString": "contract IConstantInflowNFT"
												},
												"typeName": {
													"id": 2050,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2049,
														"name": "IConstantInflowNFT",
														"nameLocations": [
															"19742:18:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "19742:18:14"
													},
													"referencedDeclaration": 1303,
													"src": "19742:18:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantInflowNFT_$1303",
														"typeString": "contract IConstantInflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19732:60:14"
									},
									"src": "19702:91:14"
								}
							],
							"scope": 2055,
							"src": "704:19618:14",
							"usedErrors": [
								1611,
								1613,
								1615,
								1617,
								1619,
								1621,
								1623,
								1625,
								1627,
								1629,
								1631,
								1633,
								1635,
								1637,
								2844,
								2846,
								2848,
								2850,
								2852,
								2854
							]
						}
					],
					"src": "32:20291:14"
				},
				"id": 14
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
					"exportedSymbols": {
						"ERC20WithTokenInfo": [
							3135
						],
						"IERC20": [
							77
						],
						"ISuperToken": [
							2054
						],
						"ISuperTokenFactory": [
							2184
						]
					},
					"id": 2185,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2056,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:15"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 2058,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2185,
							"sourceUnit": 2055,
							"src": "59:48:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2057,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2054,
										"src": "68:11:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
							"file": "../tokens/ERC20WithTokenInfo.sol",
							"id": 2061,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2185,
							"sourceUnit": 3136,
							"src": "109:86:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2059,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 77,
										"src": "122:6:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2060,
										"name": "ERC20WithTokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3135,
										"src": "134:18:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperTokenFactory",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2062,
								"nodeType": "StructuredDocumentation",
								"src": "197:69:15",
								"text": " @title Super token factory interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 2184,
							"linearizedBaseContracts": [
								2184
							],
							"name": "ISuperTokenFactory",
							"nameLocation": "277:18:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "91d67972",
									"id": 2064,
									"name": "SUPER_TOKEN_FACTORY_ALREADY_EXISTS",
									"nameLocation": "483:34:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2063,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "517:2:15"
									},
									"src": "477:43:15"
								},
								{
									"errorSelector": "872cac48",
									"id": 2066,
									"name": "SUPER_TOKEN_FACTORY_DOES_NOT_EXIST",
									"nameLocation": "561:34:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "595:2:15"
									},
									"src": "555:43:15"
								},
								{
									"errorSelector": "1b39b9b4",
									"id": 2068,
									"name": "SUPER_TOKEN_FACTORY_UNINITIALIZED",
									"nameLocation": "639:33:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2067,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "672:2:15"
									},
									"src": "633:42:15"
								},
								{
									"errorSelector": "478b8e83",
									"id": 2070,
									"name": "SUPER_TOKEN_FACTORY_ONLY_HOST",
									"nameLocation": "717:29:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2069,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "746:2:15"
									},
									"src": "711:38:15"
								},
								{
									"errorSelector": "c4901a43",
									"id": 2072,
									"name": "SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED",
									"nameLocation": "795:49:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "844:2:15"
									},
									"src": "789:58:15"
								},
								{
									"errorSelector": "305c9e82",
									"id": 2074,
									"name": "SUPER_TOKEN_FACTORY_ZERO_ADDRESS",
									"nameLocation": "873:32:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2073,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "905:2:15"
									},
									"src": "867:41:15"
								},
								{
									"documentation": {
										"id": 2075,
										"nodeType": "StructuredDocumentation",
										"src": "1133:60:15",
										"text": " @dev Get superfluid host contract address"
									},
									"functionSelector": "20bc4425",
									"id": 2080,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHost",
									"nameLocation": "1207:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2076,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1214:2:15"
									},
									"returnParameters": {
										"id": 2079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2078,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1247:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2080,
												"src": "1239:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1239:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1238:14:15"
									},
									"scope": 2184,
									"src": "1198:55:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2081,
										"nodeType": "StructuredDocumentation",
										"src": "1259:32:15",
										"text": "@dev Initialize the contract"
									},
									"functionSelector": "8129fc1c",
									"id": 2084,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "1305:10:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2082,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1315:2:15"
									},
									"returnParameters": {
										"id": 2083,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1326:0:15"
									},
									"scope": 2184,
									"src": "1296:31:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2085,
										"nodeType": "StructuredDocumentation",
										"src": "1333:63:15",
										"text": " @notice Get the canonical super token logic."
									},
									"functionSelector": "9470a5b2",
									"id": 2091,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenLogic",
									"nameLocation": "1410:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1428:2:15"
									},
									"returnParameters": {
										"id": 2090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2089,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1466:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2091,
												"src": "1454:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2088,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2087,
														"name": "ISuperToken",
														"nameLocations": [
															"1454:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "1454:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "1454:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1453:24:15"
									},
									"scope": 2184,
									"src": "1401:77:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperTokenFactory.Upgradability",
									"id": 2095,
									"members": [
										{
											"id": 2092,
											"name": "NON_UPGRADABLE",
											"nameLocation": "1642:14:15",
											"nodeType": "EnumValue",
											"src": "1642:14:15"
										},
										{
											"id": 2093,
											"name": "SEMI_UPGRADABLE",
											"nameLocation": "1736:15:15",
											"nodeType": "EnumValue",
											"src": "1736:15:15"
										},
										{
											"id": 2094,
											"name": "FULL_UPGRADABLE",
											"nameLocation": "1815:15:15",
											"nodeType": "EnumValue",
											"src": "1815:15:15"
										}
									],
									"name": "Upgradability",
									"nameLocation": "1537:13:15",
									"nodeType": "EnumDefinition",
									"src": "1532:304:15"
								},
								{
									"documentation": {
										"id": 2096,
										"nodeType": "StructuredDocumentation",
										"src": "1842:398:15",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token\n @param underlyingToken Underlying ERC20 token\n @param underlyingDecimals Underlying token decimals\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @return superToken The deployed and initialized wrapper super token"
									},
									"functionSelector": "a6d0c534",
									"id": 2114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "2254:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2099,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2289:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2282:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2098,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2097,
														"name": "IERC20",
														"nameLocations": [
															"2282:6:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2282:6:15"
													},
													"referencedDeclaration": 77,
													"src": "2282:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2101,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2320:18:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2314:24:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2100,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2314:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2104,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "2362:13:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2348:27:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$2095",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 2103,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2102,
														"name": "Upgradability",
														"nameLocations": [
															"2348:13:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2095,
														"src": "2348:13:15"
													},
													"referencedDeclaration": 2095,
													"src": "2348:13:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$2095",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2106,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "2401:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2385:20:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2105,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2385:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2108,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "2431:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2415:22:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2107,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2415:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2272:171:15"
									},
									"returnParameters": {
										"id": 2113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2112,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2490:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2478:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2111,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2110,
														"name": "ISuperToken",
														"nameLocations": [
															"2478:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "2478:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "2478:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2477:24:15"
									},
									"scope": 2184,
									"src": "2245:257:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2115,
										"nodeType": "StructuredDocumentation",
										"src": "2508:433:15",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token with extra token info\n @param underlyingToken Underlying ERC20 token\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @return superToken The deployed and initialized wrapper super token\n NOTE:\n - It assumes token provide the .decimals() function"
									},
									"functionSelector": "431f1481",
									"id": 2131,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "2955:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2118,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "3002:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "2983:34:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$3135",
													"typeString": "contract ERC20WithTokenInfo"
												},
												"typeName": {
													"id": 2117,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2116,
														"name": "ERC20WithTokenInfo",
														"nameLocations": [
															"2983:18:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3135,
														"src": "2983:18:15"
													},
													"referencedDeclaration": 3135,
													"src": "2983:18:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$3135",
														"typeString": "contract ERC20WithTokenInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2121,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "3041:13:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "3027:27:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$2095",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 2120,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2119,
														"name": "Upgradability",
														"nameLocations": [
															"3027:13:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2095,
														"src": "3027:13:15"
													},
													"referencedDeclaration": 2095,
													"src": "3027:13:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$2095",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2123,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3080:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "3064:20:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2122,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3064:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2125,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "3110:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "3094:22:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2124,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3094:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2973:149:15"
									},
									"returnParameters": {
										"id": 2130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2129,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "3169:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "3157:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2128,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2127,
														"name": "ISuperToken",
														"nameLocations": [
															"3157:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "3157:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "3157:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3156:24:15"
									},
									"scope": 2184,
									"src": "2946:235:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2132,
										"nodeType": "StructuredDocumentation",
										"src": "3187:318:15",
										"text": " @notice Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\n @dev salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\n @param _underlyingToken Underlying ERC20 token\n @return ISuperToken the created supertoken"
									},
									"functionSelector": "151188dc",
									"id": 2141,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createCanonicalERC20Wrapper",
									"nameLocation": "3519:27:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2135,
												"mutability": "mutable",
												"name": "_underlyingToken",
												"nameLocation": "3566:16:15",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "3547:35:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$3135",
													"typeString": "contract ERC20WithTokenInfo"
												},
												"typeName": {
													"id": 2134,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2133,
														"name": "ERC20WithTokenInfo",
														"nameLocations": [
															"3547:18:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3135,
														"src": "3547:18:15"
													},
													"referencedDeclaration": 3135,
													"src": "3547:18:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$3135",
														"typeString": "contract ERC20WithTokenInfo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3546:37:15"
									},
									"returnParameters": {
										"id": 2140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2139,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "3618:11:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2138,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2137,
														"name": "ISuperToken",
														"nameLocations": [
															"3618:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "3618:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "3618:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3617:13:15"
									},
									"scope": 2184,
									"src": "3510:121:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2142,
										"nodeType": "StructuredDocumentation",
										"src": "3637:502:15",
										"text": " @notice Computes/Retrieves wrapper super token address given the underlying token address\n @dev We return from our canonical list if it already exists, otherwise we compute it\n @dev note that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\n @param _underlyingToken Underlying ERC20 token address\n @return superTokenAddress Super token address\n @return isDeployed whether the super token is deployed AND set in the canonical mapping"
									},
									"functionSelector": "bab74c89",
									"id": 2151,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "computeCanonicalERC20WrapperAddress",
									"nameLocation": "4153:35:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "_underlyingToken",
												"nameLocation": "4197:16:15",
												"nodeType": "VariableDeclaration",
												"scope": 2151,
												"src": "4189:24:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4189:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:26:15"
									},
									"returnParameters": {
										"id": 2150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "superTokenAddress",
												"nameLocation": "4270:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 2151,
												"src": "4262:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "isDeployed",
												"nameLocation": "4294:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2151,
												"src": "4289:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2148,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4289:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:44:15"
									},
									"scope": 2184,
									"src": "4144:162:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2152,
										"nodeType": "StructuredDocumentation",
										"src": "4312:314:15",
										"text": " @notice Gets the canonical ERC20 wrapper super token address given the underlying token address\n @dev We return the address if it exists and the zero address otherwise\n @param _underlyingTokenAddress Underlying ERC20 token address\n @return superTokenAddress Super token address"
									},
									"functionSelector": "eff0a89d",
									"id": 2159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getCanonicalERC20Wrapper",
									"nameLocation": "4640:24:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2154,
												"mutability": "mutable",
												"name": "_underlyingTokenAddress",
												"nameLocation": "4673:23:15",
												"nodeType": "VariableDeclaration",
												"scope": 2159,
												"src": "4665:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4665:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4664:33:15"
									},
									"returnParameters": {
										"id": 2158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2157,
												"mutability": "mutable",
												"name": "superTokenAddress",
												"nameLocation": "4753:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 2159,
												"src": "4745:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4745:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4744:27:15"
									},
									"scope": 2184,
									"src": "4631:141:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2160,
										"nodeType": "StructuredDocumentation",
										"src": "4778:131:15",
										"text": " @dev Creates a new custom super token\n @param customSuperTokenProxy address of the custom supertoken proxy"
									},
									"functionSelector": "d412d344",
									"id": 2165,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initializeCustomSuperToken",
									"nameLocation": "4923:26:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2162,
												"mutability": "mutable",
												"name": "customSuperTokenProxy",
												"nameLocation": "4967:21:15",
												"nodeType": "VariableDeclaration",
												"scope": 2165,
												"src": "4959:29:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4959:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4949:45:15"
									},
									"returnParameters": {
										"id": 2164,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5011:0:15"
									},
									"scope": 2184,
									"src": "4914:98:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2166,
										"nodeType": "StructuredDocumentation",
										"src": "5018:103:15",
										"text": " @dev Super token logic created event\n @param tokenLogic Token logic address"
									},
									"eventSelector": "c13fb19d60857980e565bf5dae406b8802d3c1cec50c6156b30b12b874029783",
									"id": 2171,
									"name": "SuperTokenLogicCreated",
									"nameLocation": "5132:22:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2169,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenLogic",
												"nameLocation": "5175:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2171,
												"src": "5155:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2168,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2167,
														"name": "ISuperToken",
														"nameLocations": [
															"5155:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "5155:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "5155:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5154:32:15"
									},
									"src": "5126:61:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2172,
										"nodeType": "StructuredDocumentation",
										"src": "5193:106:15",
										"text": " @dev Super token created event\n @param token Newly created super token address"
									},
									"eventSelector": "b52c6d9d122e8c07769b96d7bb14e66db58ee03fdebaaa2f92547e9c7ef0e65f",
									"id": 2177,
									"name": "SuperTokenCreated",
									"nameLocation": "5310:17:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2175,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5348:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2177,
												"src": "5328:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2174,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2173,
														"name": "ISuperToken",
														"nameLocations": [
															"5328:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "5328:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "5328:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5327:27:15"
									},
									"src": "5304:51:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2178,
										"nodeType": "StructuredDocumentation",
										"src": "5361:120:15",
										"text": " @dev Custom super token created event\n @param token Newly created custom super token address"
									},
									"eventSelector": "437790724a6e97b75d23117f28cdd4b1beeafc34f7a0911ef256e9334f4369a5",
									"id": 2183,
									"name": "CustomSuperTokenCreated",
									"nameLocation": "5492:23:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2181,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5536:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "5516:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2180,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2179,
														"name": "ISuperToken",
														"nameLocations": [
															"5516:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "5516:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "5516:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5515:27:15"
									},
									"src": "5486:57:15"
								}
							],
							"scope": 2185,
							"src": "267:5279:15",
							"usedErrors": [
								2064,
								2066,
								2068,
								2070,
								2072,
								2074
							]
						}
					],
					"src": "32:5514:15"
				},
				"id": 15
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
					"exportedSymbols": {
						"BatchOperation": [
							1177
						],
						"ContextDefinitions": [
							1044
						],
						"FlowOperatorDefinitions": [
							1131
						],
						"IERC20": [
							77
						],
						"IERC777": [
							383
						],
						"ISuperAgreement": [
							1466
						],
						"ISuperApp": [
							1580
						],
						"ISuperToken": [
							2054
						],
						"ISuperTokenFactory": [
							2184
						],
						"ISuperfluid": [
							2708
						],
						"ISuperfluidGovernance": [
							2837
						],
						"ISuperfluidToken": [
							3123
						],
						"SuperAppDefinitions": [
							968
						],
						"SuperfluidGovernanceConfigs": [
							1278
						],
						"TokenInfo": [
							3157
						]
					},
					"id": 2709,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2186,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:16"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
							"file": "./ISuperfluidGovernance.sol",
							"id": 2188,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 2838,
							"src": "59:68:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2187,
										"name": "ISuperfluidGovernance",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2837,
										"src": "68:21:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 2190,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 3124,
							"src": "128:58:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2189,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3123,
										"src": "137:16:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 2192,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 2055,
							"src": "187:48:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2191,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2054,
										"src": "196:11:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
							"file": "./ISuperTokenFactory.sol",
							"id": 2194,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 2185,
							"src": "236:62:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2193,
										"name": "ISuperTokenFactory",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2184,
										"src": "245:18:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 2196,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 1467,
							"src": "299:56:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2195,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1466,
										"src": "308:15:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
							"file": "./ISuperApp.sol",
							"id": 2198,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 1581,
							"src": "356:44:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2197,
										"name": "ISuperApp",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1580,
										"src": "365:9:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
							"file": "./Definitions.sol",
							"id": 2204,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 1279,
							"src": "401:166:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2199,
										"name": "BatchOperation",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1177,
										"src": "414:14:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2200,
										"name": "ContextDefinitions",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1044,
										"src": "434:18:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2201,
										"name": "FlowOperatorDefinitions",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1131,
										"src": "458:23:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2202,
										"name": "SuperAppDefinitions",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 968,
										"src": "487:19:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2203,
										"name": "SuperfluidGovernanceConfigs",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1278,
										"src": "512:27:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
							"file": "../tokens/TokenInfo.sol",
							"id": 2206,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 3158,
							"src": "568:52:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2205,
										"name": "TokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3157,
										"src": "577:9:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2208,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 78,
							"src": "621:72:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2207,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 77,
										"src": "630:6:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"file": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"id": 2210,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 384,
							"src": "694:75:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2209,
										"name": "IERC777",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 383,
										"src": "703:7:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluid",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2211,
								"nodeType": "StructuredDocumentation",
								"src": "771:345:16",
								"text": " @title Host interface\n @author Superfluid\n @notice This is the central contract of the system where super agreement, super app\n and super token features are connected.\n The Superfluid host contract is also the entry point for the protocol users,\n where batch call and meta transaction are provided for UX improvements."
							},
							"fullyImplemented": false,
							"id": 2708,
							"linearizedBaseContracts": [
								2708
							],
							"name": "ISuperfluid",
							"nameLocation": "1127:11:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "ef4295f6",
									"id": 2213,
									"name": "HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION",
									"nameLocation": "1358:37:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2212,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1395:2:16"
									},
									"src": "1352:46:16"
								},
								{
									"errorSelector": "474e7641",
									"id": 2215,
									"name": "HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE",
									"nameLocation": "1436:40:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2214,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1476:2:16"
									},
									"src": "1430:49:16"
								},
								{
									"errorSelector": "0cd0ebc2",
									"id": 2217,
									"name": "HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS",
									"nameLocation": "1514:47:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1561:2:16"
									},
									"src": "1508:56:16"
								},
								{
									"errorSelector": "473f7bd4",
									"id": 2219,
									"name": "HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS",
									"nameLocation": "1592:48:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1640:2:16"
									},
									"src": "1586:57:16"
								},
								{
									"errorSelector": "f4c802a4",
									"id": 2221,
									"name": "HOST_INVALID_CONFIG_WORD",
									"nameLocation": "1670:24:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:16"
									},
									"src": "1664:33:16"
								},
								{
									"errorSelector": "7c281a78",
									"id": 2223,
									"name": "HOST_MAX_256_AGREEMENTS",
									"nameLocation": "1748:23:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2222,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1771:2:16"
									},
									"src": "1742:32:16"
								},
								{
									"errorSelector": "14f72c9f",
									"id": 2225,
									"name": "HOST_NON_UPGRADEABLE",
									"nameLocation": "1826:20:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1846:2:16"
									},
									"src": "1820:29:16"
								},
								{
									"errorSelector": "67e9985b",
									"id": 2227,
									"name": "HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX",
									"nameLocation": "1904:36:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2226,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1940:2:16"
									},
									"src": "1898:45:16"
								},
								{
									"errorSelector": "c5d22a4e",
									"id": 2229,
									"name": "HOST_ONLY_GOVERNANCE",
									"nameLocation": "1982:20:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2002:2:16"
									},
									"src": "1976:29:16"
								},
								{
									"errorSelector": "b4770115",
									"id": 2231,
									"name": "HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE",
									"nameLocation": "2060:38:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2230,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2098:2:16"
									},
									"src": "2054:47:16"
								},
								{
									"errorSelector": "dc9ddba8",
									"id": 2233,
									"name": "HOST_AGREEMENT_ALREADY_REGISTERED",
									"nameLocation": "2138:33:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2171:2:16"
									},
									"src": "2132:42:16"
								},
								{
									"errorSelector": "1c9e9bea",
									"id": 2235,
									"name": "HOST_AGREEMENT_IS_NOT_REGISTERED",
									"nameLocation": "2216:32:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2234,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:16"
									},
									"src": "2210:41:16"
								},
								{
									"errorSelector": "d4f6b30c",
									"id": 2237,
									"name": "HOST_MUST_BE_CONTRACT",
									"nameLocation": "2294:21:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2315:2:16"
									},
									"src": "2288:30:16"
								},
								{
									"errorSelector": "619c5359",
									"id": 2239,
									"name": "HOST_ONLY_LISTED_AGREEMENT",
									"nameLocation": "2372:26:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2398:2:16"
									},
									"src": "2366:35:16"
								},
								{
									"errorSelector": "d4f5d496",
									"id": 2241,
									"name": "HOST_NEED_MORE_GAS",
									"nameLocation": "2450:18:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2468:2:16"
									},
									"src": "2444:27:16"
								},
								{
									"errorSelector": "a85ba64f",
									"id": 2245,
									"name": "APP_RULE",
									"nameLocation": "2621:8:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2243,
												"mutability": "mutable",
												"name": "_code",
												"nameLocation": "2638:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2245,
												"src": "2630:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2630:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2629:15:16"
									},
									"src": "2615:30:16"
								},
								{
									"errorSelector": "19ab84d1",
									"id": 2247,
									"name": "HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY",
									"nameLocation": "2700:50:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2750:2:16"
									},
									"src": "2694:59:16"
								},
								{
									"errorSelector": "163cbe43",
									"id": 2249,
									"name": "HOST_NOT_A_SUPER_APP",
									"nameLocation": "2778:20:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2798:2:16"
									},
									"src": "2772:29:16"
								},
								{
									"errorSelector": "5b93ebf0",
									"id": 2251,
									"name": "HOST_NO_APP_REGISTRATION_PERMISSIONS",
									"nameLocation": "2856:36:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2892:2:16"
									},
									"src": "2850:45:16"
								},
								{
									"errorSelector": "96aa315e",
									"id": 2253,
									"name": "HOST_RECEIVER_IS_NOT_SUPER_APP",
									"nameLocation": "2934:30:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2252,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2964:2:16"
									},
									"src": "2928:39:16"
								},
								{
									"errorSelector": "bacfdc40",
									"id": 2255,
									"name": "HOST_SENDER_IS_NOT_SUPER_APP",
									"nameLocation": "3012:28:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2254,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3040:2:16"
									},
									"src": "3006:37:16"
								},
								{
									"errorSelector": "44725270",
									"id": 2257,
									"name": "HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL",
									"nameLocation": "3090:38:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2256,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3128:2:16"
									},
									"src": "3084:47:16"
								},
								{
									"errorSelector": "02384b64",
									"id": 2259,
									"name": "HOST_SUPER_APP_IS_JAILED",
									"nameLocation": "3168:24:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3192:2:16"
									},
									"src": "3162:33:16"
								},
								{
									"errorSelector": "01b0a935",
									"id": 2261,
									"name": "HOST_SUPER_APP_ALREADY_REGISTERED",
									"nameLocation": "3246:33:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3279:2:16"
									},
									"src": "3240:42:16"
								},
								{
									"errorSelector": "289533c5",
									"id": 2263,
									"name": "HOST_UNAUTHORIZED_SUPER_APP_FACTORY",
									"nameLocation": "3324:35:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3359:2:16"
									},
									"src": "3318:44:16"
								},
								{
									"functionSelector": "bbe4fd50",
									"id": 2268,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNow",
									"nameLocation": "3919:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3925:2:16"
									},
									"returnParameters": {
										"id": 2267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2266,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2268,
												"src": "3951:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3951:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3950:9:16"
									},
									"scope": 2708,
									"src": "3910:50:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2269,
										"nodeType": "StructuredDocumentation",
										"src": "4145:81:16",
										"text": " @dev Get the current governance address of the Superfluid host"
									},
									"functionSelector": "289b3c0d",
									"id": 2275,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getGovernance",
									"nameLocation": "4240:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2270,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4253:2:16"
									},
									"returnParameters": {
										"id": 2274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2273,
												"mutability": "mutable",
												"name": "governance",
												"nameLocation": "4300:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2275,
												"src": "4278:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 2272,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2271,
														"name": "ISuperfluidGovernance",
														"nameLocations": [
															"4278:21:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2837,
														"src": "4278:21:16"
													},
													"referencedDeclaration": 2837,
													"src": "4278:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4277:34:16"
									},
									"scope": 2708,
									"src": "4231:81:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2276,
										"nodeType": "StructuredDocumentation",
										"src": "4318:69:16",
										"text": " @dev Replace the current governance with a new one"
									},
									"functionSelector": "7283100c",
									"id": 2282,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "replaceGovernance",
									"nameLocation": "4401:17:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2279,
												"mutability": "mutable",
												"name": "newGov",
												"nameLocation": "4441:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2282,
												"src": "4419:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 2278,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2277,
														"name": "ISuperfluidGovernance",
														"nameLocations": [
															"4419:21:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2837,
														"src": "4419:21:16"
													},
													"referencedDeclaration": 2837,
													"src": "4419:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4418:30:16"
									},
									"returnParameters": {
										"id": 2281,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4457:0:16"
									},
									"scope": 2708,
									"src": "4392:66:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2283,
										"nodeType": "StructuredDocumentation",
										"src": "4463:169:16",
										"text": " @dev Governance replaced event\n @param oldGov Address of the old governance contract\n @param newGov Address of the new governance contract"
									},
									"eventSelector": "13abda02e63c790d0e2818b251282cfe5cbe0a8abd69c54bf5d2260c0907bd2e",
									"id": 2291,
									"name": "GovernanceReplaced",
									"nameLocation": "4643:18:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2286,
												"indexed": false,
												"mutability": "mutable",
												"name": "oldGov",
												"nameLocation": "4684:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2291,
												"src": "4662:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 2285,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2284,
														"name": "ISuperfluidGovernance",
														"nameLocations": [
															"4662:21:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2837,
														"src": "4662:21:16"
													},
													"referencedDeclaration": 2837,
													"src": "4662:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2289,
												"indexed": false,
												"mutability": "mutable",
												"name": "newGov",
												"nameLocation": "4714:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2291,
												"src": "4692:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 2288,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2287,
														"name": "ISuperfluidGovernance",
														"nameLocations": [
															"4692:21:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2837,
														"src": "4692:21:16"
													},
													"referencedDeclaration": 2837,
													"src": "4692:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4661:60:16"
									},
									"src": "4637:85:16"
								},
								{
									"documentation": {
										"id": 2292,
										"nodeType": "StructuredDocumentation",
										"src": "4919:188:16",
										"text": " @dev Register a new agreement class to the system\n @param agreementClassLogic Initial agreement class code\n @custom:modifiers \n - onlyGovernance"
									},
									"functionSelector": "15a024e1",
									"id": 2298,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAgreementClass",
									"nameLocation": "5121:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2295,
												"mutability": "mutable",
												"name": "agreementClassLogic",
												"nameLocation": "5160:19:16",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "5144:35:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2294,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2293,
														"name": "ISuperAgreement",
														"nameLocations": [
															"5144:15:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "5144:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "5144:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5143:37:16"
									},
									"returnParameters": {
										"id": 2297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5189:0:16"
									},
									"scope": 2708,
									"src": "5112:78:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2299,
										"nodeType": "StructuredDocumentation",
										"src": "5195:280:16",
										"text": " @notice Agreement class registered event\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param agreementType The agreement type registered\n @param code Address of the new agreement"
									},
									"eventSelector": "878135063a6cfb3bc333e534b1fdc83f4f12221cad6705c31c0567048a8bd3d1",
									"id": 2305,
									"name": "AgreementClassRegistered",
									"nameLocation": "5486:24:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2301,
												"indexed": false,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "5519:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2305,
												"src": "5511:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2300,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5511:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2303,
												"indexed": false,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "5542:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2305,
												"src": "5534:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5534:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5510:37:16"
									},
									"src": "5480:68:16"
								},
								{
									"documentation": {
										"id": 2306,
										"nodeType": "StructuredDocumentation",
										"src": "5554:176:16",
										"text": " @dev Update code of an agreement class\n @param agreementClassLogic New code for the agreement class\n @custom:modifiers \n  - onlyGovernance"
									},
									"functionSelector": "06cecba8",
									"id": 2312,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementClass",
									"nameLocation": "5744:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2309,
												"mutability": "mutable",
												"name": "agreementClassLogic",
												"nameLocation": "5781:19:16",
												"nodeType": "VariableDeclaration",
												"scope": 2312,
												"src": "5765:35:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2308,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2307,
														"name": "ISuperAgreement",
														"nameLocations": [
															"5765:15:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "5765:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "5765:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5764:37:16"
									},
									"returnParameters": {
										"id": 2311,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5810:0:16"
									},
									"scope": 2708,
									"src": "5735:76:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2313,
										"nodeType": "StructuredDocumentation",
										"src": "5816:274:16",
										"text": " @notice Agreement class updated event\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param agreementType The agreement type updated\n @param code Address of the new agreement"
									},
									"eventSelector": "9279aa773f2b588996032d8de89911555039f28b13a11a7c17074330bc082d9a",
									"id": 2319,
									"name": "AgreementClassUpdated",
									"nameLocation": "6101:21:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2315,
												"indexed": false,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "6131:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "6123:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2314,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6123:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2317,
												"indexed": false,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "6154:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "6146:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6146:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6122:37:16"
									},
									"src": "6095:65:16"
								},
								{
									"documentation": {
										"id": 2320,
										"nodeType": "StructuredDocumentation",
										"src": "6166:181:16",
										"text": " @notice Check if the agreement type is whitelisted\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
									},
									"functionSelector": "e8dccb7d",
									"id": 2327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAgreementTypeListed",
									"nameLocation": "6361:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2322,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "6391:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2327,
												"src": "6383:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2321,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6383:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6382:23:16"
									},
									"returnParameters": {
										"id": 2326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2325,
												"mutability": "mutable",
												"name": "yes",
												"nameLocation": "6433:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2327,
												"src": "6428:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2324,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6428:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6427:10:16"
									},
									"scope": 2708,
									"src": "6352:86:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2328,
										"nodeType": "StructuredDocumentation",
										"src": "6444:65:16",
										"text": " @dev Check if the agreement class is whitelisted"
									},
									"functionSelector": "8ca48484",
									"id": 2336,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAgreementClassListed",
									"nameLocation": "6523:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2331,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6562:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2336,
												"src": "6546:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2329,
														"name": "ISuperAgreement",
														"nameLocations": [
															"6546:15:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "6546:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "6546:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6545:32:16"
									},
									"returnParameters": {
										"id": 2335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2334,
												"mutability": "mutable",
												"name": "yes",
												"nameLocation": "6605:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2336,
												"src": "6600:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2333,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6600:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:10:16"
									},
									"scope": 2708,
									"src": "6514:96:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2337,
										"nodeType": "StructuredDocumentation",
										"src": "6616:158:16",
										"text": " @notice Get agreement class\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
									},
									"functionSelector": "b6d200de",
									"id": 2345,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementClass",
									"nameLocation": "6788:17:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "6814:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "6806:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2338,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6806:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6805:23:16"
									},
									"returnParameters": {
										"id": 2344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2343,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6867:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "6851:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2342,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2341,
														"name": "ISuperAgreement",
														"nameLocations": [
															"6851:15:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "6851:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "6851:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6850:32:16"
									},
									"scope": 2708,
									"src": "6779:104:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2346,
										"nodeType": "StructuredDocumentation",
										"src": "6889:113:16",
										"text": " @dev Map list of the agreement classes using a bitmap\n @param bitmap Agreement class bitmap"
									},
									"functionSelector": "c56a069d",
									"id": 2355,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mapAgreementClasses",
									"nameLocation": "7016:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2348,
												"mutability": "mutable",
												"name": "bitmap",
												"nameLocation": "7044:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "7036:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7036:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7035:16:16"
									},
									"returnParameters": {
										"id": 2354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2353,
												"mutability": "mutable",
												"name": "agreementClasses",
												"nameLocation": "7116:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "7091:41:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1466_$dyn_memory_ptr",
													"typeString": "contract ISuperAgreement[]"
												},
												"typeName": {
													"baseType": {
														"id": 2351,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2350,
															"name": "ISuperAgreement",
															"nameLocations": [
																"7091:15:16"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1466,
															"src": "7091:15:16"
														},
														"referencedDeclaration": 1466,
														"src": "7091:15:16",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
															"typeString": "contract ISuperAgreement"
														}
													},
													"id": 2352,
													"nodeType": "ArrayTypeName",
													"src": "7091:17:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1466_$dyn_storage_ptr",
														"typeString": "contract ISuperAgreement[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7090:43:16"
									},
									"scope": 2708,
									"src": "7007:127:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2356,
										"nodeType": "StructuredDocumentation",
										"src": "7140:236:16",
										"text": " @notice Create a new bitmask by adding a agreement class to it\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param bitmap Agreement class bitmap"
									},
									"functionSelector": "bced3ddc",
									"id": 2365,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addToAgreementClassesBitmap",
									"nameLocation": "7390:27:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2358,
												"mutability": "mutable",
												"name": "bitmap",
												"nameLocation": "7426:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "7418:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7418:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2360,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "7442:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "7434:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2359,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7434:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7417:39:16"
									},
									"returnParameters": {
										"id": 2364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2363,
												"mutability": "mutable",
												"name": "newBitmap",
												"nameLocation": "7504:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "7496:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7496:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7495:19:16"
									},
									"scope": 2708,
									"src": "7381:134:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2366,
										"nodeType": "StructuredDocumentation",
										"src": "7521:240:16",
										"text": " @notice Create a new bitmask by removing a agreement class from it\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param bitmap Agreement class bitmap"
									},
									"functionSelector": "a5dbbbcd",
									"id": 2375,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeFromAgreementClassesBitmap",
									"nameLocation": "7775:32:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2368,
												"mutability": "mutable",
												"name": "bitmap",
												"nameLocation": "7816:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2375,
												"src": "7808:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7808:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2370,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "7832:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2375,
												"src": "7824:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2369,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7824:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7807:39:16"
									},
									"returnParameters": {
										"id": 2374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2373,
												"mutability": "mutable",
												"name": "newBitmap",
												"nameLocation": "7894:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2375,
												"src": "7886:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7886:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7885:19:16"
									},
									"scope": 2708,
									"src": "7766:139:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2376,
										"nodeType": "StructuredDocumentation",
										"src": "8098:86:16",
										"text": " @dev Get the super token factory\n @return factory The factory"
									},
									"functionSelector": "731aed6e",
									"id": 2382,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenFactory",
									"nameLocation": "8198:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2377,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8218:2:16"
									},
									"returnParameters": {
										"id": 2381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2380,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "8263:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 2382,
												"src": "8244:26:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
													"typeString": "contract ISuperTokenFactory"
												},
												"typeName": {
													"id": 2379,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2378,
														"name": "ISuperTokenFactory",
														"nameLocations": [
															"8244:18:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2184,
														"src": "8244:18:16"
													},
													"referencedDeclaration": 2184,
													"src": "8244:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
														"typeString": "contract ISuperTokenFactory"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8243:28:16"
									},
									"scope": 2708,
									"src": "8189:83:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2383,
										"nodeType": "StructuredDocumentation",
										"src": "8278:134:16",
										"text": " @dev Get the super token factory logic (applicable to upgradable deployment)\n @return logic The factory logic"
									},
									"functionSelector": "f2e55caf",
									"id": 2388,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenFactoryLogic",
									"nameLocation": "8426:25:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2384,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8451:2:16"
									},
									"returnParameters": {
										"id": 2387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2386,
												"mutability": "mutable",
												"name": "logic",
												"nameLocation": "8485:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "8477:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8477:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8476:15:16"
									},
									"scope": 2708,
									"src": "8417:75:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2389,
										"nodeType": "StructuredDocumentation",
										"src": "8498:93:16",
										"text": " @dev Update super token factory\n @param newFactory New factory logic"
									},
									"functionSelector": "54fbc493",
									"id": 2395,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateSuperTokenFactory",
									"nameLocation": "8605:23:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2392,
												"mutability": "mutable",
												"name": "newFactory",
												"nameLocation": "8648:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2395,
												"src": "8629:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
													"typeString": "contract ISuperTokenFactory"
												},
												"typeName": {
													"id": 2391,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2390,
														"name": "ISuperTokenFactory",
														"nameLocations": [
															"8629:18:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2184,
														"src": "8629:18:16"
													},
													"referencedDeclaration": 2184,
													"src": "8629:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
														"typeString": "contract ISuperTokenFactory"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8628:31:16"
									},
									"returnParameters": {
										"id": 2394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8668:0:16"
									},
									"scope": 2708,
									"src": "8596:73:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2396,
										"nodeType": "StructuredDocumentation",
										"src": "8674:108:16",
										"text": " @dev SuperToken factory updated event\n @param newFactory Address of the new factory"
									},
									"eventSelector": "ce13a9895a1719ad4493b2ac1a9bfb36070566161abab408e7ecbe586da8d499",
									"id": 2401,
									"name": "SuperTokenFactoryUpdated",
									"nameLocation": "8793:24:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2399,
												"indexed": false,
												"mutability": "mutable",
												"name": "newFactory",
												"nameLocation": "8837:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2401,
												"src": "8818:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
													"typeString": "contract ISuperTokenFactory"
												},
												"typeName": {
													"id": 2398,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2397,
														"name": "ISuperTokenFactory",
														"nameLocations": [
															"8818:18:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2184,
														"src": "8818:18:16"
													},
													"referencedDeclaration": 2184,
													"src": "8818:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
														"typeString": "contract ISuperTokenFactory"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8817:31:16"
									},
									"src": "8787:62:16"
								},
								{
									"documentation": {
										"id": 2402,
										"nodeType": "StructuredDocumentation",
										"src": "8855:147:16",
										"text": " @notice Update the super token logic to the latest\n @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours"
									},
									"functionSelector": "787afde7",
									"id": 2408,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateSuperTokenLogic",
									"nameLocation": "9016:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2405,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9050:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2408,
												"src": "9038:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2404,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2403,
														"name": "ISuperToken",
														"nameLocations": [
															"9038:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "9038:11:16"
													},
													"referencedDeclaration": 2054,
													"src": "9038:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9037:19:16"
									},
									"returnParameters": {
										"id": 2407,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9065:0:16"
									},
									"scope": 2708,
									"src": "9007:59:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2409,
										"nodeType": "StructuredDocumentation",
										"src": "9071:109:16",
										"text": " @dev SuperToken logic updated event\n @param code Address of the new SuperToken logic"
									},
									"eventSelector": "840acbd291b38534819f47f875839277e502f40e1c7bfea2c5fc2c8017442cd3",
									"id": 2416,
									"name": "SuperTokenLogicUpdated",
									"nameLocation": "9191:22:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2412,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9234:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2416,
												"src": "9214:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2411,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2410,
														"name": "ISuperToken",
														"nameLocations": [
															"9214:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "9214:11:16"
													},
													"referencedDeclaration": 2054,
													"src": "9214:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2414,
												"indexed": false,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "9249:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2416,
												"src": "9241:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9241:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9213:41:16"
									},
									"src": "9185:70:16"
								},
								{
									"documentation": {
										"id": 2417,
										"nodeType": "StructuredDocumentation",
										"src": "9442:383:16",
										"text": " @dev Message sender (must be a contract) declares itself as a super app.\n @custom:deprecated you should use `registerAppWithKey` or `registerAppByFactory` instead,\n because app registration is currently governance permissioned on mainnets.\n @param configWord The super app manifest configuration, flags are defined in\n `SuperAppDefinitions`"
									},
									"functionSelector": "ad3915c8",
									"id": 2422,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerApp",
									"nameLocation": "9839:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2420,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2419,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "9859:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2422,
												"src": "9851:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2418,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9851:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9850:20:16"
									},
									"returnParameters": {
										"id": 2421,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9879:0:16"
									},
									"scope": 2708,
									"src": "9830:50:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2423,
										"nodeType": "StructuredDocumentation",
										"src": "9885:84:16",
										"text": " @dev App registered event\n @param app Address of jailed app"
									},
									"eventSelector": "0d540ad8f39e07d19909687352b9fa017405d93c91a6760981fbae9cf28bfef7",
									"id": 2428,
									"name": "AppRegistered",
									"nameLocation": "9980:13:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2426,
												"indexed": true,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "10012:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2428,
												"src": "9994:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2425,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2424,
														"name": "ISuperApp",
														"nameLocations": [
															"9994:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "9994:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "9994:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9993:23:16"
									},
									"src": "9974:43:16"
								},
								{
									"documentation": {
										"id": 2429,
										"nodeType": "StructuredDocumentation",
										"src": "10023:655:16",
										"text": " @dev Message sender declares itself as a super app.\n @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n @param registrationKey The registration key issued by the governance, needed to register on a mainnet.\n @notice See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n On testnets or in dev environment, a placeholder (e.g. empty string) can be used.\n While the message sender must be the super app itself, the transaction sender (tx.origin)\n must be the deployer account the registration key was issued for."
									},
									"functionSelector": "bd1c448b",
									"id": 2436,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAppWithKey",
									"nameLocation": "10692:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2431,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "10719:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2436,
												"src": "10711:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10711:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2433,
												"mutability": "mutable",
												"name": "registrationKey",
												"nameLocation": "10747:15:16",
												"nodeType": "VariableDeclaration",
												"scope": 2436,
												"src": "10731:31:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2432,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "10731:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10710:53:16"
									},
									"returnParameters": {
										"id": 2435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10772:0:16"
									},
									"scope": 2708,
									"src": "10683:90:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2437,
										"nodeType": "StructuredDocumentation",
										"src": "10779:400:16",
										"text": " @dev Message sender (must be a contract) declares app as a super app\n @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n @notice On mainnet deployments, only factory contracts pre-authorized by governance can use this.\n See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide"
									},
									"functionSelector": "f3733052",
									"id": 2445,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAppByFactory",
									"nameLocation": "11193:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2440,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11224:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "11214:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2439,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2438,
														"name": "ISuperApp",
														"nameLocations": [
															"11214:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "11214:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "11214:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2442,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "11237:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "11229:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11229:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11213:35:16"
									},
									"returnParameters": {
										"id": 2444,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11257:0:16"
									},
									"scope": 2708,
									"src": "11184:74:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2446,
										"nodeType": "StructuredDocumentation",
										"src": "11264:90:16",
										"text": " @dev Query if the app is registered\n @param app Super app address"
									},
									"functionSelector": "3ca3ad4e",
									"id": 2454,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApp",
									"nameLocation": "11368:5:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2449,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11384:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "11374:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2448,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2447,
														"name": "ISuperApp",
														"nameLocations": [
															"11374:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "11374:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "11374:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11373:15:16"
									},
									"returnParameters": {
										"id": 2453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2452,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "11411:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2451,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11411:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11410:6:16"
									},
									"scope": 2708,
									"src": "11359:58:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2455,
										"nodeType": "StructuredDocumentation",
										"src": "11423:83:16",
										"text": " @dev Query app callbacklevel\n @param app Super app address"
									},
									"functionSelector": "9378fa13",
									"id": 2463,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAppCallbackLevel",
									"nameLocation": "11520:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2458,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11550:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2463,
												"src": "11540:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2457,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2456,
														"name": "ISuperApp",
														"nameLocations": [
															"11540:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "11540:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "11540:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11539:15:16"
									},
									"returnParameters": {
										"id": 2462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2461,
												"mutability": "mutable",
												"name": "appCallbackLevel",
												"nameLocation": "11583:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2463,
												"src": "11577:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2460,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "11577:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11576:24:16"
									},
									"scope": 2708,
									"src": "11511:90:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2464,
										"nodeType": "StructuredDocumentation",
										"src": "11607:93:16",
										"text": " @dev Get the manifest of the super app\n @param app Super app address"
									},
									"functionSelector": "f9f522f4",
									"id": 2476,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAppManifest",
									"nameLocation": "11714:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2467,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11748:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "11738:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2466,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2465,
														"name": "ISuperApp",
														"nameLocations": [
															"11738:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "11738:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "11738:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11728:29:16"
									},
									"returnParameters": {
										"id": 2475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2470,
												"mutability": "mutable",
												"name": "isSuperApp",
												"nameLocation": "11815:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "11810:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2469,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11810:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2472,
												"mutability": "mutable",
												"name": "isJailed",
												"nameLocation": "11844:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "11839:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2471,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11839:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2474,
												"mutability": "mutable",
												"name": "noopMask",
												"nameLocation": "11874:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "11866:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11866:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11796:96:16"
									},
									"scope": 2708,
									"src": "11705:188:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2477,
										"nodeType": "StructuredDocumentation",
										"src": "11899:92:16",
										"text": " @dev Query if the app has been jailed\n @param app Super app address"
									},
									"functionSelector": "6b4f3335",
									"id": 2485,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAppJailed",
									"nameLocation": "12005:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2480,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "12027:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2485,
												"src": "12017:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2479,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2478,
														"name": "ISuperApp",
														"nameLocations": [
															"12017:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "12017:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "12017:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12016:15:16"
									},
									"returnParameters": {
										"id": 2484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2483,
												"mutability": "mutable",
												"name": "isJail",
												"nameLocation": "12060:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2485,
												"src": "12055:11:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2482,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12055:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12054:13:16"
									},
									"scope": 2708,
									"src": "11996:72:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2486,
										"nodeType": "StructuredDocumentation",
										"src": "12074:153:16",
										"text": " @dev Whitelist the target app for app composition for the source app (msg.sender)\n @param targetApp The target super app address"
									},
									"functionSelector": "57121e0c",
									"id": 2492,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowCompositeApp",
									"nameLocation": "12241:17:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2489,
												"mutability": "mutable",
												"name": "targetApp",
												"nameLocation": "12269:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2492,
												"src": "12259:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2488,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2487,
														"name": "ISuperApp",
														"nameLocations": [
															"12259:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "12259:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "12259:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12258:21:16"
									},
									"returnParameters": {
										"id": 2491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12288:0:16"
									},
									"scope": 2708,
									"src": "12232:57:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2493,
										"nodeType": "StructuredDocumentation",
										"src": "12295:184:16",
										"text": " @dev Query if source app is allowed to call the target app as downstream app\n @param app Super app address\n @param targetApp The target super app address"
									},
									"functionSelector": "bb84cfa1",
									"id": 2504,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isCompositeAppAllowed",
									"nameLocation": "12493:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2496,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "12534:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "12524:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2495,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2494,
														"name": "ISuperApp",
														"nameLocations": [
															"12524:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "12524:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "12524:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2499,
												"mutability": "mutable",
												"name": "targetApp",
												"nameLocation": "12557:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "12547:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2498,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2497,
														"name": "ISuperApp",
														"nameLocations": [
															"12547:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "12547:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "12547:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12514:58:16"
									},
									"returnParameters": {
										"id": 2503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2502,
												"mutability": "mutable",
												"name": "isAppAllowed",
												"nameLocation": "12617:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "12612:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2501,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12612:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12611:19:16"
									},
									"scope": 2708,
									"src": "12484:147:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2505,
										"nodeType": "StructuredDocumentation",
										"src": "13023:393:16",
										"text": " @dev (For agreements) StaticCall the app before callback\n @param  app               The super app.\n @param  callData          The call data sending to the super app.\n @param  isTermination     Is it a termination callback?\n @param  ctx               Current ctx, it will be validated.\n @return cbdata            Data returned from the callback."
									},
									"functionSelector": "74041e02",
									"id": 2519,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppBeforeCallback",
									"nameLocation": "13430:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2508,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "13471:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13461:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2507,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2506,
														"name": "ISuperApp",
														"nameLocations": [
															"13461:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "13461:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "13461:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2510,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "13499:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13484:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2509,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13484:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2512,
												"mutability": "mutable",
												"name": "isTermination",
												"nameLocation": "13522:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13517:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2511,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13517:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2514,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "13560:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13545:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2513,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13545:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13451:118:16"
									},
									"returnParameters": {
										"id": 2518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2517,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "13672:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13659:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2516,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13659:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13658:21:16"
									},
									"scope": 2708,
									"src": "13421:259:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2520,
										"nodeType": "StructuredDocumentation",
										"src": "13686:393:16",
										"text": " @dev (For agreements) Call the app after callback\n @param  app               The super app.\n @param  callData          The call data sending to the super app.\n @param  isTermination     Is it a termination callback?\n @param  ctx               Current ctx, it will be validated.\n @return newCtx            The current context of the transaction."
									},
									"functionSelector": "1e6d0a84",
									"id": 2534,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppAfterCallback",
									"nameLocation": "14093:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2523,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "14133:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14123:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2522,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2521,
														"name": "ISuperApp",
														"nameLocations": [
															"14123:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "14123:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "14123:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2525,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "14161:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14146:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14146:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2527,
												"mutability": "mutable",
												"name": "isTermination",
												"nameLocation": "14184:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14179:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2526,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14179:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2529,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "14222:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14207:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2528,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14207:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14113:118:16"
									},
									"returnParameters": {
										"id": 2533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2532,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "14334:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14321:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2531,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14321:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14320:21:16"
									},
									"scope": 2708,
									"src": "14084:258:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2535,
										"nodeType": "StructuredDocumentation",
										"src": "14348:408:16",
										"text": " @dev (For agreements) Create a new callback stack\n @param  ctx                     The current ctx, it will be validated.\n @param  app                     The super app.\n @param  appCreditGranted        App credit granted so far.\n @param  appCreditUsed           App credit used so far.\n @return newCtx                  The current context of the transaction."
									},
									"functionSelector": "768fabb0",
									"id": 2552,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "appCallbackPush",
									"nameLocation": "14770:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2537,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "14810:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14795:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2536,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14795:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2540,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "14833:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14823:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2539,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2538,
														"name": "ISuperApp",
														"nameLocations": [
															"14823:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "14823:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "14823:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2542,
												"mutability": "mutable",
												"name": "appCreditGranted",
												"nameLocation": "14854:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14846:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14846:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2544,
												"mutability": "mutable",
												"name": "appCreditUsed",
												"nameLocation": "14887:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14880:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2543,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "14880:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2547,
												"mutability": "mutable",
												"name": "appCreditToken",
												"nameLocation": "14927:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14910:31:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2546,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2545,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"14910:16:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "14910:16:16"
													},
													"referencedDeclaration": 3123,
													"src": "14910:16:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14785:162:16"
									},
									"returnParameters": {
										"id": 2551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2550,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15051:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "15038:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2549,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15038:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15037:21:16"
									},
									"scope": 2708,
									"src": "14761:298:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2553,
										"nodeType": "StructuredDocumentation",
										"src": "15065:554:16",
										"text": " @dev (For agreements) Pop from the current app callback stack\n @param  ctx                     The ctx that was pushed before the callback stack.\n @param  appCreditUsedDelta      App credit used by the app.\n @return newCtx                  The current context of the transaction.\n @custom:security\n - Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory.\n - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly."
									},
									"functionSelector": "989b0c3e",
									"id": 2562,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "appCallbackPop",
									"nameLocation": "15633:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2555,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "15672:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2562,
												"src": "15657:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2554,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15657:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2557,
												"mutability": "mutable",
												"name": "appCreditUsedDelta",
												"nameLocation": "15692:18:16",
												"nodeType": "VariableDeclaration",
												"scope": 2562,
												"src": "15685:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2556,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "15685:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15647:69:16"
									},
									"returnParameters": {
										"id": 2561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2560,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15789:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2562,
												"src": "15776:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2559,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15776:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15775:21:16"
									},
									"scope": 2708,
									"src": "15624:173:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2563,
										"nodeType": "StructuredDocumentation",
										"src": "15803:288:16",
										"text": " @dev (For agreements) Use app credit.\n @param  ctx                      The current ctx, it will be validated.\n @param  appCreditUsedMore        See app credit for more details.\n @return newCtx                   The current context of the transaction."
									},
									"functionSelector": "59a29141",
									"id": 2572,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ctxUseCredit",
									"nameLocation": "16105:12:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2565,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16142:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2572,
												"src": "16127:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2564,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16127:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2567,
												"mutability": "mutable",
												"name": "appCreditUsedMore",
												"nameLocation": "16162:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 2572,
												"src": "16155:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2566,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "16155:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16117:68:16"
									},
									"returnParameters": {
										"id": 2571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2570,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16289:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2572,
												"src": "16276:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2569,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16276:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16275:21:16"
									},
									"scope": 2708,
									"src": "16096:201:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2573,
										"nodeType": "StructuredDocumentation",
										"src": "16303:244:16",
										"text": " @dev (For agreements) Jail the app.\n @param  app                     The super app.\n @param  reason                  Jail reason code.\n @return newCtx                  The current context of the transaction."
									},
									"functionSelector": "b724211e",
									"id": 2585,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "jailApp",
									"nameLocation": "16561:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2575,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16593:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "16578:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2574,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16578:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2578,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "16616:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "16606:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2577,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2576,
														"name": "ISuperApp",
														"nameLocations": [
															"16606:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "16606:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "16606:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2580,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "16637:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "16629:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16629:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16568:81:16"
									},
									"returnParameters": {
										"id": 2584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2583,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16753:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "16740:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2582,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16740:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16739:21:16"
									},
									"scope": 2708,
									"src": "16552:209:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2586,
										"nodeType": "StructuredDocumentation",
										"src": "16767:172:16",
										"text": " @dev Jail event for the app\n @param app Address of jailed app\n @param reason Reason the app is jailed (see Definitions.sol for the full list)"
									},
									"eventSelector": "be3aa33bd245135e4e26b223d79d14ea479a47bff09f2b03c53838af1edbb14b",
									"id": 2593,
									"name": "Jail",
									"nameLocation": "16950:4:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2589,
												"indexed": true,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "16973:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2593,
												"src": "16955:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2588,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2587,
														"name": "ISuperApp",
														"nameLocations": [
															"16955:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "16955:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "16955:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2591,
												"indexed": false,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "16986:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2593,
												"src": "16978:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2590,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16978:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16954:39:16"
									},
									"src": "16944:50:16"
								},
								{
									"documentation": {
										"id": 2594,
										"nodeType": "StructuredDocumentation",
										"src": "17555:265:16",
										"text": " @dev Call agreement function\n @param agreementClass The agreement address you are calling\n @param callData The contextual call data with placeholder ctx\n @param userData Extra user data being sent to the super app callbacks"
									},
									"functionSelector": "39255d5b",
									"id": 2606,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAgreement",
									"nameLocation": "17835:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2597,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "17875:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "17859:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2596,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2595,
														"name": "ISuperAgreement",
														"nameLocations": [
															"17859:15:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "17859:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "17859:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2599,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "17915:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "17900:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2598,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17900:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2601,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "17949:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "17934:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2600,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17934:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17848:116:16"
									},
									"returnParameters": {
										"id": 2605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2604,
												"mutability": "mutable",
												"name": "returnedData",
												"nameLocation": "18068:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "18055:25:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2603,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18055:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18054:27:16"
									},
									"scope": 2708,
									"src": "17826:256:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2607,
										"nodeType": "StructuredDocumentation",
										"src": "18088:268:16",
										"text": " @notice Call app action\n @dev Main use case is calling app action in a batch call via the host\n @param callData The contextual call data\n @custom:note See \"Contextless Call Proxies\" above for more about contextual call data."
									},
									"functionSelector": "1e855cf3",
									"id": 2617,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppAction",
									"nameLocation": "18370:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2610,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "18403:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2617,
												"src": "18393:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2609,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2608,
														"name": "ISuperApp",
														"nameLocations": [
															"18393:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "18393:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "18393:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2612,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "18431:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2617,
												"src": "18416:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2611,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18416:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18383:62:16"
									},
									"returnParameters": {
										"id": 2616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2615,
												"mutability": "mutable",
												"name": "returnedData",
												"nameLocation": "18575:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 2617,
												"src": "18562:25:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2614,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18562:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18561:27:16"
									},
									"scope": 2708,
									"src": "18361:228:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluid.Context",
									"id": 2641,
									"members": [
										{
											"constant": false,
											"id": 2619,
											"mutability": "mutable",
											"name": "appCallbackLevel",
											"nameLocation": "19834:16:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "19828:22:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 2618,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "19828:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2621,
											"mutability": "mutable",
											"name": "callType",
											"nameLocation": "19890:8:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "19884:14:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 2620,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "19884:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2623,
											"mutability": "mutable",
											"name": "timestamp",
											"nameLocation": "19948:9:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "19940:17:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2622,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "19940:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2625,
											"mutability": "mutable",
											"name": "msgSender",
											"nameLocation": "20027:9:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20019:17:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2624,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "20019:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2627,
											"mutability": "mutable",
											"name": "agreementSelector",
											"nameLocation": "20192:17:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20185:24:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes4",
												"typeString": "bytes4"
											},
											"typeName": {
												"id": 2626,
												"name": "bytes4",
												"nodeType": "ElementaryTypeName",
												"src": "20185:6:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2629,
											"mutability": "mutable",
											"name": "userData",
											"nameLocation": "20273:8:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20267:14:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2628,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "20267:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2631,
											"mutability": "mutable",
											"name": "appCreditGranted",
											"nameLocation": "20375:16:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20367:24:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2630,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "20367:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2633,
											"mutability": "mutable",
											"name": "appCreditWantedDeprecated",
											"nameLocation": "20458:25:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20450:33:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2632,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "20450:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2635,
											"mutability": "mutable",
											"name": "appCreditUsed",
											"nameLocation": "21021:13:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "21014:20:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int256",
												"typeString": "int256"
											},
											"typeName": {
												"id": 2634,
												"name": "int256",
												"nodeType": "ElementaryTypeName",
												"src": "21014:6:16",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2637,
											"mutability": "mutable",
											"name": "appAddress",
											"nameLocation": "21075:10:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "21067:18:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2636,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "21067:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2640,
											"mutability": "mutable",
											"name": "appCreditToken",
											"nameLocation": "21149:14:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "21132:31:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
												"typeString": "contract ISuperfluidToken"
											},
											"typeName": {
												"id": 2639,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2638,
													"name": "ISuperfluidToken",
													"nameLocations": [
														"21132:16:16"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 3123,
													"src": "21132:16:16"
												},
												"referencedDeclaration": 3123,
												"src": "21132:16:16",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Context",
									"nameLocation": "19734:7:16",
									"nodeType": "StructDefinition",
									"scope": 2708,
									"src": "19727:1443:16",
									"visibility": "public"
								},
								{
									"functionSelector": "4329d293",
									"id": 2657,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAgreementWithContext",
									"nameLocation": "21185:24:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2644,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "21235:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21219:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2643,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2642,
														"name": "ISuperAgreement",
														"nameLocations": [
															"21219:15:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "21219:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "21219:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2646,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "21274:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21259:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2645,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21259:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2648,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "21307:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21292:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2647,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21292:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2650,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21340:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21325:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2649,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21325:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21209:140:16"
									},
									"returnParameters": {
										"id": 2656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2653,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "21470:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21457:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2652,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21457:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2655,
												"mutability": "mutable",
												"name": "returnedData",
												"nameLocation": "21491:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21478:25:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2654,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21478:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21456:48:16"
									},
									"scope": 2708,
									"src": "21176:329:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "ba48b5f8",
									"id": 2669,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppActionWithContext",
									"nameLocation": "21520:24:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2660,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "21564:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "21554:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2659,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2658,
														"name": "ISuperApp",
														"nameLocations": [
															"21554:9:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "21554:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "21554:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2662,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "21592:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "21577:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21577:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2664,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21625:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "21610:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2663,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21610:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21544:90:16"
									},
									"returnParameters": {
										"id": 2668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2667,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "21742:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "21729:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2666,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21729:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21728:21:16"
									},
									"scope": 2708,
									"src": "21511:239:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "3f6c923a",
									"id": 2677,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decodeCtx",
									"nameLocation": "21765:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2671,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21788:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "21775:16:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2670,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21775:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21774:18:16"
									},
									"returnParameters": {
										"id": 2676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2675,
												"mutability": "mutable",
												"name": "context",
												"nameLocation": "21847:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "21832:22:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Context_$2641_memory_ptr",
													"typeString": "struct ISuperfluid.Context"
												},
												"typeName": {
													"id": 2674,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2673,
														"name": "Context",
														"nameLocations": [
															"21832:7:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2641,
														"src": "21832:7:16"
													},
													"referencedDeclaration": 2641,
													"src": "21832:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Context_$2641_storage_ptr",
														"typeString": "struct ISuperfluid.Context"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21831:24:16"
									},
									"scope": 2708,
									"src": "21756:100:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "bf428734",
									"id": 2684,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isCtxValid",
									"nameLocation": "21871:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2679,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21897:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2684,
												"src": "21882:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21882:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21881:20:16"
									},
									"returnParameters": {
										"id": 2683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2682,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2684,
												"src": "21925:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2681,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "21925:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21924:6:16"
									},
									"scope": 2708,
									"src": "21862:69:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluid.Operation",
									"id": 2691,
									"members": [
										{
											"constant": false,
											"id": 2686,
											"mutability": "mutable",
											"name": "operationType",
											"nameLocation": "22268:13:16",
											"nodeType": "VariableDeclaration",
											"scope": 2691,
											"src": "22261:20:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 2685,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "22261:6:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2688,
											"mutability": "mutable",
											"name": "target",
											"nameLocation": "22327:6:16",
											"nodeType": "VariableDeclaration",
											"scope": 2691,
											"src": "22319:14:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2687,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "22319:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2690,
											"mutability": "mutable",
											"name": "data",
											"nameLocation": "22391:4:16",
											"nodeType": "VariableDeclaration",
											"scope": 2691,
											"src": "22385:10:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2689,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "22385:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Operation",
									"nameLocation": "22170:9:16",
									"nodeType": "StructDefinition",
									"scope": 2708,
									"src": "22163:239:16",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2692,
										"nodeType": "StructuredDocumentation",
										"src": "22408:94:16",
										"text": " @dev Batch call function\n @param operations Array of batch operations"
									},
									"functionSelector": "6ad3ca7d",
									"id": 2699,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchCall",
									"nameLocation": "22516:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2696,
												"mutability": "mutable",
												"name": "operations",
												"nameLocation": "22547:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2699,
												"src": "22526:31:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Operation_$2691_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISuperfluid.Operation[]"
												},
												"typeName": {
													"baseType": {
														"id": 2694,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2693,
															"name": "Operation",
															"nameLocations": [
																"22526:9:16"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2691,
															"src": "22526:9:16"
														},
														"referencedDeclaration": 2691,
														"src": "22526:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Operation_$2691_storage_ptr",
															"typeString": "struct ISuperfluid.Operation"
														}
													},
													"id": 2695,
													"nodeType": "ArrayTypeName",
													"src": "22526:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Operation_$2691_storage_$dyn_storage_ptr",
														"typeString": "struct ISuperfluid.Operation[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22525:33:16"
									},
									"returnParameters": {
										"id": 2698,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22567:0:16"
									},
									"scope": 2708,
									"src": "22507:61:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2700,
										"nodeType": "StructuredDocumentation",
										"src": "22574:128:16",
										"text": " @dev Batch call function for trusted forwarders (EIP-2771)\n @param operations Array of batch operations"
									},
									"functionSelector": "670e77e3",
									"id": 2707,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "forwardBatchCall",
									"nameLocation": "22716:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2704,
												"mutability": "mutable",
												"name": "operations",
												"nameLocation": "22754:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "22733:31:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Operation_$2691_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISuperfluid.Operation[]"
												},
												"typeName": {
													"baseType": {
														"id": 2702,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2701,
															"name": "Operation",
															"nameLocations": [
																"22733:9:16"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2691,
															"src": "22733:9:16"
														},
														"referencedDeclaration": 2691,
														"src": "22733:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Operation_$2691_storage_ptr",
															"typeString": "struct ISuperfluid.Operation"
														}
													},
													"id": 2703,
													"nodeType": "ArrayTypeName",
													"src": "22733:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Operation_$2691_storage_$dyn_storage_ptr",
														"typeString": "struct ISuperfluid.Operation[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22732:33:16"
									},
									"returnParameters": {
										"id": 2706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22774:0:16"
									},
									"scope": 2708,
									"src": "22707:68:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2709,
							"src": "1117:22765:16",
							"usedErrors": [
								2213,
								2215,
								2217,
								2219,
								2221,
								2223,
								2225,
								2227,
								2229,
								2231,
								2233,
								2235,
								2237,
								2239,
								2241,
								2245,
								2247,
								2249,
								2251,
								2253,
								2255,
								2257,
								2259,
								2261,
								2263
							]
						}
					],
					"src": "32:23851:16"
				},
				"id": 16
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							1466
						],
						"ISuperToken": [
							2054
						],
						"ISuperfluid": [
							2708
						],
						"ISuperfluidGovernance": [
							2837
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 2838,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2710,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:17"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 2712,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2838,
							"sourceUnit": 1467,
							"src": "59:56:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2711,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1466,
										"src": "68:15:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 2714,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2838,
							"sourceUnit": 2055,
							"src": "116:48:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2713,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2054,
										"src": "125:11:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 2716,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2838,
							"sourceUnit": 3124,
							"src": "165:59:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2715,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3123,
										"src": "174:16:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"file": "./ISuperfluid.sol",
							"id": 2718,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2838,
							"sourceUnit": 2709,
							"src": "225:48:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2717,
										"name": "ISuperfluid",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2708,
										"src": "234:11:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluidGovernance",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2719,
								"nodeType": "StructuredDocumentation",
								"src": "276:71:17",
								"text": " @title Superfluid governance interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 2837,
							"linearizedBaseContracts": [
								2837
							],
							"name": "ISuperfluidGovernance",
							"nameLocation": "358:21:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "27743aa6",
									"id": 2721,
									"name": "SF_GOV_ARRAYS_NOT_SAME_LENGTH",
									"nameLocation": "571:29:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2720,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "600:2:17"
									},
									"src": "565:38:17"
								},
								{
									"errorSelector": "e171980a",
									"id": 2723,
									"name": "SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD",
									"nameLocation": "645:46:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2722,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "691:2:17"
									},
									"src": "639:55:17"
								},
								{
									"errorSelector": "80dddd73",
									"id": 2725,
									"name": "SF_GOV_MUST_BE_CONTRACT",
									"nameLocation": "719:23:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "742:2:17"
									},
									"src": "713:32:17"
								},
								{
									"documentation": {
										"id": 2726,
										"nodeType": "StructuredDocumentation",
										"src": "788:76:17",
										"text": " @dev Replace the current governance with a new governance"
									},
									"functionSelector": "44864b25",
									"id": 2734,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "replaceGovernance",
									"nameLocation": "878:17:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2729,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "917:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2734,
												"src": "905:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2728,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2727,
														"name": "ISuperfluid",
														"nameLocations": [
															"905:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "905:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "905:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2731,
												"mutability": "mutable",
												"name": "newGov",
												"nameLocation": "939:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2734,
												"src": "931:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2730,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "895:51:17"
									},
									"returnParameters": {
										"id": 2733,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "955:0:17"
									},
									"scope": 2837,
									"src": "869:87:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2735,
										"nodeType": "StructuredDocumentation",
										"src": "962:54:17",
										"text": " @dev Register a new agreement class"
									},
									"functionSelector": "cadf8f85",
									"id": 2743,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAgreementClass",
									"nameLocation": "1030:22:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2738,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1074:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "1062:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2737,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2736,
														"name": "ISuperfluid",
														"nameLocations": [
															"1062:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "1062:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "1062:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2740,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "1096:14:17",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "1088:22:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2739,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1088:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1052:59:17"
									},
									"returnParameters": {
										"id": 2742,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1120:0:17"
									},
									"scope": 2837,
									"src": "1021:100:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2744,
										"nodeType": "StructuredDocumentation",
										"src": "1127:193:17",
										"text": " @dev Update logics of the contracts\n @custom:note \n - Because they might have inter-dependencies, it is good to have one single function to update them all"
									},
									"functionSelector": "427942a4",
									"id": 2757,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateContracts",
									"nameLocation": "1334:15:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2747,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1371:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1359:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2746,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2745,
														"name": "ISuperfluid",
														"nameLocations": [
															"1359:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "1359:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "1359:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2749,
												"mutability": "mutable",
												"name": "hostNewLogic",
												"nameLocation": "1393:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1385:20:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1385:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2752,
												"mutability": "mutable",
												"name": "agreementClassNewLogics",
												"nameLocation": "1434:23:17",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1415:42:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2750,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1415:7:17",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2751,
													"nodeType": "ArrayTypeName",
													"src": "1415:9:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2754,
												"mutability": "mutable",
												"name": "superTokenFactoryNewLogic",
												"nameLocation": "1475:25:17",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1467:33:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2753,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1467:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1349:157:17"
									},
									"returnParameters": {
										"id": 2756,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1515:0:17"
									},
									"scope": 2837,
									"src": "1325:191:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2758,
										"nodeType": "StructuredDocumentation",
										"src": "1522:113:17",
										"text": " @dev Update supertoken logic contract to the latest that is managed by the super token factory"
									},
									"functionSelector": "42148deb",
									"id": 2768,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchUpdateSuperTokenLogic",
									"nameLocation": "1649:26:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2761,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1697:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2768,
												"src": "1685:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2760,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2759,
														"name": "ISuperfluid",
														"nameLocations": [
															"1685:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "1685:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "1685:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2765,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "1734:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2768,
												"src": "1711:29:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperToken_$2054_$dyn_calldata_ptr",
													"typeString": "contract ISuperToken[]"
												},
												"typeName": {
													"baseType": {
														"id": 2763,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2762,
															"name": "ISuperToken",
															"nameLocations": [
																"1711:11:17"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2054,
															"src": "1711:11:17"
														},
														"referencedDeclaration": 2054,
														"src": "1711:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperToken_$2054",
															"typeString": "contract ISuperToken"
														}
													},
													"id": 2764,
													"nodeType": "ArrayTypeName",
													"src": "1711:13:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperToken_$2054_$dyn_storage_ptr",
														"typeString": "contract ISuperToken[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1675:66:17"
									},
									"returnParameters": {
										"id": 2767,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1750:0:17"
									},
									"scope": 2837,
									"src": "1640:111:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2769,
										"nodeType": "StructuredDocumentation",
										"src": "1761:58:17",
										"text": " @dev Set configuration as address value"
									},
									"functionSelector": "78707cb8",
									"id": 2782,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setConfig",
									"nameLocation": "1833:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2772,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1864:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2782,
												"src": "1852:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2771,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2770,
														"name": "ISuperfluid",
														"nameLocations": [
															"1852:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "1852:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "1852:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2775,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1895:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2782,
												"src": "1878:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2774,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2773,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1878:16:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "1878:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "1878:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1923:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2782,
												"src": "1915:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2776,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1915:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2779,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1944:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2782,
												"src": "1936:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2778,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1936:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1842:113:17"
									},
									"returnParameters": {
										"id": 2781,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1964:0:17"
									},
									"scope": 2837,
									"src": "1824:141:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2783,
										"nodeType": "StructuredDocumentation",
										"src": "1975:58:17",
										"text": " @dev Set configuration as uint256 value"
									},
									"functionSelector": "f79a8e63",
									"id": 2796,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setConfig",
									"nameLocation": "2047:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2786,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2078:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2796,
												"src": "2066:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2785,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2784,
														"name": "ISuperfluid",
														"nameLocations": [
															"2066:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "2066:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "2066:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2789,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2109:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2796,
												"src": "2092:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2788,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2787,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2092:16:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2092:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "2092:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2791,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2137:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2796,
												"src": "2129:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2790,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2129:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2793,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2158:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2796,
												"src": "2150:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2792,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2150:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2056:113:17"
									},
									"returnParameters": {
										"id": 2795,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2178:0:17"
									},
									"scope": 2837,
									"src": "2038:141:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2797,
										"nodeType": "StructuredDocumentation",
										"src": "2185:43:17",
										"text": " @dev Clear configuration"
									},
									"functionSelector": "640b6cc9",
									"id": 2808,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "clearConfig",
									"nameLocation": "2242:11:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2800,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2275:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2808,
												"src": "2263:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2799,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2798,
														"name": "ISuperfluid",
														"nameLocations": [
															"2263:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "2263:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "2263:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2803,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2306:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2808,
												"src": "2289:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2802,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2801,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2289:16:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2289:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "2289:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2805,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2334:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2808,
												"src": "2326:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2804,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2253:90:17"
									},
									"returnParameters": {
										"id": 2807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2352:0:17"
									},
									"scope": 2837,
									"src": "2233:120:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2809,
										"nodeType": "StructuredDocumentation",
										"src": "2359:58:17",
										"text": " @dev Get configuration as address value"
									},
									"functionSelector": "8369a0f1",
									"id": 2822,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getConfigAsAddress",
									"nameLocation": "2431:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2812,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2471:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2822,
												"src": "2459:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2811,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2810,
														"name": "ISuperfluid",
														"nameLocations": [
															"2459:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "2459:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "2459:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2815,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2502:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2822,
												"src": "2485:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2814,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2813,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2485:16:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2485:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "2485:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2817,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2530:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2822,
												"src": "2522:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2816,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2522:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2449:85:17"
									},
									"returnParameters": {
										"id": 2821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2820,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2566:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2822,
												"src": "2558:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2819,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2558:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2557:15:17"
									},
									"scope": 2837,
									"src": "2422:151:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2823,
										"nodeType": "StructuredDocumentation",
										"src": "2579:58:17",
										"text": " @dev Get configuration as uint256 value"
									},
									"functionSelector": "80f70cba",
									"id": 2836,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getConfigAsUint256",
									"nameLocation": "2651:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2826,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2691:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2836,
												"src": "2679:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2825,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2824,
														"name": "ISuperfluid",
														"nameLocations": [
															"2679:11:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "2679:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "2679:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2829,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2722:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2836,
												"src": "2705:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2828,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2827,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2705:16:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2705:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "2705:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2831,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2750:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2836,
												"src": "2742:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2830,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2742:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:85:17"
									},
									"returnParameters": {
										"id": 2835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2834,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2786:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2836,
												"src": "2778:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2778:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2777:15:17"
									},
									"scope": 2837,
									"src": "2642:151:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2838,
							"src": "348:2448:17",
							"usedErrors": [
								2721,
								2723,
								2725
							]
						}
					],
					"src": "32:2765:17"
				},
				"id": 17
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							1466
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 3124,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2839,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:18"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 2841,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3124,
							"sourceUnit": 1467,
							"src": "59:56:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2840,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1466,
										"src": "68:15:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluidToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2842,
								"nodeType": "StructuredDocumentation",
								"src": "117:66:18",
								"text": " @title Superfluid token interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 3123,
							"linearizedBaseContracts": [
								3123
							],
							"name": "ISuperfluidToken",
							"nameLocation": "194:16:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "f05521f6",
									"id": 2844,
									"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
									"nameLocation": "398:33:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2843,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "431:2:18"
									},
									"src": "392:42:18"
								},
								{
									"errorSelector": "dae18809",
									"id": 2846,
									"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
									"nameLocation": "460:33:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2845,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "493:2:18"
									},
									"src": "454:42:18"
								},
								{
									"errorSelector": "10ecdf44",
									"id": 2848,
									"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
									"nameLocation": "522:34:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2847,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "556:2:18"
									},
									"src": "516:43:18"
								},
								{
									"errorSelector": "2f4cb941",
									"id": 2850,
									"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
									"nameLocation": "584:34:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2849,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "618:2:18"
									},
									"src": "578:43:18"
								},
								{
									"errorSelector": "c9ff6644",
									"id": 2852,
									"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
									"nameLocation": "646:30:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "676:2:18"
									},
									"src": "640:39:18"
								},
								{
									"errorSelector": "c51efddd",
									"id": 2854,
									"name": "SF_TOKEN_ONLY_HOST",
									"nameLocation": "708:18:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2853,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "726:2:18"
									},
									"src": "702:27:18"
								},
								{
									"documentation": {
										"id": 2855,
										"nodeType": "StructuredDocumentation",
										"src": "951:60:18",
										"text": " @dev Get superfluid host contract address"
									},
									"functionSelector": "20bc4425",
									"id": 2860,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHost",
									"nameLocation": "1025:7:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2856,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1032:2:18"
									},
									"returnParameters": {
										"id": 2859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2858,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1065:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2860,
												"src": "1057:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2857,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1057:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1056:14:18"
									},
									"scope": 3123,
									"src": "1016:55:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluidToken.LiquidationTypeData",
									"id": 2865,
									"members": [
										{
											"constant": false,
											"id": 2862,
											"mutability": "mutable",
											"name": "version",
											"nameLocation": "1504:7:18",
											"nodeType": "VariableDeclaration",
											"scope": 2865,
											"src": "1496:15:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2861,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1496:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2864,
											"mutability": "mutable",
											"name": "liquidationType",
											"nameLocation": "1527:15:18",
											"nodeType": "VariableDeclaration",
											"scope": 2865,
											"src": "1521:21:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 2863,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "1521:5:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "LiquidationTypeData",
									"nameLocation": "1466:19:18",
									"nodeType": "StructDefinition",
									"scope": 3123,
									"src": "1459:90:18",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2866,
										"nodeType": "StructuredDocumentation",
										"src": "1751:321:18",
										"text": " @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n @param account for the query\n @param timestamp Time of balance\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "eb3537cc",
									"id": 2879,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "2086:17:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2868,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2120:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2112:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2112:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2870,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2144:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2136:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2136:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2103:56:18"
									},
									"returnParameters": {
										"id": 2878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2873,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2219:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2212:23:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2872,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2212:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2875,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2257:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2249:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2874,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2249:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2877,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2286:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2278:19:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2278:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2198:100:18"
									},
									"scope": 3123,
									"src": "2077:222:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2880,
										"nodeType": "StructuredDocumentation",
										"src": "2305:339:18",
										"text": " @notice Calculate the realtime balance given the current host.getNow() value\n @dev realtimeBalanceOf with timestamp equals to block timestamp\n @param account for the query\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "2ec8eec7",
									"id": 2893,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOfNow",
									"nameLocation": "2658:20:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2882,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2695:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2687:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2881,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2687:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:30:18"
									},
									"returnParameters": {
										"id": 2892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2885,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2768:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2761:23:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2884,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2761:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2887,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2806:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2798:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2889,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2835:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2827:19:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2888,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2827:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2891,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2868:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2860:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2860:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:131:18"
									},
									"scope": 3123,
									"src": "2649:230:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2894,
										"nodeType": "StructuredDocumentation",
										"src": "2885:309:18",
										"text": " @notice Check if account is critical\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @param timestamp The time we'd like to check if the account is critical (should use future)\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "d9d078d6",
									"id": 2903,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCritical",
									"nameLocation": "3208:17:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2899,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2896,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3243:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2903,
												"src": "3235:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2895,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3235:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2898,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3268:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2903,
												"src": "3260:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2897,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3260:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3225:58:18"
									},
									"returnParameters": {
										"id": 2902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2901,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3327:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2903,
												"src": "3322:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2900,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3322:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3321:17:18"
									},
									"scope": 3123,
									"src": "3199:140:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2904,
										"nodeType": "StructuredDocumentation",
										"src": "3345:239:18",
										"text": " @notice Check if account is critical now (current host.getNow())\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "79359f6f",
									"id": 2911,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCriticalNow",
									"nameLocation": "3598:20:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2906,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3636:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2911,
												"src": "3628:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3618:31:18"
									},
									"returnParameters": {
										"id": 2910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2909,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3693:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2911,
												"src": "3688:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2908,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3688:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3687:17:18"
									},
									"scope": 3123,
									"src": "3589:116:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2912,
										"nodeType": "StructuredDocumentation",
										"src": "3711:383:18",
										"text": " @notice Check if account is solvent\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @param timestamp The time we'd like to check if the account is solvent (should use future)\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "b84cdd4a",
									"id": 2921,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolvent",
									"nameLocation": "4108:16:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2914,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4142:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2921,
												"src": "4134:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2913,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4134:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2916,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "4167:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2921,
												"src": "4159:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4159:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4124:58:18"
									},
									"returnParameters": {
										"id": 2920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2919,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4226:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2921,
												"src": "4221:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2918,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4221:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4220:16:18"
									},
									"scope": 3123,
									"src": "4099:138:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2922,
										"nodeType": "StructuredDocumentation",
										"src": "4243:289:18",
										"text": " @notice Check if account is solvent now\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "bb0d196e",
									"id": 2929,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolventNow",
									"nameLocation": "4546:19:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2924,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4583:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2929,
												"src": "4575:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4575:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4565:31:18"
									},
									"returnParameters": {
										"id": 2928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2927,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4640:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2929,
												"src": "4635:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2926,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4635:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4634:16:18"
									},
									"scope": 3123,
									"src": "4537:114:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2930,
										"nodeType": "StructuredDocumentation",
										"src": "4657:277:18",
										"text": " @notice Get a list of agreements that is active for the account\n @dev An active agreement is one that has state for the account\n @param account Account to query\n @return activeAgreements List of accounts that have non-zero states for the account"
									},
									"functionSelector": "386fa221",
									"id": 2939,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccountActiveAgreements",
									"nameLocation": "4948:26:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2932,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4983:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2939,
												"src": "4975:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2931,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4975:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4974:17:18"
									},
									"returnParameters": {
										"id": 2938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2937,
												"mutability": "mutable",
												"name": "activeAgreements",
												"nameLocation": "5053:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 2939,
												"src": "5028:41:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1466_$dyn_memory_ptr",
													"typeString": "contract ISuperAgreement[]"
												},
												"typeName": {
													"baseType": {
														"id": 2935,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2934,
															"name": "ISuperAgreement",
															"nameLocations": [
																"5028:15:18"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1466,
															"src": "5028:15:18"
														},
														"referencedDeclaration": 1466,
														"src": "5028:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
															"typeString": "contract ISuperAgreement"
														}
													},
													"id": 2936,
													"nodeType": "ArrayTypeName",
													"src": "5028:17:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1466_$dyn_storage_ptr",
														"typeString": "contract ISuperAgreement[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5027:43:18"
									},
									"scope": 3123,
									"src": "4939:132:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2940,
										"nodeType": "StructuredDocumentation",
										"src": "5277:110:18",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "12a6a3f8",
									"id": 2948,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAgreement",
									"nameLocation": "5401:15:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2942,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5434:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2948,
												"src": "5426:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2941,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5426:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2945,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5465:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2948,
												"src": "5446:23:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2943,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5446:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2944,
													"nodeType": "ArrayTypeName",
													"src": "5446:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5416:59:18"
									},
									"returnParameters": {
										"id": 2947,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5492:0:18"
									},
									"scope": 3123,
									"src": "5392:101:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2949,
										"nodeType": "StructuredDocumentation",
										"src": "5498:174:18",
										"text": " @dev Agreement created event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"eventSelector": "770ea40a13a4644573ed785e5c7116890709947918747febc5add46feb531e2d",
									"id": 2958,
									"name": "AgreementCreated",
									"nameLocation": "5683:16:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2951,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "5725:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "5709:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5709:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2953,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5757:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "5749:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2952,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5749:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2956,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5779:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "5769:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2954,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5769:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2955,
													"nodeType": "ArrayTypeName",
													"src": "5769:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5699:90:18"
									},
									"src": "5677:113:18"
								},
								{
									"documentation": {
										"id": 2959,
										"nodeType": "StructuredDocumentation",
										"src": "5796:184:18",
										"text": " @dev Get data of the agreement\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @return data Data of the agreement"
									},
									"functionSelector": "6c2d9f2f",
									"id": 2971,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementData",
									"nameLocation": "5994:16:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2961,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6028:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "6020:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2963,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6060:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "6052:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2962,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6052:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2965,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6077:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "6072:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2964,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6072:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6010:83:18"
									},
									"returnParameters": {
										"id": 2970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2969,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6149:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "6132:21:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2967,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6132:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2968,
													"nodeType": "ArrayTypeName",
													"src": "6132:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6131:23:18"
									},
									"scope": 3123,
									"src": "5985:170:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2972,
										"nodeType": "StructuredDocumentation",
										"src": "6161:110:18",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "a1b2bf8b",
									"id": 2980,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementData",
									"nameLocation": "6285:19:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2974,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6322:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2980,
												"src": "6314:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2973,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2977,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6353:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2980,
												"src": "6334:23:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2975,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6334:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2976,
													"nodeType": "ArrayTypeName",
													"src": "6334:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6304:59:18"
									},
									"returnParameters": {
										"id": 2979,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6380:0:18"
									},
									"scope": 3123,
									"src": "6276:105:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2981,
										"nodeType": "StructuredDocumentation",
										"src": "6386:174:18",
										"text": " @dev Agreement updated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"eventSelector": "0c4c547b3a4fcaa5be8353b3111472b124155bccc86de811d4a481c9e6e9faca",
									"id": 2990,
									"name": "AgreementUpdated",
									"nameLocation": "6571:16:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2983,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6613:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 2990,
												"src": "6597:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2982,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6597:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2985,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6645:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2990,
												"src": "6637:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2984,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6637:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2988,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6667:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2990,
												"src": "6657:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2986,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6657:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2987,
													"nodeType": "ArrayTypeName",
													"src": "6657:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6587:90:18"
									},
									"src": "6565:113:18"
								},
								{
									"documentation": {
										"id": 2991,
										"nodeType": "StructuredDocumentation",
										"src": "6684:73:18",
										"text": " @dev Close the agreement\n @param id Agreement ID"
									},
									"functionSelector": "27048397",
									"id": 2998,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "terminateAgreement",
									"nameLocation": "6771:18:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2993,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6807:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2998,
												"src": "6799:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2992,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6799:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2995,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6824:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2998,
												"src": "6819:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2994,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6819:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6789:51:18"
									},
									"returnParameters": {
										"id": 2997,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6857:0:18"
									},
									"scope": 3123,
									"src": "6762:96:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2999,
										"nodeType": "StructuredDocumentation",
										"src": "6863:143:18",
										"text": " @dev Agreement terminated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID"
									},
									"eventSelector": "71a63dc095de07aa5512ad57a7596a39516317e316981a1cd71000057be1537b",
									"id": 3005,
									"name": "AgreementTerminated",
									"nameLocation": "7017:19:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3001,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7062:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3005,
												"src": "7046:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7046:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3003,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "7094:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3005,
												"src": "7086:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3002,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7086:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7036:66:18"
									},
									"src": "7011:92:18"
								},
								{
									"documentation": {
										"id": 3006,
										"nodeType": "StructuredDocumentation",
										"src": "7109:199:18",
										"text": " @dev Update agreement state slot\n @param account Account to be updated\n @custom:note \n - To clear the storage out, provide zero-ed array of intended length"
									},
									"functionSelector": "090c415e",
									"id": 3016,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementStateSlot",
									"nameLocation": "7322:24:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3008,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7364:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 3016,
												"src": "7356:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7356:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3010,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7389:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3016,
												"src": "7381:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7381:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3013,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "7424:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 3016,
												"src": "7405:27:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 3011,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7405:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 3012,
													"nodeType": "ArrayTypeName",
													"src": "7405:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7346:92:18"
									},
									"returnParameters": {
										"id": 3015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7455:0:18"
									},
									"scope": 3123,
									"src": "7313:143:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3017,
										"nodeType": "StructuredDocumentation",
										"src": "7461:214:18",
										"text": " @dev Agreement account state updated event\n @param agreementClass Contract address of the agreement\n @param account Account updated\n @param slotId slot id of the agreement state"
									},
									"eventSelector": "30f416fa68fca014a0f334464c64b000ba53e99b6d2afdea9d5ca756372d5985",
									"id": 3025,
									"name": "AgreementStateUpdated",
									"nameLocation": "7686:21:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3019,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7733:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3025,
												"src": "7717:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7717:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3021,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7773:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 3025,
												"src": "7757:23:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3020,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7757:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3023,
												"indexed": false,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7798:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3025,
												"src": "7790:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7790:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7707:103:18"
									},
									"src": "7680:131:18"
								},
								{
									"documentation": {
										"id": 3026,
										"nodeType": "StructuredDocumentation",
										"src": "7817:267:18",
										"text": " @dev Get data of the slot of the state of an agreement\n @param agreementClass Contract address of the agreement\n @param account Account to query\n @param slotId slot id of the state\n @param dataLength length of the state data"
									},
									"functionSelector": "4b61cc33",
									"id": 3040,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementStateSlot",
									"nameLocation": "8098:21:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3028,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "8137:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8129:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8129:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3030,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8169:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8161:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3029,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8161:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3032,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "8194:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8186:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8186:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3034,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "8215:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8210:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3033,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8210:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8119:112:18"
									},
									"returnParameters": {
										"id": 3039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3038,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "8288:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8271:25:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 3036,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "8271:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 3037,
													"nodeType": "ArrayTypeName",
													"src": "8271:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8270:27:18"
									},
									"scope": 3123,
									"src": "8089:209:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3041,
										"nodeType": "StructuredDocumentation",
										"src": "8304:320:18",
										"text": " @notice Settle balance from an account by the agreement\n @dev The agreement needs to make sure that the balance delta is balanced afterwards\n @param account Account to query.\n @param delta Amount of balance delta to be settled\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "cf97256d",
									"id": 3048,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settleBalance",
									"nameLocation": "8638:13:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3043,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8669:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "8661:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8661:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3045,
												"mutability": "mutable",
												"name": "delta",
												"nameLocation": "8693:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "8686:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3044,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8686:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8651:53:18"
									},
									"returnParameters": {
										"id": 3047,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8721:0:18"
									},
									"scope": 3123,
									"src": "8629:93:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3049,
										"nodeType": "StructuredDocumentation",
										"src": "8728:1154:18",
										"text": " @dev Make liquidation payouts (v2)\n @param id Agreement ID\n @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n @param liquidatorAccount Address of the executor of the liquidation\n @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n @param targetAccount Account to be liquidated\n @param rewardAmount The amount the rewarded account will receive\n @param targetAccountBalanceDelta The delta amount the target account balance should change by\n @custom:note \n - If a bailout is required (bailoutAmount > 0)\n   - the actual reward (single deposit) goes to the executor,\n   - while the reward account becomes the bailout account\n   - total bailout include: bailout amount + reward amount\n   - the targetAccount will be bailed out\n - If a bailout is not required\n   - the targetAccount will pay the rewardAmount\n   - the liquidator (reward account in PIC period) will receive the rewardAmount\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "1863e809",
									"id": 3066,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "makeLiquidationPayoutsV2",
									"nameLocation": "9896:24:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3051,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "9943:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "9935:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3050,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9935:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3053,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "9968:19:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "9955:32:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3052,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9955:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3055,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "10005:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "9997:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9997:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3057,
												"mutability": "mutable",
												"name": "useDefaultRewardAccount",
												"nameLocation": "10037:23:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "10032:28:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3056,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10032:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3059,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "10078:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "10070:21:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3058,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10070:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3061,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "10109:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "10101:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10101:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3063,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "10138:25:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "10131:32:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3062,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "10131:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9925:244:18"
									},
									"returnParameters": {
										"id": 3065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10178:0:18"
									},
									"scope": 3123,
									"src": "9887:292:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3067,
										"nodeType": "StructuredDocumentation",
										"src": "10184:1512:18",
										"text": " @dev Agreement liquidation event v2 (including agent account)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param liquidatorAccount Address of the executor of the liquidation\n @param targetAccount Account of the stream sender\n @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n @param rewardAmount The amount the reward recipient account balance should change by\n @param targetAccountBalanceDelta The amount the sender account balance should change by\n @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n @custom:note \n Reward account rule:\n - if the agreement is liquidated during the PIC period\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n   - the targetAccount will pay for the rewardAmount\n - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n   - the targetAccount will pay for the rewardAmount\n - if the targetAccount is insolvent\n   - the liquidatorAccount will get the rewardAmount (single deposit)\n   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n   - the targetAccount will receive the bailoutAmount"
									},
									"eventSelector": "b8381a3ce157650e06186e3e8f4dd4dc29236f2688b6eed1893d0a60d7c6386f",
									"id": 3085,
									"name": "AgreementLiquidatedV2",
									"nameLocation": "11707:21:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3069,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "11754:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11738:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11738:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3071,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "11786:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11778:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3070,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11778:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3073,
												"indexed": true,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "11814:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11798:33:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3072,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11798:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3075,
												"indexed": true,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "11857:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11841:29:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3074,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11841:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3077,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmountReceiver",
												"nameLocation": "11888:20:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11880:28:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3076,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11880:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3079,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "11926:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11918:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3078,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11918:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3081,
												"indexed": false,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "11955:25:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11948:32:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3080,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "11948:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3083,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "11996:19:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11990:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3082,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11990:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11728:293:18"
									},
									"src": "11701:321:18"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3086,
										"nodeType": "StructuredDocumentation",
										"src": "12834:435:18",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param rewardAccount Account that collect the reward\n @param rewardAmount Amount of liquidation reward\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"eventSelector": "8505c3d8f1f184f032cf0bc4cd80ee61c8b9d94f8907c3281bf0101a2610fe80",
									"id": 3098,
									"name": "AgreementLiquidated",
									"nameLocation": "13280:19:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3088,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "13325:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13309:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13309:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3090,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "13357:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13349:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3089,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13349:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3092,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "13385:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13369:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3091,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13369:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3094,
												"indexed": true,
												"mutability": "mutable",
												"name": "rewardAccount",
												"nameLocation": "13425:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13409:29:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3093,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13409:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3096,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "13456:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13448:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3095,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13448:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13299:175:18"
									},
									"src": "13274:201:18"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3099,
										"nodeType": "StructuredDocumentation",
										"src": "13481:276:18",
										"text": " @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n @param bailoutAccount Account that bailout the penalty account\n @param bailoutAmount Amount of account bailout\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"eventSelector": "d6c9a04afc81e8c614310bbee6c9e84f5abe15b82038bf8347014ce0852e6ffd",
									"id": 3105,
									"name": "Bailout",
									"nameLocation": "13768:7:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3101,
												"indexed": true,
												"mutability": "mutable",
												"name": "bailoutAccount",
												"nameLocation": "13801:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3105,
												"src": "13785:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13785:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3103,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "13833:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3105,
												"src": "13825:21:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13825:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13775:77:18"
									},
									"src": "13762:91:18"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3106,
										"nodeType": "StructuredDocumentation",
										"src": "13859:1082:18",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n @param liquidatorAccount Account of the agent that performed the liquidation.\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param bondAccount Account that collect the reward or bailout accounts\n @param rewardAmount Amount of liquidation reward\n @param bailoutAmount Amount of liquidation bailouot\n @custom:deprecated Use AgreementLiquidatedV2 instead\n @custom:note \n Reward account rule:\n - if bailout is equal to 0, then\n   - the bondAccount will get the rewardAmount,\n   - the penaltyAccount will pay for the rewardAmount.\n - if bailout is larger than 0, then\n   - the liquidatorAccount will get the rewardAmouont,\n   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount."
									},
									"eventSelector": "5f22b60e58b1d6de858bc27c48d5a4653e052da99e083c1d88bb8c58e1abc8ef",
									"id": 3122,
									"name": "AgreementLiquidatedBy",
									"nameLocation": "14952:21:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3108,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "14991:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "14983:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14983:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3110,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "15034:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15018:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3109,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15018:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3112,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "15066:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15058:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3111,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15058:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3114,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "15094:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15078:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15078:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3116,
												"indexed": true,
												"mutability": "mutable",
												"name": "bondAccount",
												"nameLocation": "15134:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15118:27:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15118:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3118,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "15163:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15155:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15155:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3120,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "15193:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15185:21:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15185:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14973:239:18"
									},
									"src": "14946:267:18"
								}
							],
							"scope": 3124,
							"src": "184:15031:18",
							"usedErrors": [
								2844,
								2846,
								2848,
								2850,
								2852,
								2854
							]
						}
					],
					"src": "32:15184:18"
				},
				"id": 18
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
					"exportedSymbols": {
						"ERC20WithTokenInfo": [
							3135
						],
						"IERC20": [
							77
						],
						"TokenInfo": [
							3157
						]
					},
					"id": 3136,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3125,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:19"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 3127,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3136,
							"sourceUnit": 78,
							"src": "59:72:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3126,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 77,
										"src": "68:6:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
							"file": "./TokenInfo.sol",
							"id": 3129,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3136,
							"sourceUnit": 3158,
							"src": "132:44:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3128,
										"name": "TokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3157,
										"src": "141:9:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 3131,
										"name": "IERC20",
										"nameLocations": [
											"527:6:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 77,
										"src": "527:6:19"
									},
									"id": 3132,
									"nodeType": "InheritanceSpecifier",
									"src": "527:6:19"
								},
								{
									"baseName": {
										"id": 3133,
										"name": "TokenInfo",
										"nameLocations": [
											"535:9:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3157,
										"src": "535:9:19"
									},
									"id": 3134,
									"nodeType": "InheritanceSpecifier",
									"src": "535:9:19"
								}
							],
							"canonicalName": "ERC20WithTokenInfo",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3130,
								"nodeType": "StructuredDocumentation",
								"src": "178:263:19",
								"text": " @title ERC20 token with token info interface\n @author Superfluid\n @dev Using abstract contract instead of interfaces because old solidity\n      does not support interface inheriting other interfaces\n solhint-disable-next-line no-empty-blocks"
							},
							"fullyImplemented": false,
							"id": 3135,
							"linearizedBaseContracts": [
								3135,
								3157,
								77
							],
							"name": "ERC20WithTokenInfo",
							"nameLocation": "505:18:19",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3136,
							"src": "487:60:19",
							"usedErrors": []
						}
					],
					"src": "32:516:19"
				},
				"id": 19
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
					"exportedSymbols": {
						"TokenInfo": [
							3157
						]
					},
					"id": 3158,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3137,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:20"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TokenInfo",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3138,
								"nodeType": "StructuredDocumentation",
								"src": "59:188:20",
								"text": " @title ERC20 token info interface\n @author Superfluid\n @dev ERC20 standard interface does not specify these functions, but\n      often the token implementations have them."
							},
							"fullyImplemented": false,
							"id": 3157,
							"linearizedBaseContracts": [
								3157
							],
							"name": "TokenInfo",
							"nameLocation": "258:9:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3139,
										"nodeType": "StructuredDocumentation",
										"src": "274:54:20",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 3144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "342:4:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "346:2:20"
									},
									"returnParameters": {
										"id": 3143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3144,
												"src": "372:13:20",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3141,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "372:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "371:15:20"
									},
									"scope": 3157,
									"src": "333:54:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3145,
										"nodeType": "StructuredDocumentation",
										"src": "393:102:20",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 3150,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "509:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "515:2:20"
									},
									"returnParameters": {
										"id": 3149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3148,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3150,
												"src": "541:13:20",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3147,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "541:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "540:15:20"
									},
									"scope": 3157,
									"src": "500:56:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3151,
										"nodeType": "StructuredDocumentation",
										"src": "562:612:20",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 3156,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "1188:8:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1196:2:20"
									},
									"returnParameters": {
										"id": 3155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3154,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3156,
												"src": "1222:5:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 3153,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1222:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:7:20"
									},
									"scope": 3157,
									"src": "1179:50:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3158,
							"src": "248:983:20",
							"usedErrors": []
						}
					],
					"src": "32:1200:20"
				},
				"id": 20
			},
			"premiere/IRegistry.sol": {
				"ast": {
					"absolutePath": "premiere/IRegistry.sol",
					"exportedSymbols": {
						"IRegistry": [
							3186
						]
					},
					"id": 3187,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3159,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "39:24:21"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 3186,
							"linearizedBaseContracts": [
								3186
							],
							"name": "IRegistry",
							"nameLocation": "75:9:21",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "33310a89c32d8cc00057ad6ef6274d2f8fe22389a992cf89983e09fc84f6cfff",
									"id": 3167,
									"name": "AccountCreated",
									"nameLocation": "97:14:21",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3161,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "129:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 3167,
												"src": "121:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "121:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3163,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenContract",
												"nameLocation": "162:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 3167,
												"src": "146:29:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "146:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3165,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "201:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 3167,
												"src": "185:23:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "185:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "111:103:21"
									},
									"src": "91:124:21"
								},
								{
									"functionSelector": "5fbfb9cf",
									"id": 3176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAccount",
									"nameLocation": "230:13:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3169,
												"mutability": "mutable",
												"name": "tokenContract",
												"nameLocation": "252:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 3176,
												"src": "244:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "244:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3171,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "275:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 3176,
												"src": "267:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "267:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "243:40:21"
									},
									"returnParameters": {
										"id": 3175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3176,
												"src": "318:7:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "318:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "317:9:21"
									},
									"scope": 3186,
									"src": "221:106:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "192df655",
									"id": 3185,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "account",
									"nameLocation": "342:7:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3178,
												"mutability": "mutable",
												"name": "tokenContract",
												"nameLocation": "358:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 3185,
												"src": "350:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "350:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3180,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "381:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 3185,
												"src": "373:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "373:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "349:40:21"
									},
									"returnParameters": {
										"id": 3184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3183,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3185,
												"src": "437:7:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "436:9:21"
									},
									"scope": 3186,
									"src": "333:113:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3187,
							"src": "65:383:21",
							"usedErrors": []
						}
					],
					"src": "39:409:21"
				},
				"id": 21
			},
			"premiere/Premiere_v2.sol": {
				"ast": {
					"absolutePath": "premiere/Premiere_v2.sol",
					"exportedSymbols": {
						"IConstantFlowAgreementV1": [
							805
						],
						"IERC721": [
							193
						],
						"IRegistry": [
							3186
						],
						"ISuperfluidToken": [
							3123
						],
						"Premiere": [
							3416
						]
					},
					"id": 3417,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3188,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:22"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
							"file": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
							"id": 3190,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3417,
							"sourceUnit": 806,
							"src": "57:141:22",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3189,
										"name": "IConstantFlowAgreementV1",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 805,
										"src": "65:24:22",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"file": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"id": 3192,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3417,
							"sourceUnit": 2709,
							"src": "199:120:22",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3191,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3123,
										"src": "207:16:22",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 3194,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3417,
							"sourceUnit": 194,
							"src": "320:73:22",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3193,
										"name": "IERC721",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 193,
										"src": "328:7:22",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "premiere/IRegistry.sol",
							"file": "./IRegistry.sol",
							"id": 3196,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3417,
							"sourceUnit": 3187,
							"src": "394:42:22",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3195,
										"name": "IRegistry",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3186,
										"src": "402:9:22",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Premiere",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3416,
							"linearizedBaseContracts": [
								3416
							],
							"name": "Premiere",
							"nameLocation": "923:8:22",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 3199,
									"mutability": "mutable",
									"name": "lensHubAddress",
									"nameLocation": "954:14:22",
									"nodeType": "VariableDeclaration",
									"scope": 3416,
									"src": "938:75:22",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 3197,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "938:7:22",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307836304165383635656534433732356364303433353362354141623336343535336635366365463832",
										"id": 3198,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "971:42:22",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x60Ae865ee4C725cd04353b5AAb364553f56ceF82"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3205,
									"mutability": "mutable",
									"name": "cfa",
									"nameLocation": "1053:3:22",
									"nodeType": "VariableDeclaration",
									"scope": 3416,
									"src": "1020:115:22",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$805",
										"typeString": "contract IConstantFlowAgreementV1"
									},
									"typeName": {
										"id": 3201,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3200,
											"name": "IConstantFlowAgreementV1",
											"nameLocations": [
												"1020:24:22"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 805,
											"src": "1020:24:22"
										},
										"referencedDeclaration": 805,
										"src": "1020:24:22",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$805",
											"typeString": "contract IConstantFlowAgreementV1"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307834396535363545643162646331374633643232306637324446303835374332364641383346383733",
												"id": 3203,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1092:42:22",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 3202,
											"name": "IConstantFlowAgreementV1",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 805,
											"src": "1067:24:22",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_IConstantFlowAgreementV1_$805_$",
												"typeString": "type(contract IConstantFlowAgreementV1)"
											}
										},
										"id": 3204,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1067:68:22",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$805",
											"typeString": "contract IConstantFlowAgreementV1"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3211,
									"mutability": "mutable",
									"name": "superToken",
									"nameLocation": "1166:10:22",
									"nodeType": "VariableDeclaration",
									"scope": 3416,
									"src": "1141:106:22",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
										"typeString": "contract ISuperfluidToken"
									},
									"typeName": {
										"id": 3207,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3206,
											"name": "ISuperfluidToken",
											"nameLocations": [
												"1141:16:22"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3123,
											"src": "1141:16:22"
										},
										"referencedDeclaration": 3123,
										"src": "1141:16:22",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
											"typeString": "contract ISuperfluidToken"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307835443842344332353534616542376538364633383742346436633030416333333439394564303166",
												"id": 3209,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1204:42:22",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 3208,
											"name": "ISuperfluidToken",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 3123,
											"src": "1187:16:22",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_ISuperfluidToken_$3123_$",
												"typeString": "type(contract ISuperfluidToken)"
											}
										},
										"id": 3210,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1187:60:22",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
											"typeString": "contract ISuperfluidToken"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3217,
									"mutability": "mutable",
									"name": "lensHub",
									"nameLocation": "1269:7:22",
									"nodeType": "VariableDeclaration",
									"scope": 3416,
									"src": "1253:49:22",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC721_$193",
										"typeString": "contract IERC721"
									},
									"typeName": {
										"id": 3213,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3212,
											"name": "IERC721",
											"nameLocations": [
												"1253:7:22"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 193,
											"src": "1253:7:22"
										},
										"referencedDeclaration": 193,
										"src": "1253:7:22",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$193",
											"typeString": "contract IERC721"
										}
									},
									"value": {
										"arguments": [
											{
												"id": 3215,
												"name": "lensHubAddress",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 3199,
												"src": "1287:14:22",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 3214,
											"name": "IERC721",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 193,
											"src": "1279:7:22",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_IERC721_$193_$",
												"typeString": "type(contract IERC721)"
											}
										},
										"id": 3216,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1279:23:22",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$193",
											"typeString": "contract IERC721"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3223,
									"mutability": "mutable",
									"name": "tbaRegistry",
									"nameLocation": "1326:11:22",
									"nodeType": "VariableDeclaration",
									"scope": 3416,
									"src": "1308:93:22",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IRegistry_$3186",
										"typeString": "contract IRegistry"
									},
									"typeName": {
										"id": 3219,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3218,
											"name": "IRegistry",
											"nameLocations": [
												"1308:9:22"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3186,
											"src": "1308:9:22"
										},
										"referencedDeclaration": 3186,
										"src": "1308:9:22",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IRegistry_$3186",
											"typeString": "contract IRegistry"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307830323130316466423737464445303236343134383237466463363034646441463232344630393231",
												"id": 3221,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1358:42:22",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0x02101dfB77FDE026414827Fdc604ddAF224F0921"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 3220,
											"name": "IRegistry",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 3186,
											"src": "1348:9:22",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_IRegistry_$3186_$",
												"typeString": "type(contract IRegistry)"
											}
										},
										"id": 3222,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1348:53:22",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IRegistry_$3186",
											"typeString": "contract IRegistry"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3226,
									"mutability": "mutable",
									"name": "minFlowRate",
									"nameLocation": "1413:11:22",
									"nodeType": "VariableDeclaration",
									"scope": 3416,
									"src": "1407:32:22",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_int96",
										"typeString": "int96"
									},
									"typeName": {
										"id": 3224,
										"name": "int96",
										"nodeType": "ElementaryTypeName",
										"src": "1407:5:22",
										"typeDescriptions": {
											"typeIdentifier": "t_int96",
											"typeString": "int96"
										}
									},
									"value": {
										"hexValue": "373631303335303037363130",
										"id": 3225,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1427:12:22",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_761035007610_by_1",
											"typeString": "int_const 761035007610"
										},
										"value": "761035007610"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3275,
										"nodeType": "Block",
										"src": "1548:330:22",
										"statements": [
											{
												"assignments": [
													3236
												],
												"declarations": [
													{
														"constant": false,
														"id": 3236,
														"mutability": "mutable",
														"name": "tba",
														"nameLocation": "1566:3:22",
														"nodeType": "VariableDeclaration",
														"scope": 3275,
														"src": "1558:11:22",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3235,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1558:7:22",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3244,
												"initialValue": {
													"arguments": [
														{
															"id": 3241,
															"name": "lensHubAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3199,
															"src": "1603:14:22",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3242,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3230,
															"src": "1619:3:22",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 3238,
																	"name": "tbaRegistry",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3223,
																	"src": "1582:11:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IRegistry_$3186",
																		"typeString": "contract IRegistry"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IRegistry_$3186",
																		"typeString": "contract IRegistry"
																	}
																],
																"id": 3237,
																"name": "IRegistry",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3186,
																"src": "1572:9:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IRegistry_$3186_$",
																	"typeString": "type(contract IRegistry)"
																}
															},
															"id": 3239,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1572:22:22",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IRegistry_$3186",
																"typeString": "contract IRegistry"
															}
														},
														"id": 3240,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1595:7:22",
														"memberName": "account",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3185,
														"src": "1572:30:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,uint256) view external returns (address)"
														}
													},
													"id": 3243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1572:51:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1558:65:22"
											},
											{
												"assignments": [
													null,
													3246,
													null,
													null
												],
												"declarations": [
													null,
													{
														"constant": false,
														"id": 3246,
														"mutability": "mutable",
														"name": "flowRate",
														"nameLocation": "1643:8:22",
														"nodeType": "VariableDeclaration",
														"scope": 3275,
														"src": "1637:14:22",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int96",
															"typeString": "int96"
														},
														"typeName": {
															"id": 3245,
															"name": "int96",
															"nodeType": "ElementaryTypeName",
															"src": "1637:5:22",
															"typeDescriptions": {
																"typeIdentifier": "t_int96",
																"typeString": "int96"
															}
														},
														"visibility": "internal"
													},
													null,
													null
												],
												"id": 3253,
												"initialValue": {
													"arguments": [
														{
															"id": 3249,
															"name": "superToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3211,
															"src": "1671:10:22",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
																"typeString": "contract ISuperfluidToken"
															}
														},
														{
															"id": 3250,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3228,
															"src": "1683:6:22",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3251,
															"name": "tba",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3236,
															"src": "1691:3:22",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
																"typeString": "contract ISuperfluidToken"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 3247,
															"name": "cfa",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3205,
															"src": "1659:3:22",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$805",
																"typeString": "contract IConstantFlowAgreementV1"
															}
														},
														"id": 3248,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1663:7:22",
														"memberName": "getFlow",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 690,
														"src": "1659:11:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_contract$_ISuperfluidToken_$3123_$_t_address_$_t_address_$returns$_t_uint256_$_t_int96_$_t_uint256_$_t_uint256_$",
															"typeString": "function (contract ISuperfluidToken,address,address) view external returns (uint256,int96,uint256,uint256)"
														}
													},
													"id": 3252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1659:36:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_int96_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,int96,uint256,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1634:61:22"
											},
											{
												"assignments": [
													3255
												],
												"declarations": [
													{
														"constant": false,
														"id": 3255,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "1713:5:22",
														"nodeType": "VariableDeclaration",
														"scope": 3275,
														"src": "1705:13:22",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3254,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1705:7:22",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3260,
												"initialValue": {
													"arguments": [
														{
															"id": 3258,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3230,
															"src": "1737:3:22",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3256,
															"name": "lensHub",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3217,
															"src": "1721:7:22",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$193",
																"typeString": "contract IERC721"
															}
														},
														"id": 3257,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1729:7:22",
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 126,
														"src": "1721:15:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view external returns (address)"
														}
													},
													"id": 3259,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1721:20:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1705:36:22"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 3267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_int96",
															"typeString": "int96"
														},
														"id": 3263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3261,
															"name": "flowRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3246,
															"src": "1756:8:22",
															"typeDescriptions": {
																"typeIdentifier": "t_int96",
																"typeString": "int96"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 3262,
															"name": "minFlowRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3226,
															"src": "1768:11:22",
															"typeDescriptions": {
																"typeIdentifier": "t_int96",
																"typeString": "int96"
															}
														},
														"src": "1756:23:22",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 3266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3264,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3228,
															"src": "1783:6:22",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 3265,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3255,
															"src": "1793:5:22",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "1783:15:22",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1756:42:22",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3273,
													"nodeType": "Block",
													"src": "1839:33:22",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 3271,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1860:1:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 3234,
															"id": 3272,
															"nodeType": "Return",
															"src": "1853:8:22"
														}
													]
												},
												"id": 3274,
												"nodeType": "IfStatement",
												"src": "1752:120:22",
												"trueBody": {
													"id": 3270,
													"nodeType": "Block",
													"src": "1800:33:22",
													"statements": [
														{
															"expression": {
																"hexValue": "31",
																"id": 3268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1821:1:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"functionReturnParameters": 3234,
															"id": 3269,
															"nodeType": "Return",
															"src": "1814:8:22"
														}
													]
												}
											}
										]
									},
									"functionSelector": "00fdd58e",
									"id": 3276,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "1455:9:22",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3228,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "1482:6:22",
												"nodeType": "VariableDeclaration",
												"scope": 3276,
												"src": "1474:14:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1474:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3230,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "1506:3:22",
												"nodeType": "VariableDeclaration",
												"scope": 3276,
												"src": "1498:11:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1498:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1464:51:22"
									},
									"returnParameters": {
										"id": 3234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3276,
												"src": "1539:7:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1539:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1538:9:22"
									},
									"scope": 3416,
									"src": "1446:432:22",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3288,
										"nodeType": "Block",
										"src": "1977:39:22",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3284,
															"name": "_a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3278,
															"src": "2003:2:22",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"hexValue": "30",
															"id": 3285,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:1:22",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 3283,
														"name": "parseInt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															3289,
															3415
														],
														"referencedDeclaration": 3415,
														"src": "1994:8:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (string memory,uint256) pure returns (uint256)"
														}
													},
													"id": 3286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1994:15:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3282,
												"id": 3287,
												"nodeType": "Return",
												"src": "1987:22:22"
											}
										]
									},
									"id": 3289,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "parseInt",
									"nameLocation": "1893:8:22",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3278,
												"mutability": "mutable",
												"name": "_a",
												"nameLocation": "1925:2:22",
												"nodeType": "VariableDeclaration",
												"scope": 3289,
												"src": "1911:16:22",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3277,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1911:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1901:32:22"
									},
									"returnParameters": {
										"id": 3282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3281,
												"mutability": "mutable",
												"name": "_parsedInt",
												"nameLocation": "1965:10:22",
												"nodeType": "VariableDeclaration",
												"scope": 3289,
												"src": "1957:18:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1957:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1956:20:22"
									},
									"scope": 3416,
									"src": "1884:132:22",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3414,
										"nodeType": "Block",
										"src": "2132:762:22",
										"statements": [
											{
												"assignments": [
													3299
												],
												"declarations": [
													{
														"constant": false,
														"id": 3299,
														"mutability": "mutable",
														"name": "bresult",
														"nameLocation": "2155:7:22",
														"nodeType": "VariableDeclaration",
														"scope": 3414,
														"src": "2142:20:22",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 3298,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2142:5:22",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3304,
												"initialValue": {
													"arguments": [
														{
															"id": 3302,
															"name": "_a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3291,
															"src": "2171:2:22",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 3301,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2165:5:22",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 3300,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2165:5:22",
															"typeDescriptions": {}
														}
													},
													"id": 3303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2165:9:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2142:32:22"
											},
											{
												"assignments": [
													3306
												],
												"declarations": [
													{
														"constant": false,
														"id": 3306,
														"mutability": "mutable",
														"name": "mint",
														"nameLocation": "2189:4:22",
														"nodeType": "VariableDeclaration",
														"scope": 3414,
														"src": "2184:9:22",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3305,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "2184:4:22",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3308,
												"initialValue": {
													"hexValue": "30",
													"id": 3307,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2196:1:22",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2184:13:22"
											},
											{
												"assignments": [
													3310
												],
												"declarations": [
													{
														"constant": false,
														"id": 3310,
														"mutability": "mutable",
														"name": "decimals",
														"nameLocation": "2212:8:22",
														"nodeType": "VariableDeclaration",
														"scope": 3414,
														"src": "2207:13:22",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3309,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2207:4:22",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3312,
												"initialValue": {
													"hexValue": "66616c7365",
													"id": 3311,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2223:5:22",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2207:21:22"
											},
											{
												"body": {
													"id": 3399,
													"nodeType": "Block",
													"src": "2280:525:22",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 3348,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3334,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"baseExpression": {
																									"id": 3328,
																									"name": "bresult",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3299,
																									"src": "2327:7:22",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bytes_memory_ptr",
																										"typeString": "bytes memory"
																									}
																								},
																								"id": 3330,
																								"indexExpression": {
																									"id": 3329,
																									"name": "i",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3314,
																									"src": "2335:1:22",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "2327:10:22",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							],
																							"id": 3327,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2321:5:22",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint8_$",
																								"typeString": "type(uint8)"
																							},
																							"typeName": {
																								"id": 3326,
																								"name": "uint8",
																								"nodeType": "ElementaryTypeName",
																								"src": "2321:5:22",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 3331,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "2321:17:22",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					],
																					"id": 3325,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2316:4:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3324,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "2316:4:22",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3332,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2316:23:22",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">=",
																			"rightExpression": {
																				"hexValue": "3438",
																				"id": 3333,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2343:2:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_48_by_1",
																					"typeString": "int_const 48"
																				},
																				"value": "48"
																			},
																			"src": "2316:29:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 3335,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2315:31:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3346,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"baseExpression": {
																									"id": 3340,
																									"name": "bresult",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3299,
																									"src": "2378:7:22",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bytes_memory_ptr",
																										"typeString": "bytes memory"
																									}
																								},
																								"id": 3342,
																								"indexExpression": {
																									"id": 3341,
																									"name": "i",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3314,
																									"src": "2386:1:22",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "2378:10:22",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							],
																							"id": 3339,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "2372:5:22",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint8_$",
																								"typeString": "type(uint8)"
																							},
																							"typeName": {
																								"id": 3338,
																								"name": "uint8",
																								"nodeType": "ElementaryTypeName",
																								"src": "2372:5:22",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 3343,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "2372:17:22",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					],
																					"id": 3337,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2367:4:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3336,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "2367:4:22",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3344,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2367:23:22",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"hexValue": "3537",
																				"id": 3345,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2394:2:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_57_by_1",
																					"typeString": "int_const 57"
																				},
																				"value": "57"
																			},
																			"src": "2367:29:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 3347,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2366:31:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "2315:82:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"baseExpression": {
																							"id": 3385,
																							"name": "bresult",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3299,
																							"src": "2727:7:22",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 3387,
																						"indexExpression": {
																							"id": 3386,
																							"name": "i",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3314,
																							"src": "2735:1:22",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "2727:10:22",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes1",
																							"typeString": "bytes1"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes1",
																							"typeString": "bytes1"
																						}
																					],
																					"id": 3384,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2721:5:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 3383,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "2721:5:22",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3388,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2721:17:22",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			],
																			"id": 3382,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2716:4:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 3381,
																				"name": "uint",
																				"nodeType": "ElementaryTypeName",
																				"src": "2716:4:22",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3389,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2716:23:22",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "3436",
																		"id": 3390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2743:2:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_46_by_1",
																			"typeString": "int_const 46"
																		},
																		"value": "46"
																	},
																	"src": "2716:29:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 3397,
																"nodeType": "IfStatement",
																"src": "2712:83:22",
																"trueBody": {
																	"id": 3396,
																	"nodeType": "Block",
																	"src": "2747:48:22",
																	"statements": [
																		{
																			"expression": {
																				"id": 3394,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 3392,
																					"name": "decimals",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3310,
																					"src": "2765:8:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"hexValue": "74727565",
																					"id": 3393,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2776:4:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				"src": "2765:15:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 3395,
																			"nodeType": "ExpressionStatement",
																			"src": "2765:15:22"
																		}
																	]
																}
															},
															"id": 3398,
															"nodeType": "IfStatement",
															"src": "2294:501:22",
															"trueBody": {
																"id": 3380,
																"nodeType": "Block",
																"src": "2412:294:22",
																"statements": [
																	{
																		"condition": {
																			"id": 3349,
																			"name": "decimals",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3310,
																			"src": "2434:8:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 3361,
																		"nodeType": "IfStatement",
																		"src": "2430:180:22",
																		"trueBody": {
																			"id": 3360,
																			"nodeType": "Block",
																			"src": "2444:166:22",
																			"statements": [
																				{
																					"condition": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 3352,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 3350,
																							"name": "_b",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3293,
																							"src": "2470:2:22",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "==",
																						"rightExpression": {
																							"hexValue": "30",
																							"id": 3351,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "2476:1:22",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_0_by_1",
																								"typeString": "int_const 0"
																							},
																							"value": "0"
																						},
																						"src": "2470:7:22",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"falseBody": {
																						"id": 3358,
																						"nodeType": "Block",
																						"src": "2539:53:22",
																						"statements": [
																							{
																								"expression": {
																									"id": 3356,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "UnaryOperation",
																									"operator": "--",
																									"prefix": false,
																									"src": "2565:4:22",
																									"subExpression": {
																										"id": 3355,
																										"name": "_b",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 3293,
																										"src": "2565:2:22",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"id": 3357,
																								"nodeType": "ExpressionStatement",
																								"src": "2565:4:22"
																							}
																						]
																					},
																					"id": 3359,
																					"nodeType": "IfStatement",
																					"src": "2466:126:22",
																					"trueBody": {
																						"id": 3354,
																						"nodeType": "Block",
																						"src": "2479:54:22",
																						"statements": [
																							{
																								"id": 3353,
																								"nodeType": "Break",
																								"src": "2505:5:22"
																							}
																						]
																					}
																				}
																			]
																		}
																	},
																	{
																		"expression": {
																			"id": 3364,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 3362,
																				"name": "mint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3306,
																				"src": "2627:4:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "*=",
																			"rightHandSide": {
																				"hexValue": "3130",
																				"id": 3363,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2635:2:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"src": "2627:10:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3365,
																		"nodeType": "ExpressionStatement",
																		"src": "2627:10:22"
																	},
																	{
																		"expression": {
																			"id": 3378,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 3366,
																				"name": "mint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3306,
																				"src": "2655:4:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3377,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"baseExpression": {
																										"id": 3371,
																										"name": "bresult",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 3299,
																										"src": "2674:7:22",
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes_memory_ptr",
																											"typeString": "bytes memory"
																										}
																									},
																									"id": 3373,
																									"indexExpression": {
																										"id": 3372,
																										"name": "i",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 3314,
																										"src": "2682:1:22",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "2674:10:22",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bytes1",
																										"typeString": "bytes1"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_bytes1",
																										"typeString": "bytes1"
																									}
																								],
																								"id": 3370,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "2668:5:22",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint8_$",
																									"typeString": "type(uint8)"
																								},
																								"typeName": {
																									"id": 3369,
																									"name": "uint8",
																									"nodeType": "ElementaryTypeName",
																									"src": "2668:5:22",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 3374,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "2668:17:22",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						],
																						"id": 3368,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2663:4:22",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 3367,
																							"name": "uint",
																							"nodeType": "ElementaryTypeName",
																							"src": "2663:4:22",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 3375,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2663:23:22",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"hexValue": "3438",
																					"id": 3376,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2689:2:22",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_48_by_1",
																						"typeString": "int_const 48"
																					},
																					"value": "48"
																				},
																				"src": "2663:28:22",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2655:36:22",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3379,
																		"nodeType": "ExpressionStatement",
																		"src": "2655:36:22"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3317,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3314,
														"src": "2255:1:22",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 3318,
															"name": "bresult",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3299,
															"src": "2259:7:22",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 3319,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2267:6:22",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2259:14:22",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2255:18:22",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3400,
												"initializationExpression": {
													"assignments": [
														3314
													],
													"declarations": [
														{
															"constant": false,
															"id": 3314,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2248:1:22",
															"nodeType": "VariableDeclaration",
															"scope": 3400,
															"src": "2243:6:22",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 3313,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "2243:4:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 3316,
													"initialValue": {
														"hexValue": "30",
														"id": 3315,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2252:1:22",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2243:10:22"
												},
												"loopExpression": {
													"expression": {
														"id": 3322,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2275:3:22",
														"subExpression": {
															"id": 3321,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3314,
															"src": "2275:1:22",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3323,
													"nodeType": "ExpressionStatement",
													"src": "2275:3:22"
												},
												"nodeType": "ForStatement",
												"src": "2238:567:22"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3401,
														"name": "_b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3293,
														"src": "2818:2:22",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 3402,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2823:1:22",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2818:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3411,
												"nodeType": "IfStatement",
												"src": "2814:53:22",
												"trueBody": {
													"id": 3410,
													"nodeType": "Block",
													"src": "2826:41:22",
													"statements": [
														{
															"expression": {
																"id": 3408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3404,
																	"name": "mint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3306,
																	"src": "2840:4:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "*=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 3405,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2848:2:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"id": 3406,
																		"name": "_b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3293,
																		"src": "2854:2:22",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2848:8:22",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2840:16:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3409,
															"nodeType": "ExpressionStatement",
															"src": "2840:16:22"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3412,
													"name": "mint",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3306,
													"src": "2883:4:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3297,
												"id": 3413,
												"nodeType": "Return",
												"src": "2876:11:22"
											}
										]
									},
									"id": 3415,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "parseInt",
									"nameLocation": "2031:8:22",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3291,
												"mutability": "mutable",
												"name": "_a",
												"nameLocation": "2063:2:22",
												"nodeType": "VariableDeclaration",
												"scope": 3415,
												"src": "2049:16:22",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3290,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2049:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3293,
												"mutability": "mutable",
												"name": "_b",
												"nameLocation": "2080:2:22",
												"nodeType": "VariableDeclaration",
												"scope": 3415,
												"src": "2075:7:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3292,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2075:4:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2039:49:22"
									},
									"returnParameters": {
										"id": 3297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3296,
												"mutability": "mutable",
												"name": "_parsedInt",
												"nameLocation": "2120:10:22",
												"nodeType": "VariableDeclaration",
												"scope": 3415,
												"src": "2112:18:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2112:7:22",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2111:20:22"
									},
									"scope": 3416,
									"src": "2022:872:22",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3417,
							"src": "914:1982:22",
							"usedErrors": []
						}
					],
					"src": "32:2865:22"
				},
				"id": 22
			}
		}
	}
}