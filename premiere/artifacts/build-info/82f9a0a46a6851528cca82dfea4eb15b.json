{
	"id": "82f9a0a46a6851528cca82dfea4eb15b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"sources": {
			"premiere/Premiere.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IConstantFlowAgreementV1} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\nimport {ISuperfluidToken} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IRegistry} from \"./IRegistry.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n\n// Superfluid CFA\n// Polygon: 0x6EeE6060f715257b970700bc2656De21dEdF074C\n// Mumbai: 0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873\n\n// SuperToken (fDAIx / DAIx)\n// Polygon: 0x1305F6B6Df9Dc47159D12Eb7aC2804d4A33173c2\n// Mumbai: 0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f\n\n// LensHub\n// Polygon: 0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d\n// Mumbai: 0x60Ae865ee4C725cd04353b5AAb364553f56ceF82\n\n// FlowRate\n// 2 / mo: 761035007610\n// 5 / mo: 1902587519025\n// 10 / mo: 3805175038051\n\ncontract Premiere {\n    address private _cfaAddress = 0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873;\n    address private _superTokenAddress = 0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f;\n    address private _lensHubAddress = 0x60Ae865ee4C725cd04353b5AAb364553f56ceF82;\n    address private _tbaRegistry = 0x02101dfB77FDE026414827Fdc604ddAF224F0921;\n    string private _minFlowRate = \"761035007610\";\n    string private _maxTimestamp = \"\";\n\n    function isSubscribed(\n        address sender,\n        address receiver,\n        string memory profileId,\n        string memory minFlowRate,\n        string memory maxTimestamp\n    ) public view returns (bool subscribed) {\n        subscribed = false;\n\n        IERC721 _lensHub = IERC721(_lensHubAddress);\n        IConstantFlowAgreementV1 _cfa = IConstantFlowAgreementV1(\n            _cfaAddress\n        );\n        (uint256 timestamp, int96 flowRate, , ) = _cfa.getFlow(\n            ISuperfluidToken(_superTokenAddress),\n            sender,\n            receiver\n        );\n        address _owner = _lensHub.ownerOf(uint(parseInt(profileId)));\n\n        int256 _flowRate = int(parseInt(minFlowRate));\n        uint256 _timestamp = parseInt(maxTimestamp);\n\n        if (\n            (flowRate >= _flowRate &&\n                (_timestamp == 0 || timestamp < _timestamp)) ||\n            sender == _owner\n        ) {\n            subscribed = true;\n        }\n    }\n\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256) {\n        address _tba = IRegistry(_tbaRegistry).account(_lensHubAddress, _id);\n        if (isSubscribed(_owner, _tba, Strings.toString(_id), _minFlowRate, _maxTimestamp)) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function parseInt(\n        string memory _a\n    ) internal pure returns (uint256 _parsedInt) {\n        return parseInt(_a, 0);\n    }\n\n    function parseInt(\n        string memory _a,\n        uint _b\n    ) internal pure returns (uint256 _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if (\n                (uint(uint8(bresult[i])) >= 48) &&\n                (uint(uint8(bresult[i])) <= 57)\n            ) {\n                if (decimals) {\n                    if (_b == 0) {\n                        break;\n                    } else {\n                        _b--;\n                    }\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                decimals = true;\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"premiere/IRegistry.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ninterface IRegistry {\n    event AccountCreated(\n        address account,\n        address indexed tokenContract,\n        uint256 indexed tokenId\n    );\n\n    function createAccount(address tokenContract, uint256 tokenId)\n        external\n        returns (address);\n\n    function account(address tokenContract, uint256 tokenId)\n        external\n        view\n        returns (address);\n}"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluidGovernance } from \"./ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperTokenFactory } from \"./ISuperTokenFactory.sol\";\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperApp } from \"./ISuperApp.sol\";\nimport {\n    BatchOperation,\n    ContextDefinitions,\n    FlowOperatorDefinitions,\n    SuperAppDefinitions,\n    SuperfluidGovernanceConfigs\n} from \"./Definitions.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\n\n/**\n * @title Host interface\n * @author Superfluid\n * @notice This is the central contract of the system where super agreement, super app\n * and super token features are connected.\n *\n * The Superfluid host contract is also the entry point for the protocol users,\n * where batch call and meta transaction are provided for UX improvements.\n *\n */\ninterface ISuperfluid {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    // Superfluid Custom Errors\n    error HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION();              // 0xef4295f6\n    error HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE();           // 0x474e7641\n    error HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS();    // 0x0cd0ebc2\n    error HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS();   // 0x473f7bd4\n    error HOST_INVALID_CONFIG_WORD();                           // 0xf4c802a4\n    error HOST_MAX_256_AGREEMENTS();                            // 0x7c281a78\n    error HOST_NON_UPGRADEABLE();                               // 0x14f72c9f\n    error HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX();               // 0x67e9985b\n    error HOST_ONLY_GOVERNANCE();                               // 0xc5d22a4e\n    error HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE();             // 0xb4770115\n    error HOST_AGREEMENT_ALREADY_REGISTERED();                  // 0xdc9ddba8\n    error HOST_AGREEMENT_IS_NOT_REGISTERED();                   // 0x1c9e9bea\n    error HOST_MUST_BE_CONTRACT();                              // 0xd4f6b30c\n    error HOST_ONLY_LISTED_AGREEMENT();                         // 0x619c5359\n    error HOST_NEED_MORE_GAS();                                 // 0xd4f5d496\n\n    // App Related Custom Errors\n    // uses SuperAppDefinitions' App Jail Reasons as _code\n    error APP_RULE(uint256 _code);                              // 0xa85ba64f\n\n    error HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY(); // 0x19ab84d1\n    error HOST_NOT_A_SUPER_APP();                               // 0x163cbe43\n    error HOST_NO_APP_REGISTRATION_PERMISSIONS();               // 0x5b93ebf0\n    error HOST_RECEIVER_IS_NOT_SUPER_APP();                     // 0x96aa315e\n    error HOST_SENDER_IS_NOT_SUPER_APP();                       // 0xbacfdc40\n    error HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL();             // 0x44725270\n    error HOST_SUPER_APP_IS_JAILED();                           // 0x02384b64\n    error HOST_SUPER_APP_ALREADY_REGISTERED();                  // 0x01b0a935\n    error HOST_UNAUTHORIZED_SUPER_APP_FACTORY();                // 0x289533c5\n\n    /**************************************************************************\n     * Time\n     *\n     * > The Oracle: You have the sight now, Neo. You are looking at the world without time.\n     * > Neo: Then why can't I see what happens to her?\n     * > The Oracle: We can never see past the choices we don't understand.\n     * >       - The Oracle and Neo conversing about the future of Trinity and the effects of Neo's choices\n     *************************************************************************/\n\n    function getNow() external view returns (uint256);\n\n    /**************************************************************************\n     * Governance\n     *************************************************************************/\n\n    /**\n     * @dev Get the current governance address of the Superfluid host\n     */\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\n\n    /**\n     * @dev Replace the current governance with a new one\n     */\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\n    /**\n     * @dev Governance replaced event\n     * @param oldGov Address of the old governance contract\n     * @param newGov Address of the new governance contract\n     */\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\n\n    /**************************************************************************\n     * Agreement Whitelisting\n     *************************************************************************/\n\n    /**\n     * @dev Register a new agreement class to the system\n     * @param agreementClassLogic Initial agreement class code\n     *\n     * @custom:modifiers \n     * - onlyGovernance\n     */\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class registered event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type registered\n     * @param code Address of the new agreement\n     */\n    event AgreementClassRegistered(bytes32 agreementType, address code);\n\n    /**\n    * @dev Update code of an agreement class\n    * @param agreementClassLogic New code for the agreement class\n    *\n    * @custom:modifiers \n    *  - onlyGovernance\n    */\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class updated event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type updated\n     * @param code Address of the new agreement\n     */\n    event AgreementClassUpdated(bytes32 agreementType, address code);\n\n    /**\n    * @notice Check if the agreement type is whitelisted\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\n\n    /**\n    * @notice Get agreement class\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\n\n    /**\n    * @dev Map list of the agreement classes using a bitmap\n    * @param bitmap Agreement class bitmap\n    */\n    function mapAgreementClasses(uint256 bitmap)\n        external view\n        returns (ISuperAgreement[] memory agreementClasses);\n\n    /**\n    * @notice Create a new bitmask by adding a agreement class to it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**\n    * @notice Create a new bitmask by removing a agreement class from it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**************************************************************************\n    * Super Token Factory\n    **************************************************************************/\n\n    /**\n     * @dev Get the super token factory\n     * @return factory The factory\n     */\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\n\n    /**\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\n     * @return logic The factory logic\n     */\n    function getSuperTokenFactoryLogic() external view returns (address logic);\n\n    /**\n     * @dev Update super token factory\n     * @param newFactory New factory logic\n     */\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\n    /**\n     * @dev SuperToken factory updated event\n     * @param newFactory Address of the new factory\n     */\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\n\n    /**\n     * @notice Update the super token logic to the latest\n     * @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours\n     */\n    function updateSuperTokenLogic(ISuperToken token) external;\n    /**\n     * @dev SuperToken logic updated event\n     * @param code Address of the new SuperToken logic\n     */\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\n\n    /**************************************************************************\n     * App Registry\n     *************************************************************************/\n\n    /**\n     * @dev Message sender (must be a contract) declares itself as a super app.\n     * @custom:deprecated you should use `registerAppWithKey` or `registerAppByFactory` instead,\n     * because app registration is currently governance permissioned on mainnets.\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     */\n    function registerApp(uint256 configWord) external;\n    /**\n     * @dev App registered event\n     * @param app Address of jailed app\n     */\n    event AppRegistered(ISuperApp indexed app);\n\n    /**\n     * @dev Message sender declares itself as a super app.\n     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n     * @param registrationKey The registration key issued by the governance, needed to register on a mainnet.\n     * @notice See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n     * On testnets or in dev environment, a placeholder (e.g. empty string) can be used.\n     * While the message sender must be the super app itself, the transaction sender (tx.origin)\n     * must be the deployer account the registration key was issued for.\n     */\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\n\n    /**\n     * @dev Message sender (must be a contract) declares app as a super app\n     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n     * @notice On mainnet deployments, only factory contracts pre-authorized by governance can use this.\n     * See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n     */\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\n\n    /**\n     * @dev Query if the app is registered\n     * @param app Super app address\n     */\n    function isApp(ISuperApp app) external view returns(bool);\n\n    /**\n     * @dev Query app callbacklevel\n     * @param app Super app address\n     */\n    function getAppCallbackLevel(ISuperApp app) external view returns(uint8 appCallbackLevel);\n\n    /**\n     * @dev Get the manifest of the super app\n     * @param app Super app address\n     */\n    function getAppManifest(\n        ISuperApp app\n    )\n        external view\n        returns (\n            bool isSuperApp,\n            bool isJailed,\n            uint256 noopMask\n        );\n\n    /**\n     * @dev Query if the app has been jailed\n     * @param app Super app address\n     */\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\n\n    /**\n     * @dev Whitelist the target app for app composition for the source app (msg.sender)\n     * @param targetApp The target super app address\n     */\n    function allowCompositeApp(ISuperApp targetApp) external;\n\n    /**\n     * @dev Query if source app is allowed to call the target app as downstream app\n     * @param app Super app address\n     * @param targetApp The target super app address\n     */\n    function isCompositeAppAllowed(\n        ISuperApp app,\n        ISuperApp targetApp\n    )\n        external view\n        returns (bool isAppAllowed);\n\n    /**************************************************************************\n     * Agreement Framework\n     *\n     * Agreements use these function to trigger super app callbacks, updates\n     * app credit and charge gas fees.\n     *\n     * These functions can only be called by registered agreements.\n     *************************************************************************/\n\n    /**\n     * @dev (For agreements) StaticCall the app before callback\n     * @param  app               The super app.\n     * @param  callData          The call data sending to the super app.\n     * @param  isTermination     Is it a termination callback?\n     * @param  ctx               Current ctx, it will be validated.\n     * @return cbdata            Data returned from the callback.\n     */\n    function callAppBeforeCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns(bytes memory cbdata);\n\n    /**\n     * @dev (For agreements) Call the app after callback\n     * @param  app               The super app.\n     * @param  callData          The call data sending to the super app.\n     * @param  isTermination     Is it a termination callback?\n     * @param  ctx               Current ctx, it will be validated.\n     * @return newCtx            The current context of the transaction.\n     */\n    function callAppAfterCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Create a new callback stack\n     * @param  ctx                     The current ctx, it will be validated.\n     * @param  app                     The super app.\n     * @param  appCreditGranted        App credit granted so far.\n     * @param  appCreditUsed           App credit used so far.\n     * @return newCtx                  The current context of the transaction.\n     */\n    function appCallbackPush(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 appCreditGranted,\n        int256 appCreditUsed,\n        ISuperfluidToken appCreditToken\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Pop from the current app callback stack\n     * @param  ctx                     The ctx that was pushed before the callback stack.\n     * @param  appCreditUsedDelta      App credit used by the app.\n     * @return newCtx                  The current context of the transaction.\n     *\n     * @custom:security\n     * - Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory.\n     * - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.\n     */\n    function appCallbackPop(\n        bytes calldata ctx,\n        int256 appCreditUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Use app credit.\n     * @param  ctx                      The current ctx, it will be validated.\n     * @param  appCreditUsedMore        See app credit for more details.\n     * @return newCtx                   The current context of the transaction.\n     */\n    function ctxUseCredit(\n        bytes calldata ctx,\n        int256 appCreditUsedMore\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Jail the app.\n     * @param  app                     The super app.\n     * @param  reason                  Jail reason code.\n     * @return newCtx                  The current context of the transaction.\n     */\n    function jailApp(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 reason\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Jail event for the app\n     * @param app Address of jailed app\n     * @param reason Reason the app is jailed (see Definitions.sol for the full list)\n     */\n    event Jail(ISuperApp indexed app, uint256 reason);\n\n    /**************************************************************************\n     * Contextless Call Proxies\n     *\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\n     * with agreements or apps.\n     *\n     * NOTE: The contextual call data should be generated using\n     * abi.encodeWithSelector. The context parameter should be set to \"0x\",\n     * an empty bytes array as a placeholder to be replaced by the host\n     * contract.\n     *************************************************************************/\n\n     /**\n      * @dev Call agreement function\n      * @param agreementClass The agreement address you are calling\n      * @param callData The contextual call data with placeholder ctx\n      * @param userData Extra user data being sent to the super app callbacks\n      */\n     function callAgreement(\n         ISuperAgreement agreementClass,\n         bytes calldata callData,\n         bytes calldata userData\n     )\n        external\n        //cleanCtx\n        //isAgreement(agreementClass)\n        returns(bytes memory returnedData);\n\n    /**\n     * @notice Call app action\n     * @dev Main use case is calling app action in a batch call via the host\n     * @param callData The contextual call data\n     *\n     * @custom:note See \"Contextless Call Proxies\" above for more about contextual call data.\n     */\n    function callAppAction(\n        ISuperApp app,\n        bytes calldata callData\n    )\n        external\n        //cleanCtx\n        //isAppActive(app)\n        //isValidAppAction(callData)\n        returns(bytes memory returnedData);\n\n    /**************************************************************************\n     * Contextual Call Proxies and Context Utilities\n     *\n     * For apps, they must use context they receive to interact with\n     * agreements or apps.\n     *\n     * The context changes must be saved and returned by the apps in their\n     * callbacks always, any modification to the context will be detected and\n     * the violating app will be jailed.\n     *************************************************************************/\n\n    /**\n     * @dev Context Struct\n     *\n     * @custom:note on backward compatibility:\n     * - Non-dynamic fields are padded to 32bytes and packed\n     * - Dynamic fields are referenced through a 32bytes offset to their \"parents\" field (or root)\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\n     *    - non-dynamic fields will be parsed at the same memory location,\n     *    - and dynamic fields will simply have a greater offset than it was.\n     * - We cannot change the structure of the Context struct because of ABI compatibility requirements\n     */\n    struct Context {\n        //\n        // Call context\n        //\n        // app callback level\n        uint8 appCallbackLevel;\n        // type of call\n        uint8 callType;\n        // the system timestamp\n        uint256 timestamp;\n        // The intended message sender for the call\n        address msgSender;\n\n        //\n        // Callback context\n        //\n        // For callbacks it is used to know which agreement function selector is called\n        bytes4 agreementSelector;\n        // User provided data for app callbacks\n        bytes userData;\n\n        //\n        // App context\n        //\n        // app credit granted\n        uint256 appCreditGranted;\n        // app credit wanted by the app callback\n        uint256 appCreditWantedDeprecated;\n        // app credit used, allowing negative values over a callback session\n        // the appCreditUsed value over a callback sessions is calculated with:\n        // existing flow data owed deposit + sum of the callback agreements\n        // deposit deltas \n        // the final value used to modify the state is determined by the\n        // _adjustNewAppCreditUsed function (in AgreementLibrary.sol) which takes \n        // the appCreditUsed value reached in the callback session and the app\n        // credit granted\n        int256 appCreditUsed;\n        // app address\n        address appAddress;\n        // app credit in super token\n        ISuperfluidToken appCreditToken;\n    }\n\n    function callAgreementWithContext(\n        ISuperAgreement agreementClass,\n        bytes calldata callData,\n        bytes calldata userData,\n        bytes calldata ctx\n    )\n        external\n        // requireValidCtx(ctx)\n        // onlyAgreement(agreementClass)\n        returns (bytes memory newCtx, bytes memory returnedData);\n\n    function callAppActionWithContext(\n        ISuperApp app,\n        bytes calldata callData,\n        bytes calldata ctx\n    )\n        external\n        // requireValidCtx(ctx)\n        // isAppActive(app)\n        returns (bytes memory newCtx);\n\n    function decodeCtx(bytes memory ctx)\n        external pure\n        returns (Context memory context);\n\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\n\n    /**************************************************************************\n    * Batch call\n    **************************************************************************/\n    /**\n     * @dev Batch operation data\n     */\n    struct Operation {\n        // Operation type. Defined in BatchOperation (Definitions.sol)\n        uint32 operationType;\n        // Operation target\n        address target;\n        // Data specific to the operation\n        bytes data;\n    }\n\n    /**\n     * @dev Batch call function\n     * @param operations Array of batch operations\n     */\n    function batchCall(Operation[] calldata operations) external;\n\n    /**\n     * @dev Batch call function for trusted forwarders (EIP-2771)\n     * @param operations Array of batch operations\n     */\n    function forwardBatchCall(Operation[] calldata operations) external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * TODO: turning these off because solidity-coverage doesn't like it\n     *************************************************************************/\n\n     /* /// @dev The current superfluid context is clean.\n     modifier cleanCtx() virtual;\n\n     /// @dev Require the ctx being valid.\n     modifier requireValidCtx(bytes memory ctx) virtual;\n\n     /// @dev Assert the ctx being valid.\n     modifier assertValidCtx(bytes memory ctx) virtual;\n\n     /// @dev The agreement is a listed agreement.\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\n\n     // onlyGovernance\n\n     /// @dev The msg.sender must be a listed agreement.\n     modifier onlyAgreement() virtual;\n\n     /// @dev The app is registered and not jailed.\n     modifier isAppActive(ISuperApp app) virtual; */\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n/**\n * @title Constant Flow Agreement interface\n * @author Superfluid\n */\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error CFA_ACL_NO_SENDER_CREATE();               // 0x4b993136\n    error CFA_ACL_NO_SENDER_UPDATE();               // 0xedfa0d3b\n    error CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS(); // 0xa3eab6ac\n    error CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS(); // 0xac434b5f\n    error CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS(); // 0xe30f1bff\n    error CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED();   // 0xa0645c1f\n    error CFA_ACL_UNCLEAN_PERMISSIONS();            // 0x7939d66c\n    error CFA_ACL_NO_SENDER_FLOW_OPERATOR();        // 0xb0ed394d\n    error CFA_ACL_NO_NEGATIVE_ALLOWANCE();          // 0x86e0377d\n    error CFA_FLOW_ALREADY_EXISTS();                // 0x801b6863\n    error CFA_FLOW_DOES_NOT_EXIST();                // 0x5a32bf24\n    error CFA_INSUFFICIENT_BALANCE();               // 0xea76c9b3\n    error CFA_ZERO_ADDRESS_SENDER();                // 0x1ce9b067\n    error CFA_ZERO_ADDRESS_RECEIVER();              // 0x78e02b2a\n    error CFA_HOOK_OUT_OF_GAS();                    // 0x9f76430b\n    error CFA_DEPOSIT_TOO_BIG();                    // 0x752c2b9c\n    error CFA_FLOW_RATE_TOO_BIG();                  // 0x0c9c55c1\n    error CFA_NON_CRITICAL_SENDER();                // 0xce11b5d1\n    error CFA_INVALID_FLOW_RATE();                  // 0x91acad16\n    error CFA_NO_SELF_FLOW();                       // 0xa47338ef\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    /**\n     * @notice Get the maximum flow rate allowed with the deposit\n     * @dev The deposit is clipped and rounded down\n     * @param deposit Deposit amount used for creating the flow\n     * @return flowRate The maximum flow rate\n     */\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Get the deposit required for creating the flow\n     * @dev Calculates the deposit based on the liquidationPeriod and flowRate\n     * @param flowRate Flow rate to be tested\n     * @return deposit The deposit amount based on flowRate and liquidationPeriod\n     * @custom:note \n     * - if calculated deposit (flowRate * liquidationPeriod) is less\n     *   than the minimum deposit, we use the minimum deposit otherwise\n     *   we use the calculated deposit\n     */\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view virtual\n        returns (uint256 deposit);\n\n    /**\n     * @dev Returns whether it is the patrician period based on host.getNow()\n     * @param account The account we are interested in\n     * @return isCurrentlyPatricianPeriod Whether it is currently the patrician period dictated by governance\n     * @return timestamp The value of host.getNow()\n     */\n    function isPatricianPeriodNow(\n        ISuperfluidToken token,\n        address account)\n        external view virtual\n        returns (bool isCurrentlyPatricianPeriod, uint256 timestamp);\n\n    /**\n     * @dev Returns whether it is the patrician period based on timestamp\n     * @param account The account we are interested in\n     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n     * @return bool Whether it is currently the patrician period dictated by governance\n     */\n    function isPatricianPeriod(\n        ISuperfluidToken token,\n        address account,\n        uint256 timestamp\n    )\n        public view virtual\n        returns (bool);\n\n    /**\n     * @dev msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param permissions A bitmask representation of the granted permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function updateFlowOperatorPermissions(\n        ISuperfluidToken token,\n        address flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance,\n        bytes calldata ctx\n    ) \n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\n     * @dev if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param addedFlowRateAllowance The flow rate allowance delta\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @return newCtx The new context bytes\n     */\n    function increaseFlowRateAllowance(\n        ISuperfluidToken token,\n        address flowOperator,\n        int96 addedFlowRateAllowance,\n        bytes calldata ctx\n    ) external virtual returns(bytes memory newCtx);\n\n    /**\n     * @dev msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`\n     * @dev if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param subtractedFlowRateAllowance The flow rate allowance delta\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @return newCtx The new context bytes\n     */\n    function decreaseFlowRateAllowance(\n        ISuperfluidToken token,\n        address flowOperator,\n        int96 subtractedFlowRateAllowance,\n        bytes calldata ctx\n    ) external virtual returns(bytes memory newCtx);\n\n    /**\n     * @dev msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function authorizeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n     /**\n     * @notice msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\n     * @dev `permissions` and `flowRateAllowance` will both be set to 0\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function revokeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\n     * @param token Super token address\n     * @param sender The permission granter address\n     * @param flowOperator The permission grantee address\n     * @return flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorData(\n       ISuperfluidToken token,\n       address sender,\n       address flowOperator\n    )\n        public view virtual\n        returns (\n            bytes32 flowOperatorId,\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Get flow operator using flowOperatorId\n     * @param token Super token address\n     * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorDataByID(\n       ISuperfluidToken token,\n       bytes32 flowOperatorId\n    )\n        external view virtual\n        returns (\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Create a flow betwen ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementCreated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - A deposit is taken as safety margin for the solvency agents\n     * - A extra gas fee may be taken to pay for solvency agent liquidations\n     */\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Create a flow between sender and receiver\n    * @dev A flow created by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function createFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Update the flow rate between ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementUpdated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Only the flow sender may update the flow rate\n     * - Even if the flow rate is zero, the flow is not deleted\n     * from the system\n     * - Deposit amount will be adjusted accordingly\n     * - No new gas fee is charged\n     */\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Update a flow between sender and receiver\n    * @dev A flow updated by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function updateFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev Get the flow data between `sender` and `receiver` of `token`\n     * @param token Super token address\n     * @param sender Flow receiver\n     * @param receiver Flow sender\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The amount of deposit the flow\n     * @return owedDeposit The amount of owed deposit of the flow\n     */\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @notice Get flow data using agreementId\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param agreementId The agreement ID\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The deposit amount of the flow\n     * @return owedDeposit The owed deposit amount of the flow\n     */\n    function getFlowByID(\n       ISuperfluidToken token,\n       bytes32 agreementId\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get the aggregated flow info of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return timestamp Timestamp of when a flow was last updated for account\n     * @return flowRate The net flow rate of token for account\n     * @return deposit The sum of all deposits for account's flows\n     * @return owedDeposit The sum of all owed deposits for account's flows\n     */\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @dev Get the net flow rate of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return flowRate Net flow rate\n     */\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     *\n     * @custom:callbacks \n     * - AgreementTerminated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Both flow sender and receiver may delete the flow\n     * - If Sender account is insolvent or in critical state, a solvency agent may\n     *   also terminate the agreement\n     * - Gas fee may be returned to the sender\n     */\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev A flow deleted by an approved flow operator (see above for details on callbacks)\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     */\n    function deleteFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n     \n    /**\n     * @dev Flow operator updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param flowOperator Flow operator address\n     * @param permissions Octo bitmask representation of permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    event FlowOperatorUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance\n    );\n\n    /**\n     * @dev Flow updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param receiver Flow recipient address\n     * @param flowRate Flow rate in amount per second for this flow\n     * @param totalSenderFlowRate Total flow rate in amount per second for the sender\n     * @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n     * @param userData The user provided data\n     *\n     */\n    event FlowUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed receiver,\n        int96 flowRate,\n        int256 totalSenderFlowRate,\n        int256 totalReceiverFlowRate,\n        bytes userData\n    );\n\n    /**\n     * @dev Flow updated extension event\n     * @param flowOperator Flow operator address - the Context.msgSender\n     * @param deposit The deposit amount for the stream\n     */\n    event FlowUpdatedExtension(\n        address indexed flowOperator,\n        uint256 deposit\n    );\n}\n"
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC777/IERC777.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\n     */\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\n     */\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\n/**\n * @title ERC20 token info interface\n * @author Superfluid\n * @dev ERC20 standard interface does not specify these functions, but\n *      often the token implementations have them.\n */\ninterface TokenInfo {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\n/**\n * @title Super app definitions library\n * @author Superfluid\n */\nlibrary SuperAppDefinitions {\n\n    /**************************************************************************\n    / App manifest config word\n    /**************************************************************************/\n\n    /*\n     * App level is a way to allow the app to whitelist what other app it can\n     * interact with (aka. composite app feature).\n     *\n     * For more details, refer to the technical paper of superfluid protocol.\n     */\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\n\n    // The app is at the final level, hence it doesn't want to interact with any other app\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\n\n    // The app is at the second level, it may interact with other final level apps if whitelisted\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\n\n    function getAppCallbackLevel(uint256 configWord) internal pure returns (uint8) {\n        return uint8(configWord & APP_LEVEL_MASK);\n    }\n\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\n    }\n\n    /**************************************************************************\n    / Callback implementation bit masks\n    /**************************************************************************/\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\n\n    /**************************************************************************\n    / App Jail Reasons\n    /**************************************************************************/\n\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\n\n    // Validate configWord cleaness for future compatibility, or else may introduce undefined future behavior\n    function isConfigWordClean(uint256 configWord) internal pure returns (bool) {\n        return (configWord & ~(APP_LEVEL_MASK | APP_JAIL_BIT | AGREEMENT_CALLBACK_NOOP_BITMASKS)) == uint256(0);\n    }\n}\n\n/**\n * @title Context definitions library\n * @author Superfluid\n */\nlibrary ContextDefinitions {\n\n    /**************************************************************************\n    / Call info\n    /**************************************************************************/\n\n    // app level\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\n\n    // call type\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\n\n    function decodeCallInfo(uint256 callInfo)\n        internal pure\n        returns (uint8 appCallbackLevel, uint8 callType)\n    {\n        appCallbackLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n    function encodeCallInfo(uint8 appCallbackLevel, uint8 callType)\n        internal pure\n        returns (uint256 callInfo)\n    {\n        return uint256(appCallbackLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n}\n\n/**\n * @title Flow Operator definitions library\n  * @author Superfluid\n */\n library FlowOperatorDefinitions {\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_CREATE = uint8(1) << 0;\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_UPDATE = uint8(1) << 1;\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_DELETE = uint8(1) << 2;\n    uint8 constant internal AUTHORIZE_FULL_CONTROL =\n        AUTHORIZE_FLOW_OPERATOR_CREATE | AUTHORIZE_FLOW_OPERATOR_UPDATE | AUTHORIZE_FLOW_OPERATOR_DELETE;\n    uint8 constant internal REVOKE_FLOW_OPERATOR_CREATE = ~(uint8(1) << 0);\n    uint8 constant internal REVOKE_FLOW_OPERATOR_UPDATE = ~(uint8(1) << 1);\n    uint8 constant internal REVOKE_FLOW_OPERATOR_DELETE = ~(uint8(1) << 2);\n\n    function isPermissionsClean(uint8 permissions) internal pure returns (bool) {\n        return (\n            permissions & ~(AUTHORIZE_FLOW_OPERATOR_CREATE\n                | AUTHORIZE_FLOW_OPERATOR_UPDATE\n                | AUTHORIZE_FLOW_OPERATOR_DELETE)\n            ) == uint8(0);\n    }\n }\n\n/**\n * @title Batch operation library\n * @author Superfluid\n */\nlibrary BatchOperation {\n    /**\n     * @dev ERC20.approve batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationApprove(\n     *     abi.decode(data, (address spender, uint256 amount))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\n    /**\n     * @dev ERC20.transferFrom batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationTransferFrom(\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\n    /**\n     * @dev ERC777.send batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationSend(\n     *     abi.decode(data, (address recipient, uint256 amount, bytes userData)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC777_SEND = 3;\n    /**\n     * @dev ERC20.increaseAllowance batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationIncreaseAllowance(\n     *     abi.decode(data, (address account, address spender, uint256 addedValue))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE = 4;\n    /**\n     * @dev ERC20.decreaseAllowance batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDecreaseAllowance(\n     *     abi.decode(data, (address account, address spender, uint256 subtractedValue))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE = 5;\n    /**\n     * @dev SuperToken.upgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationUpgrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\n    /**\n     * @dev SuperToken.downgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDowngrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\n    /**\n     * @dev Superfluid.callAgreement batch operation type\n     *\n     * Call spec:\n     * callAgreement(\n     *     ISuperAgreement(target)),\n     *     abi.decode(data, (bytes callData, bytes userData)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\n    /**\n     * @dev Superfluid.callAppAction batch operation type\n     *\n     * Call spec:\n     * callAppAction(\n     *     ISuperApp(target)),\n     *     data\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\n}\n\n/**\n * @title Superfluid governance configs library\n * @author Superfluid\n */\nlibrary SuperfluidGovernanceConfigs {\n\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n    bytes32 constant internal CFAV1_PPP_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\");\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\");\n\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.trustedForwarder\",\n            forwarder));\n    }\n\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\",\n            deployer,\n            registrationKey));\n    }\n\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32)\n    {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.factory\",\n            factory));\n    }\n\n    function decodePPPConfig(uint256 pppConfig) internal pure\n        returns (uint256 liquidationPeriod, uint256 patricianPeriod)\n    {\n        liquidationPeriod = (pppConfig >> 32) & type(uint32).max;\n        patricianPeriod = pppConfig & type(uint32).max;\n    }\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\n/**\n * @title SuperApp interface\n * @author Superfluid\n * @dev Be aware of the app being jailed, when the word permitted is used.\n */\ninterface ISuperApp {\n\n    /**\n     * @dev Callback before a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * @custom:note \n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n     * @dev Callback after a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param cbdata The data returned from the before-hook callback.\n     * @param ctx The context data.\n     * @return newCtx The current context of the transaction.\n     *\n     * @custom:note \n     * - State changes is permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function afterAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Callback before a new agreement is updated.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * @custom:note \n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n\n    /**\n    * @dev Callback after a new agreement is updated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * @custom:note \n    * - State changes is permitted.\n    * - Only revert with a \"reason\" is permitted.\n    */\n    function afterAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n    * @dev Callback before a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param ctx The context data.\n    * @return cbdata A free format in memory data the app can use to pass arbitary information to\n    *         the after-hook callback.\n    *\n    * @custom:note \n    * - It will be invoked with `staticcall`, no state changes are permitted.\n    * - Revert is not permitted.\n    */\n    function beforeAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n    * @dev Callback after a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * @custom:note \n    * - State changes is permitted.\n    * - Revert is not permitted.\n    */\n    function afterAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Super agreement interface\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Get the type of the agreement class\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class\n     * @param account Account the state belongs to\n     * @param time Time used for the calculation\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n     * @return deposit Account deposit amount of this agreement\n     * @return owedDeposit Account owed deposit amount of this agreement\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\nimport {\n    IERC20,\n    ERC20WithTokenInfo\n} from \"../tokens/ERC20WithTokenInfo.sol\";\n\n/**\n * @title Super token factory interface\n * @author Superfluid\n */\ninterface ISuperTokenFactory {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_FACTORY_ALREADY_EXISTS();                 // 0x91d67972\n    error SUPER_TOKEN_FACTORY_DOES_NOT_EXIST();                 // 0x872cac48\n    error SUPER_TOKEN_FACTORY_UNINITIALIZED();                  // 0x1b39b9b4\n    error SUPER_TOKEN_FACTORY_ONLY_HOST();                      // 0x478b8e83\n    error SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED();  // 0x478b8e83\n    error SUPER_TOKEN_FACTORY_ZERO_ADDRESS();                   // 0x305c9e82\n\n    /**************************************************************************\n    * Immutable Variables\n    **************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /// @dev Initialize the contract\n    function initialize() external;\n\n    /**\n     * @notice Get the canonical super token logic.\n     */\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\n\n    /**\n     * @dev Upgradability modes\n     */\n    enum Upgradability {\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\n        NON_UPGRADABLE,\n        /// Upgradable through `host.updateSuperTokenLogic` operation\n        SEMI_UPGRADABLE,\n        /// Always using the latest super token logic\n        FULL_UPGRADABLE\n    }\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     */\n    function createERC20Wrapper(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token with extra token info\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     * NOTE:\n     * - It assumes token provide the .decimals() function\n     */\n    function createERC20Wrapper(\n        ERC20WithTokenInfo underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\n     * @dev salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\n     * @param _underlyingToken Underlying ERC20 token\n     * @return ISuperToken the created supertoken\n     */\n    function createCanonicalERC20Wrapper(ERC20WithTokenInfo _underlyingToken)\n        external\n        returns (ISuperToken);\n\n    /**\n     * @notice Computes/Retrieves wrapper super token address given the underlying token address\n     * @dev We return from our canonical list if it already exists, otherwise we compute it\n     * @dev note that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\n     * @param _underlyingToken Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     * @return isDeployed whether the super token is deployed AND set in the canonical mapping\n     */\n    function computeCanonicalERC20WrapperAddress(address _underlyingToken)\n        external\n        view\n        returns (address superTokenAddress, bool isDeployed);\n\n    /**\n     * @notice Gets the canonical ERC20 wrapper super token address given the underlying token address\n     * @dev We return the address if it exists and the zero address otherwise\n     * @param _underlyingTokenAddress Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     */\n    function getCanonicalERC20Wrapper(address _underlyingTokenAddress)\n        external\n        view\n        returns (address superTokenAddress);\n\n    /**\n     * @dev Creates a new custom super token\n     * @param customSuperTokenProxy address of the custom supertoken proxy\n     */\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external;\n\n    /**\n      * @dev Super token logic created event\n      * @param tokenLogic Token logic address\n      */\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\n\n    /**\n      * @dev Super token created event\n      * @param token Newly created super token address\n      */\n    event SuperTokenCreated(ISuperToken indexed token);\n\n    /**\n      * @dev Custom super token created event\n      * @param token Newly created custom super token address\n      */\n    event CustomSuperTokenCreated(ISuperToken indexed token);\n\n}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IConstantOutflowNFT } from \"./IConstantOutflowNFT.sol\";\nimport { IConstantInflowNFT } from \"./IConstantInflowNFT.sol\";\nimport { IPoolAdminNFT } from \"./IPoolAdminNFT.sol\";\nimport { IPoolMemberNFT } from \"./IPoolMemberNFT.sol\";\n\n/**\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER();       // 0xf7f02227\n    error SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT();             // 0xfe737d05\n    error SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED(); // 0xe3e13698\n    error SUPER_TOKEN_NO_UNDERLYING_TOKEN();                     // 0xf79cf656\n    error SUPER_TOKEN_ONLY_SELF();                               // 0x7ffa6648\n    error SUPER_TOKEN_ONLY_HOST();                               // 0x98f73704\n    error SUPER_TOKEN_ONLY_GOV_OWNER();                          // 0xd9c7ed08\n    error SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS();               // 0x81638627\n    error SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS();                 // 0xdf070274\n    error SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS();                  // 0xba2ab184\n    error SUPER_TOKEN_MINT_TO_ZERO_ADDRESS();                    // 0x0d243157\n    error SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS();              // 0xeecd6c9b\n    error SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS();                // 0xe219bd39\n    error SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED();               // 0x6bef249d\n\n    /**\n     * @dev Initialize the contract\n     */\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n    * Immutable variables\n    *************************************************************************/\n\n    // solhint-disable-next-line func-name-mixedcase\n    function CONSTANT_OUTFLOW_NFT() external view returns (IConstantOutflowNFT);\n    // solhint-disable-next-line func-name-mixedcase\n    function CONSTANT_INFLOW_NFT() external view returns (IConstantInflowNFT);\n\n    /**************************************************************************\n    * TokenInfo & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * @custom:note SuperToken always uses 18 decimals.\n     *\n     * This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\n     *         zero by default.\n     *\n     * @notice This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:note Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @custom:emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     *         allowance mechanism. `amount` is then deducted from the caller's\n     *         allowance.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements \n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements \n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     *         means all token operations (creation, movement and destruction) must have\n     *         amounts that are a multiple of this number.\n     *\n     * @custom:note For super token contracts, this value is always 1\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\n     *      the corresponding functions will be called with `data` and empty\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements \n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply and transfers the underlying token to the caller's account.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements \n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * @custom:emits an {AuthorizedOperator} event.\n     *\n     * @custom:requirements \n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * @custom:emits a {RevokedOperator} event.\n     *\n     * @custom:requirements \n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements \n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements \n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * @custom:modifiers \n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n   /**\n    * @dev Transfer `amount` tokens from the `sender` to `recipient`.\n    * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n    * spend tokens of `sender`.\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfTransferFrom(\n        address sender,\n        address spender,\n        address recipient,\n        uint256 amount\n   ) external;\n\n   /**\n    * @dev Give `spender`, `amount` allowance to spend the tokens of\n    * `account`.\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfApproveFor(\n        address account,\n        address spender,\n        uint256 amount\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to receive upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     * \n     * @custom:warning\n     * - there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.\n     * @custom:requirements \n     * - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Downgrade SuperToken to ERC20 and transfer immediately\n     * @param to The account to receive downgraded tokens\n     * @param amount Number of tokens to be downgraded (in 18 decimals)\n     */\n    function downgradeTo(address to, uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are downgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    function operationIncreaseAllowance(\n        address account,\n        address spender,\n        uint256 addedValue\n    ) external;\n\n    function operationDecreaseAllowance(\n        address account,\n        address spender,\n        uint256 subtractedValue\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transferFrom by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC777 send by host contract.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    * @param data Arbitrary user inputted data\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationSend(\n        address spender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n    // Flow NFT events\n    /**\n     * @dev Constant Outflow NFT proxy created event\n     * @param constantOutflowNFT constant outflow nft address\n     */\n    event ConstantOutflowNFTCreated(\n        IConstantOutflowNFT indexed constantOutflowNFT\n    );\n\n    /**\n     * @dev Constant Inflow NFT proxy created event\n     * @param constantInflowNFT constant inflow nft address\n     */\n    event ConstantInflowNFTCreated(\n        IConstantInflowNFT indexed constantInflowNFT\n    );\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n/**\n * @title Superfluid token interface\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_TOKEN_AGREEMENT_ALREADY_EXISTS();  // 0xf05521f6\n    error SF_TOKEN_AGREEMENT_DOES_NOT_EXIST();  // 0xdae18809\n    error SF_TOKEN_BURN_INSUFFICIENT_BALANCE(); // 0x10ecdf44\n    error SF_TOKEN_MOVE_INSUFFICIENT_BALANCE(); // 0x2f4cb941\n    error SF_TOKEN_ONLY_LISTED_AGREEMENT();     // 0xc9ff6644\n    error SF_TOKEN_ONLY_HOST();                 // 0xc51efddd\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\n     *\n     * @custom:note \n     * - version: 1\n     * - liquidationType key:\n     *    - 0 = reward account receives reward (PIC period)\n     *    - 1 = liquidator account receives reward (Pleb period)\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\n     */\n    struct LiquidationTypeData {\n        uint256 version;\n        uint8 liquidationType;\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @notice Calculate the realtime balance given the current host.getNow() value\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\n     * @param account for the query\n     * @return availableBalance Real-time balance\n     * @return deposit Account deposit\n     * @return owedDeposit Account owed Deposit\n     */\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @notice Check if account is critical\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @notice Check if account is critical now (current host.getNow())\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @notice Check if account is solvent\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @notice Check if account is solvent now\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @notice Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement created event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement updated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n    /**\n     * @dev Agreement terminated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * @custom:note \n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of an agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @notice Settle balance from an account by the agreement\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Make liquidation payouts (v2)\n     * @param id Agreement ID\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n     * @param targetAccount Account to be liquidated\n     * @param rewardAmount The amount the rewarded account will receive\n     * @param targetAccountBalanceDelta The delta amount the target account balance should change by\n     *\n     * @custom:note \n     * - If a bailout is required (bailoutAmount > 0)\n     *   - the actual reward (single deposit) goes to the executor,\n     *   - while the reward account becomes the bailout account\n     *   - total bailout include: bailout amount + reward amount\n     *   - the targetAccount will be bailed out\n     * - If a bailout is not required\n     *   - the targetAccount will pay the rewardAmount\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function makeLiquidationPayoutsV2\n    (\n        bytes32 id,\n        bytes memory liquidationTypeData,\n        address liquidatorAccount,\n        bool useDefaultRewardAccount,\n        address targetAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta\n    ) external;\n    /**\n     * @dev Agreement liquidation event v2 (including agent account)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param targetAccount Account of the stream sender\n     * @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n     * @param rewardAmount The amount the reward recipient account balance should change by\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if the agreement is liquidated during the PIC period\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the targetAccount is insolvent\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\n     *   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n     *   - the targetAccount will receive the bailoutAmount\n     */\n    event AgreementLiquidatedV2(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed liquidatorAccount,\n        address indexed targetAccount,\n        address rewardAmountReceiver,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta,\n        bytes liquidationTypeData\n    );\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n    /**************************************************************************\n     * DEPRECATED\n     *************************************************************************/\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param bondAccount Account that collect the reward or bailout accounts\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of liquidation bailouot\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if bailout is equal to 0, then\n     *   - the bondAccount will get the rewardAmount,\n     *   - the penaltyAccount will pay for the rewardAmount.\n     * - if bailout is larger than 0, then\n     *   - the liquidatorAccount will get the rewardAmouont,\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\n     */\n    event AgreementLiquidatedBy(\n        address liquidatorAccount,\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed bondAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    );\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperfluidToken  } from \"./ISuperfluidToken.sol\";\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\n\n\n/**\n * @title Superfluid governance interface\n * @author Superfluid\n */\ninterface ISuperfluidGovernance {\n    \n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_GOV_ARRAYS_NOT_SAME_LENGTH();                  // 0x27743aa6\n    error SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD(); // 0xe171980a\n    error SF_GOV_MUST_BE_CONTRACT();                        // 0x80dddd73\n\n    /**\n     * @dev Replace the current governance with a new governance\n     */\n    function replaceGovernance(\n        ISuperfluid host,\n        address newGov) external;\n\n    /**\n     * @dev Register a new agreement class\n     */\n    function registerAgreementClass(\n        ISuperfluid host,\n        address agreementClass) external;\n\n    /**\n     * @dev Update logics of the contracts\n     *\n     * @custom:note \n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\n     */\n    function updateContracts(\n        ISuperfluid host,\n        address hostNewLogic,\n        address[] calldata agreementClassNewLogics,\n        address superTokenFactoryNewLogic\n    ) external;\n\n    /**\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\n     */\n    function batchUpdateSuperTokenLogic(\n        ISuperfluid host,\n        ISuperToken[] calldata tokens) external;\n    \n    /**\n     * @dev Set configuration as address value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        address value\n    ) external;\n    \n    /**\n     * @dev Set configuration as uint256 value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        uint256 value\n    ) external;\n\n    /**\n     * @dev Clear configuration\n     */\n    function clearConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key\n    ) external;\n\n    /**\n     * @dev Get configuration as address value\n     */\n    function getConfigAsAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (address value);\n\n    /**\n     * @dev Get configuration as uint256 value\n     */\n    function getConfigAsUint256(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (uint256 value);\n\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { TokenInfo } from \"./TokenInfo.sol\";\n\n/**\n * @title ERC20 token with token info interface\n * @author Superfluid\n * @dev Using abstract contract instead of interfaces because old solidity\n *      does not support interface inheriting other interfaces\n * solhint-disable-next-line no-empty-blocks\n *\n */\n// solhint-disable-next-line no-empty-blocks\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPoolMemberNFT {}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPoolAdminNFT {}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { IFlowNFTBase } from \"./IFlowNFTBase.sol\";\n\ninterface IConstantInflowNFT is IFlowNFTBase {\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n    error CIF_NFT_ONLY_CONSTANT_OUTFLOW(); // 0xe81ef57a\n\n    /**************************************************************************\n     * Write Functions\n     *************************************************************************/\n\n    /// @notice The mint function emits the \"mint\" `Transfer` event.\n    /// @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n    /// is to inform clients that search for events.\n    /// @param to the flow receiver (inflow NFT receiver)\n    /// @param newTokenId the new token id\n    function mint(address to, uint256 newTokenId) external;\n\n    /// @notice This burn function emits the \"burn\" `Transfer` event.\n    /// @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n    /// is to inform clients that search for events.\n    /// @param tokenId desired token id to burn\n    function burn(uint256 tokenId) external;\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { IFlowNFTBase } from \"./IFlowNFTBase.sol\";\n\ninterface IConstantOutflowNFT is IFlowNFTBase {\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n\n    error COF_NFT_INVALID_SUPER_TOKEN();            // 0x6de98774\n    error COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME(); // 0x0d1d1161\n    error COF_NFT_MINT_TO_ZERO_ADDRESS();           // 0x43d05e51\n    error COF_NFT_ONLY_CONSTANT_INFLOW();           // 0xa495a718\n    error COF_NFT_ONLY_FLOW_AGREEMENTS();           // 0xd367b64f\n    error COF_NFT_TOKEN_ALREADY_EXISTS();           // 0xe2480183\n\n\n    /**************************************************************************\n     * Write Functions\n     *************************************************************************/\n\n    /// @notice The onCreate function is called when a new flow is created.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onCreate(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n\n    /// @notice The onUpdate function is called when a flow is updated.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onUpdate(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n\n    /// @notice The onDelete function is called when a flow is deleted.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onDelete(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport {\n    IERC721Metadata\n} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\ninterface IFlowNFTBase is IERC721Metadata {\n    // FlowNFTData struct storage packing:\n    // b = bits\n    // WORD 1: | superToken      | FREE\n    //         | 160b            | 96b\n    // WORD 2: | flowSender      | FREE\n    //         | 160b            | 96b\n    // WORD 3: | flowReceiver    | flowStartDate | FREE\n    //         | 160b            | 32b           | 64b\n    struct FlowNFTData {\n        address superToken;\n        address flowSender;\n        address flowReceiver;\n        uint32 flowStartDate;\n    }\n\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n\n    error CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();   // 0xa3352582\n    error CFA_NFT_APPROVE_TO_CALLER();                              // 0xd3c77329\n    error CFA_NFT_APPROVE_TO_CURRENT_OWNER();                       // 0xe4790b25\n    error CFA_NFT_INVALID_TOKEN_ID();                               // 0xeab95e3b\n    error CFA_NFT_ONLY_SUPER_TOKEN_FACTORY();                       // 0xebb7505b\n    error CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();  // 0x2551d606\n    error CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER();                  // 0x5a26c744\n    error CFA_NFT_TRANSFER_IS_NOT_ALLOWED();                        // 0xaa747eca\n    error CFA_NFT_TRANSFER_TO_ZERO_ADDRESS();                       // 0xde06d21e\n\n    /**************************************************************************\n     * Events\n     *************************************************************************/\n\n    /// @notice Informs third-party platforms that NFT metadata should be updated\n    /// @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n    /// @param tokenId the id of the token that should have its metadata updated\n    event MetadataUpdate(uint256 tokenId);\n\n    /**************************************************************************\n     * View\n     *************************************************************************/\n\n    /// @notice An external function for querying flow data by `tokenId``\n    /// @param tokenId the token id\n    /// @return flowData the flow data associated with `tokenId`\n    function flowDataByTokenId(\n        uint256 tokenId\n    ) external view returns (FlowNFTData memory flowData);\n\n    /// @notice An external function for computing the deterministic tokenId\n    /// @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n    /// @param superToken the super token\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    /// @return tokenId the tokenId\n    function getTokenId(\n        address superToken,\n        address flowSender,\n        address flowReceiver\n    ) external view returns (uint256);\n\n    /**************************************************************************\n     * Write\n     *************************************************************************/\n\n    function initialize(\n        string memory nftName,\n        string memory nftSymbol\n    ) external; // initializer;\n\n    function triggerMetadataUpdate(uint256 tokenId) external;\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"IERC777": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "AuthorizedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Burned",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Minted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "RevokedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Sent",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "authorizeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultOperators",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "granularity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "isOperatorFor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "revokeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "send",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.",
						"events": {
							"AuthorizedOperator(address,address)": {
								"details": "Emitted when `operator` is made operator for `tokenHolder`."
							},
							"Burned(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"Minted(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"RevokedOperator(address,address)": {
								"details": "Emitted when `operator` is revoked its operator status for `tokenHolder`."
							}
						},
						"kind": "dev",
						"methods": {
							"authorizeOperator(address)": {
								"details": "Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by an account (`owner`)."
							},
							"burn(uint256,bytes)": {
								"details": "Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens."
							},
							"defaultOperators()": {
								"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
							},
							"granularity()": {
								"details": "Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1."
							},
							"isOperatorFor(address,address)": {
								"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"operatorBurn(address,uint256,bytes,bytes)": {
								"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`."
							},
							"operatorSend(address,address,uint256,bytes,bytes)": {
								"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
							},
							"revokeOperator(address)": {
								"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address."
							},
							"send(address,uint256,bytes)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"authorizeOperator(address)": "959b8c3f",
							"balanceOf(address)": "70a08231",
							"burn(uint256,bytes)": "fe9d9303",
							"defaultOperators()": "06e48538",
							"granularity()": "556f0dc7",
							"isOperatorFor(address,address)": "d95b6371",
							"name()": "06fdde03",
							"operatorBurn(address,uint256,bytes,bytes)": "fc673c4f",
							"operatorSend(address,address,uint256,bytes,bytes)": "62ad1b83",
							"revokeOperator(address)": "fad8b32a",
							"send(address,uint256,bytes)": "9bd9bbc6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.\",\"events\":{\"AuthorizedOperator(address,address)\":{\"details\":\"Emitted when `operator` is made operator for `tokenHolder`.\"},\"Burned(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"Minted(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"RevokedOperator(address,address)\":{\"details\":\"Emitted when `operator` is revoked its operator status for `tokenHolder`.\"}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address)\":{\"details\":\"Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by an account (`owner`).\"},\"burn(uint256,bytes)\":{\"details\":\"Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens.\"},\"defaultOperators()\":{\"details\":\"Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.\"},\"granularity()\":{\"details\":\"Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1.\"},\"isOperatorFor(address,address)\":{\"details\":\"Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"operatorBurn(address,uint256,bytes,bytes)\":{\"details\":\"Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.\"},\"operatorSend(address,address,uint256,bytes,bytes)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\"},\"revokeOperator(address)\":{\"details\":\"Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address.\"},\"send(address,uint256,bytes)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":\"IERC777\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":220:2779  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ab6a269a65f5803da06b288908b4f00629e38397f6d295ec471d84279be2e1d564736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab6a269a65f5803da06b288908b4f00629e38397f6d295ec471d84279be2e1d564736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB PUSH11 0x269A65F5803DA06B288908 0xB4 CREATE MOD 0x29 0xE3 DUP4 SWAP8 0xF6 0xD2 SWAP6 0xEC SELFBALANCE SAR DUP5 0x27 SWAP12 0xE2 0xE1 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "220:2559:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab6a269a65f5803da06b288908b4f00629e38397f6d295ec471d84279be2e1d564736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB PUSH11 0x269A65F5803DA06B288908 0xB4 CREATE MOD 0x29 0xE3 DUP4 SWAP8 0xF6 0xD2 SWAP6 0xEC SELFBALANCE SAR DUP5 0x27 SWAP12 0xE2 0xE1 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "220:2559:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(int256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 220,
									"end": 2779,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ab6a269a65f5803da06b288908b4f00629e38397f6d295ec471d84279be2e1d564736f6c63430008120033",
									".code": [
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 220,
											"end": 2779,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":202:12784  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209150934ab0c91ee4f9e04d862390c6531c91524dc4cebd8ff4df5e5c5f78cf9a64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209150934ab0c91ee4f9e04d862390c6531c91524dc4cebd8ff4df5e5c5f78cf9a64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 POP SWAP4 0x4A 0xB0 0xC9 0x1E 0xE4 0xF9 0xE0 0x4D DUP7 0x23 SWAP1 0xC6 MSTORE8 SHR SWAP2 MSTORE 0x4D 0xC4 0xCE 0xBD DUP16 DELEGATECALL 0xDF 0x5E 0x5C 0x5F PUSH25 0xCF9A64736F6C63430008120033000000000000000000000000 ",
							"sourceMap": "202:12582:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209150934ab0c91ee4f9e04d862390c6531c91524dc4cebd8ff4df5e5c5f78cf9a64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 POP SWAP4 0x4A 0xB0 0xC9 0x1E 0xE4 0xF9 0xE0 0x4D DUP7 0x23 SWAP1 0xC6 MSTORE8 SHR SWAP2 MSTORE 0x4D 0xC4 0xCE 0xBD DUP16 DELEGATECALL 0xDF 0x5E 0x5C 0x5F PUSH25 0xCF9A64736F6C63430008120033000000000000000000000000 ",
							"sourceMap": "202:12582:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 202,
									"end": 12784,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209150934ab0c91ee4f9e04d862390c6531c91524dc4cebd8ff4df5e5c5f78cf9a64736f6c63430008120033",
									".code": [
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 202,
											"end": 12784,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":215:1262  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d721ecf1dbea5e9bc0132744e6031bb93b88801904ab98161f4e012e5110763064736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d721ecf1dbea5e9bc0132744e6031bb93b88801904ab98161f4e012e5110763064736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 0x21 0xEC CALL 0xDB 0xEA 0x5E SWAP12 0xC0 SGT 0x27 PREVRANDAO 0xE6 SUB SHL 0xB9 EXTCODESIZE DUP9 DUP1 NOT DIV 0xAB SWAP9 AND 0x1F 0x4E ADD 0x2E MLOAD LT PUSH23 0x3064736F6C634300081200330000000000000000000000 ",
							"sourceMap": "215:1047:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d721ecf1dbea5e9bc0132744e6031bb93b88801904ab98161f4e012e5110763064736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 0x21 0xEC CALL 0xDB 0xEA 0x5E SWAP12 0xC0 SGT 0x27 PREVRANDAO 0xE6 SUB SHL 0xB9 EXTCODESIZE DUP9 DUP1 NOT DIV 0xAB SWAP9 AND 0x1F 0x4E ADD 0x2E MLOAD LT PUSH23 0x3064736F6C634300081200330000000000000000000000 ",
							"sourceMap": "215:1047:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 215,
									"end": 1262,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d721ecf1dbea5e9bc0132744e6031bb93b88801904ab98161f4e012e5110763064736f6c63430008120033",
									".code": [
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 215,
											"end": 1262,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"IConstantFlowAgreementV1": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_NEGATIVE_ALLOWANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_CREATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_FLOW_OPERATOR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_UPDATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_UNCLEAN_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_DEPOSIT_TOO_BIG",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_RATE_TOO_BIG",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_HOOK_OUT_OF_GAS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_INVALID_FLOW_RATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NON_CRITICAL_SENDER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NO_SELF_FLOW",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ZERO_ADDRESS_RECEIVER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ZERO_ADDRESS_SENDER",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"name": "FlowOperatorUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "totalSenderFlowRate",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "totalReceiverFlowRate",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "FlowUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"name": "FlowUpdatedExtension",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "agreementType",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "authorizeFlowOperatorWithFullControl",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "createFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "createFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "subtractedFlowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "decreaseFlowRateAllowance",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "deleteFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "deleteFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountFlowInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"name": "getDepositRequiredForFlowRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "getFlow",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								}
							],
							"name": "getFlowByID",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								}
							],
							"name": "getFlowOperatorData",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "flowOperatorId",
									"type": "bytes32"
								},
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "flowOperatorId",
									"type": "bytes32"
								}
							],
							"name": "getFlowOperatorDataByID",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"name": "getMaximumFlowRateFromDeposit",
							"outputs": [
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getNetFlow",
							"outputs": [
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "addedFlowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "increaseFlowRateAllowance",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isPatricianPeriod",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isPatricianPeriodNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCurrentlyPatricianPeriod",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "dynamicBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "revokeFlowOperatorWithFullControl",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlowOperatorPermissions",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"FlowOperatorUpdated(address,address,address,uint8,int96)": {
								"details": "Flow operator updated event",
								"params": {
									"flowOperator": "Flow operator address",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "Octo bitmask representation of permissions",
									"sender": "Flow sender address",
									"token": "Super token address"
								}
							},
							"FlowUpdated(address,address,address,int96,int256,int256,bytes)": {
								"details": "Flow updated event",
								"params": {
									"flowRate": "Flow rate in amount per second for this flow",
									"receiver": "Flow recipient address",
									"sender": "Flow sender address",
									"token": "Super token address",
									"totalReceiverFlowRate": "Total flow rate in amount per second for the receiver",
									"totalSenderFlowRate": "Total flow rate in amount per second for the sender",
									"userData": "The user provided data"
								}
							},
							"FlowUpdatedExtension(address,uint256)": {
								"details": "Flow updated extension event",
								"params": {
									"deposit": "The deposit amount for the stream",
									"flowOperator": "Flow operator address - the Context.msgSender"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"agreementType()": {
								"details": "ISuperAgreement.agreementType implementation"
							},
							"authorizeFlowOperatorWithFullControl(address,address,bytes)": {
								"details": "msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								}
							},
							"createFlow(address,address,int96,bytes)": {
								"custom:callbacks": " - AgreementCreated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - A deposit is taken as safety margin for the solvency agents - A extra gas fee may be taken to pay for solvency agent liquidations",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"createFlowByOperator(address,address,address,int96,bytes)": {
								"details": "A flow created by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"sender": "Flow sender address (has granted permissions)",
									"token": "Super token address"
								}
							},
							"decreaseFlowRateAllowance(address,address,int96,bytes)": {
								"details": "msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"subtractedFlowRateAllowance": "The flow rate allowance delta",
									"token": "Super token address"
								},
								"returns": {
									"newCtx": "The new context bytes"
								}
							},
							"deleteFlow(address,address,address,bytes)": {
								"custom:callbacks": " - AgreementTerminated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - Both flow sender and receiver may delete the flow - If Sender account is insolvent or in critical state, a solvency agent may   also terminate the agreement - Gas fee may be returned to the sender",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"deleteFlowByOperator(address,address,address,bytes)": {
								"details": "A flow deleted by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"getAccountFlowInfo(address,address)": {
								"details": "Get the aggregated flow info of the account",
								"params": {
									"account": "Account for the query",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The sum of all deposits for account's flows",
									"flowRate": "The net flow rate of token for account",
									"owedDeposit": "The sum of all owed deposits for account's flows",
									"timestamp": "Timestamp of when a flow was last updated for account"
								}
							},
							"getDepositRequiredForFlowRate(address,int96)": {
								"custom:note": " - if calculated deposit (flowRate * liquidationPeriod) is less   than the minimum deposit, we use the minimum deposit otherwise   we use the calculated deposit",
								"details": "Calculates the deposit based on the liquidationPeriod and flowRate",
								"params": {
									"flowRate": "Flow rate to be tested"
								},
								"returns": {
									"deposit": "The deposit amount based on flowRate and liquidationPeriod"
								}
							},
							"getFlow(address,address,address)": {
								"details": "Get the flow data between `sender` and `receiver` of `token`",
								"params": {
									"receiver": "Flow sender",
									"sender": "Flow receiver",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The amount of deposit the flow",
									"flowRate": "The flow rate",
									"owedDeposit": "The amount of owed deposit of the flow",
									"timestamp": "Timestamp of when the flow is updated"
								}
							},
							"getFlowByID(address,bytes32)": {
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"agreementId": "The agreement ID",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The deposit amount of the flow",
									"flowRate": "The flow rate",
									"owedDeposit": "The owed deposit amount of the flow",
									"timestamp": "Timestamp of when the flow is updated"
								}
							},
							"getFlowOperatorData(address,address,address)": {
								"params": {
									"flowOperator": "The permission grantee address",
									"sender": "The permission granter address",
									"token": "Super token address"
								},
								"returns": {
									"flowOperatorId": "The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions"
								}
							},
							"getFlowOperatorDataByID(address,bytes32)": {
								"params": {
									"flowOperatorId": "The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator",
									"token": "Super token address"
								},
								"returns": {
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions"
								}
							},
							"getMaximumFlowRateFromDeposit(address,uint256)": {
								"details": "The deposit is clipped and rounded down",
								"params": {
									"deposit": "Deposit amount used for creating the flow"
								},
								"returns": {
									"flowRate": "The maximum flow rate"
								}
							},
							"getNetFlow(address,address)": {
								"details": "Get the net flow rate of the account",
								"params": {
									"account": "Account for the query",
									"token": "Super token address"
								},
								"returns": {
									"flowRate": "Net flow rate"
								}
							},
							"increaseFlowRateAllowance(address,address,int96,bytes)": {
								"details": "if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE",
								"params": {
									"addedFlowRateAllowance": "The flow rate allowance delta",
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								},
								"returns": {
									"newCtx": "The new context bytes"
								}
							},
							"isPatricianPeriod(address,address,uint256)": {
								"details": "Returns whether it is the patrician period based on timestamp",
								"params": {
									"account": "The account we are interested in",
									"timestamp": "The timestamp we are interested in observing the result of isPatricianPeriod"
								},
								"returns": {
									"_0": "bool Whether it is currently the patrician period dictated by governance"
								}
							},
							"isPatricianPeriodNow(address,address)": {
								"details": "Returns whether it is the patrician period based on host.getNow()",
								"params": {
									"account": "The account we are interested in"
								},
								"returns": {
									"isCurrentlyPatricianPeriod": "Whether it is currently the patrician period dictated by governance",
									"timestamp": "The value of host.getNow()"
								}
							},
							"realtimeBalanceOf(address,address,uint256)": {
								"details": "Calculate the real-time balance for the account of this agreement class",
								"params": {
									"account": "Account the state belongs to",
									"time": "Time used for the calculation"
								},
								"returns": {
									"deposit": "Account deposit amount of this agreement",
									"dynamicBalance": "Dynamic balance portion of real-time balance of this agreement",
									"owedDeposit": "Account owed deposit amount of this agreement"
								}
							},
							"revokeFlowOperatorWithFullControl(address,address,bytes)": {
								"details": "`permissions` and `flowRateAllowance` will both be set to 0",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								}
							},
							"updateFlow(address,address,int96,bytes)": {
								"custom:callbacks": " - AgreementUpdated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - Only the flow sender may update the flow rate - Even if the flow rate is zero, the flow is not deleted from the system - Deposit amount will be adjusted accordingly - No new gas fee is charged",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"updateFlowByOperator(address,address,address,int96,bytes)": {
								"details": "A flow updated by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"sender": "Flow sender address (has granted permissions)",
									"token": "Super token address"
								}
							},
							"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)": {
								"details": "msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions",
									"token": "Super token address"
								}
							}
						},
						"title": "Constant Flow Agreement interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"agreementType()": "7730599e",
							"authorizeFlowOperatorWithFullControl(address,address,bytes)": "54b770e3",
							"createFlow(address,address,int96,bytes)": "62fc305e",
							"createFlowByOperator(address,address,address,int96,bytes)": "94229ecb",
							"decreaseFlowRateAllowance(address,address,int96,bytes)": "5f51fb23",
							"deleteFlow(address,address,address,bytes)": "b4b333c6",
							"deleteFlowByOperator(address,address,address,bytes)": "4c8b181f",
							"getAccountFlowInfo(address,address)": "0f1ac495",
							"getDepositRequiredForFlowRate(address,int96)": "8d997f6e",
							"getFlow(address,address,address)": "e6a1e888",
							"getFlowByID(address,bytes32)": "aabd2668",
							"getFlowOperatorData(address,address,address)": "00422bbe",
							"getFlowOperatorDataByID(address,bytes32)": "09d256ef",
							"getMaximumFlowRateFromDeposit(address,uint256)": "0602f7db",
							"getNetFlow(address,address)": "e8e7e2d1",
							"increaseFlowRateAllowance(address,address,int96,bytes)": "ac5f5d00",
							"isPatricianPeriod(address,address,uint256)": "4b839e0b",
							"isPatricianPeriodNow(address,address)": "4fe9c291",
							"realtimeBalanceOf(address,address,uint256)": "9b2e48bc",
							"revokeFlowOperatorWithFullControl(address,address,bytes)": "062e56ec",
							"updateFlow(address,address,int96,bytes)": "50209a62",
							"updateFlowByOperator(address,address,address,int96,bytes)": "354b9590",
							"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)": "811b3d40"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_CREATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_FLOW_OPERATOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_UPDATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_UNCLEAN_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_DEPOSIT_TOO_BIG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_RATE_TOO_BIG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_HOOK_OUT_OF_GAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_INVALID_FLOW_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NON_CRITICAL_SENDER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NO_SELF_FLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ZERO_ADDRESS_RECEIVER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ZERO_ADDRESS_SENDER\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"name\":\"FlowOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalSenderFlowRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalReceiverFlowRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"FlowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"FlowUpdatedExtension\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agreementType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"authorizeFlowOperatorWithFullControl\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"createFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"createFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"subtractedFlowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"decreaseFlowRateAllowance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"deleteFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"deleteFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountFlowInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"name\":\"getDepositRequiredForFlowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getFlow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getFlowByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"}],\"name\":\"getFlowOperatorData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"flowOperatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"flowOperatorId\",\"type\":\"bytes32\"}],\"name\":\"getFlowOperatorDataByID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getMaximumFlowRateFromDeposit\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNetFlow\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"addedFlowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"increaseFlowRateAllowance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isPatricianPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPatricianPeriodNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCurrentlyPatricianPeriod\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"dynamicBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"revokeFlowOperatorWithFullControl\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlowOperatorPermissions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"FlowOperatorUpdated(address,address,address,uint8,int96)\":{\"details\":\"Flow operator updated event\",\"params\":{\"flowOperator\":\"Flow operator address\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"Octo bitmask representation of permissions\",\"sender\":\"Flow sender address\",\"token\":\"Super token address\"}},\"FlowUpdated(address,address,address,int96,int256,int256,bytes)\":{\"details\":\"Flow updated event\",\"params\":{\"flowRate\":\"Flow rate in amount per second for this flow\",\"receiver\":\"Flow recipient address\",\"sender\":\"Flow sender address\",\"token\":\"Super token address\",\"totalReceiverFlowRate\":\"Total flow rate in amount per second for the receiver\",\"totalSenderFlowRate\":\"Total flow rate in amount per second for the sender\",\"userData\":\"The user provided data\"}},\"FlowUpdatedExtension(address,uint256)\":{\"details\":\"Flow updated extension event\",\"params\":{\"deposit\":\"The deposit amount for the stream\",\"flowOperator\":\"Flow operator address - the Context.msgSender\"}}},\"kind\":\"dev\",\"methods\":{\"agreementType()\":{\"details\":\"ISuperAgreement.agreementType implementation\"},\"authorizeFlowOperatorWithFullControl(address,address,bytes)\":{\"details\":\"msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"}},\"createFlow(address,address,int96,bytes)\":{\"custom:callbacks\":\" - AgreementCreated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - A deposit is taken as safety margin for the solvency agents - A extra gas fee may be taken to pay for solvency agent liquidations\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"createFlowByOperator(address,address,address,int96,bytes)\":{\"details\":\"A flow created by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"sender\":\"Flow sender address (has granted permissions)\",\"token\":\"Super token address\"}},\"decreaseFlowRateAllowance(address,address,int96,bytes)\":{\"details\":\"msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"subtractedFlowRateAllowance\":\"The flow rate allowance delta\",\"token\":\"Super token address\"},\"returns\":{\"newCtx\":\"The new context bytes\"}},\"deleteFlow(address,address,address,bytes)\":{\"custom:callbacks\":\" - AgreementTerminated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - Both flow sender and receiver may delete the flow - If Sender account is insolvent or in critical state, a solvency agent may   also terminate the agreement - Gas fee may be returned to the sender\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"deleteFlowByOperator(address,address,address,bytes)\":{\"details\":\"A flow deleted by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"getAccountFlowInfo(address,address)\":{\"details\":\"Get the aggregated flow info of the account\",\"params\":{\"account\":\"Account for the query\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The sum of all deposits for account's flows\",\"flowRate\":\"The net flow rate of token for account\",\"owedDeposit\":\"The sum of all owed deposits for account's flows\",\"timestamp\":\"Timestamp of when a flow was last updated for account\"}},\"getDepositRequiredForFlowRate(address,int96)\":{\"custom:note\":\" - if calculated deposit (flowRate * liquidationPeriod) is less   than the minimum deposit, we use the minimum deposit otherwise   we use the calculated deposit\",\"details\":\"Calculates the deposit based on the liquidationPeriod and flowRate\",\"params\":{\"flowRate\":\"Flow rate to be tested\"},\"returns\":{\"deposit\":\"The deposit amount based on flowRate and liquidationPeriod\"}},\"getFlow(address,address,address)\":{\"details\":\"Get the flow data between `sender` and `receiver` of `token`\",\"params\":{\"receiver\":\"Flow sender\",\"sender\":\"Flow receiver\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The amount of deposit the flow\",\"flowRate\":\"The flow rate\",\"owedDeposit\":\"The amount of owed deposit of the flow\",\"timestamp\":\"Timestamp of when the flow is updated\"}},\"getFlowByID(address,bytes32)\":{\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"agreementId\":\"The agreement ID\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The deposit amount of the flow\",\"flowRate\":\"The flow rate\",\"owedDeposit\":\"The owed deposit amount of the flow\",\"timestamp\":\"Timestamp of when the flow is updated\"}},\"getFlowOperatorData(address,address,address)\":{\"params\":{\"flowOperator\":\"The permission grantee address\",\"sender\":\"The permission granter address\",\"token\":\"Super token address\"},\"returns\":{\"flowOperatorId\":\"The keccak256 hash of encoded string \\\"flowOperator\\\", sender and flowOperator\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\"}},\"getFlowOperatorDataByID(address,bytes32)\":{\"params\":{\"flowOperatorId\":\"The keccak256 hash of encoded string \\\"flowOperator\\\", sender and flowOperator\",\"token\":\"Super token address\"},\"returns\":{\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\"}},\"getMaximumFlowRateFromDeposit(address,uint256)\":{\"details\":\"The deposit is clipped and rounded down\",\"params\":{\"deposit\":\"Deposit amount used for creating the flow\"},\"returns\":{\"flowRate\":\"The maximum flow rate\"}},\"getNetFlow(address,address)\":{\"details\":\"Get the net flow rate of the account\",\"params\":{\"account\":\"Account for the query\",\"token\":\"Super token address\"},\"returns\":{\"flowRate\":\"Net flow rate\"}},\"increaseFlowRateAllowance(address,address,int96,bytes)\":{\"details\":\"if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"params\":{\"addedFlowRateAllowance\":\"The flow rate allowance delta\",\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"},\"returns\":{\"newCtx\":\"The new context bytes\"}},\"isPatricianPeriod(address,address,uint256)\":{\"details\":\"Returns whether it is the patrician period based on timestamp\",\"params\":{\"account\":\"The account we are interested in\",\"timestamp\":\"The timestamp we are interested in observing the result of isPatricianPeriod\"},\"returns\":{\"_0\":\"bool Whether it is currently the patrician period dictated by governance\"}},\"isPatricianPeriodNow(address,address)\":{\"details\":\"Returns whether it is the patrician period based on host.getNow()\",\"params\":{\"account\":\"The account we are interested in\"},\"returns\":{\"isCurrentlyPatricianPeriod\":\"Whether it is currently the patrician period dictated by governance\",\"timestamp\":\"The value of host.getNow()\"}},\"realtimeBalanceOf(address,address,uint256)\":{\"details\":\"Calculate the real-time balance for the account of this agreement class\",\"params\":{\"account\":\"Account the state belongs to\",\"time\":\"Time used for the calculation\"},\"returns\":{\"deposit\":\"Account deposit amount of this agreement\",\"dynamicBalance\":\"Dynamic balance portion of real-time balance of this agreement\",\"owedDeposit\":\"Account owed deposit amount of this agreement\"}},\"revokeFlowOperatorWithFullControl(address,address,bytes)\":{\"details\":\"`permissions` and `flowRateAllowance` will both be set to 0\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"}},\"updateFlow(address,address,int96,bytes)\":{\"custom:callbacks\":\" - AgreementUpdated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - Only the flow sender may update the flow rate - Even if the flow rate is zero, the flow is not deleted from the system - Deposit amount will be adjusted accordingly - No new gas fee is charged\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"updateFlowByOperator(address,address,address,int96,bytes)\":{\"details\":\"A flow updated by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"sender\":\"Flow sender address (has granted permissions)\",\"token\":\"Super token address\"}},\"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)\":{\"details\":\"msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\",\"token\":\"Super token address\"}}},\"title\":\"Constant Flow Agreement interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createFlow(address,address,int96,bytes)\":{\"notice\":\"Create a flow betwen ctx.msgSender and receiver\"},\"createFlowByOperator(address,address,address,int96,bytes)\":{\"notice\":\"Create a flow between sender and receiver\"},\"deleteFlow(address,address,address,bytes)\":{\"notice\":\"Delete the flow between sender and receiver\"},\"deleteFlowByOperator(address,address,address,bytes)\":{\"notice\":\"Delete the flow between sender and receiver\"},\"getDepositRequiredForFlowRate(address,int96)\":{\"notice\":\"Get the deposit required for creating the flow\"},\"getFlowByID(address,bytes32)\":{\"notice\":\"Get flow data using agreementId\"},\"getFlowOperatorData(address,address,address)\":{\"notice\":\"Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\"},\"getFlowOperatorDataByID(address,bytes32)\":{\"notice\":\"Get flow operator using flowOperatorId\"},\"getMaximumFlowRateFromDeposit(address,uint256)\":{\"notice\":\"Get the maximum flow rate allowed with the deposit\"},\"increaseFlowRateAllowance(address,address,int96,bytes)\":{\"notice\":\"msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\"},\"revokeFlowOperatorWithFullControl(address,address,bytes)\":{\"notice\":\"msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\"},\"updateFlow(address,address,int96,bytes)\":{\"notice\":\"Update the flow rate between ctx.msgSender and receiver\"},\"updateFlowByOperator(address,address,address,int96,bytes)\":{\"notice\":\"Update a flow between sender and receiver\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":\"IConstantFlowAgreementV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0x8a191d6f5dcdfd97e8fbbe17382fa96f51dbaddea6ed704206e7cbda5d12cc65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5bed573cf54d2406d0e7566ab6cd37c31025c6fab3b5b8d8ef9b79b1cab098fd\",\"dweb:/ipfs/QmegphCXp9qTAvefUYyW8eGdaGQMLJ4JrEXELU7WhisRcS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createFlow(address,address,int96,bytes)": {
								"notice": "Create a flow betwen ctx.msgSender and receiver"
							},
							"createFlowByOperator(address,address,address,int96,bytes)": {
								"notice": "Create a flow between sender and receiver"
							},
							"deleteFlow(address,address,address,bytes)": {
								"notice": "Delete the flow between sender and receiver"
							},
							"deleteFlowByOperator(address,address,address,bytes)": {
								"notice": "Delete the flow between sender and receiver"
							},
							"getDepositRequiredForFlowRate(address,int96)": {
								"notice": "Get the deposit required for creating the flow"
							},
							"getFlowByID(address,bytes32)": {
								"notice": "Get flow data using agreementId"
							},
							"getFlowOperatorData(address,address,address)": {
								"notice": "Get the permissions of a flow operator between `sender` and `flowOperator` for `token`"
							},
							"getFlowOperatorDataByID(address,bytes32)": {
								"notice": "Get flow operator using flowOperatorId"
							},
							"getMaximumFlowRateFromDeposit(address,uint256)": {
								"notice": "Get the maximum flow rate allowed with the deposit"
							},
							"increaseFlowRateAllowance(address,address,int96,bytes)": {
								"notice": "msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`"
							},
							"revokeFlowOperatorWithFullControl(address,address,bytes)": {
								"notice": "msgSender from `ctx` revokes `flowOperator` create/update/delete permissions"
							},
							"updateFlow(address,address,int96,bytes)": {
								"notice": "Update the flow rate between ctx.msgSender and receiver"
							},
							"updateFlowByOperator(address,address,address,int96,bytes)": {
								"notice": "Update a flow between sender and receiver"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
				"BatchOperation": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"OPERATION_TYPE_ERC20_APPROVE": {
								"details": "ERC20.approve batch operation type Call spec: ISuperToken(target).operationApprove(     abi.decode(data, (address spender, uint256 amount)) )"
							},
							"OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE": {
								"details": "ERC20.decreaseAllowance batch operation type Call spec: ISuperToken(target).operationDecreaseAllowance(     abi.decode(data, (address account, address spender, uint256 subtractedValue)) )"
							},
							"OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE": {
								"details": "ERC20.increaseAllowance batch operation type Call spec: ISuperToken(target).operationIncreaseAllowance(     abi.decode(data, (address account, address spender, uint256 addedValue)) )"
							},
							"OPERATION_TYPE_ERC20_TRANSFER_FROM": {
								"details": "ERC20.transferFrom batch operation type Call spec: ISuperToken(target).operationTransferFrom(     abi.decode(data, (address sender, address recipient, uint256 amount) )"
							},
							"OPERATION_TYPE_ERC777_SEND": {
								"details": "ERC777.send batch operation type Call spec: ISuperToken(target).operationSend(     abi.decode(data, (address recipient, uint256 amount, bytes userData) )"
							},
							"OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT": {
								"details": "Superfluid.callAgreement batch operation type Call spec: callAgreement(     ISuperAgreement(target)),     abi.decode(data, (bytes callData, bytes userData) )"
							},
							"OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION": {
								"details": "Superfluid.callAppAction batch operation type Call spec: callAppAction(     ISuperApp(target)),     data )"
							},
							"OPERATION_TYPE_SUPERTOKEN_DOWNGRADE": {
								"details": "SuperToken.downgrade batch operation type Call spec: ISuperToken(target).operationDowngrade(     abi.decode(data, (uint256 amount) )"
							},
							"OPERATION_TYPE_SUPERTOKEN_UPGRADE": {
								"details": "SuperToken.upgrade batch operation type Call spec: ISuperToken(target).operationUpgrade(     abi.decode(data, (uint256 amount) )"
							}
						},
						"title": "Batch operation library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":5645:8269  library BatchOperation {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":5645:8269  library BatchOperation {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220beaa9a8866d7301ea014956be96ff8f813e463a081da02869dd55f588ee7e20664736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220beaa9a8866d7301ea014956be96ff8f813e463a081da02869dd55f588ee7e20664736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xAA SWAP11 DUP9 PUSH7 0xD7301EA014956B 0xE9 PUSH16 0xF8F813E463A081DA02869DD55F588EE7 0xE2 MOD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "5645:2624:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220beaa9a8866d7301ea014956be96ff8f813e463a081da02869dd55f588ee7e20664736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0xAA SWAP11 DUP9 PUSH7 0xD7301EA014956B 0xE9 PUSH16 0xF8F813E463A081DA02869DD55F588EE7 0xE2 MOD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "5645:2624:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220beaa9a8866d7301ea014956be96ff8f813e463a081da02869dd55f588ee7e20664736f6c63430008120033",
									".code": [
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OPERATION_TYPE_ERC20_APPROVE\":{\"details\":\"ERC20.approve batch operation type Call spec: ISuperToken(target).operationApprove(     abi.decode(data, (address spender, uint256 amount)) )\"},\"OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE\":{\"details\":\"ERC20.decreaseAllowance batch operation type Call spec: ISuperToken(target).operationDecreaseAllowance(     abi.decode(data, (address account, address spender, uint256 subtractedValue)) )\"},\"OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE\":{\"details\":\"ERC20.increaseAllowance batch operation type Call spec: ISuperToken(target).operationIncreaseAllowance(     abi.decode(data, (address account, address spender, uint256 addedValue)) )\"},\"OPERATION_TYPE_ERC20_TRANSFER_FROM\":{\"details\":\"ERC20.transferFrom batch operation type Call spec: ISuperToken(target).operationTransferFrom(     abi.decode(data, (address sender, address recipient, uint256 amount) )\"},\"OPERATION_TYPE_ERC777_SEND\":{\"details\":\"ERC777.send batch operation type Call spec: ISuperToken(target).operationSend(     abi.decode(data, (address recipient, uint256 amount, bytes userData) )\"},\"OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT\":{\"details\":\"Superfluid.callAgreement batch operation type Call spec: callAgreement(     ISuperAgreement(target)),     abi.decode(data, (bytes callData, bytes userData) )\"},\"OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION\":{\"details\":\"Superfluid.callAppAction batch operation type Call spec: callAppAction(     ISuperApp(target)),     data )\"},\"OPERATION_TYPE_SUPERTOKEN_DOWNGRADE\":{\"details\":\"SuperToken.downgrade batch operation type Call spec: ISuperToken(target).operationDowngrade(     abi.decode(data, (uint256 amount) )\"},\"OPERATION_TYPE_SUPERTOKEN_UPGRADE\":{\"details\":\"SuperToken.upgrade batch operation type Call spec: ISuperToken(target).operationUpgrade(     abi.decode(data, (uint256 amount) )\"}},\"title\":\"Batch operation library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"BatchOperation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ContextDefinitions": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Context definitions library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":3371:4559  library ContextDefinitions {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":3371:4559  library ContextDefinitions {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220eab70834a0c7fa0750378591cba57a105d866a545703363a2b3fc1757ff739f964736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eab70834a0c7fa0750378591cba57a105d866a545703363a2b3fc1757ff739f964736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xB7 ADDMOD CALLVALUE LOG0 0xC7 STATICCALL SMOD POP CALLDATACOPY DUP6 SWAP2 0xCB 0xA5 PUSH27 0x105D866A545703363A2B3FC1757FF739F964736F6C634300081200 CALLER ",
							"sourceMap": "3371:1188:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eab70834a0c7fa0750378591cba57a105d866a545703363a2b3fc1757ff739f964736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA 0xB7 ADDMOD CALLVALUE LOG0 0xC7 STATICCALL SMOD POP CALLDATACOPY DUP6 SWAP2 0xCB 0xA5 PUSH27 0x105D866A545703363A2B3FC1757FF739F964736F6C634300081200 CALLER ",
							"sourceMap": "3371:1188:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodeCallInfo(uint256)": "infinite",
								"encodeCallInfo(uint8,uint8)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220eab70834a0c7fa0750378591cba57a105d866a545703363a2b3fc1757ff739f964736f6c63430008120033",
									".code": [
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Context definitions library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"ContextDefinitions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"FlowOperatorDefinitions": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Flow Operator definitions library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":4637:5579  library FlowOperatorDefinitions {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":4637:5579  library FlowOperatorDefinitions {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122085a5da62f0bc2eb0cf23469634f747e5308a09b75ec247988224770469d58ff464736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085a5da62f0bc2eb0cf23469634f747e5308a09b75ec247988224770469d58ff464736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xA5 0xDA PUSH3 0xF0BC2E 0xB0 0xCF 0x23 CHAINID SWAP7 CALLVALUE 0xF7 SELFBALANCE 0xE5 ADDRESS DUP11 MULMOD 0xB7 0x5E 0xC2 SELFBALANCE SWAP9 DUP3 0x24 PUSH24 0x469D58FF464736F6C634300081200330000000000000000 ",
							"sourceMap": "4637:942:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085a5da62f0bc2eb0cf23469634f747e5308a09b75ec247988224770469d58ff464736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xA5 0xDA PUSH3 0xF0BC2E 0xB0 0xCF 0x23 CHAINID SWAP7 CALLVALUE 0xF7 SELFBALANCE 0xE5 ADDRESS DUP11 MULMOD 0xB7 0x5E 0xC2 SELFBALANCE SWAP9 DUP3 0x24 PUSH24 0x469D58FF464736F6C634300081200330000000000000000 ",
							"sourceMap": "4637:942:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"isPermissionsClean(uint8)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122085a5da62f0bc2eb0cf23469634f747e5308a09b75ec247988224770469d58ff464736f6c63430008120033",
									".code": [
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Flow Operator definitions library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"FlowOperatorDefinitions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SuperAppDefinitions": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Super app definitions library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":129:3301  library SuperAppDefinitions {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":129:3301  library SuperAppDefinitions {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122028ff714257ac995c927ae06394822937cf49747df4d067b18794e77c69826e6d64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028ff714257ac995c927ae06394822937cf49747df4d067b18794e77c69826e6d64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 SELFDESTRUCT PUSH18 0x4257AC995C927AE06394822937CF49747DF4 0xD0 PUSH8 0xB18794E77C69826E PUSH14 0x64736F6C63430008120033000000 ",
							"sourceMap": "129:3172:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028ff714257ac995c927ae06394822937cf49747df4d067b18794e77c69826e6d64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 SELFDESTRUCT PUSH18 0x4257AC995C927AE06394822937CF49747DF4 0xD0 PUSH8 0xB18794E77C69826E PUSH14 0x64736F6C63430008120033000000 ",
							"sourceMap": "129:3172:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getAppCallbackLevel(uint256)": "infinite",
								"isAppJailed(uint256)": "infinite",
								"isConfigWordClean(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122028ff714257ac995c927ae06394822937cf49747df4d067b18794e77c69826e6d64736f6c63430008120033",
									".code": [
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Super app definitions library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"SuperAppDefinitions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SuperfluidGovernanceConfigs": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Superfluid governance configs library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":8349:9864  library SuperfluidGovernanceConfigs {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":8349:9864  library SuperfluidGovernanceConfigs {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212204c7b0f15b9854dcf36fbf02472684c385762acde095be0e6676f0fb43614ba7c64736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204c7b0f15b9854dcf36fbf02472684c385762acde095be0e6676f0fb43614ba7c64736f6c63430008120033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C PUSH28 0xF15B9854DCF36FBF02472684C385762ACDE095BE0E6676F0FB43614 0xBA PUSH29 0x64736F6C63430008120033000000000000000000000000000000000000 ",
							"sourceMap": "8349:1515:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204c7b0f15b9854dcf36fbf02472684c385762acde095be0e6676f0fb43614ba7c64736f6c63430008120033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C PUSH28 0xF15B9854DCF36FBF02472684C385762ACDE095BE0E6676F0FB43614 0xBA PUSH29 0x64736F6C63430008120033000000000000000000000000000000000000 ",
							"sourceMap": "8349:1515:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodePPPConfig(uint256)": "infinite",
								"getAppFactoryConfigKey(address)": "infinite",
								"getAppRegistrationConfigKey(address,string memory)": "infinite",
								"getTrustedForwarderConfigKey(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204c7b0f15b9854dcf36fbf02472684c385762acde095be0e6676f0fb43614ba7c64736f6c63430008120033",
									".code": [
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Superfluid governance configs library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"SuperfluidGovernanceConfigs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"IConstantInflowNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CIF_NFT_ONLY_CONSTANT_OUTFLOW",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "newTokenId",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"details": "We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.",
								"params": {
									"tokenId": "desired token id to burn"
								}
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint(address,uint256)": {
								"details": "We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.",
								"params": {
									"newTokenId": "the new token id",
									"to": "the flow receiver (inflow NFT receiver)"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CIF_NFT_ONLY_CONSTANT_OUTFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"details\":\"We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.\",\"params\":{\"tokenId\":\"desired token id to burn\"}},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint(address,uint256)\":{\"details\":\"We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.\",\"params\":{\"newTokenId\":\"the new token id\",\"to\":\"the flow receiver (inflow NFT receiver)\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"This burn function emits the \\\"burn\\\" `Transfer` event.\"},\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"mint(address,uint256)\":{\"notice\":\"The mint function emits the \\\"mint\\\" `Transfer` event.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":\"IConstantInflowNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "This burn function emits the \"burn\" `Transfer` event."
							},
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							},
							"mint(address,uint256)": {
								"notice": "The mint function emits the \"mint\" `Transfer` event."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"IConstantOutflowNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_INVALID_SUPER_TOKEN",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_ONLY_CONSTANT_INFLOW",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_TOKEN_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onCreate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onDelete",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"onCreate(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"onDelete(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"onUpdate(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"onCreate(address,address,address)": "f7e3d983",
							"onDelete(address,address,address)": "ef1f0237",
							"onUpdate(address,address,address)": "eb54a7ca",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_INVALID_SUPER_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_CONSTANT_INFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_FLOW_AGREEMENTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_TOKEN_ALREADY_EXISTS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onDelete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"onCreate(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"onDelete(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"onUpdate(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"onCreate(address,address,address)\":{\"notice\":\"The onCreate function is called when a new flow is created.\"},\"onDelete(address,address,address)\":{\"notice\":\"The onDelete function is called when a flow is deleted.\"},\"onUpdate(address,address,address)\":{\"notice\":\"The onUpdate function is called when a flow is updated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":\"IConstantOutflowNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							},
							"onCreate(address,address,address)": {
								"notice": "The onCreate function is called when a new flow is created."
							},
							"onDelete(address,address,address)": {
								"notice": "The onDelete function is called when a flow is deleted."
							},
							"onUpdate(address,address,address)": {
								"notice": "The onUpdate function is called when a flow is updated."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"IFlowNFTBase": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":\"IFlowNFTBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
				"IPoolAdminNFT": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":\"IPoolAdminNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
				"IPoolMemberNFT": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":\"IPoolMemberNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ISuperAgreement": {
					"abi": [
						{
							"inputs": [],
							"name": "agreementType",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "dynamicBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {
							"agreementType()": {
								"details": "Get the type of the agreement class"
							},
							"realtimeBalanceOf(address,address,uint256)": {
								"details": "Calculate the real-time balance for the account of this agreement class",
								"params": {
									"account": "Account the state belongs to",
									"time": "Time used for the calculation"
								},
								"returns": {
									"deposit": "Account deposit amount of this agreement",
									"dynamicBalance": "Dynamic balance portion of real-time balance of this agreement",
									"owedDeposit": "Account owed deposit amount of this agreement"
								}
							}
						},
						"title": "Super agreement interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"agreementType()": "7730599e",
							"realtimeBalanceOf(address,address,uint256)": "9b2e48bc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"agreementType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"dynamicBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{\"agreementType()\":{\"details\":\"Get the type of the agreement class\"},\"realtimeBalanceOf(address,address,uint256)\":{\"details\":\"Calculate the real-time balance for the account of this agreement class\",\"params\":{\"account\":\"Account the state belongs to\",\"time\":\"Time used for the calculation\"},\"returns\":{\"deposit\":\"Account deposit amount of this agreement\",\"dynamicBalance\":\"Dynamic balance portion of real-time balance of this agreement\",\"owedDeposit\":\"Account owed deposit amount of this agreement\"}}},\"title\":\"Super agreement interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":\"ISuperAgreement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
				"ISuperApp": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "afterAgreementCreated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "afterAgreementTerminated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "afterAgreementUpdated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "beforeAgreementCreated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "beforeAgreementTerminated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "beforeAgreementUpdated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"details": "Be aware of the app being jailed, when the word permitted is used.",
						"kind": "dev",
						"methods": {
							"afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": {
								"custom:note": " - State changes is permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback after a new agreement is created.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"cbdata": "The data returned from the before-hook callback.",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"newCtx": "The current context of the transaction."
								}
							},
							"afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": {
								"custom:note": " - State changes is permitted. - Revert is not permitted.",
								"details": "Callback after a new agreement is terminated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"cbdata": "The data returned from the before-hook callback.",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"newCtx": "The current context of the transaction."
								}
							},
							"afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": {
								"custom:note": " - State changes is permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback after a new agreement is updated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"cbdata": "The data returned from the before-hook callback.",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"newCtx": "The current context of the transaction."
								}
							},
							"beforeAgreementCreated(address,address,bytes32,bytes,bytes)": {
								"custom:note": " - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback before a new agreement is created.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"cbdata": "A free format in memory data the app can use to pass          arbitary information to the after-hook callback."
								}
							},
							"beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": {
								"custom:note": " - It will be invoked with `staticcall`, no state changes are permitted. - Revert is not permitted.",
								"details": "Callback before a new agreement is terminated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"cbdata": "A free format in memory data the app can use to pass arbitary information to         the after-hook callback."
								}
							},
							"beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": {
								"custom:note": " - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback before a new agreement is updated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"cbdata": "A free format in memory data the app can use to pass          arbitary information to the after-hook callback."
								}
							}
						},
						"title": "SuperApp interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": "d86ed3e5",
							"afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": "53c11f99",
							"afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": "230dbd29",
							"beforeAgreementCreated(address,address,bytes32,bytes,bytes)": "30d9c915",
							"beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": "5f9e7d77",
							"beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": "884d1f40"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"Be aware of the app being jailed, when the word permitted is used.\",\"kind\":\"dev\",\"methods\":{\"afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)\":{\"custom:note\":\" - State changes is permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback after a new agreement is created.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"cbdata\":\"The data returned from the before-hook callback.\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"newCtx\":\"The current context of the transaction.\"}},\"afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)\":{\"custom:note\":\" - State changes is permitted. - Revert is not permitted.\",\"details\":\"Callback after a new agreement is terminated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"cbdata\":\"The data returned from the before-hook callback.\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"newCtx\":\"The current context of the transaction.\"}},\"afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)\":{\"custom:note\":\" - State changes is permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback after a new agreement is updated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"cbdata\":\"The data returned from the before-hook callback.\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"newCtx\":\"The current context of the transaction.\"}},\"beforeAgreementCreated(address,address,bytes32,bytes,bytes)\":{\"custom:note\":\" - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback before a new agreement is created.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"cbdata\":\"A free format in memory data the app can use to pass          arbitary information to the after-hook callback.\"}},\"beforeAgreementTerminated(address,address,bytes32,bytes,bytes)\":{\"custom:note\":\" - It will be invoked with `staticcall`, no state changes are permitted. - Revert is not permitted.\",\"details\":\"Callback before a new agreement is terminated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"cbdata\":\"A free format in memory data the app can use to pass arbitary information to         the after-hook callback.\"}},\"beforeAgreementUpdated(address,address,bytes32,bytes,bytes)\":{\"custom:note\":\" - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback before a new agreement is updated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"cbdata\":\"A free format in memory data the app can use to pass          arbitary information to the after-hook callback.\"}}},\"title\":\"SuperApp interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":\"ISuperApp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"ISuperToken": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_MINT_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NO_UNDERLYING_TOKEN",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_GOV_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_SELF",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "rewardAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidatedBy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "rewardAmountReceiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								}
							],
							"name": "AgreementLiquidatedV2",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								}
							],
							"name": "AgreementStateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "AgreementTerminated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "AuthorizedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "bailoutAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "Bailout",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Burned",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IConstantInflowNFT",
									"name": "constantInflowNFT",
									"type": "address"
								}
							],
							"name": "ConstantInflowNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IConstantOutflowNFT",
									"name": "constantOutflowNFT",
									"type": "address"
								}
							],
							"name": "ConstantOutflowNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Minted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "RevokedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Sent",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokenDowngraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokenUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "CONSTANT_INFLOW_NFT",
							"outputs": [
								{
									"internalType": "contract IConstantInflowNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "CONSTANT_OUTFLOW_NFT",
							"outputs": [
								{
									"internalType": "contract IConstantOutflowNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "authorizeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "createAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultOperators",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "downgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "downgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountActiveAgreements",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "activeAgreements",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementData",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementStateSlot",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getUnderlyingToken",
							"outputs": [
								{
									"internalType": "address",
									"name": "tokenAddr",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "granularity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "n",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "s",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountCritical",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountCriticalNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountSolvent",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountSolventNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "isOperatorFor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "useDefaultRewardAccount",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								}
							],
							"name": "makeLiquidationPayoutsV2",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationApprove",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "operationDecreaseAllowance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationDowngrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "operationIncreaseAllowance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "operationSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationUpgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "realtimeBalanceOfNow",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "revokeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "selfApproveFor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "selfBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "selfMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "selfTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "send",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "settleBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "terminateAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "transferAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementStateSlot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "upgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementCreated(address,bytes32,bytes32[])": {
								"details": "Agreement created event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"AgreementLiquidated(address,bytes32,address,address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAccount": "Account that collect the reward",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"custom:note": " Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"bailoutAmount": "Amount of liquidation bailouot",
									"bondAccount": "Account that collect the reward or bailout accounts",
									"id": "Agreement ID",
									"liquidatorAccount": "Account of the agent that performed the liquidation.",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": {
								"custom:note": " Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount",
								"details": "Agreement liquidation event v2 (including agent account)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"liquidationTypeData": "The encoded liquidation type data including the version (how to decode)",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the reward recipient account balance should change by",
									"rewardAmountReceiver": "Account that collects the reward or bails out insolvent accounts",
									"targetAccount": "Account of the stream sender",
									"targetAccountBalanceDelta": "The amount the sender account balance should change by"
								}
							},
							"AgreementStateUpdated(address,address,uint256)": {
								"details": "Agreement account state updated event",
								"params": {
									"account": "Account updated",
									"agreementClass": "Contract address of the agreement",
									"slotId": "slot id of the agreement state"
								}
							},
							"AgreementTerminated(address,bytes32)": {
								"details": "Agreement terminated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								}
							},
							"AgreementUpdated(address,bytes32,bytes32[])": {
								"details": "Agreement updated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"AuthorizedOperator(address,address)": {
								"details": "Emitted when `operator` is made operator for `tokenHolder`."
							},
							"Bailout(address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"bailoutAccount": "Account that bailout the penalty account",
									"bailoutAmount": "Amount of account bailout"
								}
							},
							"Burned(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"ConstantInflowNFTCreated(address)": {
								"details": "Constant Inflow NFT proxy created event",
								"params": {
									"constantInflowNFT": "constant inflow nft address"
								}
							},
							"ConstantOutflowNFTCreated(address)": {
								"details": "Constant Outflow NFT proxy created event",
								"params": {
									"constantOutflowNFT": "constant outflow nft address"
								}
							},
							"Minted(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"RevokedOperator(address,address)": {
								"details": "Emitted when `operator` is revoked its operator status for `tokenHolder`."
							},
							"TokenDowngraded(address,uint256)": {
								"details": "Token downgrade event",
								"params": {
									"account": "Account whose tokens are downgraded",
									"amount": "Amount of tokens downgraded"
								}
							},
							"TokenUpgraded(address,uint256)": {
								"details": "Token upgrade event",
								"params": {
									"account": "Account where tokens are upgraded to",
									"amount": "Amount of tokens upgraded (in 18 decimals)"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default."
							},
							"approve(address,uint256)": {
								"custom:emits": "an {Approval} event.",
								"custom:note": "Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"authorizeOperator(address)": {
								"custom:emits": "an {AuthorizedOperator} event.",
								"custom:requirements": " - `operator` cannot be calling address.",
								"details": "Make an account an operator of the caller. See {isOperatorFor}."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by an account (`owner`)."
							},
							"burn(uint256,bytes)": {
								"custom:emits": "a {Burned} event.",
								"custom:requirements": " - the caller must have at least `amount` tokens.",
								"details": "Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}."
							},
							"createAgreement(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"decimals()": {
								"custom:note": "SuperToken always uses 18 decimals. This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.",
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called."
							},
							"decreaseAllowance(address,uint256)": {
								"custom:emits": "an {Approval} event indicating the updated allowance.",
								"custom:requirements": " - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.",
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}."
							},
							"defaultOperators()": {
								"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
							},
							"downgrade(uint256)": {
								"details": "Downgrade SuperToken to ERC20.It will call transfer to send tokens",
								"params": {
									"amount": "Number of tokens to be downgraded"
								}
							},
							"downgradeTo(address,uint256)": {
								"details": "Downgrade SuperToken to ERC20 and transfer immediately",
								"params": {
									"amount": "Number of tokens to be downgraded (in 18 decimals)",
									"to": "The account to receive downgraded tokens"
								}
							},
							"getAccountActiveAgreements(address)": {
								"details": "An active agreement is one that has state for the account",
								"params": {
									"account": "Account to query"
								},
								"returns": {
									"activeAgreements": "List of accounts that have non-zero states for the account"
								}
							},
							"getAgreementData(address,bytes32,uint256)": {
								"details": "Get data of the agreement",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								},
								"returns": {
									"data": "Data of the agreement"
								}
							},
							"getAgreementStateSlot(address,address,uint256,uint256)": {
								"details": "Get data of the slot of the state of an agreement",
								"params": {
									"account": "Account to query",
									"agreementClass": "Contract address of the agreement",
									"dataLength": "length of the state data",
									"slotId": "slot id of the state"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"getUnderlyingToken()": {
								"details": "Return the underlying token contract",
								"returns": {
									"tokenAddr": "Underlying token address"
								}
							},
							"granularity()": {
								"custom:note": "For super token contracts, this value is always 1",
								"details": "Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number."
							},
							"increaseAllowance(address,uint256)": {
								"custom:emits": "an {Approval} event indicating the updated allowance.",
								"custom:requirements": " - `spender` cannot be the zero address.",
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}."
							},
							"initialize(address,uint8,string,string)": {
								"details": "Initialize the contract"
							},
							"isAccountCritical(address,uint256)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is critical (should use future)"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountCriticalNow(address)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountSolvent(address,uint256)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is solvent (should use future)"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isAccountSolventNow(address)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isOperatorFor(address,address)": {
								"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
							},
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"custom:note": " - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount",
								"details": "Make liquidation payouts (v2)",
								"params": {
									"id": "Agreement ID",
									"liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the rewarded account will receive",
									"targetAccount": "Account to be liquidated",
									"targetAccountBalanceDelta": "The delta amount the target account balance should change by",
									"useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"operationApprove(address,address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Perform ERC20 approve by host contract.",
								"params": {
									"account": "The account owner to be approved.",
									"amount": "Number of tokens to be approved.",
									"spender": "The spender of account owner's funds."
								}
							},
							"operationDowngrade(address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Downgrade ERC20 to SuperToken by host contract.",
								"params": {
									"account": "The account to be changed.",
									"amount": "Number of tokens to be downgraded (in 18 decimals)"
								}
							},
							"operationSend(address,address,uint256,bytes)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Perform ERC777 send by host contract.",
								"params": {
									"amount": "Number of tokens to be transferred.",
									"data": "Arbitrary user inputted data",
									"recipient": "The recipient of the funds.",
									"spender": "The account where the funds is sent from."
								}
							},
							"operationTransferFrom(address,address,address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Perform ERC20 transferFrom by host contract.",
								"params": {
									"account": "The account to spend sender's funds.",
									"amount": "Number of tokens to be transferred.",
									"recipient": "The recipient of the funds.",
									"spender": "The account where the funds is sent from."
								}
							},
							"operationUpgrade(address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Upgrade ERC20 to SuperToken by host contract.",
								"params": {
									"account": "The account to be changed.",
									"amount": "Number of tokens to be upgraded (in 18 decimals)"
								}
							},
							"operatorBurn(address,uint256,bytes,bytes)": {
								"custom:emits": "a {Burned} event.",
								"custom:requirements": " - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.",
								"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}."
							},
							"operatorSend(address,address,uint256,bytes,bytes)": {
								"custom:emits": "a {Sent} event.",
								"custom:requirements": " - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.",
								"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}."
							},
							"realtimeBalanceOf(address,uint256)": {
								"details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
								"params": {
									"account": "for the query",
									"timestamp": "Time of balance"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"realtimeBalanceOfNow(address)": {
								"details": "realtimeBalanceOf with timestamp equals to block timestamp",
								"params": {
									"account": "for the query"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"revokeOperator(address)": {
								"custom:emits": "a {RevokedOperator} event.",
								"custom:requirements": " - `operator` cannot be calling address.",
								"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}."
							},
							"selfApproveFor(address,address,uint256)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Give `spender`, `amount` allowance to spend the tokens of `account`."
							},
							"selfBurn(address,uint256,bytes)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Burn existing tokens for the account"
							},
							"selfMint(address,uint256,bytes)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Mint new tokens for the account"
							},
							"selfTransferFrom(address,address,address,uint256)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`."
							},
							"send(address,uint256,bytes)": {
								"custom:emits": "a {Sent} event.",
								"custom:requirements": " - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.",
								"details": "Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}."
							},
							"settleBalance(address,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"details": "The agreement needs to make sure that the balance delta is balanced afterwards",
								"params": {
									"account": "Account to query.",
									"delta": "Amount of balance delta to be settled"
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"terminateAgreement(bytes32,uint256)": {
								"details": "Close the agreement",
								"params": {
									"id": "Agreement ID"
								}
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"custom:emits": "a {Transfer} event.",
								"details": "Moves `amount` tokens from the caller's account to `recipient`.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"transferAll(address)": {
								"details": "Transfer all available balance from `msg.sender` to `recipient`"
							},
							"transferFrom(address,address,uint256)": {
								"custom:emits": "a {Transfer} event.",
								"details": "Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"updateAgreementData(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"updateAgreementStateSlot(address,uint256,bytes32[])": {
								"custom:note": " - To clear the storage out, provide zero-ed array of intended length",
								"details": "Update agreement state slot",
								"params": {
									"account": "Account to be updated"
								}
							},
							"upgrade(uint256)": {
								"custom:note": "It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract",
								"details": "Upgrade ERC20 to SuperToken.",
								"params": {
									"amount": "Number of tokens to be upgraded (in 18 decimals)"
								}
							},
							"upgradeTo(address,uint256,bytes)": {
								"custom:note": "It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract ",
								"custom:requirements": " - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.",
								"custom:warning": "- there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.",
								"details": "Upgrade ERC20 to SuperToken and transfer immediately",
								"params": {
									"amount": "Number of tokens to be upgraded (in 18 decimals)",
									"data": "User data for the TokensRecipient callback",
									"to": "The account to receive upgraded tokens"
								}
							}
						},
						"title": "Super token (Superfluid Token + ERC20 + ERC777) interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"CONSTANT_INFLOW_NFT()": "4c5c0c85",
							"CONSTANT_OUTFLOW_NFT()": "ef43d2c6",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"authorizeOperator(address)": "959b8c3f",
							"balanceOf(address)": "70a08231",
							"burn(uint256,bytes)": "fe9d9303",
							"createAgreement(bytes32,bytes32[])": "12a6a3f8",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"defaultOperators()": "06e48538",
							"downgrade(uint256)": "11bcc81e",
							"downgradeTo(address,uint256)": "83ba2525",
							"getAccountActiveAgreements(address)": "386fa221",
							"getAgreementData(address,bytes32,uint256)": "6c2d9f2f",
							"getAgreementStateSlot(address,address,uint256,uint256)": "4b61cc33",
							"getHost()": "20bc4425",
							"getUnderlyingToken()": "ee719bc8",
							"granularity()": "556f0dc7",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(address,uint8,string,string)": "42fe0980",
							"isAccountCritical(address,uint256)": "d9d078d6",
							"isAccountCriticalNow(address)": "79359f6f",
							"isAccountSolvent(address,uint256)": "b84cdd4a",
							"isAccountSolventNow(address)": "bb0d196e",
							"isOperatorFor(address,address)": "d95b6371",
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": "1863e809",
							"name()": "06fdde03",
							"operationApprove(address,address,uint256)": "62aa5287",
							"operationDecreaseAllowance(address,address,uint256)": "c780fd82",
							"operationDowngrade(address,uint256)": "245887fc",
							"operationIncreaseAllowance(address,address,uint256)": "4b2763b3",
							"operationSend(address,address,uint256,bytes)": "ca0c1e7f",
							"operationTransferFrom(address,address,address,uint256)": "16d055d6",
							"operationUpgrade(address,uint256)": "ca789464",
							"operatorBurn(address,uint256,bytes,bytes)": "fc673c4f",
							"operatorSend(address,address,uint256,bytes,bytes)": "62ad1b83",
							"realtimeBalanceOf(address,uint256)": "eb3537cc",
							"realtimeBalanceOfNow(address)": "2ec8eec7",
							"revokeOperator(address)": "fad8b32a",
							"selfApproveFor(address,address,uint256)": "66a12fb6",
							"selfBurn(address,uint256,bytes)": "9d876741",
							"selfMint(address,uint256,bytes)": "c68d4283",
							"selfTransferFrom(address,address,address,uint256)": "41b706be",
							"send(address,uint256,bytes)": "9bd9bbc6",
							"settleBalance(address,int256)": "cf97256d",
							"symbol()": "95d89b41",
							"terminateAgreement(bytes32,uint256)": "27048397",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAll(address)": "a3a7e7f3",
							"transferFrom(address,address,uint256)": "23b872dd",
							"updateAgreementData(bytes32,bytes32[])": "a1b2bf8b",
							"updateAgreementStateSlot(address,uint256,bytes32[])": "090c415e",
							"upgrade(uint256)": "45977d03",
							"upgradeTo(address,uint256,bytes)": "5b9d09cc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_BURN_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_MOVE_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NO_UNDERLYING_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_GOV_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_SELF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"}],\"name\":\"AgreementLiquidatedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bailoutAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"Bailout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"constantInflowNFT\",\"type\":\"address\"}],\"name\":\"ConstantInflowNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConstantOutflowNFT\",\"name\":\"constantOutflowNFT\",\"type\":\"address\"}],\"name\":\"ConstantOutflowNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDowngraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONSTANT_INFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONSTANT_OUTFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantOutflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"downgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"downgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"activeAgreements\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountCriticalNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountSolventNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDefaultRewardAccount\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"}],\"name\":\"makeLiquidationPayoutsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"operationDecreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationDowngrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"operationIncreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"operationSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfApproveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"selfBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"selfMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementCreated(address,bytes32,bytes32[])\":{\"details\":\"Agreement created event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"AgreementLiquidated(address,bytes32,address,address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAccount\":\"Account that collect the reward\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"custom:note\":\" Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"bailoutAmount\":\"Amount of liquidation bailouot\",\"bondAccount\":\"Account that collect the reward or bailout accounts\",\"id\":\"Agreement ID\",\"liquidatorAccount\":\"Account of the agent that performed the liquidation.\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)\":{\"custom:note\":\" Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount\",\"details\":\"Agreement liquidation event v2 (including agent account)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"liquidationTypeData\":\"The encoded liquidation type data including the version (how to decode)\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the reward recipient account balance should change by\",\"rewardAmountReceiver\":\"Account that collects the reward or bails out insolvent accounts\",\"targetAccount\":\"Account of the stream sender\",\"targetAccountBalanceDelta\":\"The amount the sender account balance should change by\"}},\"AgreementStateUpdated(address,address,uint256)\":{\"details\":\"Agreement account state updated event\",\"params\":{\"account\":\"Account updated\",\"agreementClass\":\"Contract address of the agreement\",\"slotId\":\"slot id of the agreement state\"}},\"AgreementTerminated(address,bytes32)\":{\"details\":\"Agreement terminated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"}},\"AgreementUpdated(address,bytes32,bytes32[])\":{\"details\":\"Agreement updated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"AuthorizedOperator(address,address)\":{\"details\":\"Emitted when `operator` is made operator for `tokenHolder`.\"},\"Bailout(address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"bailoutAccount\":\"Account that bailout the penalty account\",\"bailoutAmount\":\"Amount of account bailout\"}},\"Burned(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"ConstantInflowNFTCreated(address)\":{\"details\":\"Constant Inflow NFT proxy created event\",\"params\":{\"constantInflowNFT\":\"constant inflow nft address\"}},\"ConstantOutflowNFTCreated(address)\":{\"details\":\"Constant Outflow NFT proxy created event\",\"params\":{\"constantOutflowNFT\":\"constant outflow nft address\"}},\"Minted(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"RevokedOperator(address,address)\":{\"details\":\"Emitted when `operator` is revoked its operator status for `tokenHolder`.\"},\"TokenDowngraded(address,uint256)\":{\"details\":\"Token downgrade event\",\"params\":{\"account\":\"Account whose tokens are downgraded\",\"amount\":\"Amount of tokens downgraded\"}},\"TokenUpgraded(address,uint256)\":{\"details\":\"Token upgrade event\",\"params\":{\"account\":\"Account where tokens are upgraded to\",\"amount\":\"Amount of tokens upgraded (in 18 decimals)\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default.\"},\"approve(address,uint256)\":{\"custom:emits\":\"an {Approval} event.\",\"custom:note\":\"Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"authorizeOperator(address)\":{\"custom:emits\":\"an {AuthorizedOperator} event.\",\"custom:requirements\":\" - `operator` cannot be calling address.\",\"details\":\"Make an account an operator of the caller. See {isOperatorFor}.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by an account (`owner`).\"},\"burn(uint256,bytes)\":{\"custom:emits\":\"a {Burned} event.\",\"custom:requirements\":\" - the caller must have at least `amount` tokens.\",\"details\":\"Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}.\"},\"createAgreement(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"decimals()\":{\"custom:note\":\"SuperToken always uses 18 decimals. This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\",\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.\"},\"decreaseAllowance(address,uint256)\":{\"custom:emits\":\"an {Approval} event indicating the updated allowance.\",\"custom:requirements\":\" - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\",\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\"},\"defaultOperators()\":{\"details\":\"Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.\"},\"downgrade(uint256)\":{\"details\":\"Downgrade SuperToken to ERC20.It will call transfer to send tokens\",\"params\":{\"amount\":\"Number of tokens to be downgraded\"}},\"downgradeTo(address,uint256)\":{\"details\":\"Downgrade SuperToken to ERC20 and transfer immediately\",\"params\":{\"amount\":\"Number of tokens to be downgraded (in 18 decimals)\",\"to\":\"The account to receive downgraded tokens\"}},\"getAccountActiveAgreements(address)\":{\"details\":\"An active agreement is one that has state for the account\",\"params\":{\"account\":\"Account to query\"},\"returns\":{\"activeAgreements\":\"List of accounts that have non-zero states for the account\"}},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"Get data of the agreement\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"},\"returns\":{\"data\":\"Data of the agreement\"}},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"Get data of the slot of the state of an agreement\",\"params\":{\"account\":\"Account to query\",\"agreementClass\":\"Contract address of the agreement\",\"dataLength\":\"length of the state data\",\"slotId\":\"slot id of the state\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"getUnderlyingToken()\":{\"details\":\"Return the underlying token contract\",\"returns\":{\"tokenAddr\":\"Underlying token address\"}},\"granularity()\":{\"custom:note\":\"For super token contracts, this value is always 1\",\"details\":\"Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number.\"},\"increaseAllowance(address,uint256)\":{\"custom:emits\":\"an {Approval} event indicating the updated allowance.\",\"custom:requirements\":\" - `spender` cannot be the zero address.\",\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\"},\"initialize(address,uint8,string,string)\":{\"details\":\"Initialize the contract\"},\"isAccountCritical(address,uint256)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is critical (should use future)\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountCriticalNow(address)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountSolvent(address,uint256)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is solvent (should use future)\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isAccountSolventNow(address)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isOperatorFor(address,address)\":{\"details\":\"Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.\"},\"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"custom:note\":\" - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount\",\"details\":\"Make liquidation payouts (v2)\",\"params\":{\"id\":\"Agreement ID\",\"liquidationTypeData\":\"Data regarding the version of the liquidation schema and the type\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the rewarded account will receive\",\"targetAccount\":\"Account to be liquidated\",\"targetAccountBalanceDelta\":\"The delta amount the target account balance should change by\",\"useDefaultRewardAccount\":\"Whether or not the default reward account receives the rewardAmount\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"operationApprove(address,address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Perform ERC20 approve by host contract.\",\"params\":{\"account\":\"The account owner to be approved.\",\"amount\":\"Number of tokens to be approved.\",\"spender\":\"The spender of account owner's funds.\"}},\"operationDowngrade(address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Downgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be downgraded (in 18 decimals)\"}},\"operationSend(address,address,uint256,bytes)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Perform ERC777 send by host contract.\",\"params\":{\"amount\":\"Number of tokens to be transferred.\",\"data\":\"Arbitrary user inputted data\",\"recipient\":\"The recipient of the funds.\",\"spender\":\"The account where the funds is sent from.\"}},\"operationTransferFrom(address,address,address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Perform ERC20 transferFrom by host contract.\",\"params\":{\"account\":\"The account to spend sender's funds.\",\"amount\":\"Number of tokens to be transferred.\",\"recipient\":\"The recipient of the funds.\",\"spender\":\"The account where the funds is sent from.\"}},\"operationUpgrade(address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Upgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"}},\"operatorBurn(address,uint256,bytes,bytes)\":{\"custom:emits\":\"a {Burned} event.\",\"custom:requirements\":\" - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.\",\"details\":\"Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}.\"},\"operatorSend(address,address,uint256,bytes,bytes)\":{\"custom:emits\":\"a {Sent} event.\",\"custom:requirements\":\" - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\",\"details\":\"Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\"},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"Calculate the real balance of a user, taking in consideration all agreements of the account\",\"params\":{\"account\":\"for the query\",\"timestamp\":\"Time of balance\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block timestamp\",\"params\":{\"account\":\"for the query\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"revokeOperator(address)\":{\"custom:emits\":\"a {RevokedOperator} event.\",\"custom:requirements\":\" - `operator` cannot be calling address.\",\"details\":\"Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}.\"},\"selfApproveFor(address,address,uint256)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Give `spender`, `amount` allowance to spend the tokens of `account`.\"},\"selfBurn(address,uint256,bytes)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Burn existing tokens for the account\"},\"selfMint(address,uint256,bytes)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Mint new tokens for the account\"},\"selfTransferFrom(address,address,address,uint256)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`.\"},\"send(address,uint256,bytes)\":{\"custom:emits\":\"a {Sent} event.\",\"custom:requirements\":\" - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\",\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\"},\"settleBalance(address,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"details\":\"The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"Close the agreement\",\"params\":{\"id\":\"Agreement ID\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"custom:emits\":\"a {Transfer} event.\",\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"transferAll(address)\":{\"details\":\"Transfer all available balance from `msg.sender` to `recipient`\"},\"transferFrom(address,address,uint256)\":{\"custom:emits\":\"a {Transfer} event.\",\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"custom:note\":\" - To clear the storage out, provide zero-ed array of intended length\",\"details\":\"Update agreement state slot\",\"params\":{\"account\":\"Account to be updated\"}},\"upgrade(uint256)\":{\"custom:note\":\"It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract\",\"details\":\"Upgrade ERC20 to SuperToken.\",\"params\":{\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"}},\"upgradeTo(address,uint256,bytes)\":{\"custom:note\":\"It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract \",\"custom:requirements\":\" - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.\",\"custom:warning\":\"- there is potential of reentrancy IF the \\\"to\\\" account is a registered ERC777 recipient.\",\"details\":\"Upgrade ERC20 to SuperToken and transfer immediately\",\"params\":{\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\",\"data\":\"User data for the TokensRecipient callback\",\"to\":\"The account to receive upgraded tokens\"}}},\"title\":\"Super token (Superfluid Token + ERC20 + ERC777) interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"This value changes when {approve} or {transferFrom} are called.\"},\"getAccountActiveAgreements(address)\":{\"notice\":\"Get a list of agreements that is active for the account\"},\"isAccountCritical(address,uint256)\":{\"notice\":\"Check if account is critical\"},\"isAccountCriticalNow(address)\":{\"notice\":\"Check if account is critical now (current host.getNow())\"},\"isAccountSolvent(address,uint256)\":{\"notice\":\"Check if account is solvent\"},\"isAccountSolventNow(address)\":{\"notice\":\"Check if account is solvent now\"},\"realtimeBalanceOfNow(address)\":{\"notice\":\"Calculate the realtime balance given the current host.getNow() value\"},\"settleBalance(address,int256)\":{\"notice\":\"Settle balance from an account by the agreement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":\"ISuperToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"allowance(address,address)": {
								"notice": "This value changes when {approve} or {transferFrom} are called."
							},
							"getAccountActiveAgreements(address)": {
								"notice": "Get a list of agreements that is active for the account"
							},
							"isAccountCritical(address,uint256)": {
								"notice": "Check if account is critical"
							},
							"isAccountCriticalNow(address)": {
								"notice": "Check if account is critical now (current host.getNow())"
							},
							"isAccountSolvent(address,uint256)": {
								"notice": "Check if account is solvent"
							},
							"isAccountSolventNow(address)": {
								"notice": "Check if account is solvent now"
							},
							"realtimeBalanceOfNow(address)": {
								"notice": "Calculate the realtime balance given the current host.getNow() value"
							},
							"settleBalance(address,int256)": {
								"notice": "Settle balance from an account by the agreement"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"ISuperTokenFactory": {
					"abi": [
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_UNINITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "CustomSuperTokenCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SuperTokenCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "tokenLogic",
									"type": "address"
								}
							],
							"name": "SuperTokenLogicCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_underlyingToken",
									"type": "address"
								}
							],
							"name": "computeCanonicalERC20WrapperAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "superTokenAddress",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "isDeployed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ERC20WithTokenInfo",
									"name": "_underlyingToken",
									"type": "address"
								}
							],
							"name": "createCanonicalERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ERC20WithTokenInfo",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_underlyingTokenAddress",
									"type": "address"
								}
							],
							"name": "getCanonicalERC20Wrapper",
							"outputs": [
								{
									"internalType": "address",
									"name": "superTokenAddress",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenLogic",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "customSuperTokenProxy",
									"type": "address"
								}
							],
							"name": "initializeCustomSuperToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"CustomSuperTokenCreated(address)": {
								"details": "Custom super token created event",
								"params": {
									"token": "Newly created custom super token address"
								}
							},
							"SuperTokenCreated(address)": {
								"details": "Super token created event",
								"params": {
									"token": "Newly created super token address"
								}
							},
							"SuperTokenLogicCreated(address)": {
								"details": "Super token logic created event",
								"params": {
									"tokenLogic": "Token logic address"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"computeCanonicalERC20WrapperAddress(address)": {
								"details": "We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens",
								"params": {
									"_underlyingToken": "Underlying ERC20 token address"
								},
								"returns": {
									"isDeployed": "whether the super token is deployed AND set in the canonical mapping",
									"superTokenAddress": "Super token address"
								}
							},
							"createCanonicalERC20Wrapper(address)": {
								"details": "salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))",
								"params": {
									"_underlyingToken": "Underlying ERC20 token"
								},
								"returns": {
									"_0": "ISuperToken the created supertoken"
								}
							},
							"createERC20Wrapper(address,uint8,string,string)": {
								"params": {
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token NOTE: - It assumes token provide the .decimals() function"
								}
							},
							"createERC20Wrapper(address,uint8,uint8,string,string)": {
								"params": {
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingDecimals": "Underlying token decimals",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token"
								}
							},
							"getCanonicalERC20Wrapper(address)": {
								"details": "We return the address if it exists and the zero address otherwise",
								"params": {
									"_underlyingTokenAddress": "Underlying ERC20 token address"
								},
								"returns": {
									"superTokenAddress": "Super token address"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"initialize()": {
								"details": "Initialize the contract"
							},
							"initializeCustomSuperToken(address)": {
								"details": "Creates a new custom super token",
								"params": {
									"customSuperTokenProxy": "address of the custom supertoken proxy"
								}
							}
						},
						"title": "Super token factory interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"computeCanonicalERC20WrapperAddress(address)": "bab74c89",
							"createCanonicalERC20Wrapper(address)": "151188dc",
							"createERC20Wrapper(address,uint8,string,string)": "431f1481",
							"createERC20Wrapper(address,uint8,uint8,string,string)": "a6d0c534",
							"getCanonicalERC20Wrapper(address)": "eff0a89d",
							"getHost()": "20bc4425",
							"getSuperTokenLogic()": "9470a5b2",
							"initialize()": "8129fc1c",
							"initializeCustomSuperToken(address)": "d412d344"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_UNINITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CustomSuperTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SuperTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"tokenLogic\",\"type\":\"address\"}],\"name\":\"SuperTokenLogicCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"computeCanonicalERC20WrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20WithTokenInfo\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"createCanonicalERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20WithTokenInfo\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingTokenAddress\",\"type\":\"address\"}],\"name\":\"getCanonicalERC20Wrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenLogic\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customSuperTokenProxy\",\"type\":\"address\"}],\"name\":\"initializeCustomSuperToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"CustomSuperTokenCreated(address)\":{\"details\":\"Custom super token created event\",\"params\":{\"token\":\"Newly created custom super token address\"}},\"SuperTokenCreated(address)\":{\"details\":\"Super token created event\",\"params\":{\"token\":\"Newly created super token address\"}},\"SuperTokenLogicCreated(address)\":{\"details\":\"Super token logic created event\",\"params\":{\"tokenLogic\":\"Token logic address\"}}},\"kind\":\"dev\",\"methods\":{\"computeCanonicalERC20WrapperAddress(address)\":{\"details\":\"We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\",\"params\":{\"_underlyingToken\":\"Underlying ERC20 token address\"},\"returns\":{\"isDeployed\":\"whether the super token is deployed AND set in the canonical mapping\",\"superTokenAddress\":\"Super token address\"}},\"createCanonicalERC20Wrapper(address)\":{\"details\":\"salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\",\"params\":{\"_underlyingToken\":\"Underlying ERC20 token\"},\"returns\":{\"_0\":\"ISuperToken the created supertoken\"}},\"createERC20Wrapper(address,uint8,string,string)\":{\"params\":{\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token NOTE: - It assumes token provide the .decimals() function\"}},\"createERC20Wrapper(address,uint8,uint8,string,string)\":{\"params\":{\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingDecimals\":\"Underlying token decimals\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token\"}},\"getCanonicalERC20Wrapper(address)\":{\"details\":\"We return the address if it exists and the zero address otherwise\",\"params\":{\"_underlyingTokenAddress\":\"Underlying ERC20 token address\"},\"returns\":{\"superTokenAddress\":\"Super token address\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"initialize()\":{\"details\":\"Initialize the contract\"},\"initializeCustomSuperToken(address)\":{\"details\":\"Creates a new custom super token\",\"params\":{\"customSuperTokenProxy\":\"address of the custom supertoken proxy\"}}},\"title\":\"Super token factory interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeCanonicalERC20WrapperAddress(address)\":{\"notice\":\"Computes/Retrieves wrapper super token address given the underlying token address\"},\"createCanonicalERC20Wrapper(address)\":{\"notice\":\"Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\"},\"createERC20Wrapper(address,uint8,string,string)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token with extra token info\"},\"createERC20Wrapper(address,uint8,uint8,string,string)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token\"},\"getCanonicalERC20Wrapper(address)\":{\"notice\":\"Gets the canonical ERC20 wrapper super token address given the underlying token address\"},\"getSuperTokenLogic()\":{\"notice\":\"Get the canonical super token logic.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":\"ISuperTokenFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"computeCanonicalERC20WrapperAddress(address)": {
								"notice": "Computes/Retrieves wrapper super token address given the underlying token address"
							},
							"createCanonicalERC20Wrapper(address)": {
								"notice": "Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists"
							},
							"createERC20Wrapper(address,uint8,string,string)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token with extra token info"
							},
							"createERC20Wrapper(address,uint8,uint8,string,string)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token"
							},
							"getCanonicalERC20Wrapper(address)": {
								"notice": "Gets the canonical ERC20 wrapper super token address given the underlying token address"
							},
							"getSuperTokenLogic()": {
								"notice": "Get the canonical super token logic."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
				"ISuperfluid": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_code",
									"type": "uint256"
								}
							],
							"name": "APP_RULE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_AGREEMENT_ALREADY_REGISTERED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_AGREEMENT_IS_NOT_REGISTERED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_INVALID_CONFIG_WORD",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_MAX_256_AGREEMENTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_MUST_BE_CONTRACT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NEED_MORE_GAS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NON_UPGRADEABLE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NOT_A_SUPER_APP",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NO_APP_REGISTRATION_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_ONLY_GOVERNANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_RECEIVER_IS_NOT_SUPER_APP",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SENDER_IS_NOT_SUPER_APP",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SUPER_APP_ALREADY_REGISTERED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SUPER_APP_IS_JAILED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_UNAUTHORIZED_SUPER_APP_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "code",
									"type": "address"
								}
							],
							"name": "AgreementClassRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "code",
									"type": "address"
								}
							],
							"name": "AgreementClassUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "AppRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "contract ISuperfluidGovernance",
									"name": "oldGov",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "contract ISuperfluidGovernance",
									"name": "newGov",
									"type": "address"
								}
							],
							"name": "GovernanceReplaced",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "reason",
									"type": "uint256"
								}
							],
							"name": "Jail",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "contract ISuperTokenFactory",
									"name": "newFactory",
									"type": "address"
								}
							],
							"name": "SuperTokenFactoryUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "code",
									"type": "address"
								}
							],
							"name": "SuperTokenLogicUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bitmap",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "addToAgreementClassesBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "newBitmap",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "targetApp",
									"type": "address"
								}
							],
							"name": "allowCompositeApp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "int256",
									"name": "appCreditUsedDelta",
									"type": "int256"
								}
							],
							"name": "appCallbackPop",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "appCreditGranted",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "appCreditUsed",
									"type": "int256"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "appCreditToken",
									"type": "address"
								}
							],
							"name": "appCallbackPush",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "operationType",
											"type": "uint32"
										},
										{
											"internalType": "address",
											"name": "target",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										}
									],
									"internalType": "struct ISuperfluid.Operation[]",
									"name": "operations",
									"type": "tuple[]"
								}
							],
							"name": "batchCall",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "callAgreement",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "returnedData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAgreementWithContext",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "returnedData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								}
							],
							"name": "callAppAction",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "returnedData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAppActionWithContext",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bool",
									"name": "isTermination",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAppAfterCallback",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bool",
									"name": "isTermination",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAppBeforeCallback",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "int256",
									"name": "appCreditUsedMore",
									"type": "int256"
								}
							],
							"name": "ctxUseCredit",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "decodeCtx",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "appCallbackLevel",
											"type": "uint8"
										},
										{
											"internalType": "uint8",
											"name": "callType",
											"type": "uint8"
										},
										{
											"internalType": "uint256",
											"name": "timestamp",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "msgSender",
											"type": "address"
										},
										{
											"internalType": "bytes4",
											"name": "agreementSelector",
											"type": "bytes4"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "appCreditGranted",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "appCreditWantedDeprecated",
											"type": "uint256"
										},
										{
											"internalType": "int256",
											"name": "appCreditUsed",
											"type": "int256"
										},
										{
											"internalType": "address",
											"name": "appAddress",
											"type": "address"
										},
										{
											"internalType": "contract ISuperfluidToken",
											"name": "appCreditToken",
											"type": "address"
										}
									],
									"internalType": "struct ISuperfluid.Context",
									"name": "context",
									"type": "tuple"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "operationType",
											"type": "uint32"
										},
										{
											"internalType": "address",
											"name": "target",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										}
									],
									"internalType": "struct ISuperfluid.Operation[]",
									"name": "operations",
									"type": "tuple[]"
								}
							],
							"name": "forwardBatchCall",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "getAgreementClass",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "getAppCallbackLevel",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "appCallbackLevel",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "getAppManifest",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSuperApp",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isJailed",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "noopMask",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getGovernance",
							"outputs": [
								{
									"internalType": "contract ISuperfluidGovernance",
									"name": "governance",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getNow",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenFactory",
							"outputs": [
								{
									"internalType": "contract ISuperTokenFactory",
									"name": "factory",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenFactoryLogic",
							"outputs": [
								{
									"internalType": "address",
									"name": "logic",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								}
							],
							"name": "isAgreementClassListed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "yes",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "isAgreementTypeListed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "yes",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "isApp",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "isAppJailed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isJail",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "contract ISuperApp",
									"name": "targetApp",
									"type": "address"
								}
							],
							"name": "isCompositeAppAllowed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isAppAllowed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "isCtxValid",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "reason",
									"type": "uint256"
								}
							],
							"name": "jailApp",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bitmap",
									"type": "uint256"
								}
							],
							"name": "mapAgreementClasses",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "agreementClasses",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClassLogic",
									"type": "address"
								}
							],
							"name": "registerAgreementClass",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "configWord",
									"type": "uint256"
								}
							],
							"name": "registerApp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "configWord",
									"type": "uint256"
								}
							],
							"name": "registerAppByFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "configWord",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "registrationKey",
									"type": "string"
								}
							],
							"name": "registerAppWithKey",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bitmap",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "removeFromAgreementClassesBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "newBitmap",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidGovernance",
									"name": "newGov",
									"type": "address"
								}
							],
							"name": "replaceGovernance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClassLogic",
									"type": "address"
								}
							],
							"name": "updateAgreementClass",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperTokenFactory",
									"name": "newFactory",
									"type": "address"
								}
							],
							"name": "updateSuperTokenFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "updateSuperTokenLogic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementClassRegistered(bytes32,address)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"agreementType": "The agreement type registered",
									"code": "Address of the new agreement"
								}
							},
							"AgreementClassUpdated(bytes32,address)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"agreementType": "The agreement type updated",
									"code": "Address of the new agreement"
								}
							},
							"AppRegistered(address)": {
								"details": "App registered event",
								"params": {
									"app": "Address of jailed app"
								}
							},
							"GovernanceReplaced(address,address)": {
								"details": "Governance replaced event",
								"params": {
									"newGov": "Address of the new governance contract",
									"oldGov": "Address of the old governance contract"
								}
							},
							"Jail(address,uint256)": {
								"details": "Jail event for the app",
								"params": {
									"app": "Address of jailed app",
									"reason": "Reason the app is jailed (see Definitions.sol for the full list)"
								}
							},
							"SuperTokenFactoryUpdated(address)": {
								"details": "SuperToken factory updated event",
								"params": {
									"newFactory": "Address of the new factory"
								}
							},
							"SuperTokenLogicUpdated(address,address)": {
								"details": "SuperToken logic updated event",
								"params": {
									"code": "Address of the new SuperToken logic"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addToAgreementClassesBitmap(uint256,bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"bitmap": "Agreement class bitmap"
								}
							},
							"allowCompositeApp(address)": {
								"details": "Whitelist the target app for app composition for the source app (msg.sender)",
								"params": {
									"targetApp": "The target super app address"
								}
							},
							"appCallbackPop(bytes,int256)": {
								"custom:security": "- Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory. - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.",
								"details": "(For agreements) Pop from the current app callback stack",
								"params": {
									"appCreditUsedDelta": "App credit used by the app.",
									"ctx": "The ctx that was pushed before the callback stack."
								},
								"returns": {
									"newCtx": "                 The current context of the transaction."
								}
							},
							"appCallbackPush(bytes,address,uint256,int256,address)": {
								"details": "(For agreements) Create a new callback stack",
								"params": {
									"app": "The super app.",
									"appCreditGranted": "App credit granted so far.",
									"appCreditUsed": "App credit used so far.",
									"ctx": "The current ctx, it will be validated."
								},
								"returns": {
									"newCtx": "                 The current context of the transaction."
								}
							},
							"batchCall((uint32,address,bytes)[])": {
								"details": "Batch call function",
								"params": {
									"operations": "Array of batch operations"
								}
							},
							"callAgreement(address,bytes,bytes)": {
								"details": "Call agreement function",
								"params": {
									"agreementClass": "The agreement address you are calling",
									"callData": "The contextual call data with placeholder ctx",
									"userData": "Extra user data being sent to the super app callbacks"
								}
							},
							"callAppAction(address,bytes)": {
								"custom:note": "See \"Contextless Call Proxies\" above for more about contextual call data.",
								"details": "Main use case is calling app action in a batch call via the host",
								"params": {
									"callData": "The contextual call data"
								}
							},
							"callAppAfterCallback(address,bytes,bool,bytes)": {
								"details": "(For agreements) Call the app after callback",
								"params": {
									"app": "The super app.",
									"callData": "The call data sending to the super app.",
									"ctx": "Current ctx, it will be validated.",
									"isTermination": "Is it a termination callback?"
								},
								"returns": {
									"newCtx": "           The current context of the transaction."
								}
							},
							"callAppBeforeCallback(address,bytes,bool,bytes)": {
								"details": "(For agreements) StaticCall the app before callback",
								"params": {
									"app": "The super app.",
									"callData": "The call data sending to the super app.",
									"ctx": "Current ctx, it will be validated.",
									"isTermination": "Is it a termination callback?"
								},
								"returns": {
									"cbdata": "           Data returned from the callback."
								}
							},
							"ctxUseCredit(bytes,int256)": {
								"details": "(For agreements) Use app credit.",
								"params": {
									"appCreditUsedMore": "See app credit for more details.",
									"ctx": "The current ctx, it will be validated."
								},
								"returns": {
									"newCtx": "                  The current context of the transaction."
								}
							},
							"forwardBatchCall((uint32,address,bytes)[])": {
								"details": "Batch call function for trusted forwarders (EIP-2771)",
								"params": {
									"operations": "Array of batch operations"
								}
							},
							"getAgreementClass(bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
							},
							"getAppCallbackLevel(address)": {
								"details": "Query app callbacklevel",
								"params": {
									"app": "Super app address"
								}
							},
							"getAppManifest(address)": {
								"details": "Get the manifest of the super app",
								"params": {
									"app": "Super app address"
								}
							},
							"getGovernance()": {
								"details": "Get the current governance address of the Superfluid host"
							},
							"getSuperTokenFactory()": {
								"details": "Get the super token factory",
								"returns": {
									"factory": "The factory"
								}
							},
							"getSuperTokenFactoryLogic()": {
								"details": "Get the super token factory logic (applicable to upgradable deployment)",
								"returns": {
									"logic": "The factory logic"
								}
							},
							"isAgreementClassListed(address)": {
								"details": "Check if the agreement class is whitelisted"
							},
							"isAgreementTypeListed(bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
							},
							"isApp(address)": {
								"details": "Query if the app is registered",
								"params": {
									"app": "Super app address"
								}
							},
							"isAppJailed(address)": {
								"details": "Query if the app has been jailed",
								"params": {
									"app": "Super app address"
								}
							},
							"isCompositeAppAllowed(address,address)": {
								"details": "Query if source app is allowed to call the target app as downstream app",
								"params": {
									"app": "Super app address",
									"targetApp": "The target super app address"
								}
							},
							"jailApp(bytes,address,uint256)": {
								"details": "(For agreements) Jail the app.",
								"params": {
									"app": "The super app.",
									"reason": "Jail reason code."
								},
								"returns": {
									"newCtx": "                 The current context of the transaction."
								}
							},
							"mapAgreementClasses(uint256)": {
								"details": "Map list of the agreement classes using a bitmap",
								"params": {
									"bitmap": "Agreement class bitmap"
								}
							},
							"registerAgreementClass(address)": {
								"custom:modifiers": " - onlyGovernance",
								"details": "Register a new agreement class to the system",
								"params": {
									"agreementClassLogic": "Initial agreement class code"
								}
							},
							"registerApp(uint256)": {
								"custom:deprecated": "you should use `registerAppWithKey` or `registerAppByFactory` instead, because app registration is currently governance permissioned on mainnets.",
								"details": "Message sender (must be a contract) declares itself as a super app.",
								"params": {
									"configWord": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`"
								}
							},
							"registerAppByFactory(address,uint256)": {
								"details": "Message sender (must be a contract) declares app as a super app",
								"params": {
									"configWord": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`"
								}
							},
							"registerAppWithKey(uint256,string)": {
								"details": "Message sender declares itself as a super app.",
								"params": {
									"configWord": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`",
									"registrationKey": "The registration key issued by the governance, needed to register on a mainnet."
								}
							},
							"removeFromAgreementClassesBitmap(uint256,bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"bitmap": "Agreement class bitmap"
								}
							},
							"replaceGovernance(address)": {
								"details": "Replace the current governance with a new one"
							},
							"updateAgreementClass(address)": {
								"custom:modifiers": "  - onlyGovernance",
								"details": "Update code of an agreement class",
								"params": {
									"agreementClassLogic": "New code for the agreement class"
								}
							},
							"updateSuperTokenFactory(address)": {
								"details": "Update super token factory",
								"params": {
									"newFactory": "New factory logic"
								}
							},
							"updateSuperTokenLogic(address)": {
								"details": "Refer to ISuperTokenFactory.Upgradability for expected behaviours"
							}
						},
						"title": "Host interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addToAgreementClassesBitmap(uint256,bytes32)": "bced3ddc",
							"allowCompositeApp(address)": "57121e0c",
							"appCallbackPop(bytes,int256)": "989b0c3e",
							"appCallbackPush(bytes,address,uint256,int256,address)": "768fabb0",
							"batchCall((uint32,address,bytes)[])": "6ad3ca7d",
							"callAgreement(address,bytes,bytes)": "39255d5b",
							"callAgreementWithContext(address,bytes,bytes,bytes)": "4329d293",
							"callAppAction(address,bytes)": "1e855cf3",
							"callAppActionWithContext(address,bytes,bytes)": "ba48b5f8",
							"callAppAfterCallback(address,bytes,bool,bytes)": "1e6d0a84",
							"callAppBeforeCallback(address,bytes,bool,bytes)": "74041e02",
							"ctxUseCredit(bytes,int256)": "59a29141",
							"decodeCtx(bytes)": "3f6c923a",
							"forwardBatchCall((uint32,address,bytes)[])": "670e77e3",
							"getAgreementClass(bytes32)": "b6d200de",
							"getAppCallbackLevel(address)": "9378fa13",
							"getAppManifest(address)": "f9f522f4",
							"getGovernance()": "289b3c0d",
							"getNow()": "bbe4fd50",
							"getSuperTokenFactory()": "731aed6e",
							"getSuperTokenFactoryLogic()": "f2e55caf",
							"isAgreementClassListed(address)": "8ca48484",
							"isAgreementTypeListed(bytes32)": "e8dccb7d",
							"isApp(address)": "3ca3ad4e",
							"isAppJailed(address)": "6b4f3335",
							"isCompositeAppAllowed(address,address)": "bb84cfa1",
							"isCtxValid(bytes)": "bf428734",
							"jailApp(bytes,address,uint256)": "b724211e",
							"mapAgreementClasses(uint256)": "c56a069d",
							"registerAgreementClass(address)": "15a024e1",
							"registerApp(uint256)": "ad3915c8",
							"registerAppByFactory(address,uint256)": "f3733052",
							"registerAppWithKey(uint256,string)": "bd1c448b",
							"removeFromAgreementClassesBitmap(uint256,bytes32)": "a5dbbbcd",
							"replaceGovernance(address)": "7283100c",
							"updateAgreementClass(address)": "06cecba8",
							"updateSuperTokenFactory(address)": "54fbc493",
							"updateSuperTokenLogic(address)": "787afde7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"APP_RULE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_AGREEMENT_ALREADY_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_AGREEMENT_IS_NOT_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_INVALID_CONFIG_WORD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_MAX_256_AGREEMENTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_MUST_BE_CONTRACT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NEED_MORE_GAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NON_UPGRADEABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NOT_A_SUPER_APP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NO_APP_REGISTRATION_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_ONLY_GOVERNANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_RECEIVER_IS_NOT_SUPER_APP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SENDER_IS_NOT_SUPER_APP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SUPER_APP_ALREADY_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SUPER_APP_IS_JAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_UNAUTHORIZED_SUPER_APP_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"AgreementClassRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"AgreementClassUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"AppRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"oldGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"GovernanceReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"Jail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISuperTokenFactory\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"SuperTokenFactoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"SuperTokenLogicUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"addToAgreementClassesBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"targetApp\",\"type\":\"address\"}],\"name\":\"allowCompositeApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsedDelta\",\"type\":\"int256\"}],\"name\":\"appCallbackPop\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"appCreditGranted\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsed\",\"type\":\"int256\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"appCreditToken\",\"type\":\"address\"}],\"name\":\"appCallbackPush\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"operationType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ISuperfluid.Operation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"batchCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"callAgreement\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnedData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAgreementWithContext\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"returnedData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"callAppAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnedData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAppActionWithContext\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isTermination\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAppAfterCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isTermination\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAppBeforeCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsedMore\",\"type\":\"int256\"}],\"name\":\"ctxUseCredit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"decodeCtx\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"appCallbackLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"agreementSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"appCreditGranted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appCreditWantedDeprecated\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsed\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"appCreditToken\",\"type\":\"address\"}],\"internalType\":\"struct ISuperfluid.Context\",\"name\":\"context\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"operationType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ISuperfluid.Operation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"forwardBatchCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"getAgreementClass\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"getAppCallbackLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"appCallbackLevel\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"getAppManifest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSuperApp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isJailed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"noopMask\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"governance\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenFactory\",\"outputs\":[{\"internalType\":\"contract ISuperTokenFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenFactoryLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"}],\"name\":\"isAgreementClassListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"yes\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"isAgreementTypeListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"yes\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"isApp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"isAppJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJail\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"contract ISuperApp\",\"name\":\"targetApp\",\"type\":\"address\"}],\"name\":\"isCompositeAppAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAppAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"isCtxValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"jailApp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"name\":\"mapAgreementClasses\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"agreementClasses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClassLogic\",\"type\":\"address\"}],\"name\":\"registerAgreementClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configWord\",\"type\":\"uint256\"}],\"name\":\"registerApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configWord\",\"type\":\"uint256\"}],\"name\":\"registerAppByFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configWord\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"registrationKey\",\"type\":\"string\"}],\"name\":\"registerAppWithKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"removeFromAgreementClassesBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"replaceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClassLogic\",\"type\":\"address\"}],\"name\":\"updateAgreementClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperTokenFactory\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"updateSuperTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateSuperTokenLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementClassRegistered(bytes32,address)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"agreementType\":\"The agreement type registered\",\"code\":\"Address of the new agreement\"}},\"AgreementClassUpdated(bytes32,address)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"agreementType\":\"The agreement type updated\",\"code\":\"Address of the new agreement\"}},\"AppRegistered(address)\":{\"details\":\"App registered event\",\"params\":{\"app\":\"Address of jailed app\"}},\"GovernanceReplaced(address,address)\":{\"details\":\"Governance replaced event\",\"params\":{\"newGov\":\"Address of the new governance contract\",\"oldGov\":\"Address of the old governance contract\"}},\"Jail(address,uint256)\":{\"details\":\"Jail event for the app\",\"params\":{\"app\":\"Address of jailed app\",\"reason\":\"Reason the app is jailed (see Definitions.sol for the full list)\"}},\"SuperTokenFactoryUpdated(address)\":{\"details\":\"SuperToken factory updated event\",\"params\":{\"newFactory\":\"Address of the new factory\"}},\"SuperTokenLogicUpdated(address,address)\":{\"details\":\"SuperToken logic updated event\",\"params\":{\"code\":\"Address of the new SuperToken logic\"}}},\"kind\":\"dev\",\"methods\":{\"addToAgreementClassesBitmap(uint256,bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"bitmap\":\"Agreement class bitmap\"}},\"allowCompositeApp(address)\":{\"details\":\"Whitelist the target app for app composition for the source app (msg.sender)\",\"params\":{\"targetApp\":\"The target super app address\"}},\"appCallbackPop(bytes,int256)\":{\"custom:security\":\"- Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory. - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.\",\"details\":\"(For agreements) Pop from the current app callback stack\",\"params\":{\"appCreditUsedDelta\":\"App credit used by the app.\",\"ctx\":\"The ctx that was pushed before the callback stack.\"},\"returns\":{\"newCtx\":\"                 The current context of the transaction.\"}},\"appCallbackPush(bytes,address,uint256,int256,address)\":{\"details\":\"(For agreements) Create a new callback stack\",\"params\":{\"app\":\"The super app.\",\"appCreditGranted\":\"App credit granted so far.\",\"appCreditUsed\":\"App credit used so far.\",\"ctx\":\"The current ctx, it will be validated.\"},\"returns\":{\"newCtx\":\"                 The current context of the transaction.\"}},\"batchCall((uint32,address,bytes)[])\":{\"details\":\"Batch call function\",\"params\":{\"operations\":\"Array of batch operations\"}},\"callAgreement(address,bytes,bytes)\":{\"details\":\"Call agreement function\",\"params\":{\"agreementClass\":\"The agreement address you are calling\",\"callData\":\"The contextual call data with placeholder ctx\",\"userData\":\"Extra user data being sent to the super app callbacks\"}},\"callAppAction(address,bytes)\":{\"custom:note\":\"See \\\"Contextless Call Proxies\\\" above for more about contextual call data.\",\"details\":\"Main use case is calling app action in a batch call via the host\",\"params\":{\"callData\":\"The contextual call data\"}},\"callAppAfterCallback(address,bytes,bool,bytes)\":{\"details\":\"(For agreements) Call the app after callback\",\"params\":{\"app\":\"The super app.\",\"callData\":\"The call data sending to the super app.\",\"ctx\":\"Current ctx, it will be validated.\",\"isTermination\":\"Is it a termination callback?\"},\"returns\":{\"newCtx\":\"           The current context of the transaction.\"}},\"callAppBeforeCallback(address,bytes,bool,bytes)\":{\"details\":\"(For agreements) StaticCall the app before callback\",\"params\":{\"app\":\"The super app.\",\"callData\":\"The call data sending to the super app.\",\"ctx\":\"Current ctx, it will be validated.\",\"isTermination\":\"Is it a termination callback?\"},\"returns\":{\"cbdata\":\"           Data returned from the callback.\"}},\"ctxUseCredit(bytes,int256)\":{\"details\":\"(For agreements) Use app credit.\",\"params\":{\"appCreditUsedMore\":\"See app credit for more details.\",\"ctx\":\"The current ctx, it will be validated.\"},\"returns\":{\"newCtx\":\"                  The current context of the transaction.\"}},\"forwardBatchCall((uint32,address,bytes)[])\":{\"details\":\"Batch call function for trusted forwarders (EIP-2771)\",\"params\":{\"operations\":\"Array of batch operations\"}},\"getAgreementClass(bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\"},\"getAppCallbackLevel(address)\":{\"details\":\"Query app callbacklevel\",\"params\":{\"app\":\"Super app address\"}},\"getAppManifest(address)\":{\"details\":\"Get the manifest of the super app\",\"params\":{\"app\":\"Super app address\"}},\"getGovernance()\":{\"details\":\"Get the current governance address of the Superfluid host\"},\"getSuperTokenFactory()\":{\"details\":\"Get the super token factory\",\"returns\":{\"factory\":\"The factory\"}},\"getSuperTokenFactoryLogic()\":{\"details\":\"Get the super token factory logic (applicable to upgradable deployment)\",\"returns\":{\"logic\":\"The factory logic\"}},\"isAgreementClassListed(address)\":{\"details\":\"Check if the agreement class is whitelisted\"},\"isAgreementTypeListed(bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\"},\"isApp(address)\":{\"details\":\"Query if the app is registered\",\"params\":{\"app\":\"Super app address\"}},\"isAppJailed(address)\":{\"details\":\"Query if the app has been jailed\",\"params\":{\"app\":\"Super app address\"}},\"isCompositeAppAllowed(address,address)\":{\"details\":\"Query if source app is allowed to call the target app as downstream app\",\"params\":{\"app\":\"Super app address\",\"targetApp\":\"The target super app address\"}},\"jailApp(bytes,address,uint256)\":{\"details\":\"(For agreements) Jail the app.\",\"params\":{\"app\":\"The super app.\",\"reason\":\"Jail reason code.\"},\"returns\":{\"newCtx\":\"                 The current context of the transaction.\"}},\"mapAgreementClasses(uint256)\":{\"details\":\"Map list of the agreement classes using a bitmap\",\"params\":{\"bitmap\":\"Agreement class bitmap\"}},\"registerAgreementClass(address)\":{\"custom:modifiers\":\" - onlyGovernance\",\"details\":\"Register a new agreement class to the system\",\"params\":{\"agreementClassLogic\":\"Initial agreement class code\"}},\"registerApp(uint256)\":{\"custom:deprecated\":\"you should use `registerAppWithKey` or `registerAppByFactory` instead, because app registration is currently governance permissioned on mainnets.\",\"details\":\"Message sender (must be a contract) declares itself as a super app.\",\"params\":{\"configWord\":\"The super app manifest configuration, flags are defined in `SuperAppDefinitions`\"}},\"registerAppByFactory(address,uint256)\":{\"details\":\"Message sender (must be a contract) declares app as a super app\",\"params\":{\"configWord\":\"The super app manifest configuration, flags are defined in `SuperAppDefinitions`\"}},\"registerAppWithKey(uint256,string)\":{\"details\":\"Message sender declares itself as a super app.\",\"params\":{\"configWord\":\"The super app manifest configuration, flags are defined in `SuperAppDefinitions`\",\"registrationKey\":\"The registration key issued by the governance, needed to register on a mainnet.\"}},\"removeFromAgreementClassesBitmap(uint256,bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"bitmap\":\"Agreement class bitmap\"}},\"replaceGovernance(address)\":{\"details\":\"Replace the current governance with a new one\"},\"updateAgreementClass(address)\":{\"custom:modifiers\":\"  - onlyGovernance\",\"details\":\"Update code of an agreement class\",\"params\":{\"agreementClassLogic\":\"New code for the agreement class\"}},\"updateSuperTokenFactory(address)\":{\"details\":\"Update super token factory\",\"params\":{\"newFactory\":\"New factory logic\"}},\"updateSuperTokenLogic(address)\":{\"details\":\"Refer to ISuperTokenFactory.Upgradability for expected behaviours\"}},\"title\":\"Host interface\",\"version\":1},\"userdoc\":{\"events\":{\"AgreementClassRegistered(bytes32,address)\":{\"notice\":\"Agreement class registered event\"},\"AgreementClassUpdated(bytes32,address)\":{\"notice\":\"Agreement class updated event\"}},\"kind\":\"user\",\"methods\":{\"addToAgreementClassesBitmap(uint256,bytes32)\":{\"notice\":\"Create a new bitmask by adding a agreement class to it\"},\"callAppAction(address,bytes)\":{\"notice\":\"Call app action\"},\"getAgreementClass(bytes32)\":{\"notice\":\"Get agreement class\"},\"isAgreementTypeListed(bytes32)\":{\"notice\":\"Check if the agreement type is whitelisted\"},\"registerAppByFactory(address,uint256)\":{\"notice\":\"On mainnet deployments, only factory contracts pre-authorized by governance can use this. See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\"},\"registerAppWithKey(uint256,string)\":{\"notice\":\"See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide On testnets or in dev environment, a placeholder (e.g. empty string) can be used. While the message sender must be the super app itself, the transaction sender (tx.origin) must be the deployer account the registration key was issued for.\"},\"removeFromAgreementClassesBitmap(uint256,bytes32)\":{\"notice\":\"Create a new bitmask by removing a agreement class from it\"},\"updateSuperTokenLogic(address)\":{\"notice\":\"Update the super token logic to the latest\"}},\"notice\":\"This is the central contract of the system where super agreement, super app and super token features are connected. The Superfluid host contract is also the entry point for the protocol users, where batch call and meta transaction are provided for UX improvements.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":\"ISuperfluid\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"AgreementClassRegistered(bytes32,address)": {
								"notice": "Agreement class registered event"
							},
							"AgreementClassUpdated(bytes32,address)": {
								"notice": "Agreement class updated event"
							}
						},
						"kind": "user",
						"methods": {
							"addToAgreementClassesBitmap(uint256,bytes32)": {
								"notice": "Create a new bitmask by adding a agreement class to it"
							},
							"callAppAction(address,bytes)": {
								"notice": "Call app action"
							},
							"getAgreementClass(bytes32)": {
								"notice": "Get agreement class"
							},
							"isAgreementTypeListed(bytes32)": {
								"notice": "Check if the agreement type is whitelisted"
							},
							"registerAppByFactory(address,uint256)": {
								"notice": "On mainnet deployments, only factory contracts pre-authorized by governance can use this. See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide"
							},
							"registerAppWithKey(uint256,string)": {
								"notice": "See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide On testnets or in dev environment, a placeholder (e.g. empty string) can be used. While the message sender must be the super app itself, the transaction sender (tx.origin) must be the deployer account the registration key was issued for."
							},
							"removeFromAgreementClassesBitmap(uint256,bytes32)": {
								"notice": "Create a new bitmask by removing a agreement class from it"
							},
							"updateSuperTokenLogic(address)": {
								"notice": "Update the super token logic to the latest"
							}
						},
						"notice": "This is the central contract of the system where super agreement, super app and super token features are connected. The Superfluid host contract is also the entry point for the protocol users, where batch call and meta transaction are provided for UX improvements.",
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
				"ISuperfluidGovernance": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_GOV_ARRAYS_NOT_SAME_LENGTH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_GOV_MUST_BE_CONTRACT",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperToken[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "batchUpdateSuperTokenLogic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "clearConfig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "getConfigAsAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "value",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "getConfigAsUint256",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								}
							],
							"name": "registerAgreementClass",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "newGov",
									"type": "address"
								}
							],
							"name": "replaceGovernance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "value",
									"type": "address"
								}
							],
							"name": "setConfig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "setConfig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "hostNewLogic",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "agreementClassNewLogics",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "superTokenFactoryNewLogic",
									"type": "address"
								}
							],
							"name": "updateContracts",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {
							"batchUpdateSuperTokenLogic(address,address[])": {
								"details": "Update supertoken logic contract to the latest that is managed by the super token factory"
							},
							"clearConfig(address,address,bytes32)": {
								"details": "Clear configuration"
							},
							"getConfigAsAddress(address,address,bytes32)": {
								"details": "Get configuration as address value"
							},
							"getConfigAsUint256(address,address,bytes32)": {
								"details": "Get configuration as uint256 value"
							},
							"registerAgreementClass(address,address)": {
								"details": "Register a new agreement class"
							},
							"replaceGovernance(address,address)": {
								"details": "Replace the current governance with a new governance"
							},
							"setConfig(address,address,bytes32,address)": {
								"details": "Set configuration as address value"
							},
							"setConfig(address,address,bytes32,uint256)": {
								"details": "Set configuration as uint256 value"
							},
							"updateContracts(address,address,address[],address)": {
								"custom:note": " - Because they might have inter-dependencies, it is good to have one single function to update them all",
								"details": "Update logics of the contracts"
							}
						},
						"title": "Superfluid governance interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"batchUpdateSuperTokenLogic(address,address[])": "42148deb",
							"clearConfig(address,address,bytes32)": "640b6cc9",
							"getConfigAsAddress(address,address,bytes32)": "8369a0f1",
							"getConfigAsUint256(address,address,bytes32)": "80f70cba",
							"registerAgreementClass(address,address)": "cadf8f85",
							"replaceGovernance(address,address)": "44864b25",
							"setConfig(address,address,bytes32,address)": "78707cb8",
							"setConfig(address,address,bytes32,uint256)": "f79a8e63",
							"updateContracts(address,address,address[],address)": "427942a4"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_GOV_ARRAYS_NOT_SAME_LENGTH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_GOV_MUST_BE_CONTRACT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperToken[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"batchUpdateSuperTokenLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"clearConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfigAsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfigAsUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"}],\"name\":\"registerAgreementClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"replaceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hostNewLogic\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"agreementClassNewLogics\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"superTokenFactoryNewLogic\",\"type\":\"address\"}],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{\"batchUpdateSuperTokenLogic(address,address[])\":{\"details\":\"Update supertoken logic contract to the latest that is managed by the super token factory\"},\"clearConfig(address,address,bytes32)\":{\"details\":\"Clear configuration\"},\"getConfigAsAddress(address,address,bytes32)\":{\"details\":\"Get configuration as address value\"},\"getConfigAsUint256(address,address,bytes32)\":{\"details\":\"Get configuration as uint256 value\"},\"registerAgreementClass(address,address)\":{\"details\":\"Register a new agreement class\"},\"replaceGovernance(address,address)\":{\"details\":\"Replace the current governance with a new governance\"},\"setConfig(address,address,bytes32,address)\":{\"details\":\"Set configuration as address value\"},\"setConfig(address,address,bytes32,uint256)\":{\"details\":\"Set configuration as uint256 value\"},\"updateContracts(address,address,address[],address)\":{\"custom:note\":\" - Because they might have inter-dependencies, it is good to have one single function to update them all\",\"details\":\"Update logics of the contracts\"}},\"title\":\"Superfluid governance interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":\"ISuperfluidGovernance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ISuperfluidToken": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "rewardAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidatedBy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "rewardAmountReceiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								}
							],
							"name": "AgreementLiquidatedV2",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								}
							],
							"name": "AgreementStateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "AgreementTerminated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "bailoutAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "Bailout",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "createAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountActiveAgreements",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "activeAgreements",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementData",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementStateSlot",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountCritical",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountCriticalNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountSolvent",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountSolventNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "useDefaultRewardAccount",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								}
							],
							"name": "makeLiquidationPayoutsV2",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "realtimeBalanceOfNow",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "settleBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "terminateAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementStateSlot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementCreated(address,bytes32,bytes32[])": {
								"details": "Agreement created event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"AgreementLiquidated(address,bytes32,address,address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAccount": "Account that collect the reward",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"custom:note": " Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"bailoutAmount": "Amount of liquidation bailouot",
									"bondAccount": "Account that collect the reward or bailout accounts",
									"id": "Agreement ID",
									"liquidatorAccount": "Account of the agent that performed the liquidation.",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": {
								"custom:note": " Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount",
								"details": "Agreement liquidation event v2 (including agent account)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"liquidationTypeData": "The encoded liquidation type data including the version (how to decode)",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the reward recipient account balance should change by",
									"rewardAmountReceiver": "Account that collects the reward or bails out insolvent accounts",
									"targetAccount": "Account of the stream sender",
									"targetAccountBalanceDelta": "The amount the sender account balance should change by"
								}
							},
							"AgreementStateUpdated(address,address,uint256)": {
								"details": "Agreement account state updated event",
								"params": {
									"account": "Account updated",
									"agreementClass": "Contract address of the agreement",
									"slotId": "slot id of the agreement state"
								}
							},
							"AgreementTerminated(address,bytes32)": {
								"details": "Agreement terminated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								}
							},
							"AgreementUpdated(address,bytes32,bytes32[])": {
								"details": "Agreement updated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"Bailout(address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"bailoutAccount": "Account that bailout the penalty account",
									"bailoutAmount": "Amount of account bailout"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createAgreement(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"getAccountActiveAgreements(address)": {
								"details": "An active agreement is one that has state for the account",
								"params": {
									"account": "Account to query"
								},
								"returns": {
									"activeAgreements": "List of accounts that have non-zero states for the account"
								}
							},
							"getAgreementData(address,bytes32,uint256)": {
								"details": "Get data of the agreement",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								},
								"returns": {
									"data": "Data of the agreement"
								}
							},
							"getAgreementStateSlot(address,address,uint256,uint256)": {
								"details": "Get data of the slot of the state of an agreement",
								"params": {
									"account": "Account to query",
									"agreementClass": "Contract address of the agreement",
									"dataLength": "length of the state data",
									"slotId": "slot id of the state"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"isAccountCritical(address,uint256)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is critical (should use future)"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountCriticalNow(address)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountSolvent(address,uint256)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is solvent (should use future)"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isAccountSolventNow(address)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"custom:note": " - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount",
								"details": "Make liquidation payouts (v2)",
								"params": {
									"id": "Agreement ID",
									"liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the rewarded account will receive",
									"targetAccount": "Account to be liquidated",
									"targetAccountBalanceDelta": "The delta amount the target account balance should change by",
									"useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
								}
							},
							"realtimeBalanceOf(address,uint256)": {
								"details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
								"params": {
									"account": "for the query",
									"timestamp": "Time of balance"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"realtimeBalanceOfNow(address)": {
								"details": "realtimeBalanceOf with timestamp equals to block timestamp",
								"params": {
									"account": "for the query"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"settleBalance(address,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"details": "The agreement needs to make sure that the balance delta is balanced afterwards",
								"params": {
									"account": "Account to query.",
									"delta": "Amount of balance delta to be settled"
								}
							},
							"terminateAgreement(bytes32,uint256)": {
								"details": "Close the agreement",
								"params": {
									"id": "Agreement ID"
								}
							},
							"updateAgreementData(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"updateAgreementStateSlot(address,uint256,bytes32[])": {
								"custom:note": " - To clear the storage out, provide zero-ed array of intended length",
								"details": "Update agreement state slot",
								"params": {
									"account": "Account to be updated"
								}
							}
						},
						"title": "Superfluid token interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAgreement(bytes32,bytes32[])": "12a6a3f8",
							"getAccountActiveAgreements(address)": "386fa221",
							"getAgreementData(address,bytes32,uint256)": "6c2d9f2f",
							"getAgreementStateSlot(address,address,uint256,uint256)": "4b61cc33",
							"getHost()": "20bc4425",
							"isAccountCritical(address,uint256)": "d9d078d6",
							"isAccountCriticalNow(address)": "79359f6f",
							"isAccountSolvent(address,uint256)": "b84cdd4a",
							"isAccountSolventNow(address)": "bb0d196e",
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": "1863e809",
							"realtimeBalanceOf(address,uint256)": "eb3537cc",
							"realtimeBalanceOfNow(address)": "2ec8eec7",
							"settleBalance(address,int256)": "cf97256d",
							"terminateAgreement(bytes32,uint256)": "27048397",
							"updateAgreementData(bytes32,bytes32[])": "a1b2bf8b",
							"updateAgreementStateSlot(address,uint256,bytes32[])": "090c415e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_BURN_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_MOVE_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"}],\"name\":\"AgreementLiquidatedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bailoutAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"Bailout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"activeAgreements\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountCriticalNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountSolventNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDefaultRewardAccount\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"}],\"name\":\"makeLiquidationPayoutsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementCreated(address,bytes32,bytes32[])\":{\"details\":\"Agreement created event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"AgreementLiquidated(address,bytes32,address,address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAccount\":\"Account that collect the reward\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"custom:note\":\" Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"bailoutAmount\":\"Amount of liquidation bailouot\",\"bondAccount\":\"Account that collect the reward or bailout accounts\",\"id\":\"Agreement ID\",\"liquidatorAccount\":\"Account of the agent that performed the liquidation.\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)\":{\"custom:note\":\" Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount\",\"details\":\"Agreement liquidation event v2 (including agent account)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"liquidationTypeData\":\"The encoded liquidation type data including the version (how to decode)\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the reward recipient account balance should change by\",\"rewardAmountReceiver\":\"Account that collects the reward or bails out insolvent accounts\",\"targetAccount\":\"Account of the stream sender\",\"targetAccountBalanceDelta\":\"The amount the sender account balance should change by\"}},\"AgreementStateUpdated(address,address,uint256)\":{\"details\":\"Agreement account state updated event\",\"params\":{\"account\":\"Account updated\",\"agreementClass\":\"Contract address of the agreement\",\"slotId\":\"slot id of the agreement state\"}},\"AgreementTerminated(address,bytes32)\":{\"details\":\"Agreement terminated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"}},\"AgreementUpdated(address,bytes32,bytes32[])\":{\"details\":\"Agreement updated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"Bailout(address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"bailoutAccount\":\"Account that bailout the penalty account\",\"bailoutAmount\":\"Amount of account bailout\"}}},\"kind\":\"dev\",\"methods\":{\"createAgreement(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"getAccountActiveAgreements(address)\":{\"details\":\"An active agreement is one that has state for the account\",\"params\":{\"account\":\"Account to query\"},\"returns\":{\"activeAgreements\":\"List of accounts that have non-zero states for the account\"}},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"Get data of the agreement\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"},\"returns\":{\"data\":\"Data of the agreement\"}},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"Get data of the slot of the state of an agreement\",\"params\":{\"account\":\"Account to query\",\"agreementClass\":\"Contract address of the agreement\",\"dataLength\":\"length of the state data\",\"slotId\":\"slot id of the state\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"isAccountCritical(address,uint256)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is critical (should use future)\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountCriticalNow(address)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountSolvent(address,uint256)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is solvent (should use future)\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isAccountSolventNow(address)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"custom:note\":\" - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount\",\"details\":\"Make liquidation payouts (v2)\",\"params\":{\"id\":\"Agreement ID\",\"liquidationTypeData\":\"Data regarding the version of the liquidation schema and the type\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the rewarded account will receive\",\"targetAccount\":\"Account to be liquidated\",\"targetAccountBalanceDelta\":\"The delta amount the target account balance should change by\",\"useDefaultRewardAccount\":\"Whether or not the default reward account receives the rewardAmount\"}},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"Calculate the real balance of a user, taking in consideration all agreements of the account\",\"params\":{\"account\":\"for the query\",\"timestamp\":\"Time of balance\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block timestamp\",\"params\":{\"account\":\"for the query\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"settleBalance(address,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"details\":\"The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"Close the agreement\",\"params\":{\"id\":\"Agreement ID\"}},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"custom:note\":\" - To clear the storage out, provide zero-ed array of intended length\",\"details\":\"Update agreement state slot\",\"params\":{\"account\":\"Account to be updated\"}}},\"title\":\"Superfluid token interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAccountActiveAgreements(address)\":{\"notice\":\"Get a list of agreements that is active for the account\"},\"isAccountCritical(address,uint256)\":{\"notice\":\"Check if account is critical\"},\"isAccountCriticalNow(address)\":{\"notice\":\"Check if account is critical now (current host.getNow())\"},\"isAccountSolvent(address,uint256)\":{\"notice\":\"Check if account is solvent\"},\"isAccountSolventNow(address)\":{\"notice\":\"Check if account is solvent now\"},\"realtimeBalanceOfNow(address)\":{\"notice\":\"Calculate the realtime balance given the current host.getNow() value\"},\"settleBalance(address,int256)\":{\"notice\":\"Settle balance from an account by the agreement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":\"ISuperfluidToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getAccountActiveAgreements(address)": {
								"notice": "Get a list of agreements that is active for the account"
							},
							"isAccountCritical(address,uint256)": {
								"notice": "Check if account is critical"
							},
							"isAccountCriticalNow(address)": {
								"notice": "Check if account is critical now (current host.getNow())"
							},
							"isAccountSolvent(address,uint256)": {
								"notice": "Check if account is solvent"
							},
							"isAccountSolventNow(address)": {
								"notice": "Check if account is solvent now"
							},
							"realtimeBalanceOfNow(address)": {
								"notice": "Calculate the realtime balance given the current host.getNow() value"
							},
							"settleBalance(address,int256)": {
								"notice": "Settle balance from an account by the agreement"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
				"ERC20WithTokenInfo": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"details": "Using abstract contract instead of interfaces because old solidity      does not support interface inheriting other interfaces solhint-disable-next-line no-empty-blocks",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"title": "ERC20 token with token info interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"Using abstract contract instead of interfaces because old solidity      does not support interface inheriting other interfaces solhint-disable-next-line no-empty-blocks\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"ERC20 token with token info interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":\"ERC20WithTokenInfo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
				"TokenInfo": {
					"abi": [
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"details": "ERC20 standard interface does not specify these functions, but      often the token implementations have them.",
						"kind": "dev",
						"methods": {
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							}
						},
						"title": "ERC20 token info interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"ERC20 standard interface does not specify these functions, but      often the token implementations have them.\",\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"}},\"title\":\"ERC20 token info interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":\"TokenInfo\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"premiere/IRegistry.sol": {
				"IRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenContract",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "AccountCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenContract",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "account",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenContract",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "createAccount",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"account(address,uint256)": "192df655",
							"createAccount(address,uint256)": "5fbfb9cf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AccountCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"premiere/IRegistry.sol\":\"IRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"premiere/IRegistry.sol\":{\"keccak256\":\"0x943209b5f4797b7dadf290f4bd6f985622f1ebf8066babce3d33f6f34477d089\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://c2694ee4c4a62c87a7ee88550b22bd341d3cabbea606f474403667a158ce57f6\",\"dweb:/ipfs/QmQu2XCSxau6LF4MsukgwrjV5PgSC1CnNGYDiZAEHhKesJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"premiere/Premiere.sol": {
				"Premiere": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_id",
									"type": "uint256"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "profileId",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "minFlowRate",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "maxTimestamp",
									"type": "string"
								}
							],
							"name": "isSubscribed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "subscribed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"premiere/Premiere.sol\":967:3712  contract Premiere {... */\n  mstore(0x40, 0x80)\n    /* \"premiere/Premiere.sol\":1021:1063  0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873 */\n  0x49e565ed1bdc17f3d220f72df0857c26fa83f873\n    /* \"premiere/Premiere.sol\":991:1063  address private _cfaAddress = 0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873 */\n  0x00\n  dup1\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere.sol\":1106:1148  0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f */\n  0x5d8b4c2554aeb7e86f387b4d6c00ac33499ed01f\n    /* \"premiere/Premiere.sol\":1069:1148  address private _superTokenAddress = 0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f */\n  0x01\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere.sol\":1188:1230  0x60Ae865ee4C725cd04353b5AAb364553f56ceF82 */\n  0x60ae865ee4c725cd04353b5aab364553f56cef82\n    /* \"premiere/Premiere.sol\":1154:1230  address private _lensHubAddress = 0x60Ae865ee4C725cd04353b5AAb364553f56ceF82 */\n  0x02\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere.sol\":1267:1309  0x02101dfB77FDE026414827Fdc604ddAF224F0921 */\n  0x02101dfb77fde026414827fdc604ddaf224f0921\n    /* \"premiere/Premiere.sol\":1236:1309  address private _tbaRegistry = 0x02101dfB77FDE026414827Fdc604ddAF224F0921 */\n  0x03\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"premiere/Premiere.sol\":1315:1359  string private _minFlowRate = \"761035007610\" */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0c\n  dup2\n  mstore\n  0x20\n  add\n  0x3736313033353030373631300000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  0x04\n  swap1\n  dup2\n  tag_1\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_1:\n  pop\n    /* \"premiere/Premiere.sol\":1365:1398  string private _maxTimestamp = \"\" */\n  mload(0x40)\n  dup1\n  0x20\n  add\n  0x40\n  mstore\n  dup1\n  0x00\n  dup2\n  mstore\n  pop\n  0x05\n  swap1\n  dup2\n  tag_3\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_3:\n  pop\n    /* \"premiere/Premiere.sol\":967:3712  contract Premiere {... */\n  callvalue\n  dup1\n  iszero\n  tag_4\n  jumpi\n  0x00\n  dup1\n  revert\ntag_4:\n  pop\n  jump(tag_5)\n    /* \"#utility.yul\":7:106   */\ntag_6:\n    /* \"#utility.yul\":59:65   */\n  0x00\n    /* \"#utility.yul\":93:98   */\n  dup2\n    /* \"#utility.yul\":87:99   */\n  mload\n    /* \"#utility.yul\":77:99   */\n  swap1\n  pop\n    /* \"#utility.yul\":7:106   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":112:292   */\ntag_7:\n    /* \"#utility.yul\":160:237   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":157:158   */\n  0x00\n    /* \"#utility.yul\":150:238   */\n  mstore\n    /* \"#utility.yul\":257:261   */\n  0x41\n    /* \"#utility.yul\":254:255   */\n  0x04\n    /* \"#utility.yul\":247:262   */\n  mstore\n    /* \"#utility.yul\":281:285   */\n  0x24\n    /* \"#utility.yul\":278:279   */\n  0x00\n    /* \"#utility.yul\":271:286   */\n  revert\n    /* \"#utility.yul\":298:478   */\ntag_8:\n    /* \"#utility.yul\":346:423   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":343:344   */\n  0x00\n    /* \"#utility.yul\":336:424   */\n  mstore\n    /* \"#utility.yul\":443:447   */\n  0x22\n    /* \"#utility.yul\":440:441   */\n  0x04\n    /* \"#utility.yul\":433:448   */\n  mstore\n    /* \"#utility.yul\":467:471   */\n  0x24\n    /* \"#utility.yul\":464:465   */\n  0x00\n    /* \"#utility.yul\":457:472   */\n  revert\n    /* \"#utility.yul\":484:804   */\ntag_9:\n    /* \"#utility.yul\":528:534   */\n  0x00\n    /* \"#utility.yul\":565:566   */\n  0x02\n    /* \"#utility.yul\":559:563   */\n  dup3\n    /* \"#utility.yul\":555:567   */\n  div\n    /* \"#utility.yul\":545:567   */\n  swap1\n  pop\n    /* \"#utility.yul\":612:613   */\n  0x01\n    /* \"#utility.yul\":606:610   */\n  dup3\n    /* \"#utility.yul\":602:614   */\n  and\n    /* \"#utility.yul\":633:651   */\n  dup1\n    /* \"#utility.yul\":623:704   */\n  tag_31\n  jumpi\n    /* \"#utility.yul\":689:693   */\n  0x7f\n    /* \"#utility.yul\":681:687   */\n  dup3\n    /* \"#utility.yul\":677:694   */\n  and\n    /* \"#utility.yul\":667:694   */\n  swap2\n  pop\n    /* \"#utility.yul\":623:704   */\ntag_31:\n    /* \"#utility.yul\":751:753   */\n  0x20\n    /* \"#utility.yul\":743:749   */\n  dup3\n    /* \"#utility.yul\":740:754   */\n  lt\n    /* \"#utility.yul\":720:738   */\n  dup2\n    /* \"#utility.yul\":717:755   */\n  sub\n    /* \"#utility.yul\":714:798   */\n  tag_32\n  jumpi\n    /* \"#utility.yul\":770:788   */\n  tag_33\n  tag_8\n  jump\t// in\ntag_33:\n    /* \"#utility.yul\":714:798   */\ntag_32:\n    /* \"#utility.yul\":535:804   */\n  pop\n    /* \"#utility.yul\":484:804   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":810:951   */\ntag_10:\n    /* \"#utility.yul\":859:863   */\n  0x00\n    /* \"#utility.yul\":882:885   */\n  dup2\n    /* \"#utility.yul\":874:885   */\n  swap1\n  pop\n    /* \"#utility.yul\":905:908   */\n  dup2\n    /* \"#utility.yul\":902:903   */\n  0x00\n    /* \"#utility.yul\":895:909   */\n  mstore\n    /* \"#utility.yul\":939:943   */\n  0x20\n    /* \"#utility.yul\":936:937   */\n  0x00\n    /* \"#utility.yul\":926:944   */\n  keccak256\n    /* \"#utility.yul\":918:944   */\n  swap1\n  pop\n    /* \"#utility.yul\":810:951   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":957:1050   */\ntag_11:\n    /* \"#utility.yul\":994:1000   */\n  0x00\n    /* \"#utility.yul\":1041:1043   */\n  0x20\n    /* \"#utility.yul\":1036:1038   */\n  0x1f\n    /* \"#utility.yul\":1029:1034   */\n  dup4\n    /* \"#utility.yul\":1025:1039   */\n  add\n    /* \"#utility.yul\":1021:1044   */\n  div\n    /* \"#utility.yul\":1011:1044   */\n  swap1\n  pop\n    /* \"#utility.yul\":957:1050   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1056:1163   */\ntag_12:\n    /* \"#utility.yul\":1100:1108   */\n  0x00\n    /* \"#utility.yul\":1150:1155   */\n  dup3\n    /* \"#utility.yul\":1144:1148   */\n  dup3\n    /* \"#utility.yul\":1140:1156   */\n  shl\n    /* \"#utility.yul\":1119:1156   */\n  swap1\n  pop\n    /* \"#utility.yul\":1056:1163   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1169:1562   */\ntag_13:\n    /* \"#utility.yul\":1238:1244   */\n  0x00\n    /* \"#utility.yul\":1288:1289   */\n  0x08\n    /* \"#utility.yul\":1276:1286   */\n  dup4\n    /* \"#utility.yul\":1272:1290   */\n  mul\n    /* \"#utility.yul\":1311:1408   */\n  tag_38\n    /* \"#utility.yul\":1341:1407   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":1330:1339   */\n  dup3\n    /* \"#utility.yul\":1311:1408   */\n  tag_12\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1429:1468   */\n  tag_39\n    /* \"#utility.yul\":1459:1467   */\n  dup7\n    /* \"#utility.yul\":1448:1457   */\n  dup4\n    /* \"#utility.yul\":1429:1468   */\n  tag_12\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1417:1468   */\n  swap6\n  pop\n    /* \"#utility.yul\":1501:1505   */\n  dup1\n    /* \"#utility.yul\":1497:1506   */\n  not\n    /* \"#utility.yul\":1490:1495   */\n  dup5\n    /* \"#utility.yul\":1486:1507   */\n  and\n    /* \"#utility.yul\":1477:1507   */\n  swap4\n  pop\n    /* \"#utility.yul\":1550:1554   */\n  dup1\n    /* \"#utility.yul\":1540:1548   */\n  dup7\n    /* \"#utility.yul\":1536:1555   */\n  and\n    /* \"#utility.yul\":1529:1534   */\n  dup5\n    /* \"#utility.yul\":1526:1556   */\n  or\n    /* \"#utility.yul\":1516:1556   */\n  swap3\n  pop\n    /* \"#utility.yul\":1245:1562   */\n  pop\n  pop\n    /* \"#utility.yul\":1169:1562   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1568:1645   */\ntag_14:\n    /* \"#utility.yul\":1605:1612   */\n  0x00\n    /* \"#utility.yul\":1634:1639   */\n  dup2\n    /* \"#utility.yul\":1623:1639   */\n  swap1\n  pop\n    /* \"#utility.yul\":1568:1645   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1651:1711   */\ntag_15:\n    /* \"#utility.yul\":1679:1682   */\n  0x00\n    /* \"#utility.yul\":1700:1705   */\n  dup2\n    /* \"#utility.yul\":1693:1705   */\n  swap1\n  pop\n    /* \"#utility.yul\":1651:1711   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1717:1859   */\ntag_16:\n    /* \"#utility.yul\":1767:1776   */\n  0x00\n    /* \"#utility.yul\":1800:1853   */\n  tag_43\n    /* \"#utility.yul\":1818:1852   */\n  tag_44\n    /* \"#utility.yul\":1827:1851   */\n  tag_45\n    /* \"#utility.yul\":1845:1850   */\n  dup5\n    /* \"#utility.yul\":1827:1851   */\n  tag_14\n  jump\t// in\ntag_45:\n    /* \"#utility.yul\":1818:1852   */\n  tag_15\n  jump\t// in\ntag_44:\n    /* \"#utility.yul\":1800:1853   */\n  tag_14\n  jump\t// in\ntag_43:\n    /* \"#utility.yul\":1787:1853   */\n  swap1\n  pop\n    /* \"#utility.yul\":1717:1859   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1865:1940   */\ntag_17:\n    /* \"#utility.yul\":1908:1911   */\n  0x00\n    /* \"#utility.yul\":1929:1934   */\n  dup2\n    /* \"#utility.yul\":1922:1934   */\n  swap1\n  pop\n    /* \"#utility.yul\":1865:1940   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1946:2215   */\ntag_18:\n    /* \"#utility.yul\":2056:2095   */\n  tag_48\n    /* \"#utility.yul\":2087:2094   */\n  dup4\n    /* \"#utility.yul\":2056:2095   */\n  tag_16\n  jump\t// in\ntag_48:\n    /* \"#utility.yul\":2117:2208   */\n  tag_49\n    /* \"#utility.yul\":2166:2207   */\n  tag_50\n    /* \"#utility.yul\":2190:2206   */\n  dup3\n    /* \"#utility.yul\":2166:2207   */\n  tag_17\n  jump\t// in\ntag_50:\n    /* \"#utility.yul\":2158:2164   */\n  dup5\n    /* \"#utility.yul\":2151:2155   */\n  dup5\n    /* \"#utility.yul\":2145:2156   */\n  sload\n    /* \"#utility.yul\":2117:2208   */\n  tag_13\n  jump\t// in\ntag_49:\n    /* \"#utility.yul\":2111:2115   */\n  dup3\n    /* \"#utility.yul\":2104:2209   */\n  sstore\n    /* \"#utility.yul\":2022:2215   */\n  pop\n    /* \"#utility.yul\":1946:2215   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2221:2294   */\ntag_19:\n    /* \"#utility.yul\":2266:2269   */\n  0x00\n    /* \"#utility.yul\":2221:2294   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":2300:2489   */\ntag_20:\n    /* \"#utility.yul\":2377:2409   */\n  tag_53\n  tag_19\n  jump\t// in\ntag_53:\n    /* \"#utility.yul\":2418:2483   */\n  tag_54\n    /* \"#utility.yul\":2476:2482   */\n  dup2\n    /* \"#utility.yul\":2468:2474   */\n  dup5\n    /* \"#utility.yul\":2462:2466   */\n  dup5\n    /* \"#utility.yul\":2418:2483   */\n  tag_18\n  jump\t// in\ntag_54:\n    /* \"#utility.yul\":2353:2489   */\n  pop\n    /* \"#utility.yul\":2300:2489   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2495:2681   */\ntag_21:\n    /* \"#utility.yul\":2555:2675   */\ntag_56:\n    /* \"#utility.yul\":2572:2575   */\n  dup2\n    /* \"#utility.yul\":2565:2570   */\n  dup2\n    /* \"#utility.yul\":2562:2576   */\n  lt\n    /* \"#utility.yul\":2555:2675   */\n  iszero\n  tag_58\n  jumpi\n    /* \"#utility.yul\":2626:2665   */\n  tag_59\n    /* \"#utility.yul\":2663:2664   */\n  0x00\n    /* \"#utility.yul\":2656:2661   */\n  dup3\n    /* \"#utility.yul\":2626:2665   */\n  tag_20\n  jump\t// in\ntag_59:\n    /* \"#utility.yul\":2599:2600   */\n  0x01\n    /* \"#utility.yul\":2592:2597   */\n  dup2\n    /* \"#utility.yul\":2588:2601   */\n  add\n    /* \"#utility.yul\":2579:2601   */\n  swap1\n  pop\n    /* \"#utility.yul\":2555:2675   */\n  jump(tag_56)\ntag_58:\n    /* \"#utility.yul\":2495:2681   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2687:3230   */\ntag_22:\n    /* \"#utility.yul\":2788:2790   */\n  0x1f\n    /* \"#utility.yul\":2783:2786   */\n  dup3\n    /* \"#utility.yul\":2780:2791   */\n  gt\n    /* \"#utility.yul\":2777:3223   */\n  iszero\n  tag_61\n  jumpi\n    /* \"#utility.yul\":2822:2860   */\n  tag_62\n    /* \"#utility.yul\":2854:2859   */\n  dup2\n    /* \"#utility.yul\":2822:2860   */\n  tag_10\n  jump\t// in\ntag_62:\n    /* \"#utility.yul\":2906:2935   */\n  tag_63\n    /* \"#utility.yul\":2924:2934   */\n  dup5\n    /* \"#utility.yul\":2906:2935   */\n  tag_11\n  jump\t// in\ntag_63:\n    /* \"#utility.yul\":2896:2904   */\n  dup2\n    /* \"#utility.yul\":2892:2936   */\n  add\n    /* \"#utility.yul\":3089:3091   */\n  0x20\n    /* \"#utility.yul\":3077:3087   */\n  dup6\n    /* \"#utility.yul\":3074:3092   */\n  lt\n    /* \"#utility.yul\":3071:3120   */\n  iszero\n  tag_64\n  jumpi\n    /* \"#utility.yul\":3110:3118   */\n  dup2\n    /* \"#utility.yul\":3095:3118   */\n  swap1\n  pop\n    /* \"#utility.yul\":3071:3120   */\ntag_64:\n    /* \"#utility.yul\":3133:3213   */\n  tag_65\n    /* \"#utility.yul\":3189:3211   */\n  tag_66\n    /* \"#utility.yul\":3207:3210   */\n  dup6\n    /* \"#utility.yul\":3189:3211   */\n  tag_11\n  jump\t// in\ntag_66:\n    /* \"#utility.yul\":3179:3187   */\n  dup4\n    /* \"#utility.yul\":3175:3212   */\n  add\n    /* \"#utility.yul\":3162:3173   */\n  dup3\n    /* \"#utility.yul\":3133:3213   */\n  tag_21\n  jump\t// in\ntag_65:\n    /* \"#utility.yul\":2792:3223   */\n  pop\n  pop\n    /* \"#utility.yul\":2777:3223   */\ntag_61:\n    /* \"#utility.yul\":2687:3230   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3236:3353   */\ntag_23:\n    /* \"#utility.yul\":3290:3298   */\n  0x00\n    /* \"#utility.yul\":3340:3345   */\n  dup3\n    /* \"#utility.yul\":3334:3338   */\n  dup3\n    /* \"#utility.yul\":3330:3346   */\n  shr\n    /* \"#utility.yul\":3309:3346   */\n  swap1\n  pop\n    /* \"#utility.yul\":3236:3353   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3359:3528   */\ntag_24:\n    /* \"#utility.yul\":3403:3409   */\n  0x00\n    /* \"#utility.yul\":3436:3487   */\n  tag_69\n    /* \"#utility.yul\":3484:3485   */\n  0x00\n    /* \"#utility.yul\":3480:3486   */\n  not\n    /* \"#utility.yul\":3472:3477   */\n  dup5\n    /* \"#utility.yul\":3469:3470   */\n  0x08\n    /* \"#utility.yul\":3465:3478   */\n  mul\n    /* \"#utility.yul\":3436:3487   */\n  tag_23\n  jump\t// in\ntag_69:\n    /* \"#utility.yul\":3432:3488   */\n  not\n    /* \"#utility.yul\":3517:3521   */\n  dup1\n    /* \"#utility.yul\":3511:3515   */\n  dup4\n    /* \"#utility.yul\":3507:3522   */\n  and\n    /* \"#utility.yul\":3497:3522   */\n  swap2\n  pop\n    /* \"#utility.yul\":3410:3528   */\n  pop\n    /* \"#utility.yul\":3359:3528   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3533:3828   */\ntag_25:\n    /* \"#utility.yul\":3609:3613   */\n  0x00\n    /* \"#utility.yul\":3755:3784   */\n  tag_71\n    /* \"#utility.yul\":3780:3783   */\n  dup4\n    /* \"#utility.yul\":3774:3778   */\n  dup4\n    /* \"#utility.yul\":3755:3784   */\n  tag_24\n  jump\t// in\ntag_71:\n    /* \"#utility.yul\":3747:3784   */\n  swap2\n  pop\n    /* \"#utility.yul\":3817:3820   */\n  dup3\n    /* \"#utility.yul\":3814:3815   */\n  0x02\n    /* \"#utility.yul\":3810:3821   */\n  mul\n    /* \"#utility.yul\":3804:3808   */\n  dup3\n    /* \"#utility.yul\":3801:3822   */\n  or\n    /* \"#utility.yul\":3793:3822   */\n  swap1\n  pop\n    /* \"#utility.yul\":3533:3828   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3833:5228   */\ntag_2:\n    /* \"#utility.yul\":3950:3987   */\n  tag_73\n    /* \"#utility.yul\":3983:3986   */\n  dup3\n    /* \"#utility.yul\":3950:3987   */\n  tag_6\n  jump\t// in\ntag_73:\n    /* \"#utility.yul\":4052:4070   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":4044:4050   */\n  dup2\n    /* \"#utility.yul\":4041:4071   */\n  gt\n    /* \"#utility.yul\":4038:4094   */\n  iszero\n  tag_74\n  jumpi\n    /* \"#utility.yul\":4074:4092   */\n  tag_75\n  tag_7\n  jump\t// in\ntag_75:\n    /* \"#utility.yul\":4038:4094   */\ntag_74:\n    /* \"#utility.yul\":4118:4156   */\n  tag_76\n    /* \"#utility.yul\":4150:4154   */\n  dup3\n    /* \"#utility.yul\":4144:4155   */\n  sload\n    /* \"#utility.yul\":4118:4156   */\n  tag_9\n  jump\t// in\ntag_76:\n    /* \"#utility.yul\":4203:4270   */\n  tag_77\n    /* \"#utility.yul\":4263:4269   */\n  dup3\n    /* \"#utility.yul\":4255:4261   */\n  dup3\n    /* \"#utility.yul\":4249:4253   */\n  dup6\n    /* \"#utility.yul\":4203:4270   */\n  tag_22\n  jump\t// in\ntag_77:\n    /* \"#utility.yul\":4297:4298   */\n  0x00\n    /* \"#utility.yul\":4321:4325   */\n  0x20\n    /* \"#utility.yul\":4308:4325   */\n  swap1\n  pop\n    /* \"#utility.yul\":4353:4355   */\n  0x1f\n    /* \"#utility.yul\":4345:4351   */\n  dup4\n    /* \"#utility.yul\":4342:4356   */\n  gt\n    /* \"#utility.yul\":4370:4371   */\n  0x01\n    /* \"#utility.yul\":4365:4983   */\n  dup2\n  eq\n  tag_79\n  jumpi\n    /* \"#utility.yul\":5027:5028   */\n  0x00\n    /* \"#utility.yul\":5044:5050   */\n  dup5\n    /* \"#utility.yul\":5041:5118   */\n  iszero\n  tag_80\n  jumpi\n    /* \"#utility.yul\":5093:5102   */\n  dup3\n    /* \"#utility.yul\":5088:5091   */\n  dup8\n    /* \"#utility.yul\":5084:5103   */\n  add\n    /* \"#utility.yul\":5078:5104   */\n  mload\n    /* \"#utility.yul\":5069:5104   */\n  swap1\n  pop\n    /* \"#utility.yul\":5041:5118   */\ntag_80:\n    /* \"#utility.yul\":5144:5211   */\n  tag_81\n    /* \"#utility.yul\":5204:5210   */\n  dup6\n    /* \"#utility.yul\":5197:5202   */\n  dup3\n    /* \"#utility.yul\":5144:5211   */\n  tag_25\n  jump\t// in\ntag_81:\n    /* \"#utility.yul\":5138:5142   */\n  dup7\n    /* \"#utility.yul\":5131:5212   */\n  sstore\n    /* \"#utility.yul\":5000:5222   */\n  pop\n    /* \"#utility.yul\":4335:5222   */\n  jump(tag_78)\n    /* \"#utility.yul\":4365:4983   */\ntag_79:\n    /* \"#utility.yul\":4417:4421   */\n  0x1f\n    /* \"#utility.yul\":4413:4422   */\n  not\n    /* \"#utility.yul\":4405:4411   */\n  dup5\n    /* \"#utility.yul\":4401:4423   */\n  and\n    /* \"#utility.yul\":4451:4488   */\n  tag_82\n    /* \"#utility.yul\":4483:4487   */\n  dup7\n    /* \"#utility.yul\":4451:4488   */\n  tag_10\n  jump\t// in\ntag_82:\n    /* \"#utility.yul\":4510:4511   */\n  0x00\n    /* \"#utility.yul\":4524:4732   */\ntag_83:\n    /* \"#utility.yul\":4538:4545   */\n  dup3\n    /* \"#utility.yul\":4535:4536   */\n  dup2\n    /* \"#utility.yul\":4532:4546   */\n  lt\n    /* \"#utility.yul\":4524:4732   */\n  iszero\n  tag_85\n  jumpi\n    /* \"#utility.yul\":4617:4626   */\n  dup5\n    /* \"#utility.yul\":4612:4615   */\n  dup10\n    /* \"#utility.yul\":4608:4627   */\n  add\n    /* \"#utility.yul\":4602:4628   */\n  mload\n    /* \"#utility.yul\":4594:4600   */\n  dup3\n    /* \"#utility.yul\":4587:4629   */\n  sstore\n    /* \"#utility.yul\":4668:4669   */\n  0x01\n    /* \"#utility.yul\":4660:4666   */\n  dup3\n    /* \"#utility.yul\":4656:4670   */\n  add\n    /* \"#utility.yul\":4646:4670   */\n  swap2\n  pop\n    /* \"#utility.yul\":4715:4717   */\n  0x20\n    /* \"#utility.yul\":4704:4713   */\n  dup6\n    /* \"#utility.yul\":4700:4718   */\n  add\n    /* \"#utility.yul\":4687:4718   */\n  swap5\n  pop\n    /* \"#utility.yul\":4561:4565   */\n  0x20\n    /* \"#utility.yul\":4558:4559   */\n  dup2\n    /* \"#utility.yul\":4554:4566   */\n  add\n    /* \"#utility.yul\":4549:4566   */\n  swap1\n  pop\n    /* \"#utility.yul\":4524:4732   */\n  jump(tag_83)\ntag_85:\n    /* \"#utility.yul\":4760:4766   */\n  dup7\n    /* \"#utility.yul\":4751:4758   */\n  dup4\n    /* \"#utility.yul\":4748:4767   */\n  lt\n    /* \"#utility.yul\":4745:4924   */\n  iszero\n  tag_86\n  jumpi\n    /* \"#utility.yul\":4818:4827   */\n  dup5\n    /* \"#utility.yul\":4813:4816   */\n  dup10\n    /* \"#utility.yul\":4809:4828   */\n  add\n    /* \"#utility.yul\":4803:4829   */\n  mload\n    /* \"#utility.yul\":4861:4909   */\n  tag_87\n    /* \"#utility.yul\":4903:4907   */\n  0x1f\n    /* \"#utility.yul\":4895:4901   */\n  dup10\n    /* \"#utility.yul\":4891:4908   */\n  and\n    /* \"#utility.yul\":4880:4889   */\n  dup3\n    /* \"#utility.yul\":4861:4909   */\n  tag_24\n  jump\t// in\ntag_87:\n    /* \"#utility.yul\":4853:4859   */\n  dup4\n    /* \"#utility.yul\":4846:4910   */\n  sstore\n    /* \"#utility.yul\":4768:4924   */\n  pop\n    /* \"#utility.yul\":4745:4924   */\ntag_86:\n    /* \"#utility.yul\":4970:4971   */\n  0x01\n    /* \"#utility.yul\":4966:4967   */\n  0x02\n    /* \"#utility.yul\":4958:4964   */\n  dup9\n    /* \"#utility.yul\":4954:4968   */\n  mul\n    /* \"#utility.yul\":4950:4972   */\n  add\n    /* \"#utility.yul\":4944:4948   */\n  dup9\n    /* \"#utility.yul\":4937:4973   */\n  sstore\n    /* \"#utility.yul\":4372:4983   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":4335:5222   */\ntag_78:\n  pop\n    /* \"#utility.yul\":3925:5228   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":3833:5228   */\n  pop\n  pop\n  jump\t// out\n    /* \"premiere/Premiere.sol\":967:3712  contract Premiere {... */\ntag_5:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"premiere/Premiere.sol\":967:3712  contract Premiere {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xfdd58e\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xbb79f587\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"premiere/Premiere.sol\":2364:2694  function balanceOf(address _owner, uint256 _id) external view returns (uint256) {... */\n    tag_3:\n      tag_5\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_6\n      swap2\n      swap1\n      tag_7\n      jump\t// in\n    tag_6:\n      tag_8\n      jump\t// in\n    tag_5:\n      mload(0x40)\n      tag_9\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_9:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"premiere/Premiere.sol\":1405:2358  function isSubscribed(... */\n    tag_4:\n      tag_11\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_12\n      swap2\n      swap1\n      tag_13\n      jump\t// in\n    tag_12:\n      tag_14\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"premiere/Premiere.sol\":2364:2694  function balanceOf(address _owner, uint256 _id) external view returns (uint256) {... */\n    tag_8:\n        /* \"premiere/Premiere.sol\":2435:2442  uint256 */\n      0x00\n        /* \"premiere/Premiere.sol\":2454:2466  address _tba */\n      dup1\n        /* \"premiere/Premiere.sol\":2479:2491  _tbaRegistry */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere.sol\":2469:2500  IRegistry(_tbaRegistry).account */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x192df655\n        /* \"premiere/Premiere.sol\":2501:2516  _lensHubAddress */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere.sol\":2518:2521  _id */\n      dup6\n        /* \"premiere/Premiere.sol\":2469:2522  IRegistry(_tbaRegistry).account(_lensHubAddress, _id) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_18\n      swap3\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_21\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_21:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n        /* \"premiere/Premiere.sol\":2454:2522  address _tba = IRegistry(_tbaRegistry).account(_lensHubAddress, _id) */\n      swap1\n      pop\n        /* \"premiere/Premiere.sol\":2536:2614  isSubscribed(_owner, _tba, Strings.toString(_id), _minFlowRate, _maxTimestamp) */\n      tag_24\n        /* \"premiere/Premiere.sol\":2549:2555  _owner */\n      dup5\n        /* \"premiere/Premiere.sol\":2557:2561  _tba */\n      dup3\n        /* \"premiere/Premiere.sol\":2563:2584  Strings.toString(_id) */\n      tag_25\n        /* \"premiere/Premiere.sol\":2580:2583  _id */\n      dup7\n        /* \"premiere/Premiere.sol\":2563:2579  Strings.toString */\n      tag_26\n        /* \"premiere/Premiere.sol\":2563:2584  Strings.toString(_id) */\n      jump\t// in\n    tag_25:\n        /* \"premiere/Premiere.sol\":2586:2598  _minFlowRate */\n      0x04\n        /* \"premiere/Premiere.sol\":2536:2614  isSubscribed(_owner, _tba, Strings.toString(_id), _minFlowRate, _maxTimestamp) */\n      dup1\n      sload\n      tag_27\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_29\n      swap1\n      tag_28\n      jump\t// in\n    tag_29:\n      dup1\n      iszero\n      tag_30\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_31\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_30)\n    tag_31:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_32:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_32\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_30:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"premiere/Premiere.sol\":2600:2613  _maxTimestamp */\n      0x05\n        /* \"premiere/Premiere.sol\":2536:2614  isSubscribed(_owner, _tba, Strings.toString(_id), _minFlowRate, _maxTimestamp) */\n      dup1\n      sload\n      tag_33\n      swap1\n      tag_28\n      jump\t// in\n    tag_33:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_34\n      swap1\n      tag_28\n      jump\t// in\n    tag_34:\n      dup1\n      iszero\n      tag_35\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_36\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_35)\n    tag_36:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_37:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_37\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_35:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"premiere/Premiere.sol\":2536:2548  isSubscribed */\n      tag_14\n        /* \"premiere/Premiere.sol\":2536:2614  isSubscribed(_owner, _tba, Strings.toString(_id), _minFlowRate, _maxTimestamp) */\n      jump\t// in\n    tag_24:\n        /* \"premiere/Premiere.sol\":2532:2688  if (isSubscribed(_owner, _tba, Strings.toString(_id), _minFlowRate, _maxTimestamp)) {... */\n      iszero\n      tag_38\n      jumpi\n        /* \"premiere/Premiere.sol\":2637:2638  1 */\n      0x01\n        /* \"premiere/Premiere.sol\":2630:2638  return 1 */\n      swap2\n      pop\n      pop\n      jump(tag_17)\n        /* \"premiere/Premiere.sol\":2532:2688  if (isSubscribed(_owner, _tba, Strings.toString(_id), _minFlowRate, _maxTimestamp)) {... */\n    tag_38:\n        /* \"premiere/Premiere.sol\":2676:2677  0 */\n      0x00\n        /* \"premiere/Premiere.sol\":2669:2677  return 0 */\n      swap2\n      pop\n      pop\n        /* \"premiere/Premiere.sol\":2364:2694  function balanceOf(address _owner, uint256 _id) external view returns (uint256) {... */\n    tag_17:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"premiere/Premiere.sol\":1405:2358  function isSubscribed(... */\n    tag_14:\n        /* \"premiere/Premiere.sol\":1608:1623  bool subscribed */\n      0x00\n        /* \"premiere/Premiere.sol\":1664:1680  IERC721 _lensHub */\n      dup1\n        /* \"premiere/Premiere.sol\":1691:1706  _lensHubAddress */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere.sol\":1664:1707  IERC721 _lensHub = IERC721(_lensHubAddress) */\n      swap1\n      pop\n        /* \"premiere/Premiere.sol\":1717:1746  IConstantFlowAgreementV1 _cfa */\n      0x00\n        /* \"premiere/Premiere.sol\":1787:1798  _cfaAddress */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere.sol\":1717:1808  IConstantFlowAgreementV1 _cfa = IConstantFlowAgreementV1(... */\n      swap1\n      pop\n        /* \"premiere/Premiere.sol\":1819:1836  uint256 timestamp */\n      0x00\n        /* \"premiere/Premiere.sol\":1838:1852  int96 flowRate */\n      dup1\n        /* \"premiere/Premiere.sol\":1860:1864  _cfa */\n      dup3\n        /* \"premiere/Premiere.sol\":1860:1872  _cfa.getFlow */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xe6a1e888\n        /* \"premiere/Premiere.sol\":1903:1921  _superTokenAddress */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere.sol\":1936:1942  sender */\n      dup13\n        /* \"premiere/Premiere.sol\":1956:1964  receiver */\n      dup13\n        /* \"premiere/Premiere.sol\":1860:1974  _cfa.getFlow(... */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_41\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_41:\n      0x80\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_44\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_44:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_45\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_45:\n        /* \"premiere/Premiere.sol\":1818:1974  (uint256 timestamp, int96 flowRate, , ) = _cfa.getFlow(... */\n      pop\n      pop\n      swap2\n      pop\n      swap2\n      pop\n        /* \"premiere/Premiere.sol\":1984:1998  address _owner */\n      0x00\n        /* \"premiere/Premiere.sol\":2001:2009  _lensHub */\n      dup5\n        /* \"premiere/Premiere.sol\":2001:2017  _lensHub.ownerOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x6352211e\n        /* \"premiere/Premiere.sol\":2023:2042  parseInt(profileId) */\n      tag_47\n        /* \"premiere/Premiere.sol\":2032:2041  profileId */\n      dup12\n        /* \"premiere/Premiere.sol\":2023:2031  parseInt */\n      tag_48\n        /* \"premiere/Premiere.sol\":2023:2042  parseInt(profileId) */\n      jump\t// in\n    tag_47:\n        /* \"premiere/Premiere.sol\":2001:2044  _lensHub.ownerOf(uint(parseInt(profileId))) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_49\n      swap2\n      swap1\n      tag_10\n      jump\t// in\n    tag_49:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_51\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_51:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_52\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_52:\n        /* \"premiere/Premiere.sol\":1984:2044  address _owner = _lensHub.ownerOf(uint(parseInt(profileId))) */\n      swap1\n      pop\n        /* \"premiere/Premiere.sol\":2055:2071  int256 _flowRate */\n      0x00\n        /* \"premiere/Premiere.sol\":2078:2099  parseInt(minFlowRate) */\n      tag_53\n        /* \"premiere/Premiere.sol\":2087:2098  minFlowRate */\n      dup10\n        /* \"premiere/Premiere.sol\":2078:2086  parseInt */\n      tag_48\n        /* \"premiere/Premiere.sol\":2078:2099  parseInt(minFlowRate) */\n      jump\t// in\n    tag_53:\n        /* \"premiere/Premiere.sol\":2055:2100  int256 _flowRate = int(parseInt(minFlowRate)) */\n      swap1\n      pop\n        /* \"premiere/Premiere.sol\":2110:2128  uint256 _timestamp */\n      0x00\n        /* \"premiere/Premiere.sol\":2131:2153  parseInt(maxTimestamp) */\n      tag_54\n        /* \"premiere/Premiere.sol\":2140:2152  maxTimestamp */\n      dup10\n        /* \"premiere/Premiere.sol\":2131:2139  parseInt */\n      tag_48\n        /* \"premiere/Premiere.sol\":2131:2153  parseInt(maxTimestamp) */\n      jump\t// in\n    tag_54:\n        /* \"premiere/Premiere.sol\":2110:2153  uint256 _timestamp = parseInt(maxTimestamp) */\n      swap1\n      pop\n        /* \"premiere/Premiere.sol\":2194:2203  _flowRate */\n      dup2\n        /* \"premiere/Premiere.sol\":2182:2190  flowRate */\n      dup5\n        /* \"premiere/Premiere.sol\":2182:2203  flowRate >= _flowRate */\n      0x0b\n      signextend\n      slt\n      iszero\n        /* \"premiere/Premiere.sol\":2182:2266  flowRate >= _flowRate &&... */\n      dup1\n      iszero\n      tag_55\n      jumpi\n      pop\n        /* \"premiere/Premiere.sol\":2238:2239  0 */\n      0x00\n        /* \"premiere/Premiere.sol\":2224:2234  _timestamp */\n      dup2\n        /* \"premiere/Premiere.sol\":2224:2239  _timestamp == 0 */\n      eq\n        /* \"premiere/Premiere.sol\":2224:2265  _timestamp == 0 || timestamp < _timestamp */\n      dup1\n      tag_56\n      jumpi\n      pop\n        /* \"premiere/Premiere.sol\":2255:2265  _timestamp */\n      dup1\n        /* \"premiere/Premiere.sol\":2243:2252  timestamp */\n      dup6\n        /* \"premiere/Premiere.sol\":2243:2265  timestamp < _timestamp */\n      lt\n        /* \"premiere/Premiere.sol\":2224:2265  _timestamp == 0 || timestamp < _timestamp */\n    tag_56:\n        /* \"premiere/Premiere.sol\":2182:2266  flowRate >= _flowRate &&... */\n    tag_55:\n        /* \"premiere/Premiere.sol\":2181:2299  (flowRate >= _flowRate &&... */\n      dup1\n      tag_57\n      jumpi\n      pop\n        /* \"premiere/Premiere.sol\":2293:2299  _owner */\n      dup3\n        /* \"premiere/Premiere.sol\":2283:2299  sender == _owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"premiere/Premiere.sol\":2283:2289  sender */\n      dup14\n        /* \"premiere/Premiere.sol\":2283:2299  sender == _owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"premiere/Premiere.sol\":2181:2299  (flowRate >= _flowRate &&... */\n    tag_57:\n        /* \"premiere/Premiere.sol\":2164:2352  if (... */\n      iszero\n      tag_58\n      jumpi\n        /* \"premiere/Premiere.sol\":2337:2341  true */\n      0x01\n        /* \"premiere/Premiere.sol\":2324:2341  subscribed = true */\n      swap8\n      pop\n        /* \"premiere/Premiere.sol\":2164:2352  if (... */\n    tag_58:\n        /* \"premiere/Premiere.sol\":1625:2358  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"premiere/Premiere.sol\":1405:2358  function isSubscribed(... */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":447:1143  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_26:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":503:516  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":552:566  uint256 length */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":589:590  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:586  Math.log10(value) */\n      tag_60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":580:585  value */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:579  Math.log10 */\n      tag_61\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:586  Math.log10(value) */\n      jump\t// in\n    tag_60:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":569:590  Math.log10(value) + 1 */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":552:590  uint256 length = Math.log10(value) + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":604:624  string memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":638:644  length */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":627:645  new string(length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_62\n      jumpi\n      tag_63\n      tag_64\n      jump\t// in\n    tag_63:\n    tag_62:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_65\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_65:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":604:645  string memory buffer = new string(length) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":659:670  uint256 ptr */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":785:791  length */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":781:783  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":777:792  add(32, length) */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":769:775  buffer */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:793  add(buffer, add(32, length)) */\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":758:793  ptr := add(buffer, add(32, length)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":820:1100  while (true) {... */\n    tag_66:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":827:831  true */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":820:1100  while (true) {... */\n      iszero\n      tag_67\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:856  ptr-- */\n      dup1\n      dup1\n      0x01\n      swap1\n      sub\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":990:998  _SYMBOLS */\n      0x3031323334353637383961626364656600000000000000000000000000000000\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":985:987  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":978:983  value */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":974:988  mod(value, 10) */\n      mod\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":969:999  byte(mod(value, 10), _SYMBOLS) */\n      byte\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":964:967  ptr */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":956:1000  mstore8(ptr, byte(mod(value, 10), _SYMBOLS)) */\n      mstore8\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1044:1046  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1035:1046  value /= 10 */\n      dup6\n      dup2\n      tag_68\n      jumpi\n      tag_69\n      tag_70\n      jump\t// in\n    tag_69:\n    tag_68:\n      div\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1077:1078  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1068:1073  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1068:1078  value == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":820:1100  while (true) {... */\n      tag_66\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1064:1085  if (value == 0) break */\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":820:1100  while (true) {... */\n    tag_67:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1120:1126  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1113:1126  return buffer */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":447:1143  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"premiere/Premiere.sol\":2700:2832  function parseInt(... */\n    tag_48:\n        /* \"premiere/Premiere.sol\":2773:2791  uint256 _parsedInt */\n      0x00\n        /* \"premiere/Premiere.sol\":2810:2825  parseInt(_a, 0) */\n      tag_73\n        /* \"premiere/Premiere.sol\":2819:2821  _a */\n      dup3\n        /* \"premiere/Premiere.sol\":2823:2824  0 */\n      0x00\n        /* \"premiere/Premiere.sol\":2810:2818  parseInt */\n      tag_74\n        /* \"premiere/Premiere.sol\":2810:2825  parseInt(_a, 0) */\n      jump\t// in\n    tag_73:\n        /* \"premiere/Premiere.sol\":2803:2825  return parseInt(_a, 0) */\n      swap1\n      pop\n        /* \"premiere/Premiere.sol\":2700:2832  function parseInt(... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10139:11055  function log10(uint256 value) internal pure returns (uint256) {... */\n    tag_61:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10192:10199  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10211:10225  uint256 result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10228:10229  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10211:10229  uint256 result = 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10276:10284  10 ** 64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10267:10272  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10267:10284  value >= 10 ** 64 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10263:10366  if (value >= 10 ** 64) {... */\n      tag_76\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10313:10321  10 ** 64 */\n      0x184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10304:10321  value /= 10 ** 64 */\n      dup4\n      dup2\n      tag_77\n      jumpi\n      tag_78\n      tag_70\n      jump\t// in\n    tag_78:\n    tag_77:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10349:10351  64 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10339:10351  result += 64 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10263:10366  if (value >= 10 ** 64) {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10392:10400  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10383:10388  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10383:10400  value >= 10 ** 32 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10379:10482  if (value >= 10 ** 32) {... */\n      tag_79\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10429:10437  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10420:10437  value /= 10 ** 32 */\n      dup4\n      dup2\n      tag_80\n      jumpi\n      tag_81\n      tag_70\n      jump\t// in\n    tag_81:\n    tag_80:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10465:10467  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10455:10467  result += 32 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10379:10482  if (value >= 10 ** 32) {... */\n    tag_79:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10508:10516  10 ** 16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10499:10504  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10499:10516  value >= 10 ** 16 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10495:10598  if (value >= 10 ** 16) {... */\n      tag_82\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10545:10553  10 ** 16 */\n      0x2386f26fc10000\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10536:10553  value /= 10 ** 16 */\n      dup4\n      dup2\n      tag_83\n      jumpi\n      tag_84\n      tag_70\n      jump\t// in\n    tag_84:\n    tag_83:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10581:10583  16 */\n      0x10\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10571:10583  result += 16 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10495:10598  if (value >= 10 ** 16) {... */\n    tag_82:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10624:10631  10 ** 8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10615:10620  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10615:10631  value >= 10 ** 8 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10611:10711  if (value >= 10 ** 8) {... */\n      tag_85\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10660:10667  10 ** 8 */\n      0x05f5e100\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10651:10667  value /= 10 ** 8 */\n      dup4\n      dup2\n      tag_86\n      jumpi\n      tag_87\n      tag_70\n      jump\t// in\n    tag_87:\n    tag_86:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10695:10696  8 */\n      0x08\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10685:10696  result += 8 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10611:10711  if (value >= 10 ** 8) {... */\n    tag_85:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10737:10744  10 ** 4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10728:10733  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10728:10744  value >= 10 ** 4 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10724:10824  if (value >= 10 ** 4) {... */\n      tag_88\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10773:10780  10 ** 4 */\n      0x2710\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10764:10780  value /= 10 ** 4 */\n      dup4\n      dup2\n      tag_89\n      jumpi\n      tag_90\n      tag_70\n      jump\t// in\n    tag_90:\n    tag_89:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10808:10809  4 */\n      0x04\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10798:10809  result += 4 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10724:10824  if (value >= 10 ** 4) {... */\n    tag_88:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10850:10857  10 ** 2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10841:10846  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10841:10857  value >= 10 ** 2 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10837:10937  if (value >= 10 ** 2) {... */\n      tag_91\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10886:10893  10 ** 2 */\n      0x64\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10877:10893  value /= 10 ** 2 */\n      dup4\n      dup2\n      tag_92\n      jumpi\n      tag_93\n      tag_70\n      jump\t// in\n    tag_93:\n    tag_92:\n      div\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10921:10922  2 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10911:10922  result += 2 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10837:10937  if (value >= 10 ** 2) {... */\n    tag_91:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10963:10970  10 ** 1 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10954:10959  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10954:10970  value >= 10 ** 1 */\n      lt\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10950:11016  if (value >= 10 ** 1) {... */\n      tag_94\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":11000:11001  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10990:11001  result += 1 */\n      dup2\n      add\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10950:11016  if (value >= 10 ** 1) {... */\n    tag_94:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":11042:11048  result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":11035:11048  return result */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":10139:11055  function log10(uint256 value) internal pure returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"premiere/Premiere.sol\":2838:3710  function parseInt(... */\n    tag_74:\n        /* \"premiere/Premiere.sol\":2928:2946  uint256 _parsedInt */\n      0x00\n        /* \"premiere/Premiere.sol\":2958:2978  bytes memory bresult */\n      dup1\n        /* \"premiere/Premiere.sol\":2987:2989  _a */\n      dup4\n        /* \"premiere/Premiere.sol\":2958:2990  bytes memory bresult = bytes(_a) */\n      swap1\n      pop\n        /* \"premiere/Premiere.sol\":3000:3009  uint mint */\n      0x00\n        /* \"premiere/Premiere.sol\":3023:3036  bool decimals */\n      dup1\n        /* \"premiere/Premiere.sol\":3059:3065  uint i */\n      0x00\n        /* \"premiere/Premiere.sol\":3054:3621  for (uint i = 0; i < bresult.length; i++) {... */\n    tag_96:\n        /* \"premiere/Premiere.sol\":3075:3082  bresult */\n      dup4\n        /* \"premiere/Premiere.sol\":3075:3089  bresult.length */\n      mload\n        /* \"premiere/Premiere.sol\":3071:3072  i */\n      dup2\n        /* \"premiere/Premiere.sol\":3071:3089  i < bresult.length */\n      lt\n        /* \"premiere/Premiere.sol\":3054:3621  for (uint i = 0; i < bresult.length; i++) {... */\n      iszero\n      tag_97\n      jumpi\n        /* \"premiere/Premiere.sol\":3159:3161  48 */\n      0x30\n        /* \"premiere/Premiere.sol\":3143:3150  bresult */\n      dup5\n        /* \"premiere/Premiere.sol\":3151:3152  i */\n      dup3\n        /* \"premiere/Premiere.sol\":3143:3153  bresult[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_99\n      jumpi\n      tag_100\n      tag_101\n      jump\t// in\n    tag_100:\n    tag_99:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"premiere/Premiere.sol\":3137:3154  uint8(bresult[i]) */\n      0xf8\n      shr\n        /* \"premiere/Premiere.sol\":3132:3155  uint(uint8(bresult[i])) */\n      0xff\n      and\n        /* \"premiere/Premiere.sol\":3132:3161  uint(uint8(bresult[i])) >= 48 */\n      lt\n      iszero\n        /* \"premiere/Premiere.sol\":3131:3213  (uint(uint8(bresult[i])) >= 48) &&... */\n      dup1\n      iszero\n      tag_102\n      jumpi\n      pop\n        /* \"premiere/Premiere.sol\":3210:3212  57 */\n      0x39\n        /* \"premiere/Premiere.sol\":3194:3201  bresult */\n      dup5\n        /* \"premiere/Premiere.sol\":3202:3203  i */\n      dup3\n        /* \"premiere/Premiere.sol\":3194:3204  bresult[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_103\n      jumpi\n      tag_104\n      tag_101\n      jump\t// in\n    tag_104:\n    tag_103:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"premiere/Premiere.sol\":3188:3205  uint8(bresult[i]) */\n      0xf8\n      shr\n        /* \"premiere/Premiere.sol\":3183:3206  uint(uint8(bresult[i])) */\n      0xff\n      and\n        /* \"premiere/Premiere.sol\":3183:3212  uint(uint8(bresult[i])) <= 57 */\n      gt\n      iszero\n        /* \"premiere/Premiere.sol\":3131:3213  (uint(uint8(bresult[i])) >= 48) &&... */\n    tag_102:\n        /* \"premiere/Premiere.sol\":3110:3611  if (... */\n      iszero\n      tag_105\n      jumpi\n        /* \"premiere/Premiere.sol\":3250:3258  decimals */\n      dup2\n        /* \"premiere/Premiere.sol\":3246:3426  if (decimals) {... */\n      iszero\n      tag_106\n      jumpi\n        /* \"premiere/Premiere.sol\":3292:3293  0 */\n      0x00\n        /* \"premiere/Premiere.sol\":3286:3288  _b */\n      dup7\n        /* \"premiere/Premiere.sol\":3286:3293  _b == 0 */\n      sub\n        /* \"premiere/Premiere.sol\":3282:3408  if (_b == 0) {... */\n      iszero\n        /* \"premiere/Premiere.sol\":3321:3326  break */\n      tag_97\n        /* \"premiere/Premiere.sol\":3282:3408  if (_b == 0) {... */\n      jumpi\n        /* \"premiere/Premiere.sol\":3381:3385  _b-- */\n      dup6\n      dup1\n      tag_109\n      swap1\n      tag_110\n      jump\t// in\n    tag_109:\n      swap7\n      pop\n      pop\n        /* \"premiere/Premiere.sol\":3246:3426  if (decimals) {... */\n    tag_106:\n        /* \"premiere/Premiere.sol\":3451:3453  10 */\n      0x0a\n        /* \"premiere/Premiere.sol\":3443:3453  mint *= 10 */\n      dup4\n      tag_111\n      swap2\n      swap1\n      tag_112\n      jump\t// in\n    tag_111:\n      swap3\n      pop\n        /* \"premiere/Premiere.sol\":3505:3507  48 */\n      0x30\n        /* \"premiere/Premiere.sol\":3490:3497  bresult */\n      dup5\n        /* \"premiere/Premiere.sol\":3498:3499  i */\n      dup3\n        /* \"premiere/Premiere.sol\":3490:3500  bresult[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_113\n      jumpi\n      tag_114\n      tag_101\n      jump\t// in\n    tag_114:\n    tag_113:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"premiere/Premiere.sol\":3484:3501  uint8(bresult[i]) */\n      0xf8\n      shr\n        /* \"premiere/Premiere.sol\":3479:3502  uint(uint8(bresult[i])) */\n      0xff\n      and\n        /* \"premiere/Premiere.sol\":3479:3507  uint(uint8(bresult[i])) - 48 */\n      tag_115\n      swap2\n      swap1\n      tag_116\n      jump\t// in\n    tag_115:\n        /* \"premiere/Premiere.sol\":3471:3507  mint += uint(uint8(bresult[i])) - 48 */\n      dup4\n      tag_117\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n      swap3\n      pop\n        /* \"premiere/Premiere.sol\":3110:3611  if (... */\n      jump(tag_119)\n    tag_105:\n        /* \"premiere/Premiere.sol\":3559:3561  46 */\n      0x2e\n        /* \"premiere/Premiere.sol\":3543:3550  bresult */\n      dup5\n        /* \"premiere/Premiere.sol\":3551:3552  i */\n      dup3\n        /* \"premiere/Premiere.sol\":3543:3553  bresult[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_120\n      jumpi\n      tag_121\n      tag_101\n      jump\t// in\n    tag_121:\n    tag_120:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"premiere/Premiere.sol\":3537:3554  uint8(bresult[i]) */\n      0xf8\n      shr\n        /* \"premiere/Premiere.sol\":3532:3555  uint(uint8(bresult[i])) */\n      0xff\n      and\n        /* \"premiere/Premiere.sol\":3532:3561  uint(uint8(bresult[i])) == 46 */\n      sub\n        /* \"premiere/Premiere.sol\":3528:3611  if (uint(uint8(bresult[i])) == 46) {... */\n      tag_122\n      jumpi\n        /* \"premiere/Premiere.sol\":3592:3596  true */\n      0x01\n        /* \"premiere/Premiere.sol\":3581:3596  decimals = true */\n      swap2\n      pop\n        /* \"premiere/Premiere.sol\":3528:3611  if (uint(uint8(bresult[i])) == 46) {... */\n    tag_122:\n        /* \"premiere/Premiere.sol\":3110:3611  if (... */\n    tag_119:\n        /* \"premiere/Premiere.sol\":3091:3094  i++ */\n      dup1\n      dup1\n      tag_123\n      swap1\n      tag_124\n      jump\t// in\n    tag_123:\n      swap2\n      pop\n      pop\n        /* \"premiere/Premiere.sol\":3054:3621  for (uint i = 0; i < bresult.length; i++) {... */\n      jump(tag_96)\n    tag_97:\n      pop\n        /* \"premiere/Premiere.sol\":3639:3640  0 */\n      0x00\n        /* \"premiere/Premiere.sol\":3634:3636  _b */\n      dup6\n        /* \"premiere/Premiere.sol\":3634:3640  _b > 0 */\n      gt\n        /* \"premiere/Premiere.sol\":3630:3683  if (_b > 0) {... */\n      iszero\n      tag_125\n      jumpi\n        /* \"premiere/Premiere.sol\":3670:3672  _b */\n      dup5\n        /* \"premiere/Premiere.sol\":3664:3666  10 */\n      0x0a\n        /* \"premiere/Premiere.sol\":3664:3672  10 ** _b */\n      tag_126\n      swap2\n      swap1\n      tag_127\n      jump\t// in\n    tag_126:\n        /* \"premiere/Premiere.sol\":3656:3672  mint *= 10 ** _b */\n      dup3\n      tag_128\n      swap2\n      swap1\n      tag_112\n      jump\t// in\n    tag_128:\n      swap2\n      pop\n        /* \"premiere/Premiere.sol\":3630:3683  if (_b > 0) {... */\n    tag_125:\n        /* \"premiere/Premiere.sol\":3699:3703  mint */\n      dup2\n        /* \"premiere/Premiere.sol\":3692:3703  return mint */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"premiere/Premiere.sol\":2838:3710  function parseInt(... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:82   */\n    tag_129:\n        /* \"#utility.yul\":40:46   */\n      0x00\n        /* \"#utility.yul\":73:75   */\n      0x40\n        /* \"#utility.yul\":67:76   */\n      mload\n        /* \"#utility.yul\":57:76   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:82   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_130:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_131:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_132:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_133:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_173\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_132\n      jump\t// in\n    tag_173:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_134:\n        /* \"#utility.yul\":641:665   */\n      tag_175\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_133\n      jump\t// in\n    tag_175:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_176\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_176:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_135:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_178\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_134\n      jump\t// in\n    tag_178:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:918   */\n    tag_136:\n        /* \"#utility.yul\":878:885   */\n      0x00\n        /* \"#utility.yul\":907:912   */\n      dup2\n        /* \"#utility.yul\":896:912   */\n      swap1\n      pop\n        /* \"#utility.yul\":841:918   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":924:1046   */\n    tag_137:\n        /* \"#utility.yul\":997:1021   */\n      tag_181\n        /* \"#utility.yul\":1015:1020   */\n      dup2\n        /* \"#utility.yul\":997:1021   */\n      tag_136\n      jump\t// in\n    tag_181:\n        /* \"#utility.yul\":990:995   */\n      dup2\n        /* \"#utility.yul\":987:1022   */\n      eq\n        /* \"#utility.yul\":977:1040   */\n      tag_182\n      jumpi\n        /* \"#utility.yul\":1036:1037   */\n      0x00\n        /* \"#utility.yul\":1033:1034   */\n      dup1\n        /* \"#utility.yul\":1026:1038   */\n      revert\n        /* \"#utility.yul\":977:1040   */\n    tag_182:\n        /* \"#utility.yul\":924:1046   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1052:1191   */\n    tag_138:\n        /* \"#utility.yul\":1098:1103   */\n      0x00\n        /* \"#utility.yul\":1136:1142   */\n      dup2\n        /* \"#utility.yul\":1123:1143   */\n      calldataload\n        /* \"#utility.yul\":1114:1143   */\n      swap1\n      pop\n        /* \"#utility.yul\":1152:1185   */\n      tag_184\n        /* \"#utility.yul\":1179:1184   */\n      dup2\n        /* \"#utility.yul\":1152:1185   */\n      tag_137\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":1052:1191   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1197:1671   */\n    tag_7:\n        /* \"#utility.yul\":1265:1271   */\n      0x00\n        /* \"#utility.yul\":1273:1279   */\n      dup1\n        /* \"#utility.yul\":1322:1324   */\n      0x40\n        /* \"#utility.yul\":1310:1319   */\n      dup4\n        /* \"#utility.yul\":1301:1308   */\n      dup6\n        /* \"#utility.yul\":1297:1320   */\n      sub\n        /* \"#utility.yul\":1293:1325   */\n      slt\n        /* \"#utility.yul\":1290:1409   */\n      iszero\n      tag_186\n      jumpi\n        /* \"#utility.yul\":1328:1407   */\n      tag_187\n      tag_130\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":1290:1409   */\n    tag_186:\n        /* \"#utility.yul\":1448:1449   */\n      0x00\n        /* \"#utility.yul\":1473:1526   */\n      tag_188\n        /* \"#utility.yul\":1518:1525   */\n      dup6\n        /* \"#utility.yul\":1509:1515   */\n      dup3\n        /* \"#utility.yul\":1498:1507   */\n      dup7\n        /* \"#utility.yul\":1494:1516   */\n      add\n        /* \"#utility.yul\":1473:1526   */\n      tag_135\n      jump\t// in\n    tag_188:\n        /* \"#utility.yul\":1463:1526   */\n      swap3\n      pop\n        /* \"#utility.yul\":1419:1536   */\n      pop\n        /* \"#utility.yul\":1575:1577   */\n      0x20\n        /* \"#utility.yul\":1601:1654   */\n      tag_189\n        /* \"#utility.yul\":1646:1653   */\n      dup6\n        /* \"#utility.yul\":1637:1643   */\n      dup3\n        /* \"#utility.yul\":1626:1635   */\n      dup7\n        /* \"#utility.yul\":1622:1644   */\n      add\n        /* \"#utility.yul\":1601:1654   */\n      tag_138\n      jump\t// in\n    tag_189:\n        /* \"#utility.yul\":1591:1654   */\n      swap2\n      pop\n        /* \"#utility.yul\":1546:1664   */\n      pop\n        /* \"#utility.yul\":1197:1671   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1677:1795   */\n    tag_139:\n        /* \"#utility.yul\":1764:1788   */\n      tag_191\n        /* \"#utility.yul\":1782:1787   */\n      dup2\n        /* \"#utility.yul\":1764:1788   */\n      tag_136\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":1759:1762   */\n      dup3\n        /* \"#utility.yul\":1752:1789   */\n      mstore\n        /* \"#utility.yul\":1677:1795   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1801:2023   */\n    tag_10:\n        /* \"#utility.yul\":1894:1898   */\n      0x00\n        /* \"#utility.yul\":1932:1934   */\n      0x20\n        /* \"#utility.yul\":1921:1930   */\n      dup3\n        /* \"#utility.yul\":1917:1935   */\n      add\n        /* \"#utility.yul\":1909:1935   */\n      swap1\n      pop\n        /* \"#utility.yul\":1945:2016   */\n      tag_193\n        /* \"#utility.yul\":2013:2014   */\n      0x00\n        /* \"#utility.yul\":2002:2011   */\n      dup4\n        /* \"#utility.yul\":1998:2015   */\n      add\n        /* \"#utility.yul\":1989:1995   */\n      dup5\n        /* \"#utility.yul\":1945:2016   */\n      tag_139\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":1801:2023   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2029:2146   */\n    tag_140:\n        /* \"#utility.yul\":2138:2139   */\n      0x00\n        /* \"#utility.yul\":2135:2136   */\n      dup1\n        /* \"#utility.yul\":2128:2140   */\n      revert\n        /* \"#utility.yul\":2152:2269   */\n    tag_141:\n        /* \"#utility.yul\":2261:2262   */\n      0x00\n        /* \"#utility.yul\":2258:2259   */\n      dup1\n        /* \"#utility.yul\":2251:2263   */\n      revert\n        /* \"#utility.yul\":2275:2377   */\n    tag_142:\n        /* \"#utility.yul\":2316:2322   */\n      0x00\n        /* \"#utility.yul\":2367:2369   */\n      0x1f\n        /* \"#utility.yul\":2363:2370   */\n      not\n        /* \"#utility.yul\":2358:2360   */\n      0x1f\n        /* \"#utility.yul\":2351:2356   */\n      dup4\n        /* \"#utility.yul\":2347:2361   */\n      add\n        /* \"#utility.yul\":2343:2371   */\n      and\n        /* \"#utility.yul\":2333:2371   */\n      swap1\n      pop\n        /* \"#utility.yul\":2275:2377   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2383:2563   */\n    tag_64:\n        /* \"#utility.yul\":2431:2508   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2428:2429   */\n      0x00\n        /* \"#utility.yul\":2421:2509   */\n      mstore\n        /* \"#utility.yul\":2528:2532   */\n      0x41\n        /* \"#utility.yul\":2525:2526   */\n      0x04\n        /* \"#utility.yul\":2518:2533   */\n      mstore\n        /* \"#utility.yul\":2552:2556   */\n      0x24\n        /* \"#utility.yul\":2549:2550   */\n      0x00\n        /* \"#utility.yul\":2542:2557   */\n      revert\n        /* \"#utility.yul\":2569:2850   */\n    tag_143:\n        /* \"#utility.yul\":2652:2679   */\n      tag_199\n        /* \"#utility.yul\":2674:2678   */\n      dup3\n        /* \"#utility.yul\":2652:2679   */\n      tag_142\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":2644:2650   */\n      dup2\n        /* \"#utility.yul\":2640:2680   */\n      add\n        /* \"#utility.yul\":2782:2788   */\n      dup2\n        /* \"#utility.yul\":2770:2780   */\n      dup2\n        /* \"#utility.yul\":2767:2789   */\n      lt\n        /* \"#utility.yul\":2746:2764   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2734:2744   */\n      dup3\n        /* \"#utility.yul\":2731:2765   */\n      gt\n        /* \"#utility.yul\":2728:2790   */\n      or\n        /* \"#utility.yul\":2725:2813   */\n      iszero\n      tag_200\n      jumpi\n        /* \"#utility.yul\":2793:2811   */\n      tag_201\n      tag_64\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":2725:2813   */\n    tag_200:\n        /* \"#utility.yul\":2833:2843   */\n      dup1\n        /* \"#utility.yul\":2829:2831   */\n      0x40\n        /* \"#utility.yul\":2822:2844   */\n      mstore\n        /* \"#utility.yul\":2612:2850   */\n      pop\n        /* \"#utility.yul\":2569:2850   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2856:2985   */\n    tag_144:\n        /* \"#utility.yul\":2890:2896   */\n      0x00\n        /* \"#utility.yul\":2917:2937   */\n      tag_203\n      tag_129\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":2907:2937   */\n      swap1\n      pop\n        /* \"#utility.yul\":2946:2979   */\n      tag_204\n        /* \"#utility.yul\":2974:2978   */\n      dup3\n        /* \"#utility.yul\":2966:2972   */\n      dup3\n        /* \"#utility.yul\":2946:2979   */\n      tag_143\n      jump\t// in\n    tag_204:\n        /* \"#utility.yul\":2856:2985   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2991:3299   */\n    tag_145:\n        /* \"#utility.yul\":3053:3057   */\n      0x00\n        /* \"#utility.yul\":3143:3161   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3135:3141   */\n      dup3\n        /* \"#utility.yul\":3132:3162   */\n      gt\n        /* \"#utility.yul\":3129:3185   */\n      iszero\n      tag_206\n      jumpi\n        /* \"#utility.yul\":3165:3183   */\n      tag_207\n      tag_64\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":3129:3185   */\n    tag_206:\n        /* \"#utility.yul\":3203:3232   */\n      tag_208\n        /* \"#utility.yul\":3225:3231   */\n      dup3\n        /* \"#utility.yul\":3203:3232   */\n      tag_142\n      jump\t// in\n    tag_208:\n        /* \"#utility.yul\":3195:3232   */\n      swap1\n      pop\n        /* \"#utility.yul\":3287:3291   */\n      0x20\n        /* \"#utility.yul\":3281:3285   */\n      dup2\n        /* \"#utility.yul\":3277:3292   */\n      add\n        /* \"#utility.yul\":3269:3292   */\n      swap1\n      pop\n        /* \"#utility.yul\":2991:3299   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3305:3451   */\n    tag_146:\n        /* \"#utility.yul\":3402:3408   */\n      dup3\n        /* \"#utility.yul\":3397:3400   */\n      dup2\n        /* \"#utility.yul\":3392:3395   */\n      dup4\n        /* \"#utility.yul\":3379:3409   */\n      calldatacopy\n        /* \"#utility.yul\":3443:3444   */\n      0x00\n        /* \"#utility.yul\":3434:3440   */\n      dup4\n        /* \"#utility.yul\":3429:3432   */\n      dup4\n        /* \"#utility.yul\":3425:3441   */\n      add\n        /* \"#utility.yul\":3418:3445   */\n      mstore\n        /* \"#utility.yul\":3305:3451   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3457:3882   */\n    tag_147:\n        /* \"#utility.yul\":3535:3540   */\n      0x00\n        /* \"#utility.yul\":3560:3626   */\n      tag_211\n        /* \"#utility.yul\":3576:3625   */\n      tag_212\n        /* \"#utility.yul\":3618:3624   */\n      dup5\n        /* \"#utility.yul\":3576:3625   */\n      tag_145\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":3560:3626   */\n      tag_144\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":3551:3626   */\n      swap1\n      pop\n        /* \"#utility.yul\":3649:3655   */\n      dup3\n        /* \"#utility.yul\":3642:3647   */\n      dup2\n        /* \"#utility.yul\":3635:3656   */\n      mstore\n        /* \"#utility.yul\":3687:3691   */\n      0x20\n        /* \"#utility.yul\":3680:3685   */\n      dup2\n        /* \"#utility.yul\":3676:3692   */\n      add\n        /* \"#utility.yul\":3725:3728   */\n      dup5\n        /* \"#utility.yul\":3716:3722   */\n      dup5\n        /* \"#utility.yul\":3711:3714   */\n      dup5\n        /* \"#utility.yul\":3707:3723   */\n      add\n        /* \"#utility.yul\":3704:3729   */\n      gt\n        /* \"#utility.yul\":3701:3813   */\n      iszero\n      tag_213\n      jumpi\n        /* \"#utility.yul\":3732:3811   */\n      tag_214\n      tag_141\n      jump\t// in\n    tag_214:\n        /* \"#utility.yul\":3701:3813   */\n    tag_213:\n        /* \"#utility.yul\":3822:3876   */\n      tag_215\n        /* \"#utility.yul\":3869:3875   */\n      dup5\n        /* \"#utility.yul\":3864:3867   */\n      dup3\n        /* \"#utility.yul\":3859:3862   */\n      dup6\n        /* \"#utility.yul\":3822:3876   */\n      tag_146\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":3541:3882   */\n      pop\n        /* \"#utility.yul\":3457:3882   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3902:4242   */\n    tag_148:\n        /* \"#utility.yul\":3958:3963   */\n      0x00\n        /* \"#utility.yul\":4007:4010   */\n      dup3\n        /* \"#utility.yul\":4000:4004   */\n      0x1f\n        /* \"#utility.yul\":3992:3998   */\n      dup4\n        /* \"#utility.yul\":3988:4005   */\n      add\n        /* \"#utility.yul\":3984:4011   */\n      slt\n        /* \"#utility.yul\":3974:4096   */\n      tag_217\n      jumpi\n        /* \"#utility.yul\":4015:4094   */\n      tag_218\n      tag_140\n      jump\t// in\n    tag_218:\n        /* \"#utility.yul\":3974:4096   */\n    tag_217:\n        /* \"#utility.yul\":4132:4138   */\n      dup2\n        /* \"#utility.yul\":4119:4139   */\n      calldataload\n        /* \"#utility.yul\":4157:4236   */\n      tag_219\n        /* \"#utility.yul\":4232:4235   */\n      dup5\n        /* \"#utility.yul\":4224:4230   */\n      dup3\n        /* \"#utility.yul\":4217:4221   */\n      0x20\n        /* \"#utility.yul\":4209:4215   */\n      dup7\n        /* \"#utility.yul\":4205:4222   */\n      add\n        /* \"#utility.yul\":4157:4236   */\n      tag_147\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":4148:4236   */\n      swap2\n      pop\n        /* \"#utility.yul\":3964:4242   */\n      pop\n        /* \"#utility.yul\":3902:4242   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4248:5699   */\n    tag_13:\n        /* \"#utility.yul\":4373:4379   */\n      0x00\n        /* \"#utility.yul\":4381:4387   */\n      dup1\n        /* \"#utility.yul\":4389:4395   */\n      0x00\n        /* \"#utility.yul\":4397:4403   */\n      dup1\n        /* \"#utility.yul\":4405:4411   */\n      0x00\n        /* \"#utility.yul\":4454:4457   */\n      0xa0\n        /* \"#utility.yul\":4442:4451   */\n      dup7\n        /* \"#utility.yul\":4433:4440   */\n      dup9\n        /* \"#utility.yul\":4429:4452   */\n      sub\n        /* \"#utility.yul\":4425:4458   */\n      slt\n        /* \"#utility.yul\":4422:4542   */\n      iszero\n      tag_221\n      jumpi\n        /* \"#utility.yul\":4461:4540   */\n      tag_222\n      tag_130\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":4422:4542   */\n    tag_221:\n        /* \"#utility.yul\":4581:4582   */\n      0x00\n        /* \"#utility.yul\":4606:4659   */\n      tag_223\n        /* \"#utility.yul\":4651:4658   */\n      dup9\n        /* \"#utility.yul\":4642:4648   */\n      dup3\n        /* \"#utility.yul\":4631:4640   */\n      dup10\n        /* \"#utility.yul\":4627:4649   */\n      add\n        /* \"#utility.yul\":4606:4659   */\n      tag_135\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":4596:4659   */\n      swap6\n      pop\n        /* \"#utility.yul\":4552:4669   */\n      pop\n        /* \"#utility.yul\":4708:4710   */\n      0x20\n        /* \"#utility.yul\":4734:4787   */\n      tag_224\n        /* \"#utility.yul\":4779:4786   */\n      dup9\n        /* \"#utility.yul\":4770:4776   */\n      dup3\n        /* \"#utility.yul\":4759:4768   */\n      dup10\n        /* \"#utility.yul\":4755:4777   */\n      add\n        /* \"#utility.yul\":4734:4787   */\n      tag_135\n      jump\t// in\n    tag_224:\n        /* \"#utility.yul\":4724:4787   */\n      swap5\n      pop\n        /* \"#utility.yul\":4679:4797   */\n      pop\n        /* \"#utility.yul\":4864:4866   */\n      0x40\n        /* \"#utility.yul\":4853:4862   */\n      dup7\n        /* \"#utility.yul\":4849:4867   */\n      add\n        /* \"#utility.yul\":4836:4868   */\n      calldataload\n        /* \"#utility.yul\":4895:4913   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4887:4893   */\n      dup2\n        /* \"#utility.yul\":4884:4914   */\n      gt\n        /* \"#utility.yul\":4881:4998   */\n      iszero\n      tag_225\n      jumpi\n        /* \"#utility.yul\":4917:4996   */\n      tag_226\n      tag_131\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":4881:4998   */\n    tag_225:\n        /* \"#utility.yul\":5022:5085   */\n      tag_227\n        /* \"#utility.yul\":5077:5084   */\n      dup9\n        /* \"#utility.yul\":5068:5074   */\n      dup3\n        /* \"#utility.yul\":5057:5066   */\n      dup10\n        /* \"#utility.yul\":5053:5075   */\n      add\n        /* \"#utility.yul\":5022:5085   */\n      tag_148\n      jump\t// in\n    tag_227:\n        /* \"#utility.yul\":5012:5085   */\n      swap4\n      pop\n        /* \"#utility.yul\":4807:5095   */\n      pop\n        /* \"#utility.yul\":5162:5164   */\n      0x60\n        /* \"#utility.yul\":5151:5160   */\n      dup7\n        /* \"#utility.yul\":5147:5165   */\n      add\n        /* \"#utility.yul\":5134:5166   */\n      calldataload\n        /* \"#utility.yul\":5193:5211   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5185:5191   */\n      dup2\n        /* \"#utility.yul\":5182:5212   */\n      gt\n        /* \"#utility.yul\":5179:5296   */\n      iszero\n      tag_228\n      jumpi\n        /* \"#utility.yul\":5215:5294   */\n      tag_229\n      tag_131\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":5179:5296   */\n    tag_228:\n        /* \"#utility.yul\":5320:5383   */\n      tag_230\n        /* \"#utility.yul\":5375:5382   */\n      dup9\n        /* \"#utility.yul\":5366:5372   */\n      dup3\n        /* \"#utility.yul\":5355:5364   */\n      dup10\n        /* \"#utility.yul\":5351:5373   */\n      add\n        /* \"#utility.yul\":5320:5383   */\n      tag_148\n      jump\t// in\n    tag_230:\n        /* \"#utility.yul\":5310:5383   */\n      swap3\n      pop\n        /* \"#utility.yul\":5105:5393   */\n      pop\n        /* \"#utility.yul\":5460:5463   */\n      0x80\n        /* \"#utility.yul\":5449:5458   */\n      dup7\n        /* \"#utility.yul\":5445:5464   */\n      add\n        /* \"#utility.yul\":5432:5465   */\n      calldataload\n        /* \"#utility.yul\":5492:5510   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5484:5490   */\n      dup2\n        /* \"#utility.yul\":5481:5511   */\n      gt\n        /* \"#utility.yul\":5478:5595   */\n      iszero\n      tag_231\n      jumpi\n        /* \"#utility.yul\":5514:5593   */\n      tag_232\n      tag_131\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":5478:5595   */\n    tag_231:\n        /* \"#utility.yul\":5619:5682   */\n      tag_233\n        /* \"#utility.yul\":5674:5681   */\n      dup9\n        /* \"#utility.yul\":5665:5671   */\n      dup3\n        /* \"#utility.yul\":5654:5663   */\n      dup10\n        /* \"#utility.yul\":5650:5672   */\n      add\n        /* \"#utility.yul\":5619:5682   */\n      tag_148\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":5609:5682   */\n      swap2\n      pop\n        /* \"#utility.yul\":5403:5692   */\n      pop\n        /* \"#utility.yul\":4248:5699   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5705:5795   */\n    tag_149:\n        /* \"#utility.yul\":5739:5746   */\n      0x00\n        /* \"#utility.yul\":5782:5787   */\n      dup2\n        /* \"#utility.yul\":5775:5788   */\n      iszero\n        /* \"#utility.yul\":5768:5789   */\n      iszero\n        /* \"#utility.yul\":5757:5789   */\n      swap1\n      pop\n        /* \"#utility.yul\":5705:5795   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5801:5910   */\n    tag_150:\n        /* \"#utility.yul\":5882:5903   */\n      tag_236\n        /* \"#utility.yul\":5897:5902   */\n      dup2\n        /* \"#utility.yul\":5882:5903   */\n      tag_149\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":5877:5880   */\n      dup3\n        /* \"#utility.yul\":5870:5904   */\n      mstore\n        /* \"#utility.yul\":5801:5910   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5916:6126   */\n    tag_16:\n        /* \"#utility.yul\":6003:6007   */\n      0x00\n        /* \"#utility.yul\":6041:6043   */\n      0x20\n        /* \"#utility.yul\":6030:6039   */\n      dup3\n        /* \"#utility.yul\":6026:6044   */\n      add\n        /* \"#utility.yul\":6018:6044   */\n      swap1\n      pop\n        /* \"#utility.yul\":6054:6119   */\n      tag_238\n        /* \"#utility.yul\":6116:6117   */\n      0x00\n        /* \"#utility.yul\":6105:6114   */\n      dup4\n        /* \"#utility.yul\":6101:6118   */\n      add\n        /* \"#utility.yul\":6092:6098   */\n      dup5\n        /* \"#utility.yul\":6054:6119   */\n      tag_150\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":5916:6126   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6132:6250   */\n    tag_151:\n        /* \"#utility.yul\":6219:6243   */\n      tag_240\n        /* \"#utility.yul\":6237:6242   */\n      dup2\n        /* \"#utility.yul\":6219:6243   */\n      tag_133\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":6214:6217   */\n      dup3\n        /* \"#utility.yul\":6207:6244   */\n      mstore\n        /* \"#utility.yul\":6132:6250   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6256:6588   */\n    tag_19:\n        /* \"#utility.yul\":6377:6381   */\n      0x00\n        /* \"#utility.yul\":6415:6417   */\n      0x40\n        /* \"#utility.yul\":6404:6413   */\n      dup3\n        /* \"#utility.yul\":6400:6418   */\n      add\n        /* \"#utility.yul\":6392:6418   */\n      swap1\n      pop\n        /* \"#utility.yul\":6428:6499   */\n      tag_242\n        /* \"#utility.yul\":6496:6497   */\n      0x00\n        /* \"#utility.yul\":6485:6494   */\n      dup4\n        /* \"#utility.yul\":6481:6498   */\n      add\n        /* \"#utility.yul\":6472:6478   */\n      dup6\n        /* \"#utility.yul\":6428:6499   */\n      tag_151\n      jump\t// in\n    tag_242:\n        /* \"#utility.yul\":6509:6581   */\n      tag_243\n        /* \"#utility.yul\":6577:6579   */\n      0x20\n        /* \"#utility.yul\":6566:6575   */\n      dup4\n        /* \"#utility.yul\":6562:6580   */\n      add\n        /* \"#utility.yul\":6553:6559   */\n      dup5\n        /* \"#utility.yul\":6509:6581   */\n      tag_139\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":6256:6588   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6594:6737   */\n    tag_152:\n        /* \"#utility.yul\":6651:6656   */\n      0x00\n        /* \"#utility.yul\":6682:6688   */\n      dup2\n        /* \"#utility.yul\":6676:6689   */\n      mload\n        /* \"#utility.yul\":6667:6689   */\n      swap1\n      pop\n        /* \"#utility.yul\":6698:6731   */\n      tag_245\n        /* \"#utility.yul\":6725:6730   */\n      dup2\n        /* \"#utility.yul\":6698:6731   */\n      tag_134\n      jump\t// in\n    tag_245:\n        /* \"#utility.yul\":6594:6737   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6743:7094   */\n    tag_23:\n        /* \"#utility.yul\":6813:6819   */\n      0x00\n        /* \"#utility.yul\":6862:6864   */\n      0x20\n        /* \"#utility.yul\":6850:6859   */\n      dup3\n        /* \"#utility.yul\":6841:6848   */\n      dup5\n        /* \"#utility.yul\":6837:6860   */\n      sub\n        /* \"#utility.yul\":6833:6865   */\n      slt\n        /* \"#utility.yul\":6830:6949   */\n      iszero\n      tag_247\n      jumpi\n        /* \"#utility.yul\":6868:6947   */\n      tag_248\n      tag_130\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":6830:6949   */\n    tag_247:\n        /* \"#utility.yul\":6988:6989   */\n      0x00\n        /* \"#utility.yul\":7013:7077   */\n      tag_249\n        /* \"#utility.yul\":7069:7076   */\n      dup5\n        /* \"#utility.yul\":7060:7066   */\n      dup3\n        /* \"#utility.yul\":7049:7058   */\n      dup6\n        /* \"#utility.yul\":7045:7067   */\n      add\n        /* \"#utility.yul\":7013:7077   */\n      tag_152\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":7003:7077   */\n      swap2\n      pop\n        /* \"#utility.yul\":6959:7087   */\n      pop\n        /* \"#utility.yul\":6743:7094   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7100:7280   */\n    tag_153:\n        /* \"#utility.yul\":7148:7225   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":7145:7146   */\n      0x00\n        /* \"#utility.yul\":7138:7226   */\n      mstore\n        /* \"#utility.yul\":7245:7249   */\n      0x22\n        /* \"#utility.yul\":7242:7243   */\n      0x04\n        /* \"#utility.yul\":7235:7250   */\n      mstore\n        /* \"#utility.yul\":7269:7273   */\n      0x24\n        /* \"#utility.yul\":7266:7267   */\n      0x00\n        /* \"#utility.yul\":7259:7274   */\n      revert\n        /* \"#utility.yul\":7286:7606   */\n    tag_28:\n        /* \"#utility.yul\":7330:7336   */\n      0x00\n        /* \"#utility.yul\":7367:7368   */\n      0x02\n        /* \"#utility.yul\":7361:7365   */\n      dup3\n        /* \"#utility.yul\":7357:7369   */\n      div\n        /* \"#utility.yul\":7347:7369   */\n      swap1\n      pop\n        /* \"#utility.yul\":7414:7415   */\n      0x01\n        /* \"#utility.yul\":7408:7412   */\n      dup3\n        /* \"#utility.yul\":7404:7416   */\n      and\n        /* \"#utility.yul\":7435:7453   */\n      dup1\n        /* \"#utility.yul\":7425:7506   */\n      tag_252\n      jumpi\n        /* \"#utility.yul\":7491:7495   */\n      0x7f\n        /* \"#utility.yul\":7483:7489   */\n      dup3\n        /* \"#utility.yul\":7479:7496   */\n      and\n        /* \"#utility.yul\":7469:7496   */\n      swap2\n      pop\n        /* \"#utility.yul\":7425:7506   */\n    tag_252:\n        /* \"#utility.yul\":7553:7555   */\n      0x20\n        /* \"#utility.yul\":7545:7551   */\n      dup3\n        /* \"#utility.yul\":7542:7556   */\n      lt\n        /* \"#utility.yul\":7522:7540   */\n      dup2\n        /* \"#utility.yul\":7519:7557   */\n      sub\n        /* \"#utility.yul\":7516:7600   */\n      tag_253\n      jumpi\n        /* \"#utility.yul\":7572:7590   */\n      tag_254\n      tag_153\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":7516:7600   */\n    tag_253:\n        /* \"#utility.yul\":7337:7606   */\n      pop\n        /* \"#utility.yul\":7286:7606   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7612:7672   */\n    tag_154:\n        /* \"#utility.yul\":7640:7643   */\n      0x00\n        /* \"#utility.yul\":7661:7666   */\n      dup2\n        /* \"#utility.yul\":7654:7666   */\n      swap1\n      pop\n        /* \"#utility.yul\":7612:7672   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7678:7820   */\n    tag_155:\n        /* \"#utility.yul\":7728:7737   */\n      0x00\n        /* \"#utility.yul\":7761:7814   */\n      tag_257\n        /* \"#utility.yul\":7779:7813   */\n      tag_258\n        /* \"#utility.yul\":7788:7812   */\n      tag_259\n        /* \"#utility.yul\":7806:7811   */\n      dup5\n        /* \"#utility.yul\":7788:7812   */\n      tag_132\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":7779:7813   */\n      tag_154\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":7761:7814   */\n      tag_132\n      jump\t// in\n    tag_257:\n        /* \"#utility.yul\":7748:7814   */\n      swap1\n      pop\n        /* \"#utility.yul\":7678:7820   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7826:7952   */\n    tag_156:\n        /* \"#utility.yul\":7876:7885   */\n      0x00\n        /* \"#utility.yul\":7909:7946   */\n      tag_261\n        /* \"#utility.yul\":7940:7945   */\n      dup3\n        /* \"#utility.yul\":7909:7946   */\n      tag_155\n      jump\t// in\n    tag_261:\n        /* \"#utility.yul\":7896:7946   */\n      swap1\n      pop\n        /* \"#utility.yul\":7826:7952   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7958:8109   */\n    tag_157:\n        /* \"#utility.yul\":8033:8042   */\n      0x00\n        /* \"#utility.yul\":8066:8103   */\n      tag_263\n        /* \"#utility.yul\":8097:8102   */\n      dup3\n        /* \"#utility.yul\":8066:8103   */\n      tag_156\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":8053:8103   */\n      swap1\n      pop\n        /* \"#utility.yul\":7958:8109   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8115:8296   */\n    tag_158:\n        /* \"#utility.yul\":8227:8289   */\n      tag_265\n        /* \"#utility.yul\":8283:8288   */\n      dup2\n        /* \"#utility.yul\":8227:8289   */\n      tag_157\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":8222:8225   */\n      dup3\n        /* \"#utility.yul\":8215:8290   */\n      mstore\n        /* \"#utility.yul\":8115:8296   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8302:8794   */\n    tag_42:\n        /* \"#utility.yul\":8476:8480   */\n      0x00\n        /* \"#utility.yul\":8514:8516   */\n      0x60\n        /* \"#utility.yul\":8503:8512   */\n      dup3\n        /* \"#utility.yul\":8499:8517   */\n      add\n        /* \"#utility.yul\":8491:8517   */\n      swap1\n      pop\n        /* \"#utility.yul\":8527:8623   */\n      tag_267\n        /* \"#utility.yul\":8620:8621   */\n      0x00\n        /* \"#utility.yul\":8609:8618   */\n      dup4\n        /* \"#utility.yul\":8605:8622   */\n      add\n        /* \"#utility.yul\":8596:8602   */\n      dup7\n        /* \"#utility.yul\":8527:8623   */\n      tag_158\n      jump\t// in\n    tag_267:\n        /* \"#utility.yul\":8633:8705   */\n      tag_268\n        /* \"#utility.yul\":8701:8703   */\n      0x20\n        /* \"#utility.yul\":8690:8699   */\n      dup4\n        /* \"#utility.yul\":8686:8704   */\n      add\n        /* \"#utility.yul\":8677:8683   */\n      dup6\n        /* \"#utility.yul\":8633:8705   */\n      tag_151\n      jump\t// in\n    tag_268:\n        /* \"#utility.yul\":8715:8787   */\n      tag_269\n        /* \"#utility.yul\":8783:8785   */\n      0x40\n        /* \"#utility.yul\":8772:8781   */\n      dup4\n        /* \"#utility.yul\":8768:8786   */\n      add\n        /* \"#utility.yul\":8759:8765   */\n      dup5\n        /* \"#utility.yul\":8715:8787   */\n      tag_151\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":8302:8794   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8800:8943   */\n    tag_159:\n        /* \"#utility.yul\":8857:8862   */\n      0x00\n        /* \"#utility.yul\":8888:8894   */\n      dup2\n        /* \"#utility.yul\":8882:8895   */\n      mload\n        /* \"#utility.yul\":8873:8895   */\n      swap1\n      pop\n        /* \"#utility.yul\":8904:8937   */\n      tag_271\n        /* \"#utility.yul\":8931:8936   */\n      dup2\n        /* \"#utility.yul\":8904:8937   */\n      tag_137\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":8800:8943   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8949:9040   */\n    tag_160:\n        /* \"#utility.yul\":8984:8991   */\n      0x00\n        /* \"#utility.yul\":9028:9033   */\n      dup2\n        /* \"#utility.yul\":9024:9026   */\n      0x0b\n        /* \"#utility.yul\":9013:9034   */\n      signextend\n        /* \"#utility.yul\":9002:9034   */\n      swap1\n      pop\n        /* \"#utility.yul\":8949:9040   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9046:9164   */\n    tag_161:\n        /* \"#utility.yul\":9117:9139   */\n      tag_274\n        /* \"#utility.yul\":9133:9138   */\n      dup2\n        /* \"#utility.yul\":9117:9139   */\n      tag_160\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":9110:9115   */\n      dup2\n        /* \"#utility.yul\":9107:9140   */\n      eq\n        /* \"#utility.yul\":9097:9158   */\n      tag_275\n      jumpi\n        /* \"#utility.yul\":9154:9155   */\n      0x00\n        /* \"#utility.yul\":9151:9152   */\n      dup1\n        /* \"#utility.yul\":9144:9156   */\n      revert\n        /* \"#utility.yul\":9097:9158   */\n    tag_275:\n        /* \"#utility.yul\":9046:9164   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9170:9309   */\n    tag_162:\n        /* \"#utility.yul\":9225:9230   */\n      0x00\n        /* \"#utility.yul\":9256:9262   */\n      dup2\n        /* \"#utility.yul\":9250:9263   */\n      mload\n        /* \"#utility.yul\":9241:9263   */\n      swap1\n      pop\n        /* \"#utility.yul\":9272:9303   */\n      tag_277\n        /* \"#utility.yul\":9297:9302   */\n      dup2\n        /* \"#utility.yul\":9272:9303   */\n      tag_161\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":9170:9309   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9315:10131   */\n    tag_46:\n        /* \"#utility.yul\":9410:9416   */\n      0x00\n        /* \"#utility.yul\":9418:9424   */\n      dup1\n        /* \"#utility.yul\":9426:9432   */\n      0x00\n        /* \"#utility.yul\":9434:9440   */\n      dup1\n        /* \"#utility.yul\":9483:9486   */\n      0x80\n        /* \"#utility.yul\":9471:9480   */\n      dup6\n        /* \"#utility.yul\":9462:9469   */\n      dup8\n        /* \"#utility.yul\":9458:9481   */\n      sub\n        /* \"#utility.yul\":9454:9487   */\n      slt\n        /* \"#utility.yul\":9451:9571   */\n      iszero\n      tag_279\n      jumpi\n        /* \"#utility.yul\":9490:9569   */\n      tag_280\n      tag_130\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":9451:9571   */\n    tag_279:\n        /* \"#utility.yul\":9610:9611   */\n      0x00\n        /* \"#utility.yul\":9635:9699   */\n      tag_281\n        /* \"#utility.yul\":9691:9698   */\n      dup8\n        /* \"#utility.yul\":9682:9688   */\n      dup3\n        /* \"#utility.yul\":9671:9680   */\n      dup9\n        /* \"#utility.yul\":9667:9689   */\n      add\n        /* \"#utility.yul\":9635:9699   */\n      tag_159\n      jump\t// in\n    tag_281:\n        /* \"#utility.yul\":9625:9699   */\n      swap5\n      pop\n        /* \"#utility.yul\":9581:9709   */\n      pop\n        /* \"#utility.yul\":9748:9750   */\n      0x20\n        /* \"#utility.yul\":9774:9836   */\n      tag_282\n        /* \"#utility.yul\":9828:9835   */\n      dup8\n        /* \"#utility.yul\":9819:9825   */\n      dup3\n        /* \"#utility.yul\":9808:9817   */\n      dup9\n        /* \"#utility.yul\":9804:9826   */\n      add\n        /* \"#utility.yul\":9774:9836   */\n      tag_162\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":9764:9836   */\n      swap4\n      pop\n        /* \"#utility.yul\":9719:9846   */\n      pop\n        /* \"#utility.yul\":9885:9887   */\n      0x40\n        /* \"#utility.yul\":9911:9975   */\n      tag_283\n        /* \"#utility.yul\":9967:9974   */\n      dup8\n        /* \"#utility.yul\":9958:9964   */\n      dup3\n        /* \"#utility.yul\":9947:9956   */\n      dup9\n        /* \"#utility.yul\":9943:9965   */\n      add\n        /* \"#utility.yul\":9911:9975   */\n      tag_159\n      jump\t// in\n    tag_283:\n        /* \"#utility.yul\":9901:9975   */\n      swap3\n      pop\n        /* \"#utility.yul\":9856:9985   */\n      pop\n        /* \"#utility.yul\":10024:10026   */\n      0x60\n        /* \"#utility.yul\":10050:10114   */\n      tag_284\n        /* \"#utility.yul\":10106:10113   */\n      dup8\n        /* \"#utility.yul\":10097:10103   */\n      dup3\n        /* \"#utility.yul\":10086:10095   */\n      dup9\n        /* \"#utility.yul\":10082:10104   */\n      add\n        /* \"#utility.yul\":10050:10114   */\n      tag_159\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":10040:10114   */\n      swap2\n      pop\n        /* \"#utility.yul\":9995:10124   */\n      pop\n        /* \"#utility.yul\":9315:10131   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10137:10317   */\n    tag_70:\n        /* \"#utility.yul\":10185:10262   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10182:10183   */\n      0x00\n        /* \"#utility.yul\":10175:10263   */\n      mstore\n        /* \"#utility.yul\":10282:10286   */\n      0x12\n        /* \"#utility.yul\":10279:10280   */\n      0x04\n        /* \"#utility.yul\":10272:10287   */\n      mstore\n        /* \"#utility.yul\":10306:10310   */\n      0x24\n        /* \"#utility.yul\":10303:10304   */\n      0x00\n        /* \"#utility.yul\":10296:10311   */\n      revert\n        /* \"#utility.yul\":10323:10503   */\n    tag_101:\n        /* \"#utility.yul\":10371:10448   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10368:10369   */\n      0x00\n        /* \"#utility.yul\":10361:10449   */\n      mstore\n        /* \"#utility.yul\":10468:10472   */\n      0x32\n        /* \"#utility.yul\":10465:10466   */\n      0x04\n        /* \"#utility.yul\":10458:10473   */\n      mstore\n        /* \"#utility.yul\":10492:10496   */\n      0x24\n        /* \"#utility.yul\":10489:10490   */\n      0x00\n        /* \"#utility.yul\":10482:10497   */\n      revert\n        /* \"#utility.yul\":10509:10689   */\n    tag_163:\n        /* \"#utility.yul\":10557:10634   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10554:10555   */\n      0x00\n        /* \"#utility.yul\":10547:10635   */\n      mstore\n        /* \"#utility.yul\":10654:10658   */\n      0x11\n        /* \"#utility.yul\":10651:10652   */\n      0x04\n        /* \"#utility.yul\":10644:10659   */\n      mstore\n        /* \"#utility.yul\":10678:10682   */\n      0x24\n        /* \"#utility.yul\":10675:10676   */\n      0x00\n        /* \"#utility.yul\":10668:10683   */\n      revert\n        /* \"#utility.yul\":10695:10866   */\n    tag_110:\n        /* \"#utility.yul\":10734:10737   */\n      0x00\n        /* \"#utility.yul\":10757:10781   */\n      tag_289\n        /* \"#utility.yul\":10775:10780   */\n      dup3\n        /* \"#utility.yul\":10757:10781   */\n      tag_136\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":10748:10781   */\n      swap2\n      pop\n        /* \"#utility.yul\":10803:10807   */\n      0x00\n        /* \"#utility.yul\":10796:10801   */\n      dup3\n        /* \"#utility.yul\":10793:10808   */\n      sub\n        /* \"#utility.yul\":10790:10831   */\n      tag_290\n      jumpi\n        /* \"#utility.yul\":10811:10829   */\n      tag_291\n      tag_163\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":10790:10831   */\n    tag_290:\n        /* \"#utility.yul\":10858:10859   */\n      0x01\n        /* \"#utility.yul\":10851:10856   */\n      dup3\n        /* \"#utility.yul\":10847:10860   */\n      sub\n        /* \"#utility.yul\":10840:10860   */\n      swap1\n      pop\n        /* \"#utility.yul\":10695:10866   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10872:11282   */\n    tag_112:\n        /* \"#utility.yul\":10912:10919   */\n      0x00\n        /* \"#utility.yul\":10935:10955   */\n      tag_293\n        /* \"#utility.yul\":10953:10954   */\n      dup3\n        /* \"#utility.yul\":10935:10955   */\n      tag_136\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":10930:10955   */\n      swap2\n      pop\n        /* \"#utility.yul\":10969:10989   */\n      tag_294\n        /* \"#utility.yul\":10987:10988   */\n      dup4\n        /* \"#utility.yul\":10969:10989   */\n      tag_136\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":10964:10989   */\n      swap3\n      pop\n        /* \"#utility.yul\":11024:11025   */\n      dup3\n        /* \"#utility.yul\":11021:11022   */\n      dup3\n        /* \"#utility.yul\":11017:11026   */\n      mul\n        /* \"#utility.yul\":11046:11076   */\n      tag_295\n        /* \"#utility.yul\":11064:11075   */\n      dup2\n        /* \"#utility.yul\":11046:11076   */\n      tag_136\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":11035:11076   */\n      swap2\n      pop\n        /* \"#utility.yul\":11225:11226   */\n      dup3\n        /* \"#utility.yul\":11216:11223   */\n      dup3\n        /* \"#utility.yul\":11212:11227   */\n      div\n        /* \"#utility.yul\":11209:11210   */\n      dup5\n        /* \"#utility.yul\":11206:11228   */\n      eq\n        /* \"#utility.yul\":11186:11187   */\n      dup4\n        /* \"#utility.yul\":11179:11188   */\n      iszero\n        /* \"#utility.yul\":11159:11242   */\n      or\n        /* \"#utility.yul\":11136:11275   */\n      tag_296\n      jumpi\n        /* \"#utility.yul\":11255:11273   */\n      tag_297\n      tag_163\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":11136:11275   */\n    tag_296:\n        /* \"#utility.yul\":10920:11282   */\n      pop\n        /* \"#utility.yul\":10872:11282   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11288:11482   */\n    tag_116:\n        /* \"#utility.yul\":11328:11332   */\n      0x00\n        /* \"#utility.yul\":11348:11368   */\n      tag_299\n        /* \"#utility.yul\":11366:11367   */\n      dup3\n        /* \"#utility.yul\":11348:11368   */\n      tag_136\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":11343:11368   */\n      swap2\n      pop\n        /* \"#utility.yul\":11382:11402   */\n      tag_300\n        /* \"#utility.yul\":11400:11401   */\n      dup4\n        /* \"#utility.yul\":11382:11402   */\n      tag_136\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":11377:11402   */\n      swap3\n      pop\n        /* \"#utility.yul\":11426:11427   */\n      dup3\n        /* \"#utility.yul\":11423:11424   */\n      dup3\n        /* \"#utility.yul\":11419:11428   */\n      sub\n        /* \"#utility.yul\":11411:11428   */\n      swap1\n      pop\n        /* \"#utility.yul\":11450:11451   */\n      dup2\n        /* \"#utility.yul\":11444:11448   */\n      dup2\n        /* \"#utility.yul\":11441:11452   */\n      gt\n        /* \"#utility.yul\":11438:11475   */\n      iszero\n      tag_301\n      jumpi\n        /* \"#utility.yul\":11455:11473   */\n      tag_302\n      tag_163\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":11438:11475   */\n    tag_301:\n        /* \"#utility.yul\":11288:11482   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11488:11679   */\n    tag_118:\n        /* \"#utility.yul\":11528:11531   */\n      0x00\n        /* \"#utility.yul\":11547:11567   */\n      tag_304\n        /* \"#utility.yul\":11565:11566   */\n      dup3\n        /* \"#utility.yul\":11547:11567   */\n      tag_136\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":11542:11567   */\n      swap2\n      pop\n        /* \"#utility.yul\":11581:11601   */\n      tag_305\n        /* \"#utility.yul\":11599:11600   */\n      dup4\n        /* \"#utility.yul\":11581:11601   */\n      tag_136\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":11576:11601   */\n      swap3\n      pop\n        /* \"#utility.yul\":11624:11625   */\n      dup3\n        /* \"#utility.yul\":11621:11622   */\n      dup3\n        /* \"#utility.yul\":11617:11626   */\n      add\n        /* \"#utility.yul\":11610:11626   */\n      swap1\n      pop\n        /* \"#utility.yul\":11645:11648   */\n      dup1\n        /* \"#utility.yul\":11642:11643   */\n      dup3\n        /* \"#utility.yul\":11639:11649   */\n      gt\n        /* \"#utility.yul\":11636:11672   */\n      iszero\n      tag_306\n      jumpi\n        /* \"#utility.yul\":11652:11670   */\n      tag_307\n      tag_163\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":11636:11672   */\n    tag_306:\n        /* \"#utility.yul\":11488:11679   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11685:11918   */\n    tag_124:\n        /* \"#utility.yul\":11724:11727   */\n      0x00\n        /* \"#utility.yul\":11747:11771   */\n      tag_309\n        /* \"#utility.yul\":11765:11770   */\n      dup3\n        /* \"#utility.yul\":11747:11771   */\n      tag_136\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":11738:11771   */\n      swap2\n      pop\n        /* \"#utility.yul\":11793:11859   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":11786:11791   */\n      dup3\n        /* \"#utility.yul\":11783:11860   */\n      sub\n        /* \"#utility.yul\":11780:11883   */\n      tag_310\n      jumpi\n        /* \"#utility.yul\":11863:11881   */\n      tag_311\n      tag_163\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":11780:11883   */\n    tag_310:\n        /* \"#utility.yul\":11910:11911   */\n      0x01\n        /* \"#utility.yul\":11903:11908   */\n      dup3\n        /* \"#utility.yul\":11899:11912   */\n      add\n        /* \"#utility.yul\":11892:11912   */\n      swap1\n      pop\n        /* \"#utility.yul\":11685:11918   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11924:12026   */\n    tag_164:\n        /* \"#utility.yul\":11966:11974   */\n      0x00\n        /* \"#utility.yul\":12013:12018   */\n      dup2\n        /* \"#utility.yul\":12010:12011   */\n      0x01\n        /* \"#utility.yul\":12006:12019   */\n      shr\n        /* \"#utility.yul\":11985:12019   */\n      swap1\n      pop\n        /* \"#utility.yul\":11924:12026   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12032:12880   */\n    tag_165:\n        /* \"#utility.yul\":12093:12098   */\n      0x00\n        /* \"#utility.yul\":12100:12104   */\n      dup1\n        /* \"#utility.yul\":12124:12130   */\n      dup3\n        /* \"#utility.yul\":12115:12130   */\n      swap2\n      pop\n        /* \"#utility.yul\":12148:12153   */\n      dup4\n        /* \"#utility.yul\":12139:12153   */\n      swap1\n      pop\n        /* \"#utility.yul\":12162:12874   */\n    tag_314:\n        /* \"#utility.yul\":12183:12184   */\n      0x01\n        /* \"#utility.yul\":12173:12181   */\n      dup6\n        /* \"#utility.yul\":12170:12185   */\n      gt\n        /* \"#utility.yul\":12162:12874   */\n      iszero\n      tag_316\n      jumpi\n        /* \"#utility.yul\":12278:12282   */\n      dup1\n        /* \"#utility.yul\":12273:12276   */\n      dup7\n        /* \"#utility.yul\":12269:12283   */\n      div\n        /* \"#utility.yul\":12263:12267   */\n      dup2\n        /* \"#utility.yul\":12260:12284   */\n      gt\n        /* \"#utility.yul\":12257:12307   */\n      iszero\n      tag_317\n      jumpi\n        /* \"#utility.yul\":12287:12305   */\n      tag_318\n      tag_163\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":12257:12307   */\n    tag_317:\n        /* \"#utility.yul\":12337:12338   */\n      0x01\n        /* \"#utility.yul\":12327:12335   */\n      dup6\n        /* \"#utility.yul\":12323:12339   */\n      and\n        /* \"#utility.yul\":12320:12771   */\n      iszero\n      tag_319\n      jumpi\n        /* \"#utility.yul\":12752:12756   */\n      dup1\n        /* \"#utility.yul\":12745:12750   */\n      dup3\n        /* \"#utility.yul\":12741:12757   */\n      mul\n        /* \"#utility.yul\":12732:12757   */\n      swap2\n      pop\n        /* \"#utility.yul\":12320:12771   */\n    tag_319:\n        /* \"#utility.yul\":12802:12806   */\n      dup1\n        /* \"#utility.yul\":12796:12800   */\n      dup2\n        /* \"#utility.yul\":12792:12807   */\n      mul\n        /* \"#utility.yul\":12784:12807   */\n      swap1\n      pop\n        /* \"#utility.yul\":12832:12864   */\n      tag_320\n        /* \"#utility.yul\":12855:12863   */\n      dup6\n        /* \"#utility.yul\":12832:12864   */\n      tag_164\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":12820:12864   */\n      swap5\n      pop\n        /* \"#utility.yul\":12162:12874   */\n      jump(tag_314)\n    tag_316:\n        /* \"#utility.yul\":12032:12880   */\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12886:13959   */\n    tag_166:\n        /* \"#utility.yul\":12940:12945   */\n      0x00\n        /* \"#utility.yul\":13131:13139   */\n      dup3\n        /* \"#utility.yul\":13121:13161   */\n      tag_322\n      jumpi\n        /* \"#utility.yul\":13152:13153   */\n      0x01\n        /* \"#utility.yul\":13143:13153   */\n      swap1\n      pop\n        /* \"#utility.yul\":13154:13159   */\n      jump(tag_321)\n        /* \"#utility.yul\":13121:13161   */\n    tag_322:\n        /* \"#utility.yul\":13180:13184   */\n      dup2\n        /* \"#utility.yul\":13170:13206   */\n      tag_323\n      jumpi\n        /* \"#utility.yul\":13197:13198   */\n      0x00\n        /* \"#utility.yul\":13188:13198   */\n      swap1\n      pop\n        /* \"#utility.yul\":13199:13204   */\n      jump(tag_321)\n        /* \"#utility.yul\":13170:13206   */\n    tag_323:\n        /* \"#utility.yul\":13266:13270   */\n      dup2\n        /* \"#utility.yul\":13314:13315   */\n      0x01\n        /* \"#utility.yul\":13309:13336   */\n      dup2\n      eq\n      tag_325\n      jumpi\n        /* \"#utility.yul\":13350:13351   */\n      0x02\n        /* \"#utility.yul\":13345:13536   */\n      dup2\n      eq\n      tag_326\n      jumpi\n        /* \"#utility.yul\":13259:13536   */\n      jump(tag_324)\n        /* \"#utility.yul\":13309:13336   */\n    tag_325:\n        /* \"#utility.yul\":13327:13328   */\n      0x01\n        /* \"#utility.yul\":13318:13328   */\n      swap2\n      pop\n        /* \"#utility.yul\":13329:13334   */\n      pop\n      jump(tag_321)\n        /* \"#utility.yul\":13345:13536   */\n    tag_326:\n        /* \"#utility.yul\":13390:13393   */\n      0xff\n        /* \"#utility.yul\":13380:13388   */\n      dup5\n        /* \"#utility.yul\":13377:13394   */\n      gt\n        /* \"#utility.yul\":13374:13417   */\n      iszero\n      tag_327\n      jumpi\n        /* \"#utility.yul\":13397:13415   */\n      tag_328\n      tag_163\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":13374:13417   */\n    tag_327:\n        /* \"#utility.yul\":13446:13454   */\n      dup4\n        /* \"#utility.yul\":13443:13444   */\n      0x02\n        /* \"#utility.yul\":13439:13455   */\n      exp\n        /* \"#utility.yul\":13430:13455   */\n      swap2\n      pop\n        /* \"#utility.yul\":13481:13484   */\n      dup5\n        /* \"#utility.yul\":13474:13479   */\n      dup3\n        /* \"#utility.yul\":13471:13485   */\n      gt\n        /* \"#utility.yul\":13468:13508   */\n      iszero\n      tag_329\n      jumpi\n        /* \"#utility.yul\":13488:13506   */\n      tag_330\n      tag_163\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":13468:13508   */\n    tag_329:\n        /* \"#utility.yul\":13521:13526   */\n      pop\n      jump(tag_321)\n        /* \"#utility.yul\":13259:13536   */\n    tag_324:\n      pop\n        /* \"#utility.yul\":13645:13647   */\n      0x20\n        /* \"#utility.yul\":13635:13643   */\n      dup4\n        /* \"#utility.yul\":13632:13648   */\n      lt\n        /* \"#utility.yul\":13626:13629   */\n      0x0133\n        /* \"#utility.yul\":13620:13624   */\n      dup4\n        /* \"#utility.yul\":13617:13630   */\n      lt\n        /* \"#utility.yul\":13613:13649   */\n      and\n        /* \"#utility.yul\":13595:13597   */\n      0x4e\n        /* \"#utility.yul\":13585:13593   */\n      dup5\n        /* \"#utility.yul\":13582:13598   */\n      lt\n        /* \"#utility.yul\":13577:13579   */\n      0x0b\n        /* \"#utility.yul\":13571:13575   */\n      dup5\n        /* \"#utility.yul\":13568:13580   */\n      lt\n        /* \"#utility.yul\":13564:13599   */\n      and\n        /* \"#utility.yul\":13548:13659   */\n      or\n        /* \"#utility.yul\":13545:13791   */\n      iszero\n      tag_331\n      jumpi\n        /* \"#utility.yul\":13701:13709   */\n      dup3\n        /* \"#utility.yul\":13695:13699   */\n      dup3\n        /* \"#utility.yul\":13691:13710   */\n      exp\n        /* \"#utility.yul\":13682:13710   */\n      swap1\n      pop\n        /* \"#utility.yul\":13736:13739   */\n      dup4\n        /* \"#utility.yul\":13729:13734   */\n      dup2\n        /* \"#utility.yul\":13726:13740   */\n      gt\n        /* \"#utility.yul\":13723:13763   */\n      iszero\n      tag_332\n      jumpi\n        /* \"#utility.yul\":13743:13761   */\n      tag_333\n      tag_163\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":13723:13763   */\n    tag_332:\n        /* \"#utility.yul\":13776:13781   */\n      jump(tag_321)\n        /* \"#utility.yul\":13545:13791   */\n    tag_331:\n        /* \"#utility.yul\":13816:13858   */\n      tag_334\n        /* \"#utility.yul\":13854:13857   */\n      dup5\n        /* \"#utility.yul\":13844:13852   */\n      dup5\n        /* \"#utility.yul\":13838:13842   */\n      dup5\n        /* \"#utility.yul\":13835:13836   */\n      0x01\n        /* \"#utility.yul\":13816:13858   */\n      tag_165\n      jump\t// in\n    tag_334:\n        /* \"#utility.yul\":13801:13858   */\n      swap3\n      pop\n      swap1\n      pop\n        /* \"#utility.yul\":13890:13894   */\n      dup2\n        /* \"#utility.yul\":13885:13888   */\n      dup5\n        /* \"#utility.yul\":13881:13895   */\n      div\n        /* \"#utility.yul\":13874:13879   */\n      dup2\n        /* \"#utility.yul\":13871:13896   */\n      gt\n        /* \"#utility.yul\":13868:13919   */\n      iszero\n      tag_335\n      jumpi\n        /* \"#utility.yul\":13899:13917   */\n      tag_336\n      tag_163\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":13868:13919   */\n    tag_335:\n        /* \"#utility.yul\":13948:13952   */\n      dup2\n        /* \"#utility.yul\":13941:13946   */\n      dup2\n        /* \"#utility.yul\":13937:13953   */\n      mul\n        /* \"#utility.yul\":13928:13953   */\n      swap1\n      pop\n        /* \"#utility.yul\":12886:13959   */\n    tag_321:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13965:14250   */\n    tag_127:\n        /* \"#utility.yul\":14025:14030   */\n      0x00\n        /* \"#utility.yul\":14049:14072   */\n      tag_338\n        /* \"#utility.yul\":14067:14071   */\n      dup3\n        /* \"#utility.yul\":14049:14072   */\n      tag_136\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":14041:14072   */\n      swap2\n      pop\n        /* \"#utility.yul\":14093:14120   */\n      tag_339\n        /* \"#utility.yul\":14111:14119   */\n      dup4\n        /* \"#utility.yul\":14093:14120   */\n      tag_136\n      jump\t// in\n    tag_339:\n        /* \"#utility.yul\":14081:14120   */\n      swap3\n      pop\n        /* \"#utility.yul\":14139:14243   */\n      tag_340\n        /* \"#utility.yul\":14176:14242   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":14166:14174   */\n      dup5\n        /* \"#utility.yul\":14160:14164   */\n      dup5\n        /* \"#utility.yul\":14139:14243   */\n      tag_166\n      jump\t// in\n    tag_340:\n        /* \"#utility.yul\":14130:14243   */\n      swap1\n      pop\n        /* \"#utility.yul\":13965:14250   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220755bd76f71864a46cdeafd7baf667002cbc61fcb6020c7c5e8569af5ee8434d564736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"array_dataslot_t_string_storage": {
									"entryPoint": 625,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 467,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 946,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_uint256": {
									"entryPoint": 761,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 907,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 781,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1101,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 646,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 572,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 1071,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 771,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 1039,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x22": {
									"entryPoint": 525,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 478,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 821,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_left_dynamic": {
									"entryPoint": 662,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 1026,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 879,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 675,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 831,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 874,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5231:26",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "66:40:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "77:22:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:26"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "87:12:26"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:26"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "49:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "59:6:26",
														"type": ""
													}
												],
												"src": "7:99:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "140:152:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "157:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "160:77:26",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "150:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "150:88:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "150:88:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "254:1:26",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "257:4:26",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "247:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "247:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "247:15:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "278:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "281:4:26",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "271:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "271:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "271:15:26"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "112:180:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "326:152:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "343:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "346:77:26",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "336:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "336:88:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "336:88:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "440:1:26",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "443:4:26",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "433:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "433:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "433:15:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "464:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "467:4:26",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "457:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "457:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "457:15:26"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "298:180:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "535:269:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "545:22:26",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "559:4:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "565:1:26",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "555:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "555:12:26"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "545:6:26"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "576:38:26",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "606:4:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "612:1:26",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "602:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "602:12:26"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "580:18:26",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "653:51:26",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "667:27:26",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "681:6:26"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "689:4:26",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "677:3:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "677:17:26"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "667:6:26"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "633:18:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "626:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "626:26:26"
															},
															"nodeType": "YulIf",
															"src": "623:81:26"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "756:42:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "770:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "770:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "770:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "720:18:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "743:6:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "751:2:26",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "740:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "740:14:26"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "717:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "717:38:26"
															},
															"nodeType": "YulIf",
															"src": "714:84:26"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "519:4:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "528:6:26",
														"type": ""
													}
												],
												"src": "484:320:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "864:87:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "874:11:26",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "882:3:26"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "874:4:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "902:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "905:3:26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "895:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "895:14:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "895:14:26"
														},
														{
															"nodeType": "YulAssignment",
															"src": "918:26:26",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "936:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "939:4:26",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "926:9:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "926:18:26"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "918:4:26"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "851:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "859:4:26",
														"type": ""
													}
												],
												"src": "810:141:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1001:49:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1011:33:26",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1029:5:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1036:2:26",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1025:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1025:14:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1041:2:26",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "1021:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1021:23:26"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "1011:6:26"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "984:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "994:6:26",
														"type": ""
													}
												],
												"src": "957:93:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1109:54:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1119:37:26",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "1144:4:26"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1150:5:26"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "1140:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1140:16:26"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "1119:8:26"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "1084:4:26",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1090:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "1100:8:26",
														"type": ""
													}
												],
												"src": "1056:107:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1245:317:26",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1255:35:26",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nodeType": "YulIdentifier",
																		"src": "1276:10:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1288:1:26",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1272:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1272:18:26"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nodeType": "YulTypedName",
																	"src": "1259:9:26",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1299:109:26",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "1330:9:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1341:66:26",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "1311:18:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1311:97:26"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "1303:4:26",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1417:51:26",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "1448:9:26"
																	},
																	{
																		"name": "toInsert",
																		"nodeType": "YulIdentifier",
																		"src": "1459:8:26"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "1429:18:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1429:39:26"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nodeType": "YulIdentifier",
																	"src": "1417:8:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1477:30:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1490:5:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "1501:4:26"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1497:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1497:9:26"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1486:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1486:21:26"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1477:5:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1516:40:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1529:5:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nodeType": "YulIdentifier",
																				"src": "1540:8:26"
																			},
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "1550:4:26"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1536:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1536:19:26"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1526:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1526:30:26"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "1516:6:26"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1206:5:26",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nodeType": "YulTypedName",
														"src": "1213:10:26",
														"type": ""
													},
													{
														"name": "toInsert",
														"nodeType": "YulTypedName",
														"src": "1225:8:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "1238:6:26",
														"type": ""
													}
												],
												"src": "1169:393:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1613:32:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1623:16:26",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1634:5:26"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1623:7:26"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1595:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1605:7:26",
														"type": ""
													}
												],
												"src": "1568:77:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1683:28:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1693:12:26",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1700:5:26"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "1693:3:26"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1669:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "1679:3:26",
														"type": ""
													}
												],
												"src": "1651:60:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1777:82:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1787:66:26",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1845:5:26"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "1827:17:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1827:24:26"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "1818:8:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1818:34:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1800:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1800:53:26"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "1787:9:26"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1757:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "1767:9:26",
														"type": ""
													}
												],
												"src": "1717:142:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1912:28:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1922:12:26",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1929:5:26"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "1922:3:26"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1898:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "1908:3:26",
														"type": ""
													}
												],
												"src": "1865:75:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2022:193:26",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2032:63:26",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nodeType": "YulIdentifier",
																		"src": "2087:7:26"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2056:30:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2056:39:26"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nodeType": "YulTypedName",
																	"src": "2036:16:26",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "2111:4:26"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "2151:4:26"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "2145:5:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2145:11:26"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2158:6:26"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nodeType": "YulIdentifier",
																						"src": "2190:16:26"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "2166:23:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2166:41:26"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nodeType": "YulIdentifier",
																			"src": "2117:27:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2117:91:26"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "2104:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2104:105:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2104:105:26"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "1999:4:26",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2005:6:26",
														"type": ""
													},
													{
														"name": "value_0",
														"nodeType": "YulTypedName",
														"src": "2013:7:26",
														"type": ""
													}
												],
												"src": "1946:269:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2270:24:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2280:8:26",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2287:1:26",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2280:3:26"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2266:3:26",
														"type": ""
													}
												],
												"src": "2221:73:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2353:136:26",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2363:46:26",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2377:30:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2377:32:26"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nodeType": "YulTypedName",
																	"src": "2367:6:26",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "2462:4:26"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2468:6:26"
																	},
																	{
																		"name": "zero_0",
																		"nodeType": "YulIdentifier",
																		"src": "2476:6:26"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2418:43:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2418:65:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2418:65:26"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "2339:4:26",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2345:6:26",
														"type": ""
													}
												],
												"src": "2300:189:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2545:136:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2612:63:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "2656:5:26"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2663:1:26",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nodeType": "YulIdentifier",
																				"src": "2626:29:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2626:39:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2626:39:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nodeType": "YulIdentifier",
																		"src": "2565:5:26"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "2572:3:26"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2562:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2562:14:26"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2577:26:26",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2579:22:26",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "2592:5:26"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2599:1:26",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2588:3:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2588:13:26"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nodeType": "YulIdentifier",
																				"src": "2579:5:26"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2559:2:26",
																"statements": []
															},
															"src": "2555:120:26"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nodeType": "YulTypedName",
														"src": "2533:5:26",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2540:3:26",
														"type": ""
													}
												],
												"src": "2495:186:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2766:464:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2792:431:26",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2806:54:26",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "2854:5:26"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nodeType": "YulIdentifier",
																				"src": "2822:31:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2822:38:26"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nodeType": "YulTypedName",
																				"src": "2810:8:26",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2873:63:26",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nodeType": "YulIdentifier",
																					"src": "2896:8:26"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nodeType": "YulIdentifier",
																							"src": "2924:10:26"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nodeType": "YulIdentifier",
																						"src": "2906:17:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2906:29:26"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2892:3:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2892:44:26"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "2877:11:26",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "3093:27:26",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "3095:23:26",
																					"value": {
																						"name": "dataArea",
																						"nodeType": "YulIdentifier",
																						"src": "3110:8:26"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "3095:11:26"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "3077:10:26"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3089:2:26",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "3074:2:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3074:18:26"
																		},
																		"nodeType": "YulIf",
																		"src": "3071:49:26"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nodeType": "YulIdentifier",
																					"src": "3162:11:26"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nodeType": "YulIdentifier",
																							"src": "3179:8:26"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "3207:3:26"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nodeType": "YulIdentifier",
																								"src": "3189:17:26"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3189:22:26"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "3175:3:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3175:37:26"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nodeType": "YulIdentifier",
																				"src": "3133:28:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3133:80:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3133:80:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "2783:3:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2788:2:26",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2780:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2780:11:26"
															},
															"nodeType": "YulIf",
															"src": "2777:446:26"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2742:5:26",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "2749:3:26",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "2754:10:26",
														"type": ""
													}
												],
												"src": "2687:543:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3299:54:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3309:37:26",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "3334:4:26"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3340:5:26"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "3330:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3330:16:26"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "3309:8:26"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "3274:4:26",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3280:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "3290:8:26",
														"type": ""
													}
												],
												"src": "3236:117:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3410:118:26",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3420:68:26",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3469:1:26",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nodeType": "YulIdentifier",
																						"src": "3472:5:26"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "3465:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3465:13:26"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3484:1:26",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "3480:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3480:6:26"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nodeType": "YulIdentifier",
																			"src": "3436:28:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3436:51:26"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "3432:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3432:56:26"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "3424:4:26",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3497:25:26",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3511:4:26"
																	},
																	{
																		"name": "mask",
																		"nodeType": "YulIdentifier",
																		"src": "3517:4:26"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3507:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3507:15:26"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "3497:6:26"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "3387:4:26",
														"type": ""
													},
													{
														"name": "bytes",
														"nodeType": "YulTypedName",
														"src": "3393:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "3403:6:26",
														"type": ""
													}
												],
												"src": "3359:169:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3614:214:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3747:37:26",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3774:4:26"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "3780:3:26"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "3755:18:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3755:29:26"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "3747:4:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3793:29:26",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3804:4:26"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3814:1:26",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "3817:3:26"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "3810:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3810:11:26"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "3801:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3801:21:26"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "3793:4:26"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "3595:4:26",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "3601:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "3609:4:26",
														"type": ""
													}
												],
												"src": "3533:295:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3925:1303:26",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3936:51:26",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "3983:3:26"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "3950:32:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3950:37:26"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "3940:6:26",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4072:22:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4074:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4074:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4074:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "4044:6:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4052:18:26",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4041:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "4041:30:26"
															},
															"nodeType": "YulIf",
															"src": "4038:56:26"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4104:52:26",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nodeType": "YulIdentifier",
																				"src": "4150:4:26"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nodeType": "YulIdentifier",
																			"src": "4144:5:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4144:11:26"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nodeType": "YulIdentifier",
																	"src": "4118:25:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "4118:38:26"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nodeType": "YulTypedName",
																	"src": "4108:6:26",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "4249:4:26"
																	},
																	{
																		"name": "oldLen",
																		"nodeType": "YulIdentifier",
																		"src": "4255:6:26"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "4263:6:26"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "4203:45:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "4203:67:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4203:67:26"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4280:18:26",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4297:1:26",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "4284:9:26",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4308:17:26",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4321:4:26",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "4308:9:26"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "4372:611:26",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "4386:37:26",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "4405:6:26"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "4417:4:26",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "4413:3:26"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4413:9:26"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "4401:3:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4401:22:26"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "4390:7:26",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "4437:51:26",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "4483:4:26"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "4451:31:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4451:37:26"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "4441:6:26",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "4501:10:26",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4510:1:26",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "4505:1:26",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "4569:163:26",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "4594:6:26"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "4612:3:26"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "4617:9:26"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "4608:3:26"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "4608:19:26"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "4602:5:26"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "4602:26:26"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "4587:6:26"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4587:42:26"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "4587:42:26"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "4646:24:26",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "4660:6:26"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4668:1:26",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4656:3:26"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4656:14:26"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "4646:6:26"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "4687:31:26",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "4704:9:26"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4715:2:26",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4700:3:26"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4700:18:26"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "4687:9:26"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "4535:1:26"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "4538:7:26"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "4532:2:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4532:14:26"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "4547:21:26",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "4549:17:26",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "4558:1:26"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4561:4:26",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4554:3:26"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4554:12:26"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "4549:1:26"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "4528:3:26",
																					"statements": []
																				},
																				"src": "4524:208:26"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "4768:156:26",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "4786:43:26",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "4813:3:26"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "4818:9:26"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "4809:3:26"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "4809:19:26"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "4803:5:26"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4803:26:26"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "4790:9:26",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "4853:6:26"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "4880:9:26"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nodeType": "YulIdentifier",
																														"src": "4895:6:26"
																													},
																													{
																														"kind": "number",
																														"nodeType": "YulLiteral",
																														"src": "4903:4:26",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nodeType": "YulIdentifier",
																													"src": "4891:3:26"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "4891:17:26"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nodeType": "YulIdentifier",
																											"src": "4861:18:26"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "4861:48:26"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "4846:6:26"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4846:64:26"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "4846:64:26"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "4751:7:26"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "4760:6:26"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "4748:2:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4748:19:26"
																				},
																				"nodeType": "YulIf",
																				"src": "4745:179:26"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "4944:4:26"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "4958:6:26"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "4966:1:26",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nodeType": "YulIdentifier",
																										"src": "4954:3:26"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "4954:14:26"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "4970:1:26",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4950:3:26"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4950:22:26"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "4937:6:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4937:36:26"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "4937:36:26"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "4365:618:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4370:1:26",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "5000:222:26",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "5014:14:26",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5027:1:26",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "5018:5:26",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "5051:67:26",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "5069:35:26",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "5088:3:26"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "5093:9:26"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "5084:3:26"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "5084:19:26"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "5078:5:26"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5078:26:26"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "5069:5:26"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "5044:6:26"
																				},
																				"nodeType": "YulIf",
																				"src": "5041:77:26"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "5138:4:26"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "5197:5:26"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "5204:6:26"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "5144:52:26"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5144:67:26"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "5131:6:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5131:81:26"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "5131:81:26"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "4992:230:26",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "4345:6:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4353:2:26",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4342:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "4342:14:26"
															},
															"nodeType": "YulSwitch",
															"src": "4335:887:26"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "3914:4:26",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "3920:3:26",
														"type": ""
													}
												],
												"src": "3833:1395:26"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n",
									"id": 26,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040527349e565ed1bdc17f3d220f72df0857c26fa83f8736000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735d8b4c2554aeb7e86f387b4d6c00ac33499ed01f600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507360ae865ee4c725cd04353b5aab364553f56cef82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507302101dfb77fde026414827fdc604ddaf224f0921600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600c81526020017f3736313033353030373631300000000000000000000000000000000000000000815250600490816200019d91906200044d565b506040518060200160405280600081525060059081620001be91906200044d565b50348015620001cc57600080fd5b5062000534565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200025557607f821691505b6020821081036200026b576200026a6200020d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002d57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000296565b620002e1868362000296565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200032e620003286200032284620002f9565b62000303565b620002f9565b9050919050565b6000819050919050565b6200034a836200030d565b62000362620003598262000335565b848454620002a3565b825550505050565b600090565b620003796200036a565b620003868184846200033f565b505050565b5b81811015620003ae57620003a26000826200036f565b6001810190506200038c565b5050565b601f821115620003fd57620003c78162000271565b620003d28462000286565b81016020851015620003e2578190505b620003fa620003f18562000286565b8301826200038b565b50505b505050565b600082821c905092915050565b6000620004226000198460080262000402565b1980831691505092915050565b60006200043d83836200040f565b9150826002028217905092915050565b6200045882620001d3565b67ffffffffffffffff811115620004745762000473620001de565b5b6200048082546200023c565b6200048d828285620003b2565b600060209050601f831160018114620004c55760008415620004b0578287015190505b620004bc85826200042f565b8655506200052c565b601f198416620004d58662000271565b60005b82811015620004ff57848901518255600182019150602085019450602081019050620004d8565b868310156200051f57848901516200051b601f8916826200040f565b8355505b6001600288020188555050505b505050505050565b61111080620005446000396000f3fe608060405234801561001057600080fd5b50600436106100355760003560e01c8062fdd58e1461003a578063bb79f5871461006a575b600080fd5b610054600480360381019061004f91906108da565b61009a565b6040516100619190610929565b60405180910390f35b610084600480360381019061007f9190610a8a565b6102a3565b6040516100919190610b74565b60405180910390f35b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663192df655600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b815260040161011c929190610b9e565b602060405180830381865afa158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d9190610bdc565b9050610288848261016d866104a7565b6004805461017a90610c38565b80601f01602080910402602001604051908101604052809291908181526020018280546101a690610c38565b80156101f35780601f106101c8576101008083540402835291602001916101f3565b820191906000526020600020905b8154815290600101906020018083116101d657829003601f168201915b50505050506005805461020590610c38565b80601f016020809104026020016040519081016040528092919081815260200182805461023190610c38565b801561027e5780601f106102535761010080835404028352916020019161027e565b820191906000526020600020905b81548152906001019060200180831161026157829003601f168201915b50505050506102a3565b1561029757600191505061029d565b60009150505b92915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000808273ffffffffffffffffffffffffffffffffffffffff1663e6a1e888600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8c6040518463ffffffff1660e01b815260040161035393929190610cc8565b608060405180830381865afa158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610d4d565b50509150915060008473ffffffffffffffffffffffffffffffffffffffff16636352211e6103c18b610575565b6040518263ffffffff1660e01b81526004016103dd9190610929565b602060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610bdc565b9050600061042b89610575565b9050600061043889610575565b90508184600b0b121580156104575750600081148061045657508085105b5b8061048d57508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16145b1561049757600197505b5050505050505095945050505050565b6060600060016104b684610589565b01905060008167ffffffffffffffff8111156104d5576104d461095f565b5b6040519080825280601f01601f1916602001820160405280156105075781602001600182028036833780820191505090505b509050600082602001820190505b60011561056a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161055e5761055d610db4565b5b04945060008503610515575b819350505050919050565b60006105828260006106dc565b9050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105e7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816105dd576105dc610db4565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610624576d04ee2d6d415b85acef8100000000838161061a57610619610db4565b5b0492506020810190505b662386f26fc10000831061065357662386f26fc10000838161064957610648610db4565b5b0492506010810190505b6305f5e100831061067c576305f5e100838161067257610671610db4565b5b0492506008810190505b61271083106106a157612710838161069757610696610db4565b5b0492506004810190505b606483106106c457606483816106ba576106b9610db4565b5b0492506002810190505b600a83106106d3576001810190505b80915050919050565b60008083905060008060005b835181101561080157603084828151811061070657610705610de3565b5b602001015160f81c60f81b60f81c60ff16101580156107495750603984828151811061073557610734610de3565b5b602001015160f81c60f81b60f81c60ff1611155b156107bd57811561076c57600086031561080157858061076890610e41565b9650505b600a836107799190610e6a565b925060308482815181106107905761078f610de3565b5b602001015160f81c60f81b60f81c60ff166107ab9190610eac565b836107b69190610ee0565b92506107ee565b602e8482815181106107d2576107d1610de3565b5b602001015160f81c60f81b60f81c60ff16036107ed57600191505b5b80806107f990610f14565b9150506106e8565b5060008511156108265784600a610818919061108f565b826108239190610e6a565b91505b81935050505092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061087182610846565b9050919050565b61088181610866565b811461088c57600080fd5b50565b60008135905061089e81610878565b92915050565b6000819050919050565b6108b7816108a4565b81146108c257600080fd5b50565b6000813590506108d4816108ae565b92915050565b600080604083850312156108f1576108f061083c565b5b60006108ff8582860161088f565b9250506020610910858286016108c5565b9150509250929050565b610923816108a4565b82525050565b600060208201905061093e600083018461091a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109978261094e565b810181811067ffffffffffffffff821117156109b6576109b561095f565b5b80604052505050565b60006109c9610832565b90506109d5828261098e565b919050565b600067ffffffffffffffff8211156109f5576109f461095f565b5b6109fe8261094e565b9050602081019050919050565b82818337600083830152505050565b6000610a2d610a28846109da565b6109bf565b905082815260208101848484011115610a4957610a48610949565b5b610a54848285610a0b565b509392505050565b600082601f830112610a7157610a70610944565b5b8135610a81848260208601610a1a565b91505092915050565b600080600080600060a08688031215610aa657610aa561083c565b5b6000610ab48882890161088f565b9550506020610ac58882890161088f565b945050604086013567ffffffffffffffff811115610ae657610ae5610841565b5b610af288828901610a5c565b935050606086013567ffffffffffffffff811115610b1357610b12610841565b5b610b1f88828901610a5c565b925050608086013567ffffffffffffffff811115610b4057610b3f610841565b5b610b4c88828901610a5c565b9150509295509295909350565b60008115159050919050565b610b6e81610b59565b82525050565b6000602082019050610b896000830184610b65565b92915050565b610b9881610866565b82525050565b6000604082019050610bb36000830185610b8f565b610bc0602083018461091a565b9392505050565b600081519050610bd681610878565b92915050565b600060208284031215610bf257610bf161083c565b5b6000610c0084828501610bc7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c5057607f821691505b602082108103610c6357610c62610c09565b5b50919050565b6000819050919050565b6000610c8e610c89610c8484610846565b610c69565b610846565b9050919050565b6000610ca082610c73565b9050919050565b6000610cb282610c95565b9050919050565b610cc281610ca7565b82525050565b6000606082019050610cdd6000830186610cb9565b610cea6020830185610b8f565b610cf76040830184610b8f565b949350505050565b600081519050610d0e816108ae565b92915050565b600081600b0b9050919050565b610d2a81610d14565b8114610d3557600080fd5b50565b600081519050610d4781610d21565b92915050565b60008060008060808587031215610d6757610d6661083c565b5b6000610d7587828801610cff565b9450506020610d8687828801610d38565b9350506040610d9787828801610cff565b9250506060610da887828801610cff565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e4c826108a4565b915060008203610e5f57610e5e610e12565b5b600182039050919050565b6000610e75826108a4565b9150610e80836108a4565b9250828202610e8e816108a4565b91508282048414831517610ea557610ea4610e12565b5b5092915050565b6000610eb7826108a4565b9150610ec2836108a4565b9250828203905081811115610eda57610ed9610e12565b5b92915050565b6000610eeb826108a4565b9150610ef6836108a4565b9250828201905080821115610f0e57610f0d610e12565b5b92915050565b6000610f1f826108a4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f5157610f50610e12565b5b600182019050919050565b60008160011c9050919050565b6000808291508390505b6001851115610fb357808604811115610f8f57610f8e610e12565b5b6001851615610f9e5780820291505b8081029050610fac85610f5c565b9450610f73565b94509492505050565b600082610fcc5760019050611088565b81610fda5760009050611088565b8160018114610ff05760028114610ffa57611029565b6001915050611088565b60ff84111561100c5761100b610e12565b5b8360020a91508482111561102357611022610e12565b5b50611088565b5060208310610133831016604e8410600b841016171561105e5782820a90508381111561105957611058610e12565b5b611088565b61106b8484846001610f69565b9250905081840481111561108257611081610e12565b5b81810290505b9392505050565b600061109a826108a4565b91506110a5836108a4565b92506110d27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610fbc565b90509291505056fea2646970667358221220755bd76f71864a46cdeafd7baf667002cbc61fcb6020c7c5e8569af5ee8434d564736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0x49E565ED1BDC17F3D220F72DF0857C26FA83F873 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0x5D8B4C2554AEB7E86F387B4D6C00AC33499ED01F PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0x60AE865EE4C725CD04353B5AAB364553F56CEF82 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0x2101DFB77FDE026414827FDC604DDAF224F0921 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3736313033353030373631300000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x4 SWAP1 DUP2 PUSH3 0x19D SWAP2 SWAP1 PUSH3 0x44D JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x5 SWAP1 DUP2 PUSH3 0x1BE SWAP2 SWAP1 PUSH3 0x44D JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 0x1CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x534 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x255 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x26B JUMPI PUSH3 0x26A PUSH3 0x20D JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x2D5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x296 JUMP JUMPDEST PUSH3 0x2E1 DUP7 DUP4 PUSH3 0x296 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x32E PUSH3 0x328 PUSH3 0x322 DUP5 PUSH3 0x2F9 JUMP JUMPDEST PUSH3 0x303 JUMP JUMPDEST PUSH3 0x2F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x34A DUP4 PUSH3 0x30D JUMP JUMPDEST PUSH3 0x362 PUSH3 0x359 DUP3 PUSH3 0x335 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x2A3 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x379 PUSH3 0x36A JUMP JUMPDEST PUSH3 0x386 DUP2 DUP5 DUP5 PUSH3 0x33F JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x3AE JUMPI PUSH3 0x3A2 PUSH1 0x0 DUP3 PUSH3 0x36F JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x38C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x3FD JUMPI PUSH3 0x3C7 DUP2 PUSH3 0x271 JUMP JUMPDEST PUSH3 0x3D2 DUP5 PUSH3 0x286 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x3E2 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x3FA PUSH3 0x3F1 DUP6 PUSH3 0x286 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x38B JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x422 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x402 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x43D DUP4 DUP4 PUSH3 0x40F JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x458 DUP3 PUSH3 0x1D3 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x474 JUMPI PUSH3 0x473 PUSH3 0x1DE JUMP JUMPDEST JUMPDEST PUSH3 0x480 DUP3 SLOAD PUSH3 0x23C JUMP JUMPDEST PUSH3 0x48D DUP3 DUP3 DUP6 PUSH3 0x3B2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x4C5 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x4B0 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x4BC DUP6 DUP3 PUSH3 0x42F JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x52C JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x4D5 DUP7 PUSH3 0x271 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x4FF JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x4D8 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x51F JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x51B PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x40F JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1110 DUP1 PUSH3 0x544 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xFDD58E EQ PUSH2 0x3A JUMPI DUP1 PUSH4 0xBB79F587 EQ PUSH2 0x6A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x929 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x84 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7F SWAP2 SWAP1 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x91 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x192DF655 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11C SWAP3 SWAP2 SWAP1 PUSH2 0xB9E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x139 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15D SWAP2 SWAP1 PUSH2 0xBDC JUMP JUMPDEST SWAP1 POP PUSH2 0x288 DUP5 DUP3 PUSH2 0x16D DUP7 PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x17A SWAP1 PUSH2 0xC38 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1A6 SWAP1 PUSH2 0xC38 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1F3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1C8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1F3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1D6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH1 0x5 DUP1 SLOAD PUSH2 0x205 SWAP1 PUSH2 0xC38 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x231 SWAP1 PUSH2 0xC38 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x27E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x253 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x27E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x261 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x2A3 JUMP JUMPDEST ISZERO PUSH2 0x297 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x29D JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE6A1E888 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 DUP13 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x353 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x370 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xD4D JUMP JUMPDEST POP POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E PUSH2 0x3C1 DUP12 PUSH2 0x575 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3DD SWAP2 SWAP1 PUSH2 0x929 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x41E SWAP2 SWAP1 PUSH2 0xBDC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x42B DUP10 PUSH2 0x575 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x438 DUP10 PUSH2 0x575 JUMP JUMPDEST SWAP1 POP DUP2 DUP5 PUSH1 0xB SIGNEXTEND SLT ISZERO DUP1 ISZERO PUSH2 0x457 JUMPI POP PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0x456 JUMPI POP DUP1 DUP6 LT JUMPDEST JUMPDEST DUP1 PUSH2 0x48D JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x497 JUMPI PUSH1 0x1 SWAP8 POP JUMPDEST POP POP POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x4B6 DUP5 PUSH2 0x589 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4D5 JUMPI PUSH2 0x4D4 PUSH2 0x95F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x507 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x56A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x55E JUMPI PUSH2 0x55D PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x515 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x582 DUP3 PUSH1 0x0 PUSH2 0x6DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x5E7 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x5DD JUMPI PUSH2 0x5DC PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x624 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x61A JUMPI PUSH2 0x619 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x653 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x649 JUMPI PUSH2 0x648 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x67C JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x672 JUMPI PUSH2 0x671 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x6A1 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x697 JUMPI PUSH2 0x696 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x6C4 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x6BA JUMPI PUSH2 0x6B9 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x6D3 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x801 JUMPI PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x706 JUMPI PUSH2 0x705 PUSH2 0xDE3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND LT ISZERO DUP1 ISZERO PUSH2 0x749 JUMPI POP PUSH1 0x39 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x735 JUMPI PUSH2 0x734 PUSH2 0xDE3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x7BD JUMPI DUP2 ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP7 SUB ISZERO PUSH2 0x801 JUMPI DUP6 DUP1 PUSH2 0x768 SWAP1 PUSH2 0xE41 JUMP JUMPDEST SWAP7 POP POP JUMPDEST PUSH1 0xA DUP4 PUSH2 0x779 SWAP2 SWAP1 PUSH2 0xE6A JUMP JUMPDEST SWAP3 POP PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x790 JUMPI PUSH2 0x78F PUSH2 0xDE3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0xEAC JUMP JUMPDEST DUP4 PUSH2 0x7B6 SWAP2 SWAP1 PUSH2 0xEE0 JUMP JUMPDEST SWAP3 POP PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x2E DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7D2 JUMPI PUSH2 0x7D1 PUSH2 0xDE3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND SUB PUSH2 0x7ED JUMPI PUSH1 0x1 SWAP2 POP JUMPDEST JUMPDEST DUP1 DUP1 PUSH2 0x7F9 SWAP1 PUSH2 0xF14 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6E8 JUMP JUMPDEST POP PUSH1 0x0 DUP6 GT ISZERO PUSH2 0x826 JUMPI DUP5 PUSH1 0xA PUSH2 0x818 SWAP2 SWAP1 PUSH2 0x108F JUMP JUMPDEST DUP3 PUSH2 0x823 SWAP2 SWAP1 PUSH2 0xE6A JUMP JUMPDEST SWAP2 POP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x871 DUP3 PUSH2 0x846 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x881 DUP2 PUSH2 0x866 JUMP JUMPDEST DUP2 EQ PUSH2 0x88C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x89E DUP2 PUSH2 0x878 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8B7 DUP2 PUSH2 0x8A4 JUMP JUMPDEST DUP2 EQ PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8D4 DUP2 PUSH2 0x8AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8F1 JUMPI PUSH2 0x8F0 PUSH2 0x83C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x8FF DUP6 DUP3 DUP7 ADD PUSH2 0x88F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x910 DUP6 DUP3 DUP7 ADD PUSH2 0x8C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x923 DUP2 PUSH2 0x8A4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x93E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x91A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x997 DUP3 PUSH2 0x94E JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x9B6 JUMPI PUSH2 0x9B5 PUSH2 0x95F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C9 PUSH2 0x832 JUMP JUMPDEST SWAP1 POP PUSH2 0x9D5 DUP3 DUP3 PUSH2 0x98E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x9F5 JUMPI PUSH2 0x9F4 PUSH2 0x95F JUMP JUMPDEST JUMPDEST PUSH2 0x9FE DUP3 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA2D PUSH2 0xA28 DUP5 PUSH2 0x9DA JUMP JUMPDEST PUSH2 0x9BF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xA49 JUMPI PUSH2 0xA48 PUSH2 0x949 JUMP JUMPDEST JUMPDEST PUSH2 0xA54 DUP5 DUP3 DUP6 PUSH2 0xA0B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA71 JUMPI PUSH2 0xA70 PUSH2 0x944 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA81 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xA1A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xAA6 JUMPI PUSH2 0xAA5 PUSH2 0x83C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAB4 DUP9 DUP3 DUP10 ADD PUSH2 0x88F JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xAC5 DUP9 DUP3 DUP10 ADD PUSH2 0x88F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAE6 JUMPI PUSH2 0xAE5 PUSH2 0x841 JUMP JUMPDEST JUMPDEST PUSH2 0xAF2 DUP9 DUP3 DUP10 ADD PUSH2 0xA5C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB13 JUMPI PUSH2 0xB12 PUSH2 0x841 JUMP JUMPDEST JUMPDEST PUSH2 0xB1F DUP9 DUP3 DUP10 ADD PUSH2 0xA5C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB40 JUMPI PUSH2 0xB3F PUSH2 0x841 JUMP JUMPDEST JUMPDEST PUSH2 0xB4C DUP9 DUP3 DUP10 ADD PUSH2 0xA5C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB6E DUP2 PUSH2 0xB59 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB89 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB98 DUP2 PUSH2 0x866 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xBB3 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xB8F JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x91A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xBD6 DUP2 PUSH2 0x878 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBF2 JUMPI PUSH2 0xBF1 PUSH2 0x83C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC00 DUP5 DUP3 DUP6 ADD PUSH2 0xBC7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xC50 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xC63 JUMPI PUSH2 0xC62 PUSH2 0xC09 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8E PUSH2 0xC89 PUSH2 0xC84 DUP5 PUSH2 0x846 JUMP JUMPDEST PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x846 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA0 DUP3 PUSH2 0xC73 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB2 DUP3 PUSH2 0xC95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCC2 DUP2 PUSH2 0xCA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xCDD PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCB9 JUMP JUMPDEST PUSH2 0xCEA PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB8F JUMP JUMPDEST PUSH2 0xCF7 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xB8F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD0E DUP2 PUSH2 0x8AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xB SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD2A DUP2 PUSH2 0xD14 JUMP JUMPDEST DUP2 EQ PUSH2 0xD35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD47 DUP2 PUSH2 0xD21 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD67 JUMPI PUSH2 0xD66 PUSH2 0x83C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD75 DUP8 DUP3 DUP9 ADD PUSH2 0xCFF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xD86 DUP8 DUP3 DUP9 ADD PUSH2 0xD38 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xD97 DUP8 DUP3 DUP9 ADD PUSH2 0xCFF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xDA8 DUP8 DUP3 DUP9 ADD PUSH2 0xCFF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE4C DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0xE5F JUMPI PUSH2 0xE5E PUSH2 0xE12 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE75 DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH2 0xE80 DUP4 PUSH2 0x8A4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xE8E DUP2 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xEA5 JUMPI PUSH2 0xEA4 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB7 DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH2 0xEC2 DUP4 PUSH2 0x8A4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xEDA JUMPI PUSH2 0xED9 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEEB DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH2 0xEF6 DUP4 PUSH2 0x8A4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF0E JUMPI PUSH2 0xF0D PUSH2 0xE12 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF1F DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xF51 JUMPI PUSH2 0xF50 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0xFB3 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0xF8F JUMPI PUSH2 0xF8E PUSH2 0xE12 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0xF9E JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0xFAC DUP6 PUSH2 0xF5C JUMP JUMPDEST SWAP5 POP PUSH2 0xF73 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xFCC JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1088 JUMP JUMPDEST DUP2 PUSH2 0xFDA JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1088 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xFF0 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xFFA JUMPI PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1088 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x100C JUMPI PUSH2 0x100B PUSH2 0xE12 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x1023 JUMPI PUSH2 0x1022 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST POP PUSH2 0x1088 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x105E JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x1059 JUMPI PUSH2 0x1058 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST PUSH2 0x1088 JUMP JUMPDEST PUSH2 0x106B DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0xF69 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x1082 JUMPI PUSH2 0x1081 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109A DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x10A5 DUP4 PUSH2 0x8A4 JUMP JUMPDEST SWAP3 POP PUSH2 0x10D2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0xFBC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0x5BD76F71864A46CDEAFD7BAF667002CBC61FCB6020C7 0xC5 0xE8 JUMP SWAP11 CREATE2 0xEE DUP5 CALLVALUE 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "967:2745:25:-:0;;;1021:42;991:72;;;;;;;;;;;;;;;;;;;;1106:42;1069:79;;;;;;;;;;;;;;;;;;;;1188:42;1154:76;;;;;;;;;;;;;;;;;;;;1267:42;1236:73;;;;;;;;;;;;;;;;;;;;1315:44;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1365:33;;;;;;;;;;;;;;;;;;;:::i;:::-;;967:2745;;;;;;;;;;;;7:99:26;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;967:2745:25:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@balanceOf_4549": {
									"entryPoint": 154,
									"id": 4549,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isSubscribed_4512": {
									"entryPoint": 675,
									"id": 4512,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"@log10_1327": {
									"entryPoint": 1417,
									"id": 1327,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@parseInt_4562": {
									"entryPoint": 1397,
									"id": 4562,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@parseInt_4688": {
									"entryPoint": 1756,
									"id": 4688,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toString_442": {
									"entryPoint": 1191,
									"id": 442,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_available_length_t_string_memory_ptr": {
									"entryPoint": 2586,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 2191,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 3015,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_int96_fromMemory": {
									"entryPoint": 3384,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_string_memory_ptr": {
									"entryPoint": 2652,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 2245,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 3327,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 3036,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptr": {
									"entryPoint": 2698,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 5
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2266,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_int96t_uint256t_uint256_fromMemory": {
									"entryPoint": 3405,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 2959,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 2917,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_ISuperfluidToken_$4323_to_t_address_fromStack": {
									"entryPoint": 3257,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 2330,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 2974,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 2932,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ISuperfluidToken_$4323_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed": {
									"entryPoint": 3272,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 2345,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 2495,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 2098,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_string_memory_ptr": {
									"entryPoint": 2522,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3808,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 3945,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint256": {
									"entryPoint": 4239,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 4028,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3690,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3756,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 2150,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 2905,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_int96": {
									"entryPoint": 3348,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 2118,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 2212,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_ISuperfluidToken_$4323_to_t_address": {
									"entryPoint": 3239,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 3221,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 3187,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_calldata_to_memory_with_cleanup": {
									"entryPoint": 2571,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"decrement_t_uint256": {
									"entryPoint": 3649,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 3128,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 2446,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"identity": {
									"entryPoint": 3177,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 3860,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3602,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 3508,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 3081,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 3555,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 2399,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 2372,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 2377,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 2113,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 2108,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 2382,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_right_1_unsigned": {
									"entryPoint": 3932,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 2168,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_int96": {
									"entryPoint": 3361,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 2222,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:14253:26",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:26",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:26",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:26"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:26"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:26",
														"type": ""
													}
												],
												"src": "7:75:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:26",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:26"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:26",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:26"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:26",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:26"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:26"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:26",
														"type": ""
													}
												],
												"src": "334:126:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:26"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:26"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:26",
														"type": ""
													}
												],
												"src": "466:96:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:26",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:26",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:26"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:26"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:26"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:26"
															},
															"nodeType": "YulIf",
															"src": "621:63:26"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:26",
														"type": ""
													}
												],
												"src": "568:122:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "748:87:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "758:29:26",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:26"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "767:20:26"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:26"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "796:33:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "796:33:26"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "726:6:26",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "734:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "742:5:26",
														"type": ""
													}
												],
												"src": "696:139:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "886:32:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "896:16:26",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "907:5:26"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "896:7:26"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "868:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "878:7:26",
														"type": ""
													}
												],
												"src": "841:77:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "967:79:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1024:16:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1033:1:26",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1036:1:26",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1026:6:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1026:12:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1026:12:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "990:5:26"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1015:5:26"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "997:17:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "997:24:26"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "987:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "987:35:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "980:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "980:43:26"
															},
															"nodeType": "YulIf",
															"src": "977:63:26"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "960:5:26",
														"type": ""
													}
												],
												"src": "924:122:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1104:87:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1114:29:26",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1136:6:26"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1123:12:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:20:26"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1114:5:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1179:5:26"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1152:26:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1152:33:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1152:33:26"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1082:6:26",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1090:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1098:5:26",
														"type": ""
													}
												],
												"src": "1052:139:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1280:391:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1326:83:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1328:77:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1328:79:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1328:79:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1301:7:26"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1310:9:26"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1297:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1297:23:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1322:2:26",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1293:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1293:32:26"
															},
															"nodeType": "YulIf",
															"src": "1290:119:26"
														},
														{
															"nodeType": "YulBlock",
															"src": "1419:117:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1434:15:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1448:1:26",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1438:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1463:63:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1498:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1509:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1494:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1494:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1518:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1473:20:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1473:53:26"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1463:6:26"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1546:118:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1561:16:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1575:2:26",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1565:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1591:63:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1626:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1637:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1622:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1622:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1646:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1601:20:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1601:53:26"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1591:6:26"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1242:9:26",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1253:7:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1265:6:26",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1273:6:26",
														"type": ""
													}
												],
												"src": "1197:474:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1742:53:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1759:3:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1782:5:26"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1764:17:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1764:24:26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1752:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1752:37:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1752:37:26"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1730:5:26",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1737:3:26",
														"type": ""
													}
												],
												"src": "1677:118:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1899:124:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1909:26:26",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1921:9:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1932:2:26",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1917:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1917:18:26"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1909:4:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1989:6:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2002:9:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2013:1:26",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1998:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1998:17:26"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1945:43:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "1945:71:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1945:71:26"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1871:9:26",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1883:6:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1894:4:26",
														"type": ""
													}
												],
												"src": "1801:222:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2118:28:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2135:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2138:1:26",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2128:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2128:12:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2128:12:26"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "2029:117:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2241:28:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2258:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2261:1:26",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2251:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2251:12:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2251:12:26"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "2152:117:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2323:54:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2333:38:26",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2351:5:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2358:2:26",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2347:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2347:14:26"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2367:2:26",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2363:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2363:7:26"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2343:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2343:28:26"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "2333:6:26"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2306:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "2316:6:26",
														"type": ""
													}
												],
												"src": "2275:102:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2411:152:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2428:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2431:77:26",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2421:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2421:88:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2421:88:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2525:1:26",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2528:4:26",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2518:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2518:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2518:15:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2549:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2552:4:26",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2542:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2542:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2542:15:26"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "2383:180:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2612:238:26",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2622:58:26",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2644:6:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "2674:4:26"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2652:21:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2652:27:26"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2640:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2640:40:26"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "2626:10:26",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2791:22:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2793:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2793:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2793:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2734:10:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2746:18:26",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2731:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2731:34:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2770:10:26"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "2782:6:26"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2767:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2767:22:26"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2728:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2728:62:26"
															},
															"nodeType": "YulIf",
															"src": "2725:88:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2829:2:26",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "2833:10:26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2822:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2822:22:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2822:22:26"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2598:6:26",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "2606:4:26",
														"type": ""
													}
												],
												"src": "2569:281:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2897:88:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2907:30:26",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "2917:18:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2917:20:26"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "2907:6:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2966:6:26"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "2974:4:26"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "2946:19:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "2946:33:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2946:33:26"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "2881:4:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "2890:6:26",
														"type": ""
													}
												],
												"src": "2856:129:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3058:241:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3163:22:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "3165:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3165:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3165:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3135:6:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3143:18:26",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3132:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3132:30:26"
															},
															"nodeType": "YulIf",
															"src": "3129:56:26"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3195:37:26",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3225:6:26"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "3203:21:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3203:29:26"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "3195:4:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3269:23:26",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "3281:4:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3287:4:26",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3277:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3277:15:26"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "3269:4:26"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3042:6:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "3053:4:26",
														"type": ""
													}
												],
												"src": "2991:308:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3369:82:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "3392:3:26"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "3397:3:26"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3402:6:26"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "3379:12:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3379:30:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3379:30:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "3429:3:26"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3434:6:26"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3425:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3425:16:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3443:1:26",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3418:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3418:27:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3418:27:26"
														}
													]
												},
												"name": "copy_calldata_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "3351:3:26",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "3356:3:26",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3361:6:26",
														"type": ""
													}
												],
												"src": "3305:146:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3541:341:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3551:75:26",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3618:6:26"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "3576:41:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3576:49:26"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3560:15:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3560:66:26"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "3551:5:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "3642:5:26"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3649:6:26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3635:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3635:21:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3635:21:26"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3665:27:26",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "3680:5:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3687:4:26",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3676:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3676:16:26"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "3669:3:26",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3730:83:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "3732:77:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3732:79:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3732:79:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "3711:3:26"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3716:6:26"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3707:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3707:16:26"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "3725:3:26"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3704:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3704:25:26"
															},
															"nodeType": "YulIf",
															"src": "3701:112:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "3859:3:26"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "3864:3:26"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3869:6:26"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "3822:36:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3822:54:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3822:54:26"
														}
													]
												},
												"name": "abi_decode_available_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "3514:3:26",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3519:6:26",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3527:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "3535:5:26",
														"type": ""
													}
												],
												"src": "3457:425:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3964:278:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4013:83:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "4015:77:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4015:79:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4015:79:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3992:6:26"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4000:4:26",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3988:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3988:17:26"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "4007:3:26"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "3984:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3984:27:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3977:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "3977:35:26"
															},
															"nodeType": "YulIf",
															"src": "3974:122:26"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4105:34:26",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4132:6:26"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4119:12:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "4119:20:26"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4109:6:26",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4148:88:26",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "4209:6:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4217:4:26",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4205:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4205:17:26"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4224:6:26"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "4232:3:26"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "4157:47:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "4157:79:26"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "4148:5:26"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3942:6:26",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3950:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "3958:5:26",
														"type": ""
													}
												],
												"src": "3902:340:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4412:1287:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4459:83:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4461:77:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4461:79:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4461:79:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4433:7:26"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4442:9:26"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4429:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4429:23:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4454:3:26",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4425:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "4425:33:26"
															},
															"nodeType": "YulIf",
															"src": "4422:120:26"
														},
														{
															"nodeType": "YulBlock",
															"src": "4552:117:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4567:15:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4581:1:26",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4571:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4596:63:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4631:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4642:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4627:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4627:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4651:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4606:20:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4606:53:26"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4596:6:26"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4679:118:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4694:16:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4708:2:26",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4698:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4724:63:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4759:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4770:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4755:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4755:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4779:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4734:20:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4734:53:26"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4724:6:26"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4807:288:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4822:46:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4853:9:26"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4864:2:26",
																						"type": "",
																						"value": "64"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4849:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4849:18:26"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "4836:12:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4836:32:26"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4826:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "4915:83:26",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "4917:77:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4917:79:26"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "4917:79:26"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "4887:6:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4895:18:26",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4884:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4884:30:26"
																	},
																	"nodeType": "YulIf",
																	"src": "4881:117:26"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5012:73:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5057:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5068:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5053:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5053:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5077:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "5022:30:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5022:63:26"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "5012:6:26"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5105:288:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5120:46:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5151:9:26"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5162:2:26",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5147:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5147:18:26"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "5134:12:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5134:32:26"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5124:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "5213:83:26",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "5215:77:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5215:79:26"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "5215:79:26"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "5185:6:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5193:18:26",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5182:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5182:30:26"
																	},
																	"nodeType": "YulIf",
																	"src": "5179:117:26"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5310:73:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5355:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5366:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5351:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5351:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5375:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "5320:30:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5320:63:26"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "5310:6:26"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5403:289:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5418:47:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5449:9:26"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5460:3:26",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5445:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5445:19:26"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "5432:12:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5432:33:26"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5422:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "5512:83:26",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "5514:77:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5514:79:26"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "5514:79:26"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "5484:6:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5492:18:26",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5481:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5481:30:26"
																	},
																	"nodeType": "YulIf",
																	"src": "5478:117:26"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5609:73:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5654:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5665:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5650:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5650:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5674:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "5619:30:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5619:63:26"
																	},
																	"variableNames": [
																		{
																			"name": "value4",
																			"nodeType": "YulIdentifier",
																			"src": "5609:6:26"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4350:9:26",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4361:7:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4373:6:26",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4381:6:26",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4389:6:26",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4397:6:26",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "4405:6:26",
														"type": ""
													}
												],
												"src": "4248:1451:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5747:48:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5757:32:26",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5782:5:26"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5775:6:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5775:13:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5768:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "5768:21:26"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5757:7:26"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5729:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5739:7:26",
														"type": ""
													}
												],
												"src": "5705:90:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5860:50:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5877:3:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5897:5:26"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "5882:14:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5882:21:26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5870:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "5870:34:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5870:34:26"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5848:5:26",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5855:3:26",
														"type": ""
													}
												],
												"src": "5801:109:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6008:118:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6018:26:26",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6030:9:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6041:2:26",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6026:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "6026:18:26"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6018:4:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6092:6:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6105:9:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6116:1:26",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6101:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6101:17:26"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6054:37:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "6054:65:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6054:65:26"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5980:9:26",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5992:6:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6003:4:26",
														"type": ""
													}
												],
												"src": "5916:210:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6197:53:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6214:3:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6237:5:26"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6219:17:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6219:24:26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6207:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "6207:37:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6207:37:26"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6185:5:26",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6192:3:26",
														"type": ""
													}
												],
												"src": "6132:118:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6382:206:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6392:26:26",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6404:9:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6415:2:26",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6400:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "6400:18:26"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6392:4:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6472:6:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6485:9:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6496:1:26",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6481:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6481:17:26"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6428:43:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "6428:71:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6428:71:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6553:6:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6566:9:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6577:2:26",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6562:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6562:18:26"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6509:43:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "6509:72:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6509:72:26"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6346:9:26",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6358:6:26",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6366:6:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6377:4:26",
														"type": ""
													}
												],
												"src": "6256:332:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6657:80:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6667:22:26",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6682:6:26"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6676:5:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "6676:13:26"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6667:5:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6725:5:26"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "6698:26:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "6698:33:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6698:33:26"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6635:6:26",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6643:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6651:5:26",
														"type": ""
													}
												],
												"src": "6594:143:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6820:274:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6866:83:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6868:77:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6868:79:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6868:79:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6841:7:26"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6850:9:26"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6837:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6837:23:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6862:2:26",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6833:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "6833:32:26"
															},
															"nodeType": "YulIf",
															"src": "6830:119:26"
														},
														{
															"nodeType": "YulBlock",
															"src": "6959:128:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6974:15:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6988:1:26",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6978:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7003:74:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7049:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7060:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7045:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7045:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7069:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "7013:31:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7013:64:26"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "7003:6:26"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6790:9:26",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6801:7:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6813:6:26",
														"type": ""
													}
												],
												"src": "6743:351:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7128:152:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7145:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7148:77:26",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7138:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "7138:88:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7138:88:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7242:1:26",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7245:4:26",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7235:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "7235:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7235:15:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7266:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7269:4:26",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7259:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "7259:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7259:15:26"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "7100:180:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7337:269:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7347:22:26",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "7361:4:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7367:1:26",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "7357:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "7357:12:26"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "7347:6:26"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7378:38:26",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "7408:4:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7414:1:26",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "7404:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "7404:12:26"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "7382:18:26",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7455:51:26",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7469:27:26",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "7483:6:26"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7491:4:26",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "7479:3:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7479:17:26"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "7469:6:26"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "7435:18:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7428:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "7428:26:26"
															},
															"nodeType": "YulIf",
															"src": "7425:81:26"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7558:42:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "7572:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7572:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7572:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "7522:18:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "7545:6:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7553:2:26",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "7542:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7542:14:26"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "7519:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "7519:38:26"
															},
															"nodeType": "YulIf",
															"src": "7516:84:26"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "7321:4:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7330:6:26",
														"type": ""
													}
												],
												"src": "7286:320:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7644:28:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7654:12:26",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "7661:5:26"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "7654:3:26"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7630:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "7640:3:26",
														"type": ""
													}
												],
												"src": "7612:60:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7738:82:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7748:66:26",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7806:5:26"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nodeType": "YulIdentifier",
																					"src": "7788:17:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7788:24:26"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "7779:8:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7779:34:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "7761:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "7761:53:26"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "7748:9:26"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7718:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "7728:9:26",
														"type": ""
													}
												],
												"src": "7678:142:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7886:66:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7896:50:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7940:5:26"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "7909:30:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "7909:37:26"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "7896:9:26"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7866:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "7876:9:26",
														"type": ""
													}
												],
												"src": "7826:126:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8043:66:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8053:50:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8097:5:26"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "8066:30:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "8066:37:26"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "8053:9:26"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_ISuperfluidToken_$4323_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8023:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "8033:9:26",
														"type": ""
													}
												],
												"src": "7958:151:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8205:91:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8222:3:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "8283:5:26"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_ISuperfluidToken_$4323_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "8227:55:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8227:62:26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8215:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "8215:75:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8215:75:26"
														}
													]
												},
												"name": "abi_encode_t_contract$_ISuperfluidToken_$4323_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8193:5:26",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8200:3:26",
														"type": ""
													}
												],
												"src": "8115:181:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8481:313:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8491:26:26",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8503:9:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8514:2:26",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8499:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "8499:18:26"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8491:4:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8596:6:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8609:9:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8620:1:26",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8605:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8605:17:26"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_ISuperfluidToken_$4323_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8527:68:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "8527:96:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8527:96:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8677:6:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8690:9:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8701:2:26",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8686:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8686:18:26"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8633:43:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "8633:72:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8633:72:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "8759:6:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8772:9:26"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8783:2:26",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8768:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8768:18:26"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8715:43:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "8715:72:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8715:72:26"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ISuperfluidToken_$4323_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8437:9:26",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8449:6:26",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8457:6:26",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8465:6:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8476:4:26",
														"type": ""
													}
												],
												"src": "8302:492:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8863:80:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8873:22:26",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "8888:6:26"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8882:5:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "8882:13:26"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "8873:5:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8931:5:26"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8904:26:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "8904:33:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8904:33:26"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "8841:6:26",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8849:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8857:5:26",
														"type": ""
													}
												],
												"src": "8800:143:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8992:48:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9002:32:26",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9024:2:26",
																		"type": "",
																		"value": "11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9028:5:26"
																	}
																],
																"functionName": {
																	"name": "signextend",
																	"nodeType": "YulIdentifier",
																	"src": "9013:10:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "9013:21:26"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9002:7:26"
																}
															]
														}
													]
												},
												"name": "cleanup_t_int96",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8974:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "8984:7:26",
														"type": ""
													}
												],
												"src": "8949:91:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9087:77:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9142:16:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9151:1:26",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9154:1:26",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9144:6:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9144:12:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9144:12:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9110:5:26"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "9133:5:26"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_int96",
																					"nodeType": "YulIdentifier",
																					"src": "9117:15:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9117:22:26"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "9107:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9107:33:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9100:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "9100:41:26"
															},
															"nodeType": "YulIf",
															"src": "9097:61:26"
														}
													]
												},
												"name": "validator_revert_t_int96",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9080:5:26",
														"type": ""
													}
												],
												"src": "9046:118:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9231:78:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9241:22:26",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "9256:6:26"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9250:5:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "9250:13:26"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "9241:5:26"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9297:5:26"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_int96",
																	"nodeType": "YulIdentifier",
																	"src": "9272:24:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "9272:31:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9272:31:26"
														}
													]
												},
												"name": "abi_decode_t_int96_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "9209:6:26",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9217:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9225:5:26",
														"type": ""
													}
												],
												"src": "9170:139:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9441:690:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9488:83:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "9490:77:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9490:79:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9490:79:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9462:7:26"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9471:9:26"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9458:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9458:23:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9483:3:26",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9454:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "9454:33:26"
															},
															"nodeType": "YulIf",
															"src": "9451:120:26"
														},
														{
															"nodeType": "YulBlock",
															"src": "9581:128:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9596:15:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9610:1:26",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9600:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9625:74:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9671:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9682:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9667:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9667:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9691:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "9635:31:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9635:64:26"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "9625:6:26"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9719:127:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9734:16:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9748:2:26",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9738:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9764:72:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9808:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9819:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9804:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9804:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9828:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_int96_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "9774:29:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9774:62:26"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "9764:6:26"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9856:129:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9871:16:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9885:2:26",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9875:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9901:74:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9947:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9958:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9943:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9943:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9967:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "9911:31:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9911:64:26"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "9901:6:26"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9995:129:26",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10010:16:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10024:2:26",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10014:6:26",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10040:74:26",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10086:9:26"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10097:6:26"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10082:3:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10082:22:26"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10106:7:26"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "10050:31:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10050:64:26"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "10040:6:26"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_int96t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9387:9:26",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9398:7:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9410:6:26",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9418:6:26",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9426:6:26",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "9434:6:26",
														"type": ""
													}
												],
												"src": "9315:816:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10165:152:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10182:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10185:77:26",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10175:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10175:88:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10175:88:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10279:1:26",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10282:4:26",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10272:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10272:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10272:15:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10303:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10306:4:26",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10296:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10296:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10296:15:26"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "10137:180:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10351:152:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10368:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10371:77:26",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10361:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10361:88:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10361:88:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10465:1:26",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10468:4:26",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10458:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10458:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10458:15:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10489:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10492:4:26",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10482:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10482:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10482:15:26"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "10323:180:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10537:152:26",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10554:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10557:77:26",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10547:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10547:88:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10547:88:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10651:1:26",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10654:4:26",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10644:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10644:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10644:15:26"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10675:1:26",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10678:4:26",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10668:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10668:15:26"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10668:15:26"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "10509:180:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10738:128:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10748:33:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10775:5:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10757:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10757:24:26"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "10748:5:26"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10809:22:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10811:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10811:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10811:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10796:5:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10803:4:26",
																		"type": "",
																		"value": "0x00"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "10793:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10793:15:26"
															},
															"nodeType": "YulIf",
															"src": "10790:41:26"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10840:20:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "10851:5:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10858:1:26",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10847:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10847:13:26"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "10840:3:26"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10724:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "10734:3:26",
														"type": ""
													}
												],
												"src": "10695:171:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10920:362:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10930:25:26",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10953:1:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10935:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10935:20:26"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "10930:1:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10964:25:26",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10987:1:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10969:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "10969:20:26"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "10964:1:26"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10998:28:26",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11021:1:26"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11024:1:26"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "11017:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11017:9:26"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nodeType": "YulTypedName",
																	"src": "11002:11:26",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11035:41:26",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nodeType": "YulIdentifier",
																		"src": "11064:11:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11046:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11046:30:26"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "11035:7:26"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11253:22:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11255:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11255:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11255:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "11186:1:26"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "11179:6:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11179:9:26"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "11209:1:26"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "11216:7:26"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "11225:1:26"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "11212:3:26"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11212:15:26"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "11206:2:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11206:22:26"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "11159:2:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11159:83:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11139:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11139:113:26"
															},
															"nodeType": "YulIf",
															"src": "11136:139:26"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10903:1:26",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10906:1:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "10912:7:26",
														"type": ""
													}
												],
												"src": "10872:410:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11333:149:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11343:25:26",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11366:1:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11348:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11348:20:26"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "11343:1:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11377:25:26",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11400:1:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11382:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11382:20:26"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "11377:1:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11411:17:26",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11423:1:26"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11426:1:26"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "11419:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11419:9:26"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "11411:4:26"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11453:22:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11455:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11455:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11455:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "11444:4:26"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11450:1:26"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "11441:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11441:11:26"
															},
															"nodeType": "YulIf",
															"src": "11438:37:26"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "11319:1:26",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "11322:1:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "11328:4:26",
														"type": ""
													}
												],
												"src": "11288:194:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11532:147:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11542:25:26",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11565:1:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11547:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11547:20:26"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "11542:1:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11576:25:26",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11599:1:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11581:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11581:20:26"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "11576:1:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11610:16:26",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11621:1:26"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11624:1:26"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11617:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11617:9:26"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "11610:3:26"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11650:22:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11652:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11652:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11652:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11642:1:26"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "11645:3:26"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "11639:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11639:10:26"
															},
															"nodeType": "YulIf",
															"src": "11636:36:26"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "11519:1:26",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "11522:1:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "11528:3:26",
														"type": ""
													}
												],
												"src": "11488:191:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11728:190:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11738:33:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11765:5:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11747:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11747:24:26"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "11738:5:26"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11861:22:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11863:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11863:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11863:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11786:5:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11793:66:26",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "11783:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11783:77:26"
															},
															"nodeType": "YulIf",
															"src": "11780:103:26"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11892:20:26",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11903:5:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11910:1:26",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11899:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "11899:13:26"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "11892:3:26"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11714:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "11724:3:26",
														"type": ""
													}
												],
												"src": "11685:233:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11975:51:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11985:34:26",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12010:1:26",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12013:5:26"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "12006:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "12006:13:26"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "11985:8:26"
																}
															]
														}
													]
												},
												"name": "shift_right_1_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11956:5:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "11966:8:26",
														"type": ""
													}
												],
												"src": "11924:102:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12105:775:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12115:15:26",
															"value": {
																"name": "_power",
																"nodeType": "YulIdentifier",
																"src": "12124:6:26"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "12115:5:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12139:14:26",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "12148:5:26"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "12139:4:26"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12197:677:26",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "12285:22:26",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "12287:16:26"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12287:18:26"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "12287:18:26"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "12263:4:26"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "12273:3:26"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "12278:4:26"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "12269:3:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12269:14:26"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "12260:2:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12260:24:26"
																		},
																		"nodeType": "YulIf",
																		"src": "12257:50:26"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "12352:419:26",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "12732:25:26",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "12745:5:26"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "12752:4:26"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "12741:3:26"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "12741:16:26"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "12732:5:26"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "12327:8:26"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12337:1:26",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "12323:3:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12323:16:26"
																		},
																		"nodeType": "YulIf",
																		"src": "12320:451:26"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "12784:23:26",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "12796:4:26"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "12802:4:26"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "12792:3:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12792:15:26"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "12784:4:26"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "12820:44:26",
																		"value": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "12855:8:26"
																				}
																			],
																			"functionName": {
																				"name": "shift_right_1_unsigned",
																				"nodeType": "YulIdentifier",
																				"src": "12832:22:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12832:32:26"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "12820:8:26"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "12173:8:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12183:1:26",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "12170:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "12170:15:26"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "12186:2:26",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "12166:3:26",
																"statements": []
															},
															"src": "12162:712:26"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_power",
														"nodeType": "YulTypedName",
														"src": "12060:6:26",
														"type": ""
													},
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "12068:5:26",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "12075:8:26",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "12085:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "12093:5:26",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "12100:4:26",
														"type": ""
													}
												],
												"src": "12032:848:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12946:1013:26",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13141:20:26",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "13143:10:26",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "13152:1:26",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "13143:5:26"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "13154:5:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "13131:8:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13124:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "13124:16:26"
															},
															"nodeType": "YulIf",
															"src": "13121:40:26"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13186:20:26",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "13188:10:26",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "13197:1:26",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "13188:5:26"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "13199:5:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "13180:4:26"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13173:6:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "13173:12:26"
															},
															"nodeType": "YulIf",
															"src": "13170:36:26"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "13316:20:26",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "13318:10:26",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13327:1:26",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "13318:5:26"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "13329:5:26"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "13309:27:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13314:1:26",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "13360:176:26",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "13395:22:26",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "13397:16:26"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "13397:18:26"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "13397:18:26"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "13380:8:26"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "13390:3:26",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "13377:2:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "13377:17:26"
																				},
																				"nodeType": "YulIf",
																				"src": "13374:43:26"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "13430:25:26",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "13443:1:26",
																							"type": "",
																							"value": "2"
																						},
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "13446:8:26"
																						}
																					],
																					"functionName": {
																						"name": "exp",
																						"nodeType": "YulIdentifier",
																						"src": "13439:3:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "13439:16:26"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "13430:5:26"
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "13486:22:26",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "13488:16:26"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "13488:18:26"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "13488:18:26"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "13474:5:26"
																						},
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "13481:3:26"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "13471:2:26"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "13471:14:26"
																				},
																				"nodeType": "YulIf",
																				"src": "13468:40:26"
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "13521:5:26"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "13345:191:26",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13350:1:26",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "13266:4:26"
															},
															"nodeType": "YulSwitch",
															"src": "13259:277:26"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13668:123:26",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "13682:28:26",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "13695:4:26"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "13701:8:26"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "13691:3:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13691:19:26"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "13682:5:26"
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "13741:22:26",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "13743:16:26"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13743:18:26"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "13743:18:26"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "power",
																					"nodeType": "YulIdentifier",
																					"src": "13729:5:26"
																				},
																				{
																					"name": "max",
																					"nodeType": "YulIdentifier",
																					"src": "13736:3:26"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "13726:2:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13726:14:26"
																		},
																		"nodeType": "YulIf",
																		"src": "13723:40:26"
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "13776:5:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "13571:4:26"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13577:2:26",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "13568:2:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13568:12:26"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "13585:8:26"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13595:2:26",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "13582:2:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13582:16:26"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13564:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13564:35:26"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "13620:4:26"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13626:3:26",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "13617:2:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13617:13:26"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "13635:8:26"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13645:2:26",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "13632:2:26"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13632:16:26"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13613:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13613:36:26"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "13548:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "13548:111:26"
															},
															"nodeType": "YulIf",
															"src": "13545:246:26"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13801:57:26",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13835:1:26",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "13838:4:26"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "13844:8:26"
																	},
																	{
																		"name": "max",
																		"nodeType": "YulIdentifier",
																		"src": "13854:3:26"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "13816:18:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "13816:42:26"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "13801:5:26"
																},
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "13808:4:26"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13897:22:26",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13899:16:26"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13899:18:26"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13899:18:26"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power",
																		"nodeType": "YulIdentifier",
																		"src": "13874:5:26"
																	},
																	{
																		"arguments": [
																			{
																				"name": "max",
																				"nodeType": "YulIdentifier",
																				"src": "13885:3:26"
																			},
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "13890:4:26"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "13881:3:26"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13881:14:26"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "13871:2:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "13871:25:26"
															},
															"nodeType": "YulIf",
															"src": "13868:51:26"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13928:25:26",
															"value": {
																"arguments": [
																	{
																		"name": "power",
																		"nodeType": "YulIdentifier",
																		"src": "13941:5:26"
																	},
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "13948:4:26"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "13937:3:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "13937:16:26"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "13928:5:26"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "12916:4:26",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "12922:8:26",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "12932:3:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "12940:5:26",
														"type": ""
													}
												],
												"src": "12886:1073:26"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14031:219:26",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14041:31:26",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "14067:4:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "14049:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "14049:23:26"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "14041:4:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14081:39:26",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "14111:8:26"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "14093:17:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "14093:27:26"
															},
															"variableNames": [
																{
																	"name": "exponent",
																	"nodeType": "YulIdentifier",
																	"src": "14081:8:26"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14130:113:26",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "14160:4:26"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "14166:8:26"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14176:66:26",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "14139:20:26"
																},
																"nodeType": "YulFunctionCall",
																"src": "14139:104:26"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "14130:5:26"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "14006:4:26",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "14012:8:26",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "14025:5:26",
														"type": ""
													}
												],
												"src": "13965:285:26"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ISuperfluidToken_$4323_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_ISuperfluidToken_$4323_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ISuperfluidToken_$4323_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_ISuperfluidToken_$4323_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_contract$_ISuperfluidToken_$4323_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_int96(value) -> cleaned {\n        cleaned := signextend(11, value)\n    }\n\n    function validator_revert_t_int96(value) {\n        if iszero(eq(value, cleanup_t_int96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_int96_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int96(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_int96t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_int96_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint256(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n}\n",
									"id": 26,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100355760003560e01c8062fdd58e1461003a578063bb79f5871461006a575b600080fd5b610054600480360381019061004f91906108da565b61009a565b6040516100619190610929565b60405180910390f35b610084600480360381019061007f9190610a8a565b6102a3565b6040516100919190610b74565b60405180910390f35b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663192df655600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b815260040161011c929190610b9e565b602060405180830381865afa158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d9190610bdc565b9050610288848261016d866104a7565b6004805461017a90610c38565b80601f01602080910402602001604051908101604052809291908181526020018280546101a690610c38565b80156101f35780601f106101c8576101008083540402835291602001916101f3565b820191906000526020600020905b8154815290600101906020018083116101d657829003601f168201915b50505050506005805461020590610c38565b80601f016020809104026020016040519081016040528092919081815260200182805461023190610c38565b801561027e5780601f106102535761010080835404028352916020019161027e565b820191906000526020600020905b81548152906001019060200180831161026157829003601f168201915b50505050506102a3565b1561029757600191505061029d565b60009150505b92915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000808273ffffffffffffffffffffffffffffffffffffffff1663e6a1e888600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8c6040518463ffffffff1660e01b815260040161035393929190610cc8565b608060405180830381865afa158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610d4d565b50509150915060008473ffffffffffffffffffffffffffffffffffffffff16636352211e6103c18b610575565b6040518263ffffffff1660e01b81526004016103dd9190610929565b602060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610bdc565b9050600061042b89610575565b9050600061043889610575565b90508184600b0b121580156104575750600081148061045657508085105b5b8061048d57508273ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16145b1561049757600197505b5050505050505095945050505050565b6060600060016104b684610589565b01905060008167ffffffffffffffff8111156104d5576104d461095f565b5b6040519080825280601f01601f1916602001820160405280156105075781602001600182028036833780820191505090505b509050600082602001820190505b60011561056a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161055e5761055d610db4565b5b04945060008503610515575b819350505050919050565b60006105828260006106dc565b9050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105e7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816105dd576105dc610db4565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610624576d04ee2d6d415b85acef8100000000838161061a57610619610db4565b5b0492506020810190505b662386f26fc10000831061065357662386f26fc10000838161064957610648610db4565b5b0492506010810190505b6305f5e100831061067c576305f5e100838161067257610671610db4565b5b0492506008810190505b61271083106106a157612710838161069757610696610db4565b5b0492506004810190505b606483106106c457606483816106ba576106b9610db4565b5b0492506002810190505b600a83106106d3576001810190505b80915050919050565b60008083905060008060005b835181101561080157603084828151811061070657610705610de3565b5b602001015160f81c60f81b60f81c60ff16101580156107495750603984828151811061073557610734610de3565b5b602001015160f81c60f81b60f81c60ff1611155b156107bd57811561076c57600086031561080157858061076890610e41565b9650505b600a836107799190610e6a565b925060308482815181106107905761078f610de3565b5b602001015160f81c60f81b60f81c60ff166107ab9190610eac565b836107b69190610ee0565b92506107ee565b602e8482815181106107d2576107d1610de3565b5b602001015160f81c60f81b60f81c60ff16036107ed57600191505b5b80806107f990610f14565b9150506106e8565b5060008511156108265784600a610818919061108f565b826108239190610e6a565b91505b81935050505092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061087182610846565b9050919050565b61088181610866565b811461088c57600080fd5b50565b60008135905061089e81610878565b92915050565b6000819050919050565b6108b7816108a4565b81146108c257600080fd5b50565b6000813590506108d4816108ae565b92915050565b600080604083850312156108f1576108f061083c565b5b60006108ff8582860161088f565b9250506020610910858286016108c5565b9150509250929050565b610923816108a4565b82525050565b600060208201905061093e600083018461091a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109978261094e565b810181811067ffffffffffffffff821117156109b6576109b561095f565b5b80604052505050565b60006109c9610832565b90506109d5828261098e565b919050565b600067ffffffffffffffff8211156109f5576109f461095f565b5b6109fe8261094e565b9050602081019050919050565b82818337600083830152505050565b6000610a2d610a28846109da565b6109bf565b905082815260208101848484011115610a4957610a48610949565b5b610a54848285610a0b565b509392505050565b600082601f830112610a7157610a70610944565b5b8135610a81848260208601610a1a565b91505092915050565b600080600080600060a08688031215610aa657610aa561083c565b5b6000610ab48882890161088f565b9550506020610ac58882890161088f565b945050604086013567ffffffffffffffff811115610ae657610ae5610841565b5b610af288828901610a5c565b935050606086013567ffffffffffffffff811115610b1357610b12610841565b5b610b1f88828901610a5c565b925050608086013567ffffffffffffffff811115610b4057610b3f610841565b5b610b4c88828901610a5c565b9150509295509295909350565b60008115159050919050565b610b6e81610b59565b82525050565b6000602082019050610b896000830184610b65565b92915050565b610b9881610866565b82525050565b6000604082019050610bb36000830185610b8f565b610bc0602083018461091a565b9392505050565b600081519050610bd681610878565b92915050565b600060208284031215610bf257610bf161083c565b5b6000610c0084828501610bc7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c5057607f821691505b602082108103610c6357610c62610c09565b5b50919050565b6000819050919050565b6000610c8e610c89610c8484610846565b610c69565b610846565b9050919050565b6000610ca082610c73565b9050919050565b6000610cb282610c95565b9050919050565b610cc281610ca7565b82525050565b6000606082019050610cdd6000830186610cb9565b610cea6020830185610b8f565b610cf76040830184610b8f565b949350505050565b600081519050610d0e816108ae565b92915050565b600081600b0b9050919050565b610d2a81610d14565b8114610d3557600080fd5b50565b600081519050610d4781610d21565b92915050565b60008060008060808587031215610d6757610d6661083c565b5b6000610d7587828801610cff565b9450506020610d8687828801610d38565b9350506040610d9787828801610cff565b9250506060610da887828801610cff565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e4c826108a4565b915060008203610e5f57610e5e610e12565b5b600182039050919050565b6000610e75826108a4565b9150610e80836108a4565b9250828202610e8e816108a4565b91508282048414831517610ea557610ea4610e12565b5b5092915050565b6000610eb7826108a4565b9150610ec2836108a4565b9250828203905081811115610eda57610ed9610e12565b5b92915050565b6000610eeb826108a4565b9150610ef6836108a4565b9250828201905080821115610f0e57610f0d610e12565b5b92915050565b6000610f1f826108a4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f5157610f50610e12565b5b600182019050919050565b60008160011c9050919050565b6000808291508390505b6001851115610fb357808604811115610f8f57610f8e610e12565b5b6001851615610f9e5780820291505b8081029050610fac85610f5c565b9450610f73565b94509492505050565b600082610fcc5760019050611088565b81610fda5760009050611088565b8160018114610ff05760028114610ffa57611029565b6001915050611088565b60ff84111561100c5761100b610e12565b5b8360020a91508482111561102357611022610e12565b5b50611088565b5060208310610133831016604e8410600b841016171561105e5782820a90508381111561105957611058610e12565b5b611088565b61106b8484846001610f69565b9250905081840481111561108257611081610e12565b5b81810290505b9392505050565b600061109a826108a4565b91506110a5836108a4565b92506110d27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610fbc565b90509291505056fea2646970667358221220755bd76f71864a46cdeafd7baf667002cbc61fcb6020c7c5e8569af5ee8434d564736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xFDD58E EQ PUSH2 0x3A JUMPI DUP1 PUSH4 0xBB79F587 EQ PUSH2 0x6A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x8DA JUMP JUMPDEST PUSH2 0x9A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x929 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x84 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x7F SWAP2 SWAP1 PUSH2 0xA8A JUMP JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x91 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x192DF655 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11C SWAP3 SWAP2 SWAP1 PUSH2 0xB9E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x139 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x15D SWAP2 SWAP1 PUSH2 0xBDC JUMP JUMPDEST SWAP1 POP PUSH2 0x288 DUP5 DUP3 PUSH2 0x16D DUP7 PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH2 0x17A SWAP1 PUSH2 0xC38 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1A6 SWAP1 PUSH2 0xC38 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1F3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1C8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1F3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1D6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH1 0x5 DUP1 SLOAD PUSH2 0x205 SWAP1 PUSH2 0xC38 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x231 SWAP1 PUSH2 0xC38 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x27E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x253 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x27E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x261 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x2A3 JUMP JUMPDEST ISZERO PUSH2 0x297 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x29D JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE6A1E888 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 DUP13 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x353 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x370 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xD4D JUMP JUMPDEST POP POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E PUSH2 0x3C1 DUP12 PUSH2 0x575 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3DD SWAP2 SWAP1 PUSH2 0x929 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x41E SWAP2 SWAP1 PUSH2 0xBDC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x42B DUP10 PUSH2 0x575 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x438 DUP10 PUSH2 0x575 JUMP JUMPDEST SWAP1 POP DUP2 DUP5 PUSH1 0xB SIGNEXTEND SLT ISZERO DUP1 ISZERO PUSH2 0x457 JUMPI POP PUSH1 0x0 DUP2 EQ DUP1 PUSH2 0x456 JUMPI POP DUP1 DUP6 LT JUMPDEST JUMPDEST DUP1 PUSH2 0x48D JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x497 JUMPI PUSH1 0x1 SWAP8 POP JUMPDEST POP POP POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x4B6 DUP5 PUSH2 0x589 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4D5 JUMPI PUSH2 0x4D4 PUSH2 0x95F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x507 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x56A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x55E JUMPI PUSH2 0x55D PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x515 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x582 DUP3 PUSH1 0x0 PUSH2 0x6DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x5E7 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x5DD JUMPI PUSH2 0x5DC PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x624 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x61A JUMPI PUSH2 0x619 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x653 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x649 JUMPI PUSH2 0x648 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x67C JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x672 JUMPI PUSH2 0x671 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x6A1 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x697 JUMPI PUSH2 0x696 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x6C4 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x6BA JUMPI PUSH2 0x6B9 PUSH2 0xDB4 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x6D3 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x801 JUMPI PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x706 JUMPI PUSH2 0x705 PUSH2 0xDE3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND LT ISZERO DUP1 ISZERO PUSH2 0x749 JUMPI POP PUSH1 0x39 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x735 JUMPI PUSH2 0x734 PUSH2 0xDE3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x7BD JUMPI DUP2 ISZERO PUSH2 0x76C JUMPI PUSH1 0x0 DUP7 SUB ISZERO PUSH2 0x801 JUMPI DUP6 DUP1 PUSH2 0x768 SWAP1 PUSH2 0xE41 JUMP JUMPDEST SWAP7 POP POP JUMPDEST PUSH1 0xA DUP4 PUSH2 0x779 SWAP2 SWAP1 PUSH2 0xE6A JUMP JUMPDEST SWAP3 POP PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x790 JUMPI PUSH2 0x78F PUSH2 0xDE3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0xEAC JUMP JUMPDEST DUP4 PUSH2 0x7B6 SWAP2 SWAP1 PUSH2 0xEE0 JUMP JUMPDEST SWAP3 POP PUSH2 0x7EE JUMP JUMPDEST PUSH1 0x2E DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7D2 JUMPI PUSH2 0x7D1 PUSH2 0xDE3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND SUB PUSH2 0x7ED JUMPI PUSH1 0x1 SWAP2 POP JUMPDEST JUMPDEST DUP1 DUP1 PUSH2 0x7F9 SWAP1 PUSH2 0xF14 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6E8 JUMP JUMPDEST POP PUSH1 0x0 DUP6 GT ISZERO PUSH2 0x826 JUMPI DUP5 PUSH1 0xA PUSH2 0x818 SWAP2 SWAP1 PUSH2 0x108F JUMP JUMPDEST DUP3 PUSH2 0x823 SWAP2 SWAP1 PUSH2 0xE6A JUMP JUMPDEST SWAP2 POP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x871 DUP3 PUSH2 0x846 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x881 DUP2 PUSH2 0x866 JUMP JUMPDEST DUP2 EQ PUSH2 0x88C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x89E DUP2 PUSH2 0x878 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8B7 DUP2 PUSH2 0x8A4 JUMP JUMPDEST DUP2 EQ PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8D4 DUP2 PUSH2 0x8AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8F1 JUMPI PUSH2 0x8F0 PUSH2 0x83C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x8FF DUP6 DUP3 DUP7 ADD PUSH2 0x88F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x910 DUP6 DUP3 DUP7 ADD PUSH2 0x8C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x923 DUP2 PUSH2 0x8A4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x93E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x91A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x997 DUP3 PUSH2 0x94E JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x9B6 JUMPI PUSH2 0x9B5 PUSH2 0x95F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C9 PUSH2 0x832 JUMP JUMPDEST SWAP1 POP PUSH2 0x9D5 DUP3 DUP3 PUSH2 0x98E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x9F5 JUMPI PUSH2 0x9F4 PUSH2 0x95F JUMP JUMPDEST JUMPDEST PUSH2 0x9FE DUP3 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA2D PUSH2 0xA28 DUP5 PUSH2 0x9DA JUMP JUMPDEST PUSH2 0x9BF JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xA49 JUMPI PUSH2 0xA48 PUSH2 0x949 JUMP JUMPDEST JUMPDEST PUSH2 0xA54 DUP5 DUP3 DUP6 PUSH2 0xA0B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA71 JUMPI PUSH2 0xA70 PUSH2 0x944 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA81 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xA1A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xAA6 JUMPI PUSH2 0xAA5 PUSH2 0x83C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xAB4 DUP9 DUP3 DUP10 ADD PUSH2 0x88F JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xAC5 DUP9 DUP3 DUP10 ADD PUSH2 0x88F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAE6 JUMPI PUSH2 0xAE5 PUSH2 0x841 JUMP JUMPDEST JUMPDEST PUSH2 0xAF2 DUP9 DUP3 DUP10 ADD PUSH2 0xA5C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB13 JUMPI PUSH2 0xB12 PUSH2 0x841 JUMP JUMPDEST JUMPDEST PUSH2 0xB1F DUP9 DUP3 DUP10 ADD PUSH2 0xA5C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB40 JUMPI PUSH2 0xB3F PUSH2 0x841 JUMP JUMPDEST JUMPDEST PUSH2 0xB4C DUP9 DUP3 DUP10 ADD PUSH2 0xA5C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB6E DUP2 PUSH2 0xB59 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB89 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB65 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB98 DUP2 PUSH2 0x866 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xBB3 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xB8F JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x91A JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xBD6 DUP2 PUSH2 0x878 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBF2 JUMPI PUSH2 0xBF1 PUSH2 0x83C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC00 DUP5 DUP3 DUP6 ADD PUSH2 0xBC7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xC50 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xC63 JUMPI PUSH2 0xC62 PUSH2 0xC09 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC8E PUSH2 0xC89 PUSH2 0xC84 DUP5 PUSH2 0x846 JUMP JUMPDEST PUSH2 0xC69 JUMP JUMPDEST PUSH2 0x846 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCA0 DUP3 PUSH2 0xC73 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB2 DUP3 PUSH2 0xC95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCC2 DUP2 PUSH2 0xCA7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xCDD PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCB9 JUMP JUMPDEST PUSH2 0xCEA PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB8F JUMP JUMPDEST PUSH2 0xCF7 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xB8F JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD0E DUP2 PUSH2 0x8AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xB SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD2A DUP2 PUSH2 0xD14 JUMP JUMPDEST DUP2 EQ PUSH2 0xD35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD47 DUP2 PUSH2 0xD21 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD67 JUMPI PUSH2 0xD66 PUSH2 0x83C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD75 DUP8 DUP3 DUP9 ADD PUSH2 0xCFF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xD86 DUP8 DUP3 DUP9 ADD PUSH2 0xD38 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xD97 DUP8 DUP3 DUP9 ADD PUSH2 0xCFF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0xDA8 DUP8 DUP3 DUP9 ADD PUSH2 0xCFF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE4C DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0xE5F JUMPI PUSH2 0xE5E PUSH2 0xE12 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE75 DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH2 0xE80 DUP4 PUSH2 0x8A4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xE8E DUP2 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xEA5 JUMPI PUSH2 0xEA4 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB7 DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH2 0xEC2 DUP4 PUSH2 0x8A4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xEDA JUMPI PUSH2 0xED9 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEEB DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH2 0xEF6 DUP4 PUSH2 0x8A4 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF0E JUMPI PUSH2 0xF0D PUSH2 0xE12 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF1F DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xF51 JUMPI PUSH2 0xF50 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0xFB3 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0xF8F JUMPI PUSH2 0xF8E PUSH2 0xE12 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0xF9E JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0xFAC DUP6 PUSH2 0xF5C JUMP JUMPDEST SWAP5 POP PUSH2 0xF73 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xFCC JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1088 JUMP JUMPDEST DUP2 PUSH2 0xFDA JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1088 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xFF0 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xFFA JUMPI PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1088 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x100C JUMPI PUSH2 0x100B PUSH2 0xE12 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x1023 JUMPI PUSH2 0x1022 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST POP PUSH2 0x1088 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x105E JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x1059 JUMPI PUSH2 0x1058 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST PUSH2 0x1088 JUMP JUMPDEST PUSH2 0x106B DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0xF69 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x1082 JUMPI PUSH2 0x1081 PUSH2 0xE12 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109A DUP3 PUSH2 0x8A4 JUMP JUMPDEST SWAP2 POP PUSH2 0x10A5 DUP4 PUSH2 0x8A4 JUMP JUMPDEST SWAP3 POP PUSH2 0x10D2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0xFBC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0x5BD76F71864A46CDEAFD7BAF667002CBC61FCB6020C7 0xC5 0xE8 JUMP SWAP11 CREATE2 0xEE DUP5 CALLVALUE 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ",
							"sourceMap": "967:2745:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2364:330;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1405:953;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2364:330;2435:7;2454:12;2479;;;;;;;;;;;2469:31;;;2501:15;;;;;;;;;;;2518:3;2469:53;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2454:68;;2536:78;2549:6;2557:4;2563:21;2580:3;2563:16;:21::i;:::-;2586:12;2536:78;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2600:13;2536:78;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;:78::i;:::-;2532:156;;;2637:1;2630:8;;;;;2532:156;2676:1;2669:8;;;2364:330;;;;;:::o;1405:953::-;1608:15;1664:16;1691:15;;;;;;;;;;;1664:43;;1717:29;1787:11;;;;;;;;;;;1717:91;;1819:17;1838:14;1860:4;:12;;;1903:18;;;;;;;;;;;1936:6;1956:8;1860:114;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1818:156;;;;;;1984:14;2001:8;:16;;;2023:19;2032:9;2023:8;:19::i;:::-;2001:43;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1984:60;;2055:16;2078:21;2087:11;2078:8;:21::i;:::-;2055:45;;2110:18;2131:22;2140:12;2131:8;:22::i;:::-;2110:43;;2194:9;2182:8;:21;;;;:84;;;;;2238:1;2224:10;:15;:41;;;;2255:10;2243:9;:22;2224:41;2182:84;2181:118;;;;2293:6;2283:16;;:6;:16;;;2181:118;2164:188;;;2337:4;2324:17;;2164:188;1625:733;;;;;;;1405:953;;;;;;;:::o;447:696:4:-;503:13;552:14;589:1;569:17;580:5;569:10;:17::i;:::-;:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;604:41;;659:11;785:6;781:2;777:15;769:6;765:28;758:35;;820:280;827:4;820:280;;;851:5;;;;;;;;990:8;985:2;978:5;974:14;969:30;964:3;956:44;1044:2;1035:11;;;;;;:::i;:::-;;;;;1077:1;1068:5;:10;820:280;1064:21;820:280;1120:6;1113:13;;;;;447:696;;;:::o;2700:132:25:-;2773:18;2810:15;2819:2;2823:1;2810:8;:15::i;:::-;2803:22;;2700:132;;;:::o;10139:916:6:-;10192:7;10211:14;10228:1;10211:18;;10276:8;10267:5;:17;10263:103;;10313:8;10304:17;;;;;;:::i;:::-;;;;;10349:2;10339:12;;;;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;;;;:::i;:::-;;;;;10465:2;10455:12;;;;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;;;;:::i;:::-;;;;;10581:2;10571:12;;;;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;;;;:::i;:::-;;;;;10695:1;10685:11;;;;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;;;;:::i;:::-;;;;;10808:1;10798:11;;;;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;;;;:::i;:::-;;;;;10921:1;10911:11;;;;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;;;;10950:66;11042:6;11035:13;;;10139:916;;;:::o;2838:872:25:-;2928:18;2958:20;2987:2;2958:32;;3000:9;3023:13;3059:6;3054:567;3075:7;:14;3071:1;:18;3054:567;;;3159:2;3143:7;3151:1;3143:10;;;;;;;;:::i;:::-;;;;;;;;;;3137:17;;3132:23;;:29;;3131:82;;;;;3210:2;3194:7;3202:1;3194:10;;;;;;;;:::i;:::-;;;;;;;;;;3188:17;;3183:23;;:29;;3131:82;3110:501;;;3250:8;3246:180;;;3292:1;3286:2;:7;3282:126;3321:5;3282:126;3381:4;;;;;:::i;:::-;;;;3246:180;3451:2;3443:10;;;;;:::i;:::-;;;3505:2;3490:7;3498:1;3490:10;;;;;;;;:::i;:::-;;;;;;;;;;3484:17;;3479:23;;:28;;;;:::i;:::-;3471:36;;;;;:::i;:::-;;;3110:501;;;3559:2;3543:7;3551:1;3543:10;;;;;;;;:::i;:::-;;;;;;;;;;3537:17;;3532:23;;:29;3528:83;;3592:4;3581:15;;3528:83;3110:501;3091:3;;;;;:::i;:::-;;;;3054:567;;;;3639:1;3634:2;:6;3630:53;;;3670:2;3664;:8;;;;:::i;:::-;3656:16;;;;;:::i;:::-;;;3630:53;3699:4;3692:11;;;;;2838:872;;;;:::o;7:75:26:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:118::-;1764:24;1782:5;1764:24;:::i;:::-;1759:3;1752:37;1677:118;;:::o;1801:222::-;1894:4;1932:2;1921:9;1917:18;1909:26;;1945:71;2013:1;2002:9;1998:17;1989:6;1945:71;:::i;:::-;1801:222;;;;:::o;2029:117::-;2138:1;2135;2128:12;2152:117;2261:1;2258;2251:12;2275:102;2316:6;2367:2;2363:7;2358:2;2351:5;2347:14;2343:28;2333:38;;2275:102;;;:::o;2383:180::-;2431:77;2428:1;2421:88;2528:4;2525:1;2518:15;2552:4;2549:1;2542:15;2569:281;2652:27;2674:4;2652:27;:::i;:::-;2644:6;2640:40;2782:6;2770:10;2767:22;2746:18;2734:10;2731:34;2728:62;2725:88;;;2793:18;;:::i;:::-;2725:88;2833:10;2829:2;2822:22;2612:238;2569:281;;:::o;2856:129::-;2890:6;2917:20;;:::i;:::-;2907:30;;2946:33;2974:4;2966:6;2946:33;:::i;:::-;2856:129;;;:::o;2991:308::-;3053:4;3143:18;3135:6;3132:30;3129:56;;;3165:18;;:::i;:::-;3129:56;3203:29;3225:6;3203:29;:::i;:::-;3195:37;;3287:4;3281;3277:15;3269:23;;2991:308;;;:::o;3305:146::-;3402:6;3397:3;3392;3379:30;3443:1;3434:6;3429:3;3425:16;3418:27;3305:146;;;:::o;3457:425::-;3535:5;3560:66;3576:49;3618:6;3576:49;:::i;:::-;3560:66;:::i;:::-;3551:75;;3649:6;3642:5;3635:21;3687:4;3680:5;3676:16;3725:3;3716:6;3711:3;3707:16;3704:25;3701:112;;;3732:79;;:::i;:::-;3701:112;3822:54;3869:6;3864:3;3859;3822:54;:::i;:::-;3541:341;3457:425;;;;;:::o;3902:340::-;3958:5;4007:3;4000:4;3992:6;3988:17;3984:27;3974:122;;4015:79;;:::i;:::-;3974:122;4132:6;4119:20;4157:79;4232:3;4224:6;4217:4;4209:6;4205:17;4157:79;:::i;:::-;4148:88;;3964:278;3902:340;;;;:::o;4248:1451::-;4373:6;4381;4389;4397;4405;4454:3;4442:9;4433:7;4429:23;4425:33;4422:120;;;4461:79;;:::i;:::-;4422:120;4581:1;4606:53;4651:7;4642:6;4631:9;4627:22;4606:53;:::i;:::-;4596:63;;4552:117;4708:2;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4679:118;4864:2;4853:9;4849:18;4836:32;4895:18;4887:6;4884:30;4881:117;;;4917:79;;:::i;:::-;4881:117;5022:63;5077:7;5068:6;5057:9;5053:22;5022:63;:::i;:::-;5012:73;;4807:288;5162:2;5151:9;5147:18;5134:32;5193:18;5185:6;5182:30;5179:117;;;5215:79;;:::i;:::-;5179:117;5320:63;5375:7;5366:6;5355:9;5351:22;5320:63;:::i;:::-;5310:73;;5105:288;5460:3;5449:9;5445:19;5432:33;5492:18;5484:6;5481:30;5478:117;;;5514:79;;:::i;:::-;5478:117;5619:63;5674:7;5665:6;5654:9;5650:22;5619:63;:::i;:::-;5609:73;;5403:289;4248:1451;;;;;;;;:::o;5705:90::-;5739:7;5782:5;5775:13;5768:21;5757:32;;5705:90;;;:::o;5801:109::-;5882:21;5897:5;5882:21;:::i;:::-;5877:3;5870:34;5801:109;;:::o;5916:210::-;6003:4;6041:2;6030:9;6026:18;6018:26;;6054:65;6116:1;6105:9;6101:17;6092:6;6054:65;:::i;:::-;5916:210;;;;:::o;6132:118::-;6219:24;6237:5;6219:24;:::i;:::-;6214:3;6207:37;6132:118;;:::o;6256:332::-;6377:4;6415:2;6404:9;6400:18;6392:26;;6428:71;6496:1;6485:9;6481:17;6472:6;6428:71;:::i;:::-;6509:72;6577:2;6566:9;6562:18;6553:6;6509:72;:::i;:::-;6256:332;;;;;:::o;6594:143::-;6651:5;6682:6;6676:13;6667:22;;6698:33;6725:5;6698:33;:::i;:::-;6594:143;;;;:::o;6743:351::-;6813:6;6862:2;6850:9;6841:7;6837:23;6833:32;6830:119;;;6868:79;;:::i;:::-;6830:119;6988:1;7013:64;7069:7;7060:6;7049:9;7045:22;7013:64;:::i;:::-;7003:74;;6959:128;6743:351;;;;:::o;7100:180::-;7148:77;7145:1;7138:88;7245:4;7242:1;7235:15;7269:4;7266:1;7259:15;7286:320;7330:6;7367:1;7361:4;7357:12;7347:22;;7414:1;7408:4;7404:12;7435:18;7425:81;;7491:4;7483:6;7479:17;7469:27;;7425:81;7553:2;7545:6;7542:14;7522:18;7519:38;7516:84;;7572:18;;:::i;:::-;7516:84;7337:269;7286:320;;;:::o;7612:60::-;7640:3;7661:5;7654:12;;7612:60;;;:::o;7678:142::-;7728:9;7761:53;7779:34;7788:24;7806:5;7788:24;:::i;:::-;7779:34;:::i;:::-;7761:53;:::i;:::-;7748:66;;7678:142;;;:::o;7826:126::-;7876:9;7909:37;7940:5;7909:37;:::i;:::-;7896:50;;7826:126;;;:::o;7958:151::-;8033:9;8066:37;8097:5;8066:37;:::i;:::-;8053:50;;7958:151;;;:::o;8115:181::-;8227:62;8283:5;8227:62;:::i;:::-;8222:3;8215:75;8115:181;;:::o;8302:492::-;8476:4;8514:2;8503:9;8499:18;8491:26;;8527:96;8620:1;8609:9;8605:17;8596:6;8527:96;:::i;:::-;8633:72;8701:2;8690:9;8686:18;8677:6;8633:72;:::i;:::-;8715;8783:2;8772:9;8768:18;8759:6;8715:72;:::i;:::-;8302:492;;;;;;:::o;8800:143::-;8857:5;8888:6;8882:13;8873:22;;8904:33;8931:5;8904:33;:::i;:::-;8800:143;;;;:::o;8949:91::-;8984:7;9028:5;9024:2;9013:21;9002:32;;8949:91;;;:::o;9046:118::-;9117:22;9133:5;9117:22;:::i;:::-;9110:5;9107:33;9097:61;;9154:1;9151;9144:12;9097:61;9046:118;:::o;9170:139::-;9225:5;9256:6;9250:13;9241:22;;9272:31;9297:5;9272:31;:::i;:::-;9170:139;;;;:::o;9315:816::-;9410:6;9418;9426;9434;9483:3;9471:9;9462:7;9458:23;9454:33;9451:120;;;9490:79;;:::i;:::-;9451:120;9610:1;9635:64;9691:7;9682:6;9671:9;9667:22;9635:64;:::i;:::-;9625:74;;9581:128;9748:2;9774:62;9828:7;9819:6;9808:9;9804:22;9774:62;:::i;:::-;9764:72;;9719:127;9885:2;9911:64;9967:7;9958:6;9947:9;9943:22;9911:64;:::i;:::-;9901:74;;9856:129;10024:2;10050:64;10106:7;10097:6;10086:9;10082:22;10050:64;:::i;:::-;10040:74;;9995:129;9315:816;;;;;;;:::o;10137:180::-;10185:77;10182:1;10175:88;10282:4;10279:1;10272:15;10306:4;10303:1;10296:15;10323:180;10371:77;10368:1;10361:88;10468:4;10465:1;10458:15;10492:4;10489:1;10482:15;10509:180;10557:77;10554:1;10547:88;10654:4;10651:1;10644:15;10678:4;10675:1;10668:15;10695:171;10734:3;10757:24;10775:5;10757:24;:::i;:::-;10748:33;;10803:4;10796:5;10793:15;10790:41;;10811:18;;:::i;:::-;10790:41;10858:1;10851:5;10847:13;10840:20;;10695:171;;;:::o;10872:410::-;10912:7;10935:20;10953:1;10935:20;:::i;:::-;10930:25;;10969:20;10987:1;10969:20;:::i;:::-;10964:25;;11024:1;11021;11017:9;11046:30;11064:11;11046:30;:::i;:::-;11035:41;;11225:1;11216:7;11212:15;11209:1;11206:22;11186:1;11179:9;11159:83;11136:139;;11255:18;;:::i;:::-;11136:139;10920:362;10872:410;;;;:::o;11288:194::-;11328:4;11348:20;11366:1;11348:20;:::i;:::-;11343:25;;11382:20;11400:1;11382:20;:::i;:::-;11377:25;;11426:1;11423;11419:9;11411:17;;11450:1;11444:4;11441:11;11438:37;;;11455:18;;:::i;:::-;11438:37;11288:194;;;;:::o;11488:191::-;11528:3;11547:20;11565:1;11547:20;:::i;:::-;11542:25;;11581:20;11599:1;11581:20;:::i;:::-;11576:25;;11624:1;11621;11617:9;11610:16;;11645:3;11642:1;11639:10;11636:36;;;11652:18;;:::i;:::-;11636:36;11488:191;;;;:::o;11685:233::-;11724:3;11747:24;11765:5;11747:24;:::i;:::-;11738:33;;11793:66;11786:5;11783:77;11780:103;;11863:18;;:::i;:::-;11780:103;11910:1;11903:5;11899:13;11892:20;;11685:233;;;:::o;11924:102::-;11966:8;12013:5;12010:1;12006:13;11985:34;;11924:102;;;:::o;12032:848::-;12093:5;12100:4;12124:6;12115:15;;12148:5;12139:14;;12162:712;12183:1;12173:8;12170:15;12162:712;;;12278:4;12273:3;12269:14;12263:4;12260:24;12257:50;;;12287:18;;:::i;:::-;12257:50;12337:1;12327:8;12323:16;12320:451;;;12752:4;12745:5;12741:16;12732:25;;12320:451;12802:4;12796;12792:15;12784:23;;12832:32;12855:8;12832:32;:::i;:::-;12820:44;;12162:712;;;12032:848;;;;;;;:::o;12886:1073::-;12940:5;13131:8;13121:40;;13152:1;13143:10;;13154:5;;13121:40;13180:4;13170:36;;13197:1;13188:10;;13199:5;;13170:36;13266:4;13314:1;13309:27;;;;13350:1;13345:191;;;;13259:277;;13309:27;13327:1;13318:10;;13329:5;;;13345:191;13390:3;13380:8;13377:17;13374:43;;;13397:18;;:::i;:::-;13374:43;13446:8;13443:1;13439:16;13430:25;;13481:3;13474:5;13471:14;13468:40;;;13488:18;;:::i;:::-;13468:40;13521:5;;;13259:277;;13645:2;13635:8;13632:16;13626:3;13620:4;13617:13;13613:36;13595:2;13585:8;13582:16;13577:2;13571:4;13568:12;13564:35;13548:111;13545:246;;;13701:8;13695:4;13691:19;13682:28;;13736:3;13729:5;13726:14;13723:40;;;13743:18;;:::i;:::-;13723:40;13776:5;;13545:246;13816:42;13854:3;13844:8;13838:4;13835:1;13816:42;:::i;:::-;13801:57;;;;13890:4;13885:3;13881:14;13874:5;13871:25;13868:51;;;13899:18;;:::i;:::-;13868:51;13948:4;13941:5;13937:16;13928:25;;12886:1073;;;;;;:::o;13965:285::-;14025:5;14049:23;14067:4;14049:23;:::i;:::-;14041:31;;14093:27;14111:8;14093:27;:::i;:::-;14081:39;;14139:104;14176:66;14166:8;14160:4;14139:104;:::i;:::-;14130:113;;13965:285;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "873600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"balanceOf(address,uint256)": "infinite",
								"isSubscribed(address,address,string,string,string)": "infinite"
							},
							"internal": {
								"parseInt(string memory)": "infinite",
								"parseInt(string memory,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 967,
									"end": 3712,
									"name": "PUSH",
									"source": 25,
									"value": "80"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "PUSH",
									"source": 25,
									"value": "40"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 1021,
									"end": 1063,
									"name": "PUSH",
									"source": 25,
									"value": "49E565ED1BDC17F3D220F72DF0857C26FA83F873"
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "PUSH",
									"source": 25,
									"value": "100"
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "EXP",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "SLOAD",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "PUSH",
									"source": 25,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "MUL",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "NOT",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "AND",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "DUP4",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "PUSH",
									"source": 25,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "AND",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "MUL",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "OR",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "SSTORE",
									"source": 25
								},
								{
									"begin": 991,
									"end": 1063,
									"name": "POP",
									"source": 25
								},
								{
									"begin": 1106,
									"end": 1148,
									"name": "PUSH",
									"source": 25,
									"value": "5D8B4C2554AEB7E86F387B4D6C00AC33499ED01F"
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "PUSH",
									"source": 25,
									"value": "1"
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "PUSH",
									"source": 25,
									"value": "100"
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "EXP",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "SLOAD",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "PUSH",
									"source": 25,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "MUL",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "NOT",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "AND",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "DUP4",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "PUSH",
									"source": 25,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "AND",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "MUL",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "OR",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "SSTORE",
									"source": 25
								},
								{
									"begin": 1069,
									"end": 1148,
									"name": "POP",
									"source": 25
								},
								{
									"begin": 1188,
									"end": 1230,
									"name": "PUSH",
									"source": 25,
									"value": "60AE865EE4C725CD04353B5AAB364553F56CEF82"
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "PUSH",
									"source": 25,
									"value": "2"
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "PUSH",
									"source": 25,
									"value": "100"
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "EXP",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "SLOAD",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "PUSH",
									"source": 25,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "MUL",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "NOT",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "AND",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "DUP4",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "PUSH",
									"source": 25,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "AND",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "MUL",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "OR",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "SSTORE",
									"source": 25
								},
								{
									"begin": 1154,
									"end": 1230,
									"name": "POP",
									"source": 25
								},
								{
									"begin": 1267,
									"end": 1309,
									"name": "PUSH",
									"source": 25,
									"value": "2101DFB77FDE026414827FDC604DDAF224F0921"
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "PUSH",
									"source": 25,
									"value": "3"
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "PUSH",
									"source": 25,
									"value": "100"
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "EXP",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "SLOAD",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "PUSH",
									"source": 25,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "MUL",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "NOT",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "AND",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "DUP4",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "PUSH",
									"source": 25,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "AND",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "MUL",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "OR",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "SSTORE",
									"source": 25
								},
								{
									"begin": 1236,
									"end": 1309,
									"name": "POP",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "PUSH",
									"source": 25,
									"value": "40"
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "MLOAD",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "PUSH",
									"source": 25,
									"value": "40"
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "ADD",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "PUSH",
									"source": 25,
									"value": "40"
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "PUSH",
									"source": 25,
									"value": "C"
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "PUSH",
									"source": 25,
									"value": "20"
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "ADD",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "PUSH",
									"source": 25,
									"value": "3736313033353030373631300000000000000000000000000000000000000000"
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "POP",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "PUSH",
									"source": 25,
									"value": "4"
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "PUSH [tag]",
									"source": 25,
									"value": "1"
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "SWAP2",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "PUSH [tag]",
									"source": 25,
									"value": "2"
								},
								{
									"begin": 1315,
									"end": 1359,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "tag",
									"source": 25,
									"value": "1"
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "JUMPDEST",
									"source": 25
								},
								{
									"begin": 1315,
									"end": 1359,
									"name": "POP",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "PUSH",
									"source": 25,
									"value": "40"
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "MLOAD",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "PUSH",
									"source": 25,
									"value": "20"
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "ADD",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "PUSH",
									"source": 25,
									"value": "40"
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "MSTORE",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "POP",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "PUSH",
									"source": 25,
									"value": "5"
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "DUP2",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "PUSH [tag]",
									"source": 25,
									"value": "3"
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "SWAP2",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "SWAP1",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "PUSH [tag]",
									"source": 25,
									"value": "2"
								},
								{
									"begin": 1365,
									"end": 1398,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "tag",
									"source": 25,
									"value": "3"
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "JUMPDEST",
									"source": 25
								},
								{
									"begin": 1365,
									"end": 1398,
									"name": "POP",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "CALLVALUE",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "ISZERO",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "PUSH [tag]",
									"source": 25,
									"value": "4"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "JUMPI",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "REVERT",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "tag",
									"source": 25,
									"value": "4"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "JUMPDEST",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "POP",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "PUSH [tag]",
									"source": 25,
									"value": "5"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "JUMP",
									"source": 25
								},
								{
									"begin": 7,
									"end": 106,
									"name": "tag",
									"source": 26,
									"value": "6"
								},
								{
									"begin": 7,
									"end": 106,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 59,
									"end": 65,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 93,
									"end": 98,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 87,
									"end": 99,
									"name": "MLOAD",
									"source": 26
								},
								{
									"begin": 77,
									"end": 99,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 77,
									"end": 99,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 7,
									"end": 106,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 7,
									"end": 106,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 7,
									"end": 106,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 7,
									"end": 106,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 112,
									"end": 292,
									"name": "tag",
									"source": 26,
									"value": "7"
								},
								{
									"begin": 112,
									"end": 292,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 160,
									"end": 237,
									"name": "PUSH",
									"source": 26,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 157,
									"end": 158,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 238,
									"name": "MSTORE",
									"source": 26
								},
								{
									"begin": 257,
									"end": 261,
									"name": "PUSH",
									"source": 26,
									"value": "41"
								},
								{
									"begin": 254,
									"end": 255,
									"name": "PUSH",
									"source": 26,
									"value": "4"
								},
								{
									"begin": 247,
									"end": 262,
									"name": "MSTORE",
									"source": 26
								},
								{
									"begin": 281,
									"end": 285,
									"name": "PUSH",
									"source": 26,
									"value": "24"
								},
								{
									"begin": 278,
									"end": 279,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 271,
									"end": 286,
									"name": "REVERT",
									"source": 26
								},
								{
									"begin": 298,
									"end": 478,
									"name": "tag",
									"source": 26,
									"value": "8"
								},
								{
									"begin": 298,
									"end": 478,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 346,
									"end": 423,
									"name": "PUSH",
									"source": 26,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 343,
									"end": 344,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 336,
									"end": 424,
									"name": "MSTORE",
									"source": 26
								},
								{
									"begin": 443,
									"end": 447,
									"name": "PUSH",
									"source": 26,
									"value": "22"
								},
								{
									"begin": 440,
									"end": 441,
									"name": "PUSH",
									"source": 26,
									"value": "4"
								},
								{
									"begin": 433,
									"end": 448,
									"name": "MSTORE",
									"source": 26
								},
								{
									"begin": 467,
									"end": 471,
									"name": "PUSH",
									"source": 26,
									"value": "24"
								},
								{
									"begin": 464,
									"end": 465,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 457,
									"end": 472,
									"name": "REVERT",
									"source": 26
								},
								{
									"begin": 484,
									"end": 804,
									"name": "tag",
									"source": 26,
									"value": "9"
								},
								{
									"begin": 484,
									"end": 804,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 528,
									"end": 534,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 565,
									"end": 566,
									"name": "PUSH",
									"source": 26,
									"value": "2"
								},
								{
									"begin": 559,
									"end": 563,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 555,
									"end": 567,
									"name": "DIV",
									"source": 26
								},
								{
									"begin": 545,
									"end": 567,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 545,
									"end": 567,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 612,
									"end": 613,
									"name": "PUSH",
									"source": 26,
									"value": "1"
								},
								{
									"begin": 606,
									"end": 610,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 602,
									"end": 614,
									"name": "AND",
									"source": 26
								},
								{
									"begin": 633,
									"end": 651,
									"name": "DUP1",
									"source": 26
								},
								{
									"begin": 623,
									"end": 704,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "31"
								},
								{
									"begin": 623,
									"end": 704,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 689,
									"end": 693,
									"name": "PUSH",
									"source": 26,
									"value": "7F"
								},
								{
									"begin": 681,
									"end": 687,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 677,
									"end": 694,
									"name": "AND",
									"source": 26
								},
								{
									"begin": 667,
									"end": 694,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 667,
									"end": 694,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 623,
									"end": 704,
									"name": "tag",
									"source": 26,
									"value": "31"
								},
								{
									"begin": 623,
									"end": 704,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 751,
									"end": 753,
									"name": "PUSH",
									"source": 26,
									"value": "20"
								},
								{
									"begin": 743,
									"end": 749,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 740,
									"end": 754,
									"name": "LT",
									"source": 26
								},
								{
									"begin": 720,
									"end": 738,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 717,
									"end": 755,
									"name": "SUB",
									"source": 26
								},
								{
									"begin": 714,
									"end": 798,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "32"
								},
								{
									"begin": 714,
									"end": 798,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 770,
									"end": 788,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "33"
								},
								{
									"begin": 770,
									"end": 788,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "8"
								},
								{
									"begin": 770,
									"end": 788,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 770,
									"end": 788,
									"name": "tag",
									"source": 26,
									"value": "33"
								},
								{
									"begin": 770,
									"end": 788,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 714,
									"end": 798,
									"name": "tag",
									"source": 26,
									"value": "32"
								},
								{
									"begin": 714,
									"end": 798,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 535,
									"end": 804,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 484,
									"end": 804,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 484,
									"end": 804,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 484,
									"end": 804,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 484,
									"end": 804,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 810,
									"end": 951,
									"name": "tag",
									"source": 26,
									"value": "10"
								},
								{
									"begin": 810,
									"end": 951,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 859,
									"end": 863,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 882,
									"end": 885,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 874,
									"end": 885,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 874,
									"end": 885,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 905,
									"end": 908,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 902,
									"end": 903,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 895,
									"end": 909,
									"name": "MSTORE",
									"source": 26
								},
								{
									"begin": 939,
									"end": 943,
									"name": "PUSH",
									"source": 26,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 937,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 926,
									"end": 944,
									"name": "KECCAK256",
									"source": 26
								},
								{
									"begin": 918,
									"end": 944,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 918,
									"end": 944,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 810,
									"end": 951,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 810,
									"end": 951,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 810,
									"end": 951,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 810,
									"end": 951,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "tag",
									"source": 26,
									"value": "11"
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 994,
									"end": 1000,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 1041,
									"end": 1043,
									"name": "PUSH",
									"source": 26,
									"value": "20"
								},
								{
									"begin": 1036,
									"end": 1038,
									"name": "PUSH",
									"source": 26,
									"value": "1F"
								},
								{
									"begin": 1029,
									"end": 1034,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 1025,
									"end": 1039,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 1021,
									"end": 1044,
									"name": "DIV",
									"source": 26
								},
								{
									"begin": 1011,
									"end": 1044,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1011,
									"end": 1044,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 957,
									"end": 1050,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "tag",
									"source": 26,
									"value": "12"
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1100,
									"end": 1108,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 1150,
									"end": 1155,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 1144,
									"end": 1148,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 1140,
									"end": 1156,
									"name": "SHL",
									"source": 26
								},
								{
									"begin": 1119,
									"end": 1156,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1119,
									"end": 1156,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "SWAP3",
									"source": 26
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1056,
									"end": 1163,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "tag",
									"source": 26,
									"value": "13"
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1238,
									"end": 1244,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 1288,
									"end": 1289,
									"name": "PUSH",
									"source": 26,
									"value": "8"
								},
								{
									"begin": 1276,
									"end": 1286,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 1272,
									"end": 1290,
									"name": "MUL",
									"source": 26
								},
								{
									"begin": 1311,
									"end": 1408,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "38"
								},
								{
									"begin": 1341,
									"end": 1407,
									"name": "PUSH",
									"source": 26,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1330,
									"end": 1339,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 1311,
									"end": 1408,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "12"
								},
								{
									"begin": 1311,
									"end": 1408,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1311,
									"end": 1408,
									"name": "tag",
									"source": 26,
									"value": "38"
								},
								{
									"begin": 1311,
									"end": 1408,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1429,
									"end": 1468,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "39"
								},
								{
									"begin": 1459,
									"end": 1467,
									"name": "DUP7",
									"source": 26
								},
								{
									"begin": 1448,
									"end": 1457,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 1429,
									"end": 1468,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "12"
								},
								{
									"begin": 1429,
									"end": 1468,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1429,
									"end": 1468,
									"name": "tag",
									"source": 26,
									"value": "39"
								},
								{
									"begin": 1429,
									"end": 1468,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1417,
									"end": 1468,
									"name": "SWAP6",
									"source": 26
								},
								{
									"begin": 1417,
									"end": 1468,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1501,
									"end": 1505,
									"name": "DUP1",
									"source": 26
								},
								{
									"begin": 1497,
									"end": 1506,
									"name": "NOT",
									"source": 26
								},
								{
									"begin": 1490,
									"end": 1495,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 1486,
									"end": 1507,
									"name": "AND",
									"source": 26
								},
								{
									"begin": 1477,
									"end": 1507,
									"name": "SWAP4",
									"source": 26
								},
								{
									"begin": 1477,
									"end": 1507,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1550,
									"end": 1554,
									"name": "DUP1",
									"source": 26
								},
								{
									"begin": 1540,
									"end": 1548,
									"name": "DUP7",
									"source": 26
								},
								{
									"begin": 1536,
									"end": 1555,
									"name": "AND",
									"source": 26
								},
								{
									"begin": 1529,
									"end": 1534,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 1526,
									"end": 1556,
									"name": "OR",
									"source": 26
								},
								{
									"begin": 1516,
									"end": 1556,
									"name": "SWAP3",
									"source": 26
								},
								{
									"begin": 1516,
									"end": 1556,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1245,
									"end": 1562,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1245,
									"end": 1562,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "SWAP4",
									"source": 26
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "SWAP3",
									"source": 26
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1169,
									"end": 1562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "tag",
									"source": 26,
									"value": "14"
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1605,
									"end": 1612,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 1634,
									"end": 1639,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 1623,
									"end": 1639,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1623,
									"end": 1639,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1568,
									"end": 1645,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "tag",
									"source": 26,
									"value": "15"
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1679,
									"end": 1682,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 1700,
									"end": 1705,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 1693,
									"end": 1705,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1693,
									"end": 1705,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1651,
									"end": 1711,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "tag",
									"source": 26,
									"value": "16"
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1767,
									"end": 1776,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 1800,
									"end": 1853,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "43"
								},
								{
									"begin": 1818,
									"end": 1852,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "44"
								},
								{
									"begin": 1827,
									"end": 1851,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "45"
								},
								{
									"begin": 1845,
									"end": 1850,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 1827,
									"end": 1851,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "14"
								},
								{
									"begin": 1827,
									"end": 1851,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1827,
									"end": 1851,
									"name": "tag",
									"source": 26,
									"value": "45"
								},
								{
									"begin": 1827,
									"end": 1851,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1818,
									"end": 1852,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "15"
								},
								{
									"begin": 1818,
									"end": 1852,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1818,
									"end": 1852,
									"name": "tag",
									"source": 26,
									"value": "44"
								},
								{
									"begin": 1818,
									"end": 1852,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1800,
									"end": 1853,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "14"
								},
								{
									"begin": 1800,
									"end": 1853,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1800,
									"end": 1853,
									"name": "tag",
									"source": 26,
									"value": "43"
								},
								{
									"begin": 1800,
									"end": 1853,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1787,
									"end": 1853,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1787,
									"end": 1853,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1717,
									"end": 1859,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "tag",
									"source": 26,
									"value": "17"
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 1908,
									"end": 1911,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 1929,
									"end": 1934,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 1922,
									"end": 1934,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1922,
									"end": 1934,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1865,
									"end": 1940,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "tag",
									"source": 26,
									"value": "18"
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2056,
									"end": 2095,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "48"
								},
								{
									"begin": 2087,
									"end": 2094,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 2056,
									"end": 2095,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "16"
								},
								{
									"begin": 2056,
									"end": 2095,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2056,
									"end": 2095,
									"name": "tag",
									"source": 26,
									"value": "48"
								},
								{
									"begin": 2056,
									"end": 2095,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2117,
									"end": 2208,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "49"
								},
								{
									"begin": 2166,
									"end": 2207,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "50"
								},
								{
									"begin": 2190,
									"end": 2206,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 2166,
									"end": 2207,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "17"
								},
								{
									"begin": 2166,
									"end": 2207,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2166,
									"end": 2207,
									"name": "tag",
									"source": 26,
									"value": "50"
								},
								{
									"begin": 2166,
									"end": 2207,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2158,
									"end": 2164,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 2151,
									"end": 2155,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 2145,
									"end": 2156,
									"name": "SLOAD",
									"source": 26
								},
								{
									"begin": 2117,
									"end": 2208,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "13"
								},
								{
									"begin": 2117,
									"end": 2208,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2117,
									"end": 2208,
									"name": "tag",
									"source": 26,
									"value": "49"
								},
								{
									"begin": 2117,
									"end": 2208,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2111,
									"end": 2115,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 2104,
									"end": 2209,
									"name": "SSTORE",
									"source": 26
								},
								{
									"begin": 2022,
									"end": 2215,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 1946,
									"end": 2215,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2221,
									"end": 2294,
									"name": "tag",
									"source": 26,
									"value": "19"
								},
								{
									"begin": 2221,
									"end": 2294,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2266,
									"end": 2269,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 2221,
									"end": 2294,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 2221,
									"end": 2294,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2300,
									"end": 2489,
									"name": "tag",
									"source": 26,
									"value": "20"
								},
								{
									"begin": 2300,
									"end": 2489,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2377,
									"end": 2409,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "53"
								},
								{
									"begin": 2377,
									"end": 2409,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "19"
								},
								{
									"begin": 2377,
									"end": 2409,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2377,
									"end": 2409,
									"name": "tag",
									"source": 26,
									"value": "53"
								},
								{
									"begin": 2377,
									"end": 2409,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2418,
									"end": 2483,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "54"
								},
								{
									"begin": 2476,
									"end": 2482,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 2468,
									"end": 2474,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 2462,
									"end": 2466,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 2418,
									"end": 2483,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "18"
								},
								{
									"begin": 2418,
									"end": 2483,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2418,
									"end": 2483,
									"name": "tag",
									"source": 26,
									"value": "54"
								},
								{
									"begin": 2418,
									"end": 2483,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2353,
									"end": 2489,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2300,
									"end": 2489,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2300,
									"end": 2489,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2300,
									"end": 2489,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2495,
									"end": 2681,
									"name": "tag",
									"source": 26,
									"value": "21"
								},
								{
									"begin": 2495,
									"end": 2681,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "tag",
									"source": 26,
									"value": "56"
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2572,
									"end": 2575,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 2565,
									"end": 2570,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 2562,
									"end": 2576,
									"name": "LT",
									"source": 26
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "ISZERO",
									"source": 26
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "58"
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 2626,
									"end": 2665,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "59"
								},
								{
									"begin": 2663,
									"end": 2664,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 2656,
									"end": 2661,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 2626,
									"end": 2665,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "20"
								},
								{
									"begin": 2626,
									"end": 2665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2626,
									"end": 2665,
									"name": "tag",
									"source": 26,
									"value": "59"
								},
								{
									"begin": 2626,
									"end": 2665,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2599,
									"end": 2600,
									"name": "PUSH",
									"source": 26,
									"value": "1"
								},
								{
									"begin": 2592,
									"end": 2597,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 2588,
									"end": 2601,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 2579,
									"end": 2601,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 2579,
									"end": 2601,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "56"
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "tag",
									"source": 26,
									"value": "58"
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2495,
									"end": 2681,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2495,
									"end": 2681,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2495,
									"end": 2681,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "tag",
									"source": 26,
									"value": "22"
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2788,
									"end": 2790,
									"name": "PUSH",
									"source": 26,
									"value": "1F"
								},
								{
									"begin": 2783,
									"end": 2786,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 2780,
									"end": 2791,
									"name": "GT",
									"source": 26
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "ISZERO",
									"source": 26
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "61"
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 2822,
									"end": 2860,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "62"
								},
								{
									"begin": 2854,
									"end": 2859,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 2822,
									"end": 2860,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "10"
								},
								{
									"begin": 2822,
									"end": 2860,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2822,
									"end": 2860,
									"name": "tag",
									"source": 26,
									"value": "62"
								},
								{
									"begin": 2822,
									"end": 2860,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2906,
									"end": 2935,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "63"
								},
								{
									"begin": 2924,
									"end": 2934,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 2906,
									"end": 2935,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "11"
								},
								{
									"begin": 2906,
									"end": 2935,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 2906,
									"end": 2935,
									"name": "tag",
									"source": 26,
									"value": "63"
								},
								{
									"begin": 2906,
									"end": 2935,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2896,
									"end": 2904,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 2892,
									"end": 2936,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 3089,
									"end": 3091,
									"name": "PUSH",
									"source": 26,
									"value": "20"
								},
								{
									"begin": 3077,
									"end": 3087,
									"name": "DUP6",
									"source": 26
								},
								{
									"begin": 3074,
									"end": 3092,
									"name": "LT",
									"source": 26
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "ISZERO",
									"source": 26
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "64"
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 3110,
									"end": 3118,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 3095,
									"end": 3118,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 3095,
									"end": 3118,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "tag",
									"source": 26,
									"value": "64"
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 3133,
									"end": 3213,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "65"
								},
								{
									"begin": 3189,
									"end": 3211,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "66"
								},
								{
									"begin": 3207,
									"end": 3210,
									"name": "DUP6",
									"source": 26
								},
								{
									"begin": 3189,
									"end": 3211,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "11"
								},
								{
									"begin": 3189,
									"end": 3211,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 3189,
									"end": 3211,
									"name": "tag",
									"source": 26,
									"value": "66"
								},
								{
									"begin": 3189,
									"end": 3211,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 3179,
									"end": 3187,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 3175,
									"end": 3212,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 3162,
									"end": 3173,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 3133,
									"end": 3213,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "21"
								},
								{
									"begin": 3133,
									"end": 3213,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 3133,
									"end": 3213,
									"name": "tag",
									"source": 26,
									"value": "65"
								},
								{
									"begin": 3133,
									"end": 3213,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2792,
									"end": 3223,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2792,
									"end": 3223,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "tag",
									"source": 26,
									"value": "61"
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 2687,
									"end": 3230,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "tag",
									"source": 26,
									"value": "23"
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 3290,
									"end": 3298,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 3340,
									"end": 3345,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 3334,
									"end": 3338,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 3330,
									"end": 3346,
									"name": "SHR",
									"source": 26
								},
								{
									"begin": 3309,
									"end": 3346,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 3309,
									"end": 3346,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "SWAP3",
									"source": 26
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3236,
									"end": 3353,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "tag",
									"source": 26,
									"value": "24"
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 3403,
									"end": 3409,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 3436,
									"end": 3487,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "69"
								},
								{
									"begin": 3484,
									"end": 3485,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 3480,
									"end": 3486,
									"name": "NOT",
									"source": 26
								},
								{
									"begin": 3472,
									"end": 3477,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 3469,
									"end": 3470,
									"name": "PUSH",
									"source": 26,
									"value": "8"
								},
								{
									"begin": 3465,
									"end": 3478,
									"name": "MUL",
									"source": 26
								},
								{
									"begin": 3436,
									"end": 3487,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "23"
								},
								{
									"begin": 3436,
									"end": 3487,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 3436,
									"end": 3487,
									"name": "tag",
									"source": 26,
									"value": "69"
								},
								{
									"begin": 3436,
									"end": 3487,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 3432,
									"end": 3488,
									"name": "NOT",
									"source": 26
								},
								{
									"begin": 3517,
									"end": 3521,
									"name": "DUP1",
									"source": 26
								},
								{
									"begin": 3511,
									"end": 3515,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 3507,
									"end": 3522,
									"name": "AND",
									"source": 26
								},
								{
									"begin": 3497,
									"end": 3522,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 3497,
									"end": 3522,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3410,
									"end": 3528,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "SWAP3",
									"source": 26
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3359,
									"end": 3528,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "tag",
									"source": 26,
									"value": "25"
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 3609,
									"end": 3613,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 3755,
									"end": 3784,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "71"
								},
								{
									"begin": 3780,
									"end": 3783,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 3774,
									"end": 3778,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 3755,
									"end": 3784,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "24"
								},
								{
									"begin": 3755,
									"end": 3784,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 3755,
									"end": 3784,
									"name": "tag",
									"source": 26,
									"value": "71"
								},
								{
									"begin": 3755,
									"end": 3784,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 3747,
									"end": 3784,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 3747,
									"end": 3784,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3817,
									"end": 3820,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 3814,
									"end": 3815,
									"name": "PUSH",
									"source": 26,
									"value": "2"
								},
								{
									"begin": 3810,
									"end": 3821,
									"name": "MUL",
									"source": 26
								},
								{
									"begin": 3804,
									"end": 3808,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 3801,
									"end": 3822,
									"name": "OR",
									"source": 26
								},
								{
									"begin": 3793,
									"end": 3822,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 3793,
									"end": 3822,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "SWAP3",
									"source": 26
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3533,
									"end": 3828,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 3833,
									"end": 5228,
									"name": "tag",
									"source": 26,
									"value": "2"
								},
								{
									"begin": 3833,
									"end": 5228,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 3950,
									"end": 3987,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "73"
								},
								{
									"begin": 3983,
									"end": 3986,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 3950,
									"end": 3987,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "6"
								},
								{
									"begin": 3950,
									"end": 3987,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 3950,
									"end": 3987,
									"name": "tag",
									"source": 26,
									"value": "73"
								},
								{
									"begin": 3950,
									"end": 3987,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4052,
									"end": 4070,
									"name": "PUSH",
									"source": 26,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4044,
									"end": 4050,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 4041,
									"end": 4071,
									"name": "GT",
									"source": 26
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "ISZERO",
									"source": 26
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "74"
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 4074,
									"end": 4092,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "75"
								},
								{
									"begin": 4074,
									"end": 4092,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "7"
								},
								{
									"begin": 4074,
									"end": 4092,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 4074,
									"end": 4092,
									"name": "tag",
									"source": 26,
									"value": "75"
								},
								{
									"begin": 4074,
									"end": 4092,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "tag",
									"source": 26,
									"value": "74"
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4118,
									"end": 4156,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "76"
								},
								{
									"begin": 4150,
									"end": 4154,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 4144,
									"end": 4155,
									"name": "SLOAD",
									"source": 26
								},
								{
									"begin": 4118,
									"end": 4156,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "9"
								},
								{
									"begin": 4118,
									"end": 4156,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 4118,
									"end": 4156,
									"name": "tag",
									"source": 26,
									"value": "76"
								},
								{
									"begin": 4118,
									"end": 4156,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4203,
									"end": 4270,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "77"
								},
								{
									"begin": 4263,
									"end": 4269,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 4255,
									"end": 4261,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 4249,
									"end": 4253,
									"name": "DUP6",
									"source": 26
								},
								{
									"begin": 4203,
									"end": 4270,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "22"
								},
								{
									"begin": 4203,
									"end": 4270,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 4203,
									"end": 4270,
									"name": "tag",
									"source": 26,
									"value": "77"
								},
								{
									"begin": 4203,
									"end": 4270,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4297,
									"end": 4298,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 4321,
									"end": 4325,
									"name": "PUSH",
									"source": 26,
									"value": "20"
								},
								{
									"begin": 4308,
									"end": 4325,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 4308,
									"end": 4325,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 4353,
									"end": 4355,
									"name": "PUSH",
									"source": 26,
									"value": "1F"
								},
								{
									"begin": 4345,
									"end": 4351,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 4342,
									"end": 4356,
									"name": "GT",
									"source": 26
								},
								{
									"begin": 4370,
									"end": 4371,
									"name": "PUSH",
									"source": 26,
									"value": "1"
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "EQ",
									"source": 26
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "79"
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 5027,
									"end": 5028,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 5044,
									"end": 5050,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "ISZERO",
									"source": 26
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "80"
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 5093,
									"end": 5102,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 5088,
									"end": 5091,
									"name": "DUP8",
									"source": 26
								},
								{
									"begin": 5084,
									"end": 5103,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 5078,
									"end": 5104,
									"name": "MLOAD",
									"source": 26
								},
								{
									"begin": 5069,
									"end": 5104,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 5069,
									"end": 5104,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "tag",
									"source": 26,
									"value": "80"
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 5144,
									"end": 5211,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "81"
								},
								{
									"begin": 5204,
									"end": 5210,
									"name": "DUP6",
									"source": 26
								},
								{
									"begin": 5197,
									"end": 5202,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 5144,
									"end": 5211,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "25"
								},
								{
									"begin": 5144,
									"end": 5211,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 5144,
									"end": 5211,
									"name": "tag",
									"source": 26,
									"value": "81"
								},
								{
									"begin": 5144,
									"end": 5211,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 5138,
									"end": 5142,
									"name": "DUP7",
									"source": 26
								},
								{
									"begin": 5131,
									"end": 5212,
									"name": "SSTORE",
									"source": 26
								},
								{
									"begin": 5000,
									"end": 5222,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "78"
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "tag",
									"source": 26,
									"value": "79"
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4417,
									"end": 4421,
									"name": "PUSH",
									"source": 26,
									"value": "1F"
								},
								{
									"begin": 4413,
									"end": 4422,
									"name": "NOT",
									"source": 26
								},
								{
									"begin": 4405,
									"end": 4411,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 4401,
									"end": 4423,
									"name": "AND",
									"source": 26
								},
								{
									"begin": 4451,
									"end": 4488,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "82"
								},
								{
									"begin": 4483,
									"end": 4487,
									"name": "DUP7",
									"source": 26
								},
								{
									"begin": 4451,
									"end": 4488,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "10"
								},
								{
									"begin": 4451,
									"end": 4488,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 4451,
									"end": 4488,
									"name": "tag",
									"source": 26,
									"value": "82"
								},
								{
									"begin": 4451,
									"end": 4488,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4510,
									"end": 4511,
									"name": "PUSH",
									"source": 26,
									"value": "0"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "tag",
									"source": 26,
									"value": "83"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4538,
									"end": 4545,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 4535,
									"end": 4536,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 4532,
									"end": 4546,
									"name": "LT",
									"source": 26
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "ISZERO",
									"source": 26
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "85"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 4617,
									"end": 4626,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 4612,
									"end": 4615,
									"name": "DUP10",
									"source": 26
								},
								{
									"begin": 4608,
									"end": 4627,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 4602,
									"end": 4628,
									"name": "MLOAD",
									"source": 26
								},
								{
									"begin": 4594,
									"end": 4600,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 4587,
									"end": 4629,
									"name": "SSTORE",
									"source": 26
								},
								{
									"begin": 4668,
									"end": 4669,
									"name": "PUSH",
									"source": 26,
									"value": "1"
								},
								{
									"begin": 4660,
									"end": 4666,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 4656,
									"end": 4670,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 4646,
									"end": 4670,
									"name": "SWAP2",
									"source": 26
								},
								{
									"begin": 4646,
									"end": 4670,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 4715,
									"end": 4717,
									"name": "PUSH",
									"source": 26,
									"value": "20"
								},
								{
									"begin": 4704,
									"end": 4713,
									"name": "DUP6",
									"source": 26
								},
								{
									"begin": 4700,
									"end": 4718,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 4687,
									"end": 4718,
									"name": "SWAP5",
									"source": 26
								},
								{
									"begin": 4687,
									"end": 4718,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 4561,
									"end": 4565,
									"name": "PUSH",
									"source": 26,
									"value": "20"
								},
								{
									"begin": 4558,
									"end": 4559,
									"name": "DUP2",
									"source": 26
								},
								{
									"begin": 4554,
									"end": 4566,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 4549,
									"end": 4566,
									"name": "SWAP1",
									"source": 26
								},
								{
									"begin": 4549,
									"end": 4566,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "83"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "tag",
									"source": 26,
									"value": "85"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4760,
									"end": 4766,
									"name": "DUP7",
									"source": 26
								},
								{
									"begin": 4751,
									"end": 4758,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 4748,
									"end": 4767,
									"name": "LT",
									"source": 26
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "ISZERO",
									"source": 26
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "86"
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "JUMPI",
									"source": 26
								},
								{
									"begin": 4818,
									"end": 4827,
									"name": "DUP5",
									"source": 26
								},
								{
									"begin": 4813,
									"end": 4816,
									"name": "DUP10",
									"source": 26
								},
								{
									"begin": 4809,
									"end": 4828,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 4803,
									"end": 4829,
									"name": "MLOAD",
									"source": 26
								},
								{
									"begin": 4861,
									"end": 4909,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "87"
								},
								{
									"begin": 4903,
									"end": 4907,
									"name": "PUSH",
									"source": 26,
									"value": "1F"
								},
								{
									"begin": 4895,
									"end": 4901,
									"name": "DUP10",
									"source": 26
								},
								{
									"begin": 4891,
									"end": 4908,
									"name": "AND",
									"source": 26
								},
								{
									"begin": 4880,
									"end": 4889,
									"name": "DUP3",
									"source": 26
								},
								{
									"begin": 4861,
									"end": 4909,
									"name": "PUSH [tag]",
									"source": 26,
									"value": "24"
								},
								{
									"begin": 4861,
									"end": 4909,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 4861,
									"end": 4909,
									"name": "tag",
									"source": 26,
									"value": "87"
								},
								{
									"begin": 4861,
									"end": 4909,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4853,
									"end": 4859,
									"name": "DUP4",
									"source": 26
								},
								{
									"begin": 4846,
									"end": 4910,
									"name": "SSTORE",
									"source": 26
								},
								{
									"begin": 4768,
									"end": 4924,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "tag",
									"source": 26,
									"value": "86"
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4970,
									"end": 4971,
									"name": "PUSH",
									"source": 26,
									"value": "1"
								},
								{
									"begin": 4966,
									"end": 4967,
									"name": "PUSH",
									"source": 26,
									"value": "2"
								},
								{
									"begin": 4958,
									"end": 4964,
									"name": "DUP9",
									"source": 26
								},
								{
									"begin": 4954,
									"end": 4968,
									"name": "MUL",
									"source": 26
								},
								{
									"begin": 4950,
									"end": 4972,
									"name": "ADD",
									"source": 26
								},
								{
									"begin": 4944,
									"end": 4948,
									"name": "DUP9",
									"source": 26
								},
								{
									"begin": 4937,
									"end": 4973,
									"name": "SSTORE",
									"source": 26
								},
								{
									"begin": 4372,
									"end": 4983,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 4372,
									"end": 4983,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 4372,
									"end": 4983,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "tag",
									"source": 26,
									"value": "78"
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "JUMPDEST",
									"source": 26
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3925,
									"end": 5228,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3925,
									"end": 5228,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3925,
									"end": 5228,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3833,
									"end": 5228,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3833,
									"end": 5228,
									"name": "POP",
									"source": 26
								},
								{
									"begin": 3833,
									"end": 5228,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 26
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "tag",
									"source": 25,
									"value": "5"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "JUMPDEST",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "PUSH #[$]",
									"source": 25,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "DUP1",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "PUSH [$]",
									"source": 25,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "CODECOPY",
									"source": 25
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "PUSH",
									"source": 25,
									"value": "0"
								},
								{
									"begin": 967,
									"end": 3712,
									"name": "RETURN",
									"source": 25
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220755bd76f71864a46cdeafd7baf667002cbc61fcb6020c7c5e8569af5ee8434d564736f6c63430008120033",
									".code": [
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH",
											"source": 25,
											"value": "80"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "CALLVALUE",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "1"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "REVERT",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "tag",
											"source": 25,
											"value": "1"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH",
											"source": 25,
											"value": "4"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "CALLDATASIZE",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "2"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "CALLDATALOAD",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH",
											"source": 25,
											"value": "E0"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "SHR",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH",
											"source": 25,
											"value": "FDD58E"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "EQ",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "3"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH",
											"source": 25,
											"value": "BB79F587"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "EQ",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "4"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "tag",
											"source": 25,
											"value": "2"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 967,
											"end": 3712,
											"name": "REVERT",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "tag",
											"source": 25,
											"value": "3"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "5"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "PUSH",
											"source": 25,
											"value": "4"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "CALLDATASIZE",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "6"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "7"
										},
										{
											"begin": 2364,
											"end": 2694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "tag",
											"source": 25,
											"value": "6"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "8"
										},
										{
											"begin": 2364,
											"end": 2694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "tag",
											"source": 25,
											"value": "5"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "9"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "10"
										},
										{
											"begin": 2364,
											"end": 2694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "tag",
											"source": 25,
											"value": "9"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "RETURN",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "tag",
											"source": 25,
											"value": "4"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "11"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "PUSH",
											"source": 25,
											"value": "4"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "CALLDATASIZE",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "12"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "13"
										},
										{
											"begin": 1405,
											"end": 2358,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "tag",
											"source": 25,
											"value": "12"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "14"
										},
										{
											"begin": 1405,
											"end": 2358,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "tag",
											"source": 25,
											"value": "11"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "15"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "16"
										},
										{
											"begin": 1405,
											"end": 2358,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "tag",
											"source": 25,
											"value": "15"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "RETURN",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "tag",
											"source": 25,
											"value": "8"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2435,
											"end": 2442,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2454,
											"end": 2466,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "PUSH",
											"source": 25,
											"value": "3"
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "PUSH",
											"source": 25,
											"value": "100"
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "EXP",
											"source": 25
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "DIV",
											"source": 25
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2479,
											"end": 2491,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2500,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2469,
											"end": 2500,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2500,
											"name": "PUSH",
											"source": 25,
											"value": "192DF655"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "PUSH",
											"source": 25,
											"value": "2"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "PUSH",
											"source": 25,
											"value": "100"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "EXP",
											"source": 25
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "DIV",
											"source": 25
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2518,
											"end": 2521,
											"name": "DUP6",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "E0"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "SHL",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "4"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "18"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "SWAP3",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "19"
										},
										{
											"begin": 2469,
											"end": 2522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "tag",
											"source": 25,
											"value": "18"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP7",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "GAS",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "STATICCALL",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "21"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "RETURNDATASIZE",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "RETURNDATACOPY",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "RETURNDATASIZE",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "REVERT",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "tag",
											"source": 25,
											"value": "21"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "RETURNDATASIZE",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "NOT",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "22"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "23"
										},
										{
											"begin": 2469,
											"end": 2522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "tag",
											"source": 25,
											"value": "22"
										},
										{
											"begin": 2469,
											"end": 2522,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2454,
											"end": 2522,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2454,
											"end": 2522,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "24"
										},
										{
											"begin": 2549,
											"end": 2555,
											"name": "DUP5",
											"source": 25
										},
										{
											"begin": 2557,
											"end": 2561,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2563,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "25"
										},
										{
											"begin": 2580,
											"end": 2583,
											"name": "DUP7",
											"source": 25
										},
										{
											"begin": 2563,
											"end": 2579,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "26"
										},
										{
											"begin": 2563,
											"end": 2584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2563,
											"end": 2584,
											"name": "tag",
											"source": 25,
											"value": "25"
										},
										{
											"begin": 2563,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2586,
											"end": 2598,
											"name": "PUSH",
											"source": 25,
											"value": "4"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "27"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "28"
										},
										{
											"begin": 2536,
											"end": 2614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "27"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DIV",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MUL",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "29"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "28"
										},
										{
											"begin": 2536,
											"end": 2614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "29"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "30"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "31"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "100"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DIV",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MUL",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "30"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "31"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "KECCAK256",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "32"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "1"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "GT",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "32"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "30"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2600,
											"end": 2613,
											"name": "PUSH",
											"source": 25,
											"value": "5"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "33"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "28"
										},
										{
											"begin": 2536,
											"end": 2614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "33"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DIV",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MUL",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "34"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "28"
										},
										{
											"begin": 2536,
											"end": 2614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "34"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "35"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "36"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "100"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DIV",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MUL",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "35"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "36"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "KECCAK256",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "37"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "1"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "GT",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "37"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "35"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "14"
										},
										{
											"begin": 2536,
											"end": 2614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "tag",
											"source": 25,
											"value": "24"
										},
										{
											"begin": 2536,
											"end": 2614,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2532,
											"end": 2688,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2532,
											"end": 2688,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "38"
										},
										{
											"begin": 2532,
											"end": 2688,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2637,
											"end": 2638,
											"name": "PUSH",
											"source": 25,
											"value": "1"
										},
										{
											"begin": 2630,
											"end": 2638,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2630,
											"end": 2638,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2630,
											"end": 2638,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2630,
											"end": 2638,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "17"
										},
										{
											"begin": 2630,
											"end": 2638,
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2532,
											"end": 2688,
											"name": "tag",
											"source": 25,
											"value": "38"
										},
										{
											"begin": 2532,
											"end": 2688,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2676,
											"end": 2677,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2669,
											"end": 2677,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2669,
											"end": 2677,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2669,
											"end": 2677,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "tag",
											"source": 25,
											"value": "17"
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SWAP3",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2364,
											"end": 2694,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "tag",
											"source": 25,
											"value": "14"
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1608,
											"end": 1623,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 1664,
											"end": 1680,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "PUSH",
											"source": 25,
											"value": "2"
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "PUSH",
											"source": 25,
											"value": "100"
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "EXP",
											"source": 25
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "DIV",
											"source": 25
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1691,
											"end": 1706,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 1664,
											"end": 1707,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1664,
											"end": 1707,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1717,
											"end": 1746,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "PUSH",
											"source": 25,
											"value": "100"
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "EXP",
											"source": 25
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "DIV",
											"source": 25
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1787,
											"end": 1798,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 1717,
											"end": 1808,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1717,
											"end": 1808,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1819,
											"end": 1836,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 1838,
											"end": 1852,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1864,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1872,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1860,
											"end": 1872,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1872,
											"name": "PUSH",
											"source": 25,
											"value": "E6A1E888"
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "PUSH",
											"source": 25,
											"value": "1"
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "SLOAD",
											"source": 25
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "PUSH",
											"source": 25,
											"value": "100"
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "EXP",
											"source": 25
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "DIV",
											"source": 25
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 1936,
											"end": 1942,
											"name": "DUP13",
											"source": 25
										},
										{
											"begin": 1956,
											"end": 1964,
											"name": "DUP13",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP5",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "E0"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "SHL",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "4"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "41"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "SWAP4",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "SWAP3",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "42"
										},
										{
											"begin": 1860,
											"end": 1974,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "tag",
											"source": 25,
											"value": "41"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "80"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP7",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "GAS",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "STATICCALL",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "44"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "RETURNDATASIZE",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "RETURNDATACOPY",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "RETURNDATASIZE",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "REVERT",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "tag",
											"source": 25,
											"value": "44"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "RETURNDATASIZE",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "NOT",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "45"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "46"
										},
										{
											"begin": 1860,
											"end": 1974,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "tag",
											"source": 25,
											"value": "45"
										},
										{
											"begin": 1860,
											"end": 1974,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1818,
											"end": 1974,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1818,
											"end": 1974,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1818,
											"end": 1974,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 1818,
											"end": 1974,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1818,
											"end": 1974,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 1818,
											"end": 1974,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1984,
											"end": 1998,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2001,
											"end": 2009,
											"name": "DUP5",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2017,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2001,
											"end": 2017,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2017,
											"name": "PUSH",
											"source": 25,
											"value": "6352211E"
										},
										{
											"begin": 2023,
											"end": 2042,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "47"
										},
										{
											"begin": 2032,
											"end": 2041,
											"name": "DUP12",
											"source": 25
										},
										{
											"begin": 2023,
											"end": 2031,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "48"
										},
										{
											"begin": 2023,
											"end": 2042,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2023,
											"end": 2042,
											"name": "tag",
											"source": 25,
											"value": "47"
										},
										{
											"begin": 2023,
											"end": 2042,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "E0"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "SHL",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "4"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "49"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "10"
										},
										{
											"begin": 2001,
											"end": 2044,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "tag",
											"source": 25,
											"value": "49"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP7",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "GAS",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "STATICCALL",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "51"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "RETURNDATASIZE",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "RETURNDATACOPY",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "RETURNDATASIZE",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "REVERT",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "tag",
											"source": 25,
											"value": "51"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "RETURNDATASIZE",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "NOT",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "1F"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH",
											"source": 25,
											"value": "40"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "MSTORE",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "52"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "23"
										},
										{
											"begin": 2001,
											"end": 2044,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "tag",
											"source": 25,
											"value": "52"
										},
										{
											"begin": 2001,
											"end": 2044,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1984,
											"end": 2044,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 1984,
											"end": 2044,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2055,
											"end": 2071,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2078,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "53"
										},
										{
											"begin": 2087,
											"end": 2098,
											"name": "DUP10",
											"source": 25
										},
										{
											"begin": 2078,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "48"
										},
										{
											"begin": 2078,
											"end": 2099,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2078,
											"end": 2099,
											"name": "tag",
											"source": 25,
											"value": "53"
										},
										{
											"begin": 2078,
											"end": 2099,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2055,
											"end": 2100,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2055,
											"end": 2100,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2110,
											"end": 2128,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2131,
											"end": 2153,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "54"
										},
										{
											"begin": 2140,
											"end": 2152,
											"name": "DUP10",
											"source": 25
										},
										{
											"begin": 2131,
											"end": 2139,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "48"
										},
										{
											"begin": 2131,
											"end": 2153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2131,
											"end": 2153,
											"name": "tag",
											"source": 25,
											"value": "54"
										},
										{
											"begin": 2131,
											"end": 2153,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2110,
											"end": 2153,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2110,
											"end": 2153,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2194,
											"end": 2203,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2182,
											"end": 2190,
											"name": "DUP5",
											"source": 25
										},
										{
											"begin": 2182,
											"end": 2203,
											"name": "PUSH",
											"source": 25,
											"value": "B"
										},
										{
											"begin": 2182,
											"end": 2203,
											"name": "SIGNEXTEND",
											"source": 25
										},
										{
											"begin": 2182,
											"end": 2203,
											"name": "SLT",
											"source": 25
										},
										{
											"begin": 2182,
											"end": 2203,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2182,
											"end": 2266,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2182,
											"end": 2266,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2182,
											"end": 2266,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "55"
										},
										{
											"begin": 2182,
											"end": 2266,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2182,
											"end": 2266,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2238,
											"end": 2239,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2224,
											"end": 2234,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 2224,
											"end": 2239,
											"name": "EQ",
											"source": 25
										},
										{
											"begin": 2224,
											"end": 2265,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2224,
											"end": 2265,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "56"
										},
										{
											"begin": 2224,
											"end": 2265,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2224,
											"end": 2265,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2255,
											"end": 2265,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2243,
											"end": 2252,
											"name": "DUP6",
											"source": 25
										},
										{
											"begin": 2243,
											"end": 2265,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 2224,
											"end": 2265,
											"name": "tag",
											"source": 25,
											"value": "56"
										},
										{
											"begin": 2224,
											"end": 2265,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2182,
											"end": 2266,
											"name": "tag",
											"source": 25,
											"value": "55"
										},
										{
											"begin": 2182,
											"end": 2266,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2181,
											"end": 2299,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2181,
											"end": 2299,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "57"
										},
										{
											"begin": 2181,
											"end": 2299,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2181,
											"end": 2299,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2293,
											"end": 2299,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2283,
											"end": 2299,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2283,
											"end": 2299,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2283,
											"end": 2289,
											"name": "DUP14",
											"source": 25
										},
										{
											"begin": 2283,
											"end": 2299,
											"name": "PUSH",
											"source": 25,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2283,
											"end": 2299,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 2283,
											"end": 2299,
											"name": "EQ",
											"source": 25
										},
										{
											"begin": 2181,
											"end": 2299,
											"name": "tag",
											"source": 25,
											"value": "57"
										},
										{
											"begin": 2181,
											"end": 2299,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2164,
											"end": 2352,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 2164,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "58"
										},
										{
											"begin": 2164,
											"end": 2352,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 2337,
											"end": 2341,
											"name": "PUSH",
											"source": 25,
											"value": "1"
										},
										{
											"begin": 2324,
											"end": 2341,
											"name": "SWAP8",
											"source": 25
										},
										{
											"begin": 2324,
											"end": 2341,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2164,
											"end": 2352,
											"name": "tag",
											"source": 25,
											"value": "58"
										},
										{
											"begin": 2164,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 1625,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1625,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1625,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1625,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1625,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1625,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1625,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SWAP6",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "SWAP5",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 1405,
											"end": 2358,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "tag",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 503,
											"end": 516,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 552,
											"end": 566,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 589,
											"end": 590,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 569,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 580,
											"end": 585,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 569,
											"end": 579,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 569,
											"end": 586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 569,
											"end": 586,
											"name": "tag",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 569,
											"end": 586,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 569,
											"end": 590,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 552,
											"end": 590,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 552,
											"end": 590,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 604,
											"end": 624,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 638,
											"end": 644,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 627,
											"end": 645,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "tag",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "tag",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "CALLDATACOPY",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "tag",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 627,
											"end": 645,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 627,
											"end": 645,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 604,
											"end": 645,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 604,
											"end": 645,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 659,
											"end": 670,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 785,
											"end": 791,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 781,
											"end": 783,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 777,
											"end": 792,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 769,
											"end": 775,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 765,
											"end": 793,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 758,
											"end": 793,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 758,
											"end": 793,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "tag",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 827,
											"end": 831,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 851,
											"end": 856,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 851,
											"end": 856,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 851,
											"end": 856,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 851,
											"end": 856,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 851,
											"end": 856,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 851,
											"end": 856,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 851,
											"end": 856,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 851,
											"end": 856,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 990,
											"end": 998,
											"name": "PUSH",
											"source": 4,
											"value": "3031323334353637383961626364656600000000000000000000000000000000"
										},
										{
											"begin": 985,
											"end": 987,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 978,
											"end": 983,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 974,
											"end": 988,
											"name": "MOD",
											"source": 4
										},
										{
											"begin": 969,
											"end": 999,
											"name": "BYTE",
											"source": 4
										},
										{
											"begin": 964,
											"end": 967,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 956,
											"end": 1000,
											"name": "MSTORE8",
											"source": 4
										},
										{
											"begin": 1044,
											"end": 1046,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "70"
										},
										{
											"begin": 1035,
											"end": 1046,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "tag",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "tag",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 1035,
											"end": 1046,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1077,
											"end": 1078,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1068,
											"end": 1073,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1068,
											"end": 1078,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 1064,
											"end": 1085,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "tag",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 820,
											"end": 1100,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1120,
											"end": 1126,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1113,
											"end": 1126,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 1113,
											"end": 1126,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1113,
											"end": 1126,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1113,
											"end": 1126,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1113,
											"end": 1126,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 447,
											"end": 1143,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 447,
											"end": 1143,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2700,
											"end": 2832,
											"name": "tag",
											"source": 25,
											"value": "48"
										},
										{
											"begin": 2700,
											"end": 2832,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2773,
											"end": 2791,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2810,
											"end": 2825,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "73"
										},
										{
											"begin": 2819,
											"end": 2821,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 2823,
											"end": 2824,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2810,
											"end": 2818,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "74"
										},
										{
											"begin": 2810,
											"end": 2825,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 2810,
											"end": 2825,
											"name": "tag",
											"source": 25,
											"value": "73"
										},
										{
											"begin": 2810,
											"end": 2825,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2803,
											"end": 2825,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2803,
											"end": 2825,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2700,
											"end": 2832,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2700,
											"end": 2832,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2700,
											"end": 2832,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2700,
											"end": 2832,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10192,
											"end": 10199,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10211,
											"end": 10225,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10228,
											"end": 10229,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10211,
											"end": 10229,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10211,
											"end": 10229,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10276,
											"end": 10284,
											"name": "PUSH",
											"source": 6,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 10267,
											"end": 10272,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10267,
											"end": 10284,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "76"
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10313,
											"end": 10321,
											"name": "PUSH",
											"source": 6,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000"
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 10304,
											"end": 10321,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "tag",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10304,
											"end": 10321,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10349,
											"end": 10351,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10339,
											"end": 10351,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10339,
											"end": 10351,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10339,
											"end": 10351,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10339,
											"end": 10351,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "tag",
											"source": 6,
											"value": "76"
										},
										{
											"begin": 10263,
											"end": 10366,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10392,
											"end": 10400,
											"name": "PUSH",
											"source": 6,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10383,
											"end": 10388,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10383,
											"end": 10400,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10429,
											"end": 10437,
											"name": "PUSH",
											"source": 6,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 10420,
											"end": 10437,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10420,
											"end": 10437,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10465,
											"end": 10467,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10455,
											"end": 10467,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10455,
											"end": 10467,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10455,
											"end": 10467,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10455,
											"end": 10467,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "tag",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 10379,
											"end": 10482,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10508,
											"end": 10516,
											"name": "PUSH",
											"source": 6,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10499,
											"end": 10504,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10499,
											"end": 10516,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10545,
											"end": 10553,
											"name": "PUSH",
											"source": 6,
											"value": "2386F26FC10000"
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 10536,
											"end": 10553,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "tag",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10536,
											"end": 10553,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10581,
											"end": 10583,
											"name": "PUSH",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 10571,
											"end": 10583,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10571,
											"end": 10583,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10571,
											"end": 10583,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10571,
											"end": 10583,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "tag",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 10495,
											"end": 10598,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10624,
											"end": 10631,
											"name": "PUSH",
											"source": 6,
											"value": "5F5E100"
										},
										{
											"begin": 10615,
											"end": 10620,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10615,
											"end": 10631,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10660,
											"end": 10667,
											"name": "PUSH",
											"source": 6,
											"value": "5F5E100"
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 10651,
											"end": 10667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "tag",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "tag",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10651,
											"end": 10667,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10695,
											"end": 10696,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 10685,
											"end": 10696,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10685,
											"end": 10696,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10685,
											"end": 10696,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10685,
											"end": 10696,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "tag",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 10611,
											"end": 10711,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10737,
											"end": 10744,
											"name": "PUSH",
											"source": 6,
											"value": "2710"
										},
										{
											"begin": 10728,
											"end": 10733,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10728,
											"end": 10744,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10773,
											"end": 10780,
											"name": "PUSH",
											"source": 6,
											"value": "2710"
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "90"
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 10764,
											"end": 10780,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "tag",
											"source": 6,
											"value": "90"
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "tag",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10764,
											"end": 10780,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10808,
											"end": 10809,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10798,
											"end": 10809,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10798,
											"end": 10809,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10798,
											"end": 10809,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10798,
											"end": 10809,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 10724,
											"end": 10824,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10850,
											"end": 10857,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 10841,
											"end": 10846,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10841,
											"end": 10857,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10886,
											"end": 10893,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 10877,
											"end": 10893,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "tag",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10877,
											"end": 10893,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10921,
											"end": 10922,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 10911,
											"end": 10922,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10911,
											"end": 10922,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10911,
											"end": 10922,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10911,
											"end": 10922,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 10837,
											"end": 10937,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10963,
											"end": 10970,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 10954,
											"end": 10959,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10954,
											"end": 10970,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 10950,
											"end": 11016,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 10950,
											"end": 11016,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11000,
											"end": 11001,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 10990,
											"end": 11001,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10990,
											"end": 11001,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10990,
											"end": 11001,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10990,
											"end": 11001,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10950,
											"end": 11016,
											"name": "tag",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 10950,
											"end": 11016,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11042,
											"end": 11048,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11035,
											"end": 11048,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11035,
											"end": 11048,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 11035,
											"end": 11048,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10139,
											"end": 11055,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10139,
											"end": 11055,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2838,
											"end": 3710,
											"name": "tag",
											"source": 25,
											"value": "74"
										},
										{
											"begin": 2838,
											"end": 3710,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 2928,
											"end": 2946,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 2987,
											"end": 2989,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 2958,
											"end": 2990,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 2958,
											"end": 2990,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 3023,
											"end": 3036,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 3059,
											"end": 3065,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "tag",
											"source": 25,
											"value": "96"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3075,
											"end": 3082,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 3075,
											"end": 3089,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 3071,
											"end": 3072,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3071,
											"end": 3089,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "97"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3159,
											"end": 3161,
											"name": "PUSH",
											"source": 25,
											"value": "30"
										},
										{
											"begin": 3143,
											"end": 3150,
											"name": "DUP5",
											"source": 25
										},
										{
											"begin": 3151,
											"end": 3152,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "99"
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "100"
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "101"
										},
										{
											"begin": 3143,
											"end": 3153,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "tag",
											"source": 25,
											"value": "100"
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "tag",
											"source": 25,
											"value": "99"
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "SHR",
											"source": 25
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3143,
											"end": 3153,
											"name": "SHL",
											"source": 25
										},
										{
											"begin": 3137,
											"end": 3154,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3137,
											"end": 3154,
											"name": "SHR",
											"source": 25
										},
										{
											"begin": 3132,
											"end": 3155,
											"name": "PUSH",
											"source": 25,
											"value": "FF"
										},
										{
											"begin": 3132,
											"end": 3155,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 3132,
											"end": 3161,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 3132,
											"end": 3161,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 3131,
											"end": 3213,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 3131,
											"end": 3213,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 3131,
											"end": 3213,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "102"
										},
										{
											"begin": 3131,
											"end": 3213,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3131,
											"end": 3213,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3210,
											"end": 3212,
											"name": "PUSH",
											"source": 25,
											"value": "39"
										},
										{
											"begin": 3194,
											"end": 3201,
											"name": "DUP5",
											"source": 25
										},
										{
											"begin": 3202,
											"end": 3203,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "103"
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "104"
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "101"
										},
										{
											"begin": 3194,
											"end": 3204,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "tag",
											"source": 25,
											"value": "104"
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "tag",
											"source": 25,
											"value": "103"
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "SHR",
											"source": 25
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3194,
											"end": 3204,
											"name": "SHL",
											"source": 25
										},
										{
											"begin": 3188,
											"end": 3205,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3188,
											"end": 3205,
											"name": "SHR",
											"source": 25
										},
										{
											"begin": 3183,
											"end": 3206,
											"name": "PUSH",
											"source": 25,
											"value": "FF"
										},
										{
											"begin": 3183,
											"end": 3206,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 3183,
											"end": 3212,
											"name": "GT",
											"source": 25
										},
										{
											"begin": 3183,
											"end": 3212,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 3131,
											"end": 3213,
											"name": "tag",
											"source": 25,
											"value": "102"
										},
										{
											"begin": 3131,
											"end": 3213,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3110,
											"end": 3611,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 3110,
											"end": 3611,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "105"
										},
										{
											"begin": 3110,
											"end": 3611,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3250,
											"end": 3258,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3246,
											"end": 3426,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 3246,
											"end": 3426,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "106"
										},
										{
											"begin": 3246,
											"end": 3426,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3292,
											"end": 3293,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 3286,
											"end": 3288,
											"name": "DUP7",
											"source": 25
										},
										{
											"begin": 3286,
											"end": 3293,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 3282,
											"end": 3408,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 3321,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "97"
										},
										{
											"begin": 3282,
											"end": 3408,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "DUP6",
											"source": 25
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "109"
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "110"
										},
										{
											"begin": 3381,
											"end": 3385,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "tag",
											"source": 25,
											"value": "109"
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "SWAP7",
											"source": 25
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3381,
											"end": 3385,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3246,
											"end": 3426,
											"name": "tag",
											"source": 25,
											"value": "106"
										},
										{
											"begin": 3246,
											"end": 3426,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3451,
											"end": 3453,
											"name": "PUSH",
											"source": 25,
											"value": "A"
										},
										{
											"begin": 3443,
											"end": 3453,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 3443,
											"end": 3453,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "111"
										},
										{
											"begin": 3443,
											"end": 3453,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 3443,
											"end": 3453,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 3443,
											"end": 3453,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "112"
										},
										{
											"begin": 3443,
											"end": 3453,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3443,
											"end": 3453,
											"name": "tag",
											"source": 25,
											"value": "111"
										},
										{
											"begin": 3443,
											"end": 3453,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3443,
											"end": 3453,
											"name": "SWAP3",
											"source": 25
										},
										{
											"begin": 3443,
											"end": 3453,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 25,
											"value": "30"
										},
										{
											"begin": 3490,
											"end": 3497,
											"name": "DUP5",
											"source": 25
										},
										{
											"begin": 3498,
											"end": 3499,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "113"
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "114"
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "101"
										},
										{
											"begin": 3490,
											"end": 3500,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "tag",
											"source": 25,
											"value": "114"
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "tag",
											"source": 25,
											"value": "113"
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "SHR",
											"source": 25
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3490,
											"end": 3500,
											"name": "SHL",
											"source": 25
										},
										{
											"begin": 3484,
											"end": 3501,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3484,
											"end": 3501,
											"name": "SHR",
											"source": 25
										},
										{
											"begin": 3479,
											"end": 3502,
											"name": "PUSH",
											"source": 25,
											"value": "FF"
										},
										{
											"begin": 3479,
											"end": 3502,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 3479,
											"end": 3507,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "115"
										},
										{
											"begin": 3479,
											"end": 3507,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 3479,
											"end": 3507,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 3479,
											"end": 3507,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "116"
										},
										{
											"begin": 3479,
											"end": 3507,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3479,
											"end": 3507,
											"name": "tag",
											"source": 25,
											"value": "115"
										},
										{
											"begin": 3479,
											"end": 3507,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3471,
											"end": 3507,
											"name": "DUP4",
											"source": 25
										},
										{
											"begin": 3471,
											"end": 3507,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "117"
										},
										{
											"begin": 3471,
											"end": 3507,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 3471,
											"end": 3507,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 3471,
											"end": 3507,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "118"
										},
										{
											"begin": 3471,
											"end": 3507,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3471,
											"end": 3507,
											"name": "tag",
											"source": 25,
											"value": "117"
										},
										{
											"begin": 3471,
											"end": 3507,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3471,
											"end": 3507,
											"name": "SWAP3",
											"source": 25
										},
										{
											"begin": 3471,
											"end": 3507,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3110,
											"end": 3611,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "119"
										},
										{
											"begin": 3110,
											"end": 3611,
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3110,
											"end": 3611,
											"name": "tag",
											"source": 25,
											"value": "105"
										},
										{
											"begin": 3110,
											"end": 3611,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3559,
											"end": 3561,
											"name": "PUSH",
											"source": 25,
											"value": "2E"
										},
										{
											"begin": 3543,
											"end": 3550,
											"name": "DUP5",
											"source": 25
										},
										{
											"begin": 3551,
											"end": 3552,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "LT",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "120"
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "121"
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "101"
										},
										{
											"begin": 3543,
											"end": 3553,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "tag",
											"source": 25,
											"value": "121"
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "tag",
											"source": 25,
											"value": "120"
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "PUSH",
											"source": 25,
											"value": "20"
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "ADD",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "MLOAD",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "SHR",
											"source": 25
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3543,
											"end": 3553,
											"name": "SHL",
											"source": 25
										},
										{
											"begin": 3537,
											"end": 3554,
											"name": "PUSH",
											"source": 25,
											"value": "F8"
										},
										{
											"begin": 3537,
											"end": 3554,
											"name": "SHR",
											"source": 25
										},
										{
											"begin": 3532,
											"end": 3555,
											"name": "PUSH",
											"source": 25,
											"value": "FF"
										},
										{
											"begin": 3532,
											"end": 3555,
											"name": "AND",
											"source": 25
										},
										{
											"begin": 3532,
											"end": 3561,
											"name": "SUB",
											"source": 25
										},
										{
											"begin": 3528,
											"end": 3611,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "122"
										},
										{
											"begin": 3528,
											"end": 3611,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3592,
											"end": 3596,
											"name": "PUSH",
											"source": 25,
											"value": "1"
										},
										{
											"begin": 3581,
											"end": 3596,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 3581,
											"end": 3596,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3528,
											"end": 3611,
											"name": "tag",
											"source": 25,
											"value": "122"
										},
										{
											"begin": 3528,
											"end": 3611,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3110,
											"end": 3611,
											"name": "tag",
											"source": 25,
											"value": "119"
										},
										{
											"begin": 3110,
											"end": 3611,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "DUP1",
											"source": 25
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "123"
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "124"
										},
										{
											"begin": 3091,
											"end": 3094,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "tag",
											"source": 25,
											"value": "123"
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3091,
											"end": 3094,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "96"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "tag",
											"source": 25,
											"value": "97"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3639,
											"end": 3640,
											"name": "PUSH",
											"source": 25,
											"value": "0"
										},
										{
											"begin": 3634,
											"end": 3636,
											"name": "DUP6",
											"source": 25
										},
										{
											"begin": 3634,
											"end": 3640,
											"name": "GT",
											"source": 25
										},
										{
											"begin": 3630,
											"end": 3683,
											"name": "ISZERO",
											"source": 25
										},
										{
											"begin": 3630,
											"end": 3683,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "125"
										},
										{
											"begin": 3630,
											"end": 3683,
											"name": "JUMPI",
											"source": 25
										},
										{
											"begin": 3670,
											"end": 3672,
											"name": "DUP5",
											"source": 25
										},
										{
											"begin": 3664,
											"end": 3666,
											"name": "PUSH",
											"source": 25,
											"value": "A"
										},
										{
											"begin": 3664,
											"end": 3672,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "126"
										},
										{
											"begin": 3664,
											"end": 3672,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 3664,
											"end": 3672,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 3664,
											"end": 3672,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "127"
										},
										{
											"begin": 3664,
											"end": 3672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3664,
											"end": 3672,
											"name": "tag",
											"source": 25,
											"value": "126"
										},
										{
											"begin": 3664,
											"end": 3672,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3656,
											"end": 3672,
											"name": "DUP3",
											"source": 25
										},
										{
											"begin": 3656,
											"end": 3672,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "128"
										},
										{
											"begin": 3656,
											"end": 3672,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 3656,
											"end": 3672,
											"name": "SWAP1",
											"source": 25
										},
										{
											"begin": 3656,
											"end": 3672,
											"name": "PUSH [tag]",
											"source": 25,
											"value": "112"
										},
										{
											"begin": 3656,
											"end": 3672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 3656,
											"end": 3672,
											"name": "tag",
											"source": 25,
											"value": "128"
										},
										{
											"begin": 3656,
											"end": 3672,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3656,
											"end": 3672,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 3656,
											"end": 3672,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3630,
											"end": 3683,
											"name": "tag",
											"source": 25,
											"value": "125"
										},
										{
											"begin": 3630,
											"end": 3683,
											"name": "JUMPDEST",
											"source": 25
										},
										{
											"begin": 3699,
											"end": 3703,
											"name": "DUP2",
											"source": 25
										},
										{
											"begin": 3692,
											"end": 3703,
											"name": "SWAP4",
											"source": 25
										},
										{
											"begin": 3692,
											"end": 3703,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3692,
											"end": 3703,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3692,
											"end": 3703,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 3692,
											"end": 3703,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2838,
											"end": 3710,
											"name": "SWAP3",
											"source": 25
										},
										{
											"begin": 2838,
											"end": 3710,
											"name": "SWAP2",
											"source": 25
										},
										{
											"begin": 2838,
											"end": 3710,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2838,
											"end": 3710,
											"name": "POP",
											"source": 25
										},
										{
											"begin": 2838,
											"end": 3710,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 25
										},
										{
											"begin": 7,
											"end": 82,
											"name": "tag",
											"source": 26,
											"value": "129"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 40,
											"end": 46,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 75,
											"name": "PUSH",
											"source": 26,
											"value": "40"
										},
										{
											"begin": 67,
											"end": 76,
											"name": "MLOAD",
											"source": 26
										},
										{
											"begin": 57,
											"end": 76,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 57,
											"end": 76,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7,
											"end": 82,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7,
											"end": 82,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 26,
											"value": "130"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 26,
											"value": "131"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 26,
											"value": "132"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 26,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 26
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 26,
											"value": "133"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "173"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "132"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 26,
											"value": "173"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 26,
											"value": "134"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "175"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "133"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 26,
											"value": "175"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 26
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "176"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 26,
											"value": "176"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 26,
											"value": "135"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 26
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "178"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "134"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 26,
											"value": "178"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 841,
											"end": 918,
											"name": "tag",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 841,
											"end": 918,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 878,
											"end": 885,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 907,
											"end": 912,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 896,
											"end": 912,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 896,
											"end": 912,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 841,
											"end": 918,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 841,
											"end": 918,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "tag",
											"source": 26,
											"value": "137"
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "181"
										},
										{
											"begin": 1015,
											"end": 1020,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 997,
											"end": 1021,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "tag",
											"source": 26,
											"value": "181"
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 990,
											"end": 995,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 987,
											"end": 1022,
											"name": "EQ",
											"source": 26
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "182"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1034,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 1026,
											"end": 1038,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "tag",
											"source": 26,
											"value": "182"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 924,
											"end": 1046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "tag",
											"source": 26,
											"value": "138"
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1098,
											"end": 1103,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 1123,
											"end": 1143,
											"name": "CALLDATALOAD",
											"source": 26
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "184"
										},
										{
											"begin": 1179,
											"end": 1184,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "137"
										},
										{
											"begin": 1152,
											"end": 1185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "tag",
											"source": 26,
											"value": "184"
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1052,
											"end": 1191,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "tag",
											"source": 26,
											"value": "7"
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1265,
											"end": 1271,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 1322,
											"end": 1324,
											"name": "PUSH",
											"source": 26,
											"value": "40"
										},
										{
											"begin": 1310,
											"end": 1319,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 1301,
											"end": 1308,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "SUB",
											"source": 26
										},
										{
											"begin": 1293,
											"end": 1325,
											"name": "SLT",
											"source": 26
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "186"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "187"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "130"
										},
										{
											"begin": 1328,
											"end": 1407,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "tag",
											"source": 26,
											"value": "187"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "tag",
											"source": 26,
											"value": "186"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1448,
											"end": 1449,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "188"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 1509,
											"end": 1515,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP7",
											"source": 26
										},
										{
											"begin": 1494,
											"end": 1516,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "135"
										},
										{
											"begin": 1473,
											"end": 1526,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "tag",
											"source": 26,
											"value": "188"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1419,
											"end": 1536,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1575,
											"end": 1577,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "189"
										},
										{
											"begin": 1646,
											"end": 1653,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 1637,
											"end": 1643,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 1626,
											"end": 1635,
											"name": "DUP7",
											"source": 26
										},
										{
											"begin": 1622,
											"end": 1644,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "138"
										},
										{
											"begin": 1601,
											"end": 1654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "tag",
											"source": 26,
											"value": "189"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1546,
											"end": 1664,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1197,
											"end": 1671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "tag",
											"source": 26,
											"value": "139"
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "191"
										},
										{
											"begin": 1782,
											"end": 1787,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 1764,
											"end": 1788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "tag",
											"source": 26,
											"value": "191"
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1759,
											"end": 1762,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 1752,
											"end": 1789,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1677,
											"end": 1795,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "tag",
											"source": 26,
											"value": "10"
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1894,
											"end": 1898,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 1932,
											"end": 1934,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 1921,
											"end": 1930,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 1917,
											"end": 1935,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 1909,
											"end": 1935,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 1909,
											"end": 1935,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "193"
										},
										{
											"begin": 2013,
											"end": 2014,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 2002,
											"end": 2011,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 1998,
											"end": 2015,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 1989,
											"end": 1995,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "139"
										},
										{
											"begin": 1945,
											"end": 2016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "tag",
											"source": 26,
											"value": "193"
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 1801,
											"end": 2023,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 2029,
											"end": 2146,
											"name": "tag",
											"source": 26,
											"value": "140"
										},
										{
											"begin": 2029,
											"end": 2146,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2138,
											"end": 2139,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 2135,
											"end": 2136,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 2128,
											"end": 2140,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 2152,
											"end": 2269,
											"name": "tag",
											"source": 26,
											"value": "141"
										},
										{
											"begin": 2152,
											"end": 2269,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2261,
											"end": 2262,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 2258,
											"end": 2259,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 2251,
											"end": 2263,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 2275,
											"end": 2377,
											"name": "tag",
											"source": 26,
											"value": "142"
										},
										{
											"begin": 2275,
											"end": 2377,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2316,
											"end": 2322,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 2367,
											"end": 2369,
											"name": "PUSH",
											"source": 26,
											"value": "1F"
										},
										{
											"begin": 2363,
											"end": 2370,
											"name": "NOT",
											"source": 26
										},
										{
											"begin": 2358,
											"end": 2360,
											"name": "PUSH",
											"source": 26,
											"value": "1F"
										},
										{
											"begin": 2351,
											"end": 2356,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 2347,
											"end": 2361,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 2343,
											"end": 2371,
											"name": "AND",
											"source": 26
										},
										{
											"begin": 2333,
											"end": 2371,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 2333,
											"end": 2371,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 2275,
											"end": 2377,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 2275,
											"end": 2377,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 2275,
											"end": 2377,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 2275,
											"end": 2377,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 2383,
											"end": 2563,
											"name": "tag",
											"source": 26,
											"value": "64"
										},
										{
											"begin": 2383,
											"end": 2563,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2431,
											"end": 2508,
											"name": "PUSH",
											"source": 26,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2428,
											"end": 2429,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 2421,
											"end": 2509,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 2528,
											"end": 2532,
											"name": "PUSH",
											"source": 26,
											"value": "41"
										},
										{
											"begin": 2525,
											"end": 2526,
											"name": "PUSH",
											"source": 26,
											"value": "4"
										},
										{
											"begin": 2518,
											"end": 2533,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 2552,
											"end": 2556,
											"name": "PUSH",
											"source": 26,
											"value": "24"
										},
										{
											"begin": 2549,
											"end": 2550,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 2542,
											"end": 2557,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 2569,
											"end": 2850,
											"name": "tag",
											"source": 26,
											"value": "143"
										},
										{
											"begin": 2569,
											"end": 2850,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2652,
											"end": 2679,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "199"
										},
										{
											"begin": 2674,
											"end": 2678,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 2652,
											"end": 2679,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "142"
										},
										{
											"begin": 2652,
											"end": 2679,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 2652,
											"end": 2679,
											"name": "tag",
											"source": 26,
											"value": "199"
										},
										{
											"begin": 2652,
											"end": 2679,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2644,
											"end": 2650,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 2640,
											"end": 2680,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 2782,
											"end": 2788,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 2770,
											"end": 2780,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 2767,
											"end": 2789,
											"name": "LT",
											"source": 26
										},
										{
											"begin": 2746,
											"end": 2764,
											"name": "PUSH",
											"source": 26,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2734,
											"end": 2744,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 2731,
											"end": 2765,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 2728,
											"end": 2790,
											"name": "OR",
											"source": 26
										},
										{
											"begin": 2725,
											"end": 2813,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 2725,
											"end": 2813,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "200"
										},
										{
											"begin": 2725,
											"end": 2813,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 2793,
											"end": 2811,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "201"
										},
										{
											"begin": 2793,
											"end": 2811,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "64"
										},
										{
											"begin": 2793,
											"end": 2811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 2793,
											"end": 2811,
											"name": "tag",
											"source": 26,
											"value": "201"
										},
										{
											"begin": 2793,
											"end": 2811,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2725,
											"end": 2813,
											"name": "tag",
											"source": 26,
											"value": "200"
										},
										{
											"begin": 2725,
											"end": 2813,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2833,
											"end": 2843,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 2829,
											"end": 2831,
											"name": "PUSH",
											"source": 26,
											"value": "40"
										},
										{
											"begin": 2822,
											"end": 2844,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 2612,
											"end": 2850,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 2569,
											"end": 2850,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 2569,
											"end": 2850,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 2569,
											"end": 2850,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 2856,
											"end": 2985,
											"name": "tag",
											"source": 26,
											"value": "144"
										},
										{
											"begin": 2856,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2890,
											"end": 2896,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 2917,
											"end": 2937,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "203"
										},
										{
											"begin": 2917,
											"end": 2937,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "129"
										},
										{
											"begin": 2917,
											"end": 2937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 2917,
											"end": 2937,
											"name": "tag",
											"source": 26,
											"value": "203"
										},
										{
											"begin": 2917,
											"end": 2937,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2907,
											"end": 2937,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 2907,
											"end": 2937,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 2946,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "204"
										},
										{
											"begin": 2974,
											"end": 2978,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 2966,
											"end": 2972,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 2946,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "143"
										},
										{
											"begin": 2946,
											"end": 2979,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 2946,
											"end": 2979,
											"name": "tag",
											"source": 26,
											"value": "204"
										},
										{
											"begin": 2946,
											"end": 2979,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 2856,
											"end": 2985,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 2856,
											"end": 2985,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 2856,
											"end": 2985,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 2856,
											"end": 2985,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 2991,
											"end": 3299,
											"name": "tag",
											"source": 26,
											"value": "145"
										},
										{
											"begin": 2991,
											"end": 3299,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3053,
											"end": 3057,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 3143,
											"end": 3161,
											"name": "PUSH",
											"source": 26,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3135,
											"end": 3141,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 3132,
											"end": 3162,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 3129,
											"end": 3185,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 3129,
											"end": 3185,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "206"
										},
										{
											"begin": 3129,
											"end": 3185,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 3165,
											"end": 3183,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "207"
										},
										{
											"begin": 3165,
											"end": 3183,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "64"
										},
										{
											"begin": 3165,
											"end": 3183,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 3165,
											"end": 3183,
											"name": "tag",
											"source": 26,
											"value": "207"
										},
										{
											"begin": 3165,
											"end": 3183,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3129,
											"end": 3185,
											"name": "tag",
											"source": 26,
											"value": "206"
										},
										{
											"begin": 3129,
											"end": 3185,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3203,
											"end": 3232,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "208"
										},
										{
											"begin": 3225,
											"end": 3231,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 3203,
											"end": 3232,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "142"
										},
										{
											"begin": 3203,
											"end": 3232,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 3203,
											"end": 3232,
											"name": "tag",
											"source": 26,
											"value": "208"
										},
										{
											"begin": 3203,
											"end": 3232,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3195,
											"end": 3232,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 3195,
											"end": 3232,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3287,
											"end": 3291,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 3281,
											"end": 3285,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 3277,
											"end": 3292,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 3269,
											"end": 3292,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 3269,
											"end": 3292,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 2991,
											"end": 3299,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 2991,
											"end": 3299,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 2991,
											"end": 3299,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 2991,
											"end": 3299,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 3305,
											"end": 3451,
											"name": "tag",
											"source": 26,
											"value": "146"
										},
										{
											"begin": 3305,
											"end": 3451,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3402,
											"end": 3408,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 3397,
											"end": 3400,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 3392,
											"end": 3395,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 3379,
											"end": 3409,
											"name": "CALLDATACOPY",
											"source": 26
										},
										{
											"begin": 3443,
											"end": 3444,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 3434,
											"end": 3440,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 3429,
											"end": 3432,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 3425,
											"end": 3441,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 3418,
											"end": 3445,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 3305,
											"end": 3451,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3305,
											"end": 3451,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3305,
											"end": 3451,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3305,
											"end": 3451,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 3457,
											"end": 3882,
											"name": "tag",
											"source": 26,
											"value": "147"
										},
										{
											"begin": 3457,
											"end": 3882,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3535,
											"end": 3540,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 3560,
											"end": 3626,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "211"
										},
										{
											"begin": 3576,
											"end": 3625,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "212"
										},
										{
											"begin": 3618,
											"end": 3624,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 3576,
											"end": 3625,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "145"
										},
										{
											"begin": 3576,
											"end": 3625,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 3576,
											"end": 3625,
											"name": "tag",
											"source": 26,
											"value": "212"
										},
										{
											"begin": 3576,
											"end": 3625,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3560,
											"end": 3626,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "144"
										},
										{
											"begin": 3560,
											"end": 3626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 3560,
											"end": 3626,
											"name": "tag",
											"source": 26,
											"value": "211"
										},
										{
											"begin": 3560,
											"end": 3626,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3551,
											"end": 3626,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 3551,
											"end": 3626,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3649,
											"end": 3655,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 3642,
											"end": 3647,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 3635,
											"end": 3656,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 3687,
											"end": 3691,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 3680,
											"end": 3685,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 3676,
											"end": 3692,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 3725,
											"end": 3728,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 3716,
											"end": 3722,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 3711,
											"end": 3714,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 3707,
											"end": 3723,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 3704,
											"end": 3729,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 3701,
											"end": 3813,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 3701,
											"end": 3813,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "213"
										},
										{
											"begin": 3701,
											"end": 3813,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 3732,
											"end": 3811,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "214"
										},
										{
											"begin": 3732,
											"end": 3811,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "141"
										},
										{
											"begin": 3732,
											"end": 3811,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 3732,
											"end": 3811,
											"name": "tag",
											"source": 26,
											"value": "214"
										},
										{
											"begin": 3732,
											"end": 3811,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3701,
											"end": 3813,
											"name": "tag",
											"source": 26,
											"value": "213"
										},
										{
											"begin": 3701,
											"end": 3813,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3822,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "215"
										},
										{
											"begin": 3869,
											"end": 3875,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 3864,
											"end": 3867,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 3859,
											"end": 3862,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 3822,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "146"
										},
										{
											"begin": 3822,
											"end": 3876,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 3822,
											"end": 3876,
											"name": "tag",
											"source": 26,
											"value": "215"
										},
										{
											"begin": 3822,
											"end": 3876,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3541,
											"end": 3882,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3457,
											"end": 3882,
											"name": "SWAP4",
											"source": 26
										},
										{
											"begin": 3457,
											"end": 3882,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 3457,
											"end": 3882,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3457,
											"end": 3882,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3457,
											"end": 3882,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3457,
											"end": 3882,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 3902,
											"end": 4242,
											"name": "tag",
											"source": 26,
											"value": "148"
										},
										{
											"begin": 3902,
											"end": 4242,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3958,
											"end": 3963,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 4007,
											"end": 4010,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 4000,
											"end": 4004,
											"name": "PUSH",
											"source": 26,
											"value": "1F"
										},
										{
											"begin": 3992,
											"end": 3998,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 3988,
											"end": 4005,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 3984,
											"end": 4011,
											"name": "SLT",
											"source": 26
										},
										{
											"begin": 3974,
											"end": 4096,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "217"
										},
										{
											"begin": 3974,
											"end": 4096,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 4015,
											"end": 4094,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "218"
										},
										{
											"begin": 4015,
											"end": 4094,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "140"
										},
										{
											"begin": 4015,
											"end": 4094,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 4015,
											"end": 4094,
											"name": "tag",
											"source": 26,
											"value": "218"
										},
										{
											"begin": 4015,
											"end": 4094,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 3974,
											"end": 4096,
											"name": "tag",
											"source": 26,
											"value": "217"
										},
										{
											"begin": 3974,
											"end": 4096,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 4132,
											"end": 4138,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 4119,
											"end": 4139,
											"name": "CALLDATALOAD",
											"source": 26
										},
										{
											"begin": 4157,
											"end": 4236,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "219"
										},
										{
											"begin": 4232,
											"end": 4235,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 4224,
											"end": 4230,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 4217,
											"end": 4221,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 4209,
											"end": 4215,
											"name": "DUP7",
											"source": 26
										},
										{
											"begin": 4205,
											"end": 4222,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 4157,
											"end": 4236,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "147"
										},
										{
											"begin": 4157,
											"end": 4236,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 4157,
											"end": 4236,
											"name": "tag",
											"source": 26,
											"value": "219"
										},
										{
											"begin": 4157,
											"end": 4236,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 4148,
											"end": 4236,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 4148,
											"end": 4236,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3964,
											"end": 4242,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3902,
											"end": 4242,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 3902,
											"end": 4242,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 3902,
											"end": 4242,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3902,
											"end": 4242,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 3902,
											"end": 4242,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "tag",
											"source": 26,
											"value": "13"
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 4373,
											"end": 4379,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 4381,
											"end": 4387,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 4389,
											"end": 4395,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 4397,
											"end": 4403,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 4405,
											"end": 4411,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 4454,
											"end": 4457,
											"name": "PUSH",
											"source": 26,
											"value": "A0"
										},
										{
											"begin": 4442,
											"end": 4451,
											"name": "DUP7",
											"source": 26
										},
										{
											"begin": 4433,
											"end": 4440,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 4429,
											"end": 4452,
											"name": "SUB",
											"source": 26
										},
										{
											"begin": 4425,
											"end": 4458,
											"name": "SLT",
											"source": 26
										},
										{
											"begin": 4422,
											"end": 4542,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 4422,
											"end": 4542,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "221"
										},
										{
											"begin": 4422,
											"end": 4542,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 4461,
											"end": 4540,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "222"
										},
										{
											"begin": 4461,
											"end": 4540,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "130"
										},
										{
											"begin": 4461,
											"end": 4540,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 4461,
											"end": 4540,
											"name": "tag",
											"source": 26,
											"value": "222"
										},
										{
											"begin": 4461,
											"end": 4540,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 4422,
											"end": 4542,
											"name": "tag",
											"source": 26,
											"value": "221"
										},
										{
											"begin": 4422,
											"end": 4542,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 4581,
											"end": 4582,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 4606,
											"end": 4659,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "223"
										},
										{
											"begin": 4651,
											"end": 4658,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 4642,
											"end": 4648,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 4631,
											"end": 4640,
											"name": "DUP10",
											"source": 26
										},
										{
											"begin": 4627,
											"end": 4649,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 4606,
											"end": 4659,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "135"
										},
										{
											"begin": 4606,
											"end": 4659,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 4606,
											"end": 4659,
											"name": "tag",
											"source": 26,
											"value": "223"
										},
										{
											"begin": 4606,
											"end": 4659,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 4596,
											"end": 4659,
											"name": "SWAP6",
											"source": 26
										},
										{
											"begin": 4596,
											"end": 4659,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 4552,
											"end": 4669,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 4708,
											"end": 4710,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "224"
										},
										{
											"begin": 4779,
											"end": 4786,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 4770,
											"end": 4776,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 4759,
											"end": 4768,
											"name": "DUP10",
											"source": 26
										},
										{
											"begin": 4755,
											"end": 4777,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "135"
										},
										{
											"begin": 4734,
											"end": 4787,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "tag",
											"source": 26,
											"value": "224"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 4724,
											"end": 4787,
											"name": "SWAP5",
											"source": 26
										},
										{
											"begin": 4724,
											"end": 4787,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 4679,
											"end": 4797,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 4864,
											"end": 4866,
											"name": "PUSH",
											"source": 26,
											"value": "40"
										},
										{
											"begin": 4853,
											"end": 4862,
											"name": "DUP7",
											"source": 26
										},
										{
											"begin": 4849,
											"end": 4867,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 4836,
											"end": 4868,
											"name": "CALLDATALOAD",
											"source": 26
										},
										{
											"begin": 4895,
											"end": 4913,
											"name": "PUSH",
											"source": 26,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4887,
											"end": 4893,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 4884,
											"end": 4914,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 4881,
											"end": 4998,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 4881,
											"end": 4998,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "225"
										},
										{
											"begin": 4881,
											"end": 4998,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 4917,
											"end": 4996,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "226"
										},
										{
											"begin": 4917,
											"end": 4996,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "131"
										},
										{
											"begin": 4917,
											"end": 4996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 4917,
											"end": 4996,
											"name": "tag",
											"source": 26,
											"value": "226"
										},
										{
											"begin": 4917,
											"end": 4996,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 4881,
											"end": 4998,
											"name": "tag",
											"source": 26,
											"value": "225"
										},
										{
											"begin": 4881,
											"end": 4998,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5022,
											"end": 5085,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "227"
										},
										{
											"begin": 5077,
											"end": 5084,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 5068,
											"end": 5074,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 5057,
											"end": 5066,
											"name": "DUP10",
											"source": 26
										},
										{
											"begin": 5053,
											"end": 5075,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 5022,
											"end": 5085,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "148"
										},
										{
											"begin": 5022,
											"end": 5085,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 5022,
											"end": 5085,
											"name": "tag",
											"source": 26,
											"value": "227"
										},
										{
											"begin": 5022,
											"end": 5085,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5012,
											"end": 5085,
											"name": "SWAP4",
											"source": 26
										},
										{
											"begin": 5012,
											"end": 5085,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 4807,
											"end": 5095,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5162,
											"end": 5164,
											"name": "PUSH",
											"source": 26,
											"value": "60"
										},
										{
											"begin": 5151,
											"end": 5160,
											"name": "DUP7",
											"source": 26
										},
										{
											"begin": 5147,
											"end": 5165,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 5134,
											"end": 5166,
											"name": "CALLDATALOAD",
											"source": 26
										},
										{
											"begin": 5193,
											"end": 5211,
											"name": "PUSH",
											"source": 26,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5185,
											"end": 5191,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 5182,
											"end": 5212,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 5179,
											"end": 5296,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 5179,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "228"
										},
										{
											"begin": 5179,
											"end": 5296,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 5215,
											"end": 5294,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "229"
										},
										{
											"begin": 5215,
											"end": 5294,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "131"
										},
										{
											"begin": 5215,
											"end": 5294,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 5215,
											"end": 5294,
											"name": "tag",
											"source": 26,
											"value": "229"
										},
										{
											"begin": 5215,
											"end": 5294,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5179,
											"end": 5296,
											"name": "tag",
											"source": 26,
											"value": "228"
										},
										{
											"begin": 5179,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5320,
											"end": 5383,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "230"
										},
										{
											"begin": 5375,
											"end": 5382,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 5366,
											"end": 5372,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 5355,
											"end": 5364,
											"name": "DUP10",
											"source": 26
										},
										{
											"begin": 5351,
											"end": 5373,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 5320,
											"end": 5383,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "148"
										},
										{
											"begin": 5320,
											"end": 5383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 5320,
											"end": 5383,
											"name": "tag",
											"source": 26,
											"value": "230"
										},
										{
											"begin": 5320,
											"end": 5383,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5310,
											"end": 5383,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 5310,
											"end": 5383,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5105,
											"end": 5393,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5460,
											"end": 5463,
											"name": "PUSH",
											"source": 26,
											"value": "80"
										},
										{
											"begin": 5449,
											"end": 5458,
											"name": "DUP7",
											"source": 26
										},
										{
											"begin": 5445,
											"end": 5464,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 5432,
											"end": 5465,
											"name": "CALLDATALOAD",
											"source": 26
										},
										{
											"begin": 5492,
											"end": 5510,
											"name": "PUSH",
											"source": 26,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5484,
											"end": 5490,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 5481,
											"end": 5511,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 5478,
											"end": 5595,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 5478,
											"end": 5595,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "231"
										},
										{
											"begin": 5478,
											"end": 5595,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 5514,
											"end": 5593,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "232"
										},
										{
											"begin": 5514,
											"end": 5593,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "131"
										},
										{
											"begin": 5514,
											"end": 5593,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 5514,
											"end": 5593,
											"name": "tag",
											"source": 26,
											"value": "232"
										},
										{
											"begin": 5514,
											"end": 5593,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5478,
											"end": 5595,
											"name": "tag",
											"source": 26,
											"value": "231"
										},
										{
											"begin": 5478,
											"end": 5595,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5619,
											"end": 5682,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "233"
										},
										{
											"begin": 5674,
											"end": 5681,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 5665,
											"end": 5671,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 5654,
											"end": 5663,
											"name": "DUP10",
											"source": 26
										},
										{
											"begin": 5650,
											"end": 5672,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 5619,
											"end": 5682,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "148"
										},
										{
											"begin": 5619,
											"end": 5682,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 5619,
											"end": 5682,
											"name": "tag",
											"source": 26,
											"value": "233"
										},
										{
											"begin": 5619,
											"end": 5682,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5609,
											"end": 5682,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 5609,
											"end": 5682,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5403,
											"end": 5692,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "SWAP6",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "SWAP6",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "SWAP4",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 4248,
											"end": 5699,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 5705,
											"end": 5795,
											"name": "tag",
											"source": 26,
											"value": "149"
										},
										{
											"begin": 5705,
											"end": 5795,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5739,
											"end": 5746,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5787,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 5775,
											"end": 5788,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 5768,
											"end": 5789,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 5757,
											"end": 5789,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 5757,
											"end": 5789,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5705,
											"end": 5795,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 5705,
											"end": 5795,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 5705,
											"end": 5795,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5705,
											"end": 5795,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 5801,
											"end": 5910,
											"name": "tag",
											"source": 26,
											"value": "150"
										},
										{
											"begin": 5801,
											"end": 5910,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5882,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "236"
										},
										{
											"begin": 5897,
											"end": 5902,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 5882,
											"end": 5903,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "149"
										},
										{
											"begin": 5882,
											"end": 5903,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 5882,
											"end": 5903,
											"name": "tag",
											"source": 26,
											"value": "236"
										},
										{
											"begin": 5882,
											"end": 5903,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5877,
											"end": 5880,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 5870,
											"end": 5904,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 5801,
											"end": 5910,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5801,
											"end": 5910,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5801,
											"end": 5910,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 5916,
											"end": 6126,
											"name": "tag",
											"source": 26,
											"value": "16"
										},
										{
											"begin": 5916,
											"end": 6126,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6003,
											"end": 6007,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 6041,
											"end": 6043,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 6030,
											"end": 6039,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 6026,
											"end": 6044,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 6018,
											"end": 6044,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 6018,
											"end": 6044,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6054,
											"end": 6119,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "238"
										},
										{
											"begin": 6116,
											"end": 6117,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 6105,
											"end": 6114,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 6101,
											"end": 6118,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 6092,
											"end": 6098,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 6054,
											"end": 6119,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "150"
										},
										{
											"begin": 6054,
											"end": 6119,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6054,
											"end": 6119,
											"name": "tag",
											"source": 26,
											"value": "238"
										},
										{
											"begin": 6054,
											"end": 6119,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 5916,
											"end": 6126,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 5916,
											"end": 6126,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 5916,
											"end": 6126,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5916,
											"end": 6126,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 5916,
											"end": 6126,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6132,
											"end": 6250,
											"name": "tag",
											"source": 26,
											"value": "151"
										},
										{
											"begin": 6132,
											"end": 6250,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6219,
											"end": 6243,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "240"
										},
										{
											"begin": 6237,
											"end": 6242,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 6219,
											"end": 6243,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "133"
										},
										{
											"begin": 6219,
											"end": 6243,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6219,
											"end": 6243,
											"name": "tag",
											"source": 26,
											"value": "240"
										},
										{
											"begin": 6219,
											"end": 6243,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6214,
											"end": 6217,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 6207,
											"end": 6244,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 6132,
											"end": 6250,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6132,
											"end": 6250,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6132,
											"end": 6250,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6256,
											"end": 6588,
											"name": "tag",
											"source": 26,
											"value": "19"
										},
										{
											"begin": 6256,
											"end": 6588,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6377,
											"end": 6381,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 6415,
											"end": 6417,
											"name": "PUSH",
											"source": 26,
											"value": "40"
										},
										{
											"begin": 6404,
											"end": 6413,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 6400,
											"end": 6418,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 6392,
											"end": 6418,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 6392,
											"end": 6418,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6428,
											"end": 6499,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "242"
										},
										{
											"begin": 6496,
											"end": 6497,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 6485,
											"end": 6494,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 6481,
											"end": 6498,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 6472,
											"end": 6478,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 6428,
											"end": 6499,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "151"
										},
										{
											"begin": 6428,
											"end": 6499,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6428,
											"end": 6499,
											"name": "tag",
											"source": 26,
											"value": "242"
										},
										{
											"begin": 6428,
											"end": 6499,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6509,
											"end": 6581,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "243"
										},
										{
											"begin": 6577,
											"end": 6579,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 6566,
											"end": 6575,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 6562,
											"end": 6580,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 6553,
											"end": 6559,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 6509,
											"end": 6581,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "139"
										},
										{
											"begin": 6509,
											"end": 6581,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6509,
											"end": 6581,
											"name": "tag",
											"source": 26,
											"value": "243"
										},
										{
											"begin": 6509,
											"end": 6581,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6256,
											"end": 6588,
											"name": "SWAP4",
											"source": 26
										},
										{
											"begin": 6256,
											"end": 6588,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 6256,
											"end": 6588,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6256,
											"end": 6588,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6256,
											"end": 6588,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6256,
											"end": 6588,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6594,
											"end": 6737,
											"name": "tag",
											"source": 26,
											"value": "152"
										},
										{
											"begin": 6594,
											"end": 6737,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6651,
											"end": 6656,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 6682,
											"end": 6688,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 6676,
											"end": 6689,
											"name": "MLOAD",
											"source": 26
										},
										{
											"begin": 6667,
											"end": 6689,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 6667,
											"end": 6689,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6698,
											"end": 6731,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "245"
										},
										{
											"begin": 6725,
											"end": 6730,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 6698,
											"end": 6731,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "134"
										},
										{
											"begin": 6698,
											"end": 6731,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6698,
											"end": 6731,
											"name": "tag",
											"source": 26,
											"value": "245"
										},
										{
											"begin": 6698,
											"end": 6731,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6594,
											"end": 6737,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 6594,
											"end": 6737,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 6594,
											"end": 6737,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6594,
											"end": 6737,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6594,
											"end": 6737,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6743,
											"end": 7094,
											"name": "tag",
											"source": 26,
											"value": "23"
										},
										{
											"begin": 6743,
											"end": 7094,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6813,
											"end": 6819,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 6862,
											"end": 6864,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 6850,
											"end": 6859,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 6841,
											"end": 6848,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 6837,
											"end": 6860,
											"name": "SUB",
											"source": 26
										},
										{
											"begin": 6833,
											"end": 6865,
											"name": "SLT",
											"source": 26
										},
										{
											"begin": 6830,
											"end": 6949,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 6830,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "247"
										},
										{
											"begin": 6830,
											"end": 6949,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 6868,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "248"
										},
										{
											"begin": 6868,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "130"
										},
										{
											"begin": 6868,
											"end": 6947,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 6868,
											"end": 6947,
											"name": "tag",
											"source": 26,
											"value": "248"
										},
										{
											"begin": 6868,
											"end": 6947,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6830,
											"end": 6949,
											"name": "tag",
											"source": 26,
											"value": "247"
										},
										{
											"begin": 6830,
											"end": 6949,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 6988,
											"end": 6989,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 7013,
											"end": 7077,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "249"
										},
										{
											"begin": 7069,
											"end": 7076,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 7060,
											"end": 7066,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 7049,
											"end": 7058,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 7045,
											"end": 7067,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 7013,
											"end": 7077,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "152"
										},
										{
											"begin": 7013,
											"end": 7077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7013,
											"end": 7077,
											"name": "tag",
											"source": 26,
											"value": "249"
										},
										{
											"begin": 7013,
											"end": 7077,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7003,
											"end": 7077,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 7003,
											"end": 7077,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6959,
											"end": 7087,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6743,
											"end": 7094,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 6743,
											"end": 7094,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 6743,
											"end": 7094,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6743,
											"end": 7094,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 6743,
											"end": 7094,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7100,
											"end": 7280,
											"name": "tag",
											"source": 26,
											"value": "153"
										},
										{
											"begin": 7100,
											"end": 7280,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7148,
											"end": 7225,
											"name": "PUSH",
											"source": 26,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7145,
											"end": 7146,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 7138,
											"end": 7226,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 7245,
											"end": 7249,
											"name": "PUSH",
											"source": 26,
											"value": "22"
										},
										{
											"begin": 7242,
											"end": 7243,
											"name": "PUSH",
											"source": 26,
											"value": "4"
										},
										{
											"begin": 7235,
											"end": 7250,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 7269,
											"end": 7273,
											"name": "PUSH",
											"source": 26,
											"value": "24"
										},
										{
											"begin": 7266,
											"end": 7267,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 7259,
											"end": 7274,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 7286,
											"end": 7606,
											"name": "tag",
											"source": 26,
											"value": "28"
										},
										{
											"begin": 7286,
											"end": 7606,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7330,
											"end": 7336,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 7367,
											"end": 7368,
											"name": "PUSH",
											"source": 26,
											"value": "2"
										},
										{
											"begin": 7361,
											"end": 7365,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 7357,
											"end": 7369,
											"name": "DIV",
											"source": 26
										},
										{
											"begin": 7347,
											"end": 7369,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7347,
											"end": 7369,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7414,
											"end": 7415,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 7408,
											"end": 7412,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 7404,
											"end": 7416,
											"name": "AND",
											"source": 26
										},
										{
											"begin": 7435,
											"end": 7453,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 7425,
											"end": 7506,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "252"
										},
										{
											"begin": 7425,
											"end": 7506,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 7491,
											"end": 7495,
											"name": "PUSH",
											"source": 26,
											"value": "7F"
										},
										{
											"begin": 7483,
											"end": 7489,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 7479,
											"end": 7496,
											"name": "AND",
											"source": 26
										},
										{
											"begin": 7469,
											"end": 7496,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 7469,
											"end": 7496,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7425,
											"end": 7506,
											"name": "tag",
											"source": 26,
											"value": "252"
										},
										{
											"begin": 7425,
											"end": 7506,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7553,
											"end": 7555,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 7545,
											"end": 7551,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 7542,
											"end": 7556,
											"name": "LT",
											"source": 26
										},
										{
											"begin": 7522,
											"end": 7540,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 7519,
											"end": 7557,
											"name": "SUB",
											"source": 26
										},
										{
											"begin": 7516,
											"end": 7600,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "253"
										},
										{
											"begin": 7516,
											"end": 7600,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 7572,
											"end": 7590,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "254"
										},
										{
											"begin": 7572,
											"end": 7590,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "153"
										},
										{
											"begin": 7572,
											"end": 7590,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7572,
											"end": 7590,
											"name": "tag",
											"source": 26,
											"value": "254"
										},
										{
											"begin": 7572,
											"end": 7590,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7516,
											"end": 7600,
											"name": "tag",
											"source": 26,
											"value": "253"
										},
										{
											"begin": 7516,
											"end": 7600,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7337,
											"end": 7606,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7286,
											"end": 7606,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 7286,
											"end": 7606,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7286,
											"end": 7606,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7286,
											"end": 7606,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7612,
											"end": 7672,
											"name": "tag",
											"source": 26,
											"value": "154"
										},
										{
											"begin": 7612,
											"end": 7672,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7640,
											"end": 7643,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 7661,
											"end": 7666,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 7654,
											"end": 7666,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7654,
											"end": 7666,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7612,
											"end": 7672,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 7612,
											"end": 7672,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7612,
											"end": 7672,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7612,
											"end": 7672,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7678,
											"end": 7820,
											"name": "tag",
											"source": 26,
											"value": "155"
										},
										{
											"begin": 7678,
											"end": 7820,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7728,
											"end": 7737,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 7761,
											"end": 7814,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "257"
										},
										{
											"begin": 7779,
											"end": 7813,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "258"
										},
										{
											"begin": 7788,
											"end": 7812,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "259"
										},
										{
											"begin": 7806,
											"end": 7811,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 7788,
											"end": 7812,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "132"
										},
										{
											"begin": 7788,
											"end": 7812,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7788,
											"end": 7812,
											"name": "tag",
											"source": 26,
											"value": "259"
										},
										{
											"begin": 7788,
											"end": 7812,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7779,
											"end": 7813,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "154"
										},
										{
											"begin": 7779,
											"end": 7813,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7779,
											"end": 7813,
											"name": "tag",
											"source": 26,
											"value": "258"
										},
										{
											"begin": 7779,
											"end": 7813,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7761,
											"end": 7814,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "132"
										},
										{
											"begin": 7761,
											"end": 7814,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7761,
											"end": 7814,
											"name": "tag",
											"source": 26,
											"value": "257"
										},
										{
											"begin": 7761,
											"end": 7814,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7748,
											"end": 7814,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7748,
											"end": 7814,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7678,
											"end": 7820,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 7678,
											"end": 7820,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7678,
											"end": 7820,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7678,
											"end": 7820,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7826,
											"end": 7952,
											"name": "tag",
											"source": 26,
											"value": "156"
										},
										{
											"begin": 7826,
											"end": 7952,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7876,
											"end": 7885,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 7909,
											"end": 7946,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "261"
										},
										{
											"begin": 7940,
											"end": 7945,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 7909,
											"end": 7946,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "155"
										},
										{
											"begin": 7909,
											"end": 7946,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7909,
											"end": 7946,
											"name": "tag",
											"source": 26,
											"value": "261"
										},
										{
											"begin": 7909,
											"end": 7946,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 7896,
											"end": 7946,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7896,
											"end": 7946,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7826,
											"end": 7952,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 7826,
											"end": 7952,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7826,
											"end": 7952,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7826,
											"end": 7952,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 7958,
											"end": 8109,
											"name": "tag",
											"source": 26,
											"value": "157"
										},
										{
											"begin": 7958,
											"end": 8109,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8033,
											"end": 8042,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 8066,
											"end": 8103,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "263"
										},
										{
											"begin": 8097,
											"end": 8102,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 8066,
											"end": 8103,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "156"
										},
										{
											"begin": 8066,
											"end": 8103,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8066,
											"end": 8103,
											"name": "tag",
											"source": 26,
											"value": "263"
										},
										{
											"begin": 8066,
											"end": 8103,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8053,
											"end": 8103,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 8053,
											"end": 8103,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7958,
											"end": 8109,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 7958,
											"end": 8109,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 7958,
											"end": 8109,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 7958,
											"end": 8109,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8115,
											"end": 8296,
											"name": "tag",
											"source": 26,
											"value": "158"
										},
										{
											"begin": 8115,
											"end": 8296,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8227,
											"end": 8289,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "265"
										},
										{
											"begin": 8283,
											"end": 8288,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 8227,
											"end": 8289,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "157"
										},
										{
											"begin": 8227,
											"end": 8289,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8227,
											"end": 8289,
											"name": "tag",
											"source": 26,
											"value": "265"
										},
										{
											"begin": 8227,
											"end": 8289,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8222,
											"end": 8225,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 8215,
											"end": 8290,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 8115,
											"end": 8296,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8115,
											"end": 8296,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8115,
											"end": 8296,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8302,
											"end": 8794,
											"name": "tag",
											"source": 26,
											"value": "42"
										},
										{
											"begin": 8302,
											"end": 8794,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8476,
											"end": 8480,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 8514,
											"end": 8516,
											"name": "PUSH",
											"source": 26,
											"value": "60"
										},
										{
											"begin": 8503,
											"end": 8512,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 8499,
											"end": 8517,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 8491,
											"end": 8517,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 8491,
											"end": 8517,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8527,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "267"
										},
										{
											"begin": 8620,
											"end": 8621,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 8609,
											"end": 8618,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 8605,
											"end": 8622,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 8596,
											"end": 8602,
											"name": "DUP7",
											"source": 26
										},
										{
											"begin": 8527,
											"end": 8623,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "158"
										},
										{
											"begin": 8527,
											"end": 8623,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8527,
											"end": 8623,
											"name": "tag",
											"source": 26,
											"value": "267"
										},
										{
											"begin": 8527,
											"end": 8623,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8633,
											"end": 8705,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "268"
										},
										{
											"begin": 8701,
											"end": 8703,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 8690,
											"end": 8699,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 8686,
											"end": 8704,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 8677,
											"end": 8683,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 8633,
											"end": 8705,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "151"
										},
										{
											"begin": 8633,
											"end": 8705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8633,
											"end": 8705,
											"name": "tag",
											"source": 26,
											"value": "268"
										},
										{
											"begin": 8633,
											"end": 8705,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8715,
											"end": 8787,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "269"
										},
										{
											"begin": 8783,
											"end": 8785,
											"name": "PUSH",
											"source": 26,
											"value": "40"
										},
										{
											"begin": 8772,
											"end": 8781,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 8768,
											"end": 8786,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 8759,
											"end": 8765,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 8715,
											"end": 8787,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "151"
										},
										{
											"begin": 8715,
											"end": 8787,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8715,
											"end": 8787,
											"name": "tag",
											"source": 26,
											"value": "269"
										},
										{
											"begin": 8715,
											"end": 8787,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8302,
											"end": 8794,
											"name": "SWAP5",
											"source": 26
										},
										{
											"begin": 8302,
											"end": 8794,
											"name": "SWAP4",
											"source": 26
										},
										{
											"begin": 8302,
											"end": 8794,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8302,
											"end": 8794,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8302,
											"end": 8794,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8302,
											"end": 8794,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8302,
											"end": 8794,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8800,
											"end": 8943,
											"name": "tag",
											"source": 26,
											"value": "159"
										},
										{
											"begin": 8800,
											"end": 8943,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8857,
											"end": 8862,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 8888,
											"end": 8894,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 8882,
											"end": 8895,
											"name": "MLOAD",
											"source": 26
										},
										{
											"begin": 8873,
											"end": 8895,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 8873,
											"end": 8895,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8904,
											"end": 8937,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "271"
										},
										{
											"begin": 8931,
											"end": 8936,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 8904,
											"end": 8937,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "137"
										},
										{
											"begin": 8904,
											"end": 8937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8904,
											"end": 8937,
											"name": "tag",
											"source": 26,
											"value": "271"
										},
										{
											"begin": 8904,
											"end": 8937,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8800,
											"end": 8943,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 8800,
											"end": 8943,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 8800,
											"end": 8943,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8800,
											"end": 8943,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8800,
											"end": 8943,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 8949,
											"end": 9040,
											"name": "tag",
											"source": 26,
											"value": "160"
										},
										{
											"begin": 8949,
											"end": 9040,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 8984,
											"end": 8991,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 9028,
											"end": 9033,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 9024,
											"end": 9026,
											"name": "PUSH",
											"source": 26,
											"value": "B"
										},
										{
											"begin": 9013,
											"end": 9034,
											"name": "SIGNEXTEND",
											"source": 26
										},
										{
											"begin": 9002,
											"end": 9034,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 9002,
											"end": 9034,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8949,
											"end": 9040,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 8949,
											"end": 9040,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 8949,
											"end": 9040,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 8949,
											"end": 9040,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 9046,
											"end": 9164,
											"name": "tag",
											"source": 26,
											"value": "161"
										},
										{
											"begin": 9046,
											"end": 9164,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9117,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "274"
										},
										{
											"begin": 9133,
											"end": 9138,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 9117,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "160"
										},
										{
											"begin": 9117,
											"end": 9139,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 9117,
											"end": 9139,
											"name": "tag",
											"source": 26,
											"value": "274"
										},
										{
											"begin": 9117,
											"end": 9139,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9110,
											"end": 9115,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 9107,
											"end": 9140,
											"name": "EQ",
											"source": 26
										},
										{
											"begin": 9097,
											"end": 9158,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "275"
										},
										{
											"begin": 9097,
											"end": 9158,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 9154,
											"end": 9155,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 9151,
											"end": 9152,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 9144,
											"end": 9156,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 9097,
											"end": 9158,
											"name": "tag",
											"source": 26,
											"value": "275"
										},
										{
											"begin": 9097,
											"end": 9158,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9046,
											"end": 9164,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9046,
											"end": 9164,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 9170,
											"end": 9309,
											"name": "tag",
											"source": 26,
											"value": "162"
										},
										{
											"begin": 9170,
											"end": 9309,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9225,
											"end": 9230,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 9256,
											"end": 9262,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 9250,
											"end": 9263,
											"name": "MLOAD",
											"source": 26
										},
										{
											"begin": 9241,
											"end": 9263,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 9241,
											"end": 9263,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9272,
											"end": 9303,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "277"
										},
										{
											"begin": 9297,
											"end": 9302,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 9272,
											"end": 9303,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "161"
										},
										{
											"begin": 9272,
											"end": 9303,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 9272,
											"end": 9303,
											"name": "tag",
											"source": 26,
											"value": "277"
										},
										{
											"begin": 9272,
											"end": 9303,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9170,
											"end": 9309,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 9170,
											"end": 9309,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 9170,
											"end": 9309,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9170,
											"end": 9309,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9170,
											"end": 9309,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 9315,
											"end": 10131,
											"name": "tag",
											"source": 26,
											"value": "46"
										},
										{
											"begin": 9315,
											"end": 10131,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9410,
											"end": 9416,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 9418,
											"end": 9424,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 9426,
											"end": 9432,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 9434,
											"end": 9440,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 9483,
											"end": 9486,
											"name": "PUSH",
											"source": 26,
											"value": "80"
										},
										{
											"begin": 9471,
											"end": 9480,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 9462,
											"end": 9469,
											"name": "DUP8",
											"source": 26
										},
										{
											"begin": 9458,
											"end": 9481,
											"name": "SUB",
											"source": 26
										},
										{
											"begin": 9454,
											"end": 9487,
											"name": "SLT",
											"source": 26
										},
										{
											"begin": 9451,
											"end": 9571,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 9451,
											"end": 9571,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "279"
										},
										{
											"begin": 9451,
											"end": 9571,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 9490,
											"end": 9569,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "280"
										},
										{
											"begin": 9490,
											"end": 9569,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "130"
										},
										{
											"begin": 9490,
											"end": 9569,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 9490,
											"end": 9569,
											"name": "tag",
											"source": 26,
											"value": "280"
										},
										{
											"begin": 9490,
											"end": 9569,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9451,
											"end": 9571,
											"name": "tag",
											"source": 26,
											"value": "279"
										},
										{
											"begin": 9451,
											"end": 9571,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9610,
											"end": 9611,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 9635,
											"end": 9699,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "281"
										},
										{
											"begin": 9691,
											"end": 9698,
											"name": "DUP8",
											"source": 26
										},
										{
											"begin": 9682,
											"end": 9688,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 9671,
											"end": 9680,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 9667,
											"end": 9689,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 9635,
											"end": 9699,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "159"
										},
										{
											"begin": 9635,
											"end": 9699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 9635,
											"end": 9699,
											"name": "tag",
											"source": 26,
											"value": "281"
										},
										{
											"begin": 9635,
											"end": 9699,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9625,
											"end": 9699,
											"name": "SWAP5",
											"source": 26
										},
										{
											"begin": 9625,
											"end": 9699,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9581,
											"end": 9709,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9748,
											"end": 9750,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 9774,
											"end": 9836,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "282"
										},
										{
											"begin": 9828,
											"end": 9835,
											"name": "DUP8",
											"source": 26
										},
										{
											"begin": 9819,
											"end": 9825,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 9808,
											"end": 9817,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 9804,
											"end": 9826,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 9774,
											"end": 9836,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "162"
										},
										{
											"begin": 9774,
											"end": 9836,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 9774,
											"end": 9836,
											"name": "tag",
											"source": 26,
											"value": "282"
										},
										{
											"begin": 9774,
											"end": 9836,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9764,
											"end": 9836,
											"name": "SWAP4",
											"source": 26
										},
										{
											"begin": 9764,
											"end": 9836,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9719,
											"end": 9846,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9885,
											"end": 9887,
											"name": "PUSH",
											"source": 26,
											"value": "40"
										},
										{
											"begin": 9911,
											"end": 9975,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "283"
										},
										{
											"begin": 9967,
											"end": 9974,
											"name": "DUP8",
											"source": 26
										},
										{
											"begin": 9958,
											"end": 9964,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 9947,
											"end": 9956,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 9943,
											"end": 9965,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 9911,
											"end": 9975,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "159"
										},
										{
											"begin": 9911,
											"end": 9975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 9911,
											"end": 9975,
											"name": "tag",
											"source": 26,
											"value": "283"
										},
										{
											"begin": 9911,
											"end": 9975,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 9901,
											"end": 9975,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 9901,
											"end": 9975,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9856,
											"end": 9985,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 10024,
											"end": 10026,
											"name": "PUSH",
											"source": 26,
											"value": "60"
										},
										{
											"begin": 10050,
											"end": 10114,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "284"
										},
										{
											"begin": 10106,
											"end": 10113,
											"name": "DUP8",
											"source": 26
										},
										{
											"begin": 10097,
											"end": 10103,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 10086,
											"end": 10095,
											"name": "DUP9",
											"source": 26
										},
										{
											"begin": 10082,
											"end": 10104,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 10050,
											"end": 10114,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "159"
										},
										{
											"begin": 10050,
											"end": 10114,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 10050,
											"end": 10114,
											"name": "tag",
											"source": 26,
											"value": "284"
										},
										{
											"begin": 10050,
											"end": 10114,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10040,
											"end": 10114,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 10040,
											"end": 10114,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9995,
											"end": 10124,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9315,
											"end": 10131,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 9315,
											"end": 10131,
											"name": "SWAP6",
											"source": 26
										},
										{
											"begin": 9315,
											"end": 10131,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 9315,
											"end": 10131,
											"name": "SWAP5",
											"source": 26
										},
										{
											"begin": 9315,
											"end": 10131,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9315,
											"end": 10131,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 9315,
											"end": 10131,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 9315,
											"end": 10131,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 10137,
											"end": 10317,
											"name": "tag",
											"source": 26,
											"value": "70"
										},
										{
											"begin": 10137,
											"end": 10317,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10185,
											"end": 10262,
											"name": "PUSH",
											"source": 26,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10182,
											"end": 10183,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 10175,
											"end": 10263,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 10282,
											"end": 10286,
											"name": "PUSH",
											"source": 26,
											"value": "12"
										},
										{
											"begin": 10279,
											"end": 10280,
											"name": "PUSH",
											"source": 26,
											"value": "4"
										},
										{
											"begin": 10272,
											"end": 10287,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 10306,
											"end": 10310,
											"name": "PUSH",
											"source": 26,
											"value": "24"
										},
										{
											"begin": 10303,
											"end": 10304,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 10296,
											"end": 10311,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 10323,
											"end": 10503,
											"name": "tag",
											"source": 26,
											"value": "101"
										},
										{
											"begin": 10323,
											"end": 10503,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10371,
											"end": 10448,
											"name": "PUSH",
											"source": 26,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10368,
											"end": 10369,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 10361,
											"end": 10449,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 10468,
											"end": 10472,
											"name": "PUSH",
											"source": 26,
											"value": "32"
										},
										{
											"begin": 10465,
											"end": 10466,
											"name": "PUSH",
											"source": 26,
											"value": "4"
										},
										{
											"begin": 10458,
											"end": 10473,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 10492,
											"end": 10496,
											"name": "PUSH",
											"source": 26,
											"value": "24"
										},
										{
											"begin": 10489,
											"end": 10490,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 10482,
											"end": 10497,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 10509,
											"end": 10689,
											"name": "tag",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 10509,
											"end": 10689,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10557,
											"end": 10634,
											"name": "PUSH",
											"source": 26,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10554,
											"end": 10555,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 10547,
											"end": 10635,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 10654,
											"end": 10658,
											"name": "PUSH",
											"source": 26,
											"value": "11"
										},
										{
											"begin": 10651,
											"end": 10652,
											"name": "PUSH",
											"source": 26,
											"value": "4"
										},
										{
											"begin": 10644,
											"end": 10659,
											"name": "MSTORE",
											"source": 26
										},
										{
											"begin": 10678,
											"end": 10682,
											"name": "PUSH",
											"source": 26,
											"value": "24"
										},
										{
											"begin": 10675,
											"end": 10676,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 10668,
											"end": 10683,
											"name": "REVERT",
											"source": 26
										},
										{
											"begin": 10695,
											"end": 10866,
											"name": "tag",
											"source": 26,
											"value": "110"
										},
										{
											"begin": 10695,
											"end": 10866,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10734,
											"end": 10737,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 10757,
											"end": 10781,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "289"
										},
										{
											"begin": 10775,
											"end": 10780,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 10757,
											"end": 10781,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 10757,
											"end": 10781,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 10757,
											"end": 10781,
											"name": "tag",
											"source": 26,
											"value": "289"
										},
										{
											"begin": 10757,
											"end": 10781,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10748,
											"end": 10781,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 10748,
											"end": 10781,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 10803,
											"end": 10807,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 10796,
											"end": 10801,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 10793,
											"end": 10808,
											"name": "SUB",
											"source": 26
										},
										{
											"begin": 10790,
											"end": 10831,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "290"
										},
										{
											"begin": 10790,
											"end": 10831,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 10811,
											"end": 10829,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "291"
										},
										{
											"begin": 10811,
											"end": 10829,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 10811,
											"end": 10829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 10811,
											"end": 10829,
											"name": "tag",
											"source": 26,
											"value": "291"
										},
										{
											"begin": 10811,
											"end": 10829,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10790,
											"end": 10831,
											"name": "tag",
											"source": 26,
											"value": "290"
										},
										{
											"begin": 10790,
											"end": 10831,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10858,
											"end": 10859,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 10851,
											"end": 10856,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 10847,
											"end": 10860,
											"name": "SUB",
											"source": 26
										},
										{
											"begin": 10840,
											"end": 10860,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 10840,
											"end": 10860,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 10695,
											"end": 10866,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 10695,
											"end": 10866,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 10695,
											"end": 10866,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 10695,
											"end": 10866,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 10872,
											"end": 11282,
											"name": "tag",
											"source": 26,
											"value": "112"
										},
										{
											"begin": 10872,
											"end": 11282,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10912,
											"end": 10919,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 10935,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "293"
										},
										{
											"begin": 10953,
											"end": 10954,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 10935,
											"end": 10955,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 10935,
											"end": 10955,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 10935,
											"end": 10955,
											"name": "tag",
											"source": 26,
											"value": "293"
										},
										{
											"begin": 10935,
											"end": 10955,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10930,
											"end": 10955,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 10930,
											"end": 10955,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 10969,
											"end": 10989,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "294"
										},
										{
											"begin": 10987,
											"end": 10988,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 10969,
											"end": 10989,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 10969,
											"end": 10989,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 10969,
											"end": 10989,
											"name": "tag",
											"source": 26,
											"value": "294"
										},
										{
											"begin": 10969,
											"end": 10989,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10964,
											"end": 10989,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 10964,
											"end": 10989,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11024,
											"end": 11025,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11021,
											"end": 11022,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11017,
											"end": 11026,
											"name": "MUL",
											"source": 26
										},
										{
											"begin": 11046,
											"end": 11076,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "295"
										},
										{
											"begin": 11064,
											"end": 11075,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 11046,
											"end": 11076,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 11046,
											"end": 11076,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11046,
											"end": 11076,
											"name": "tag",
											"source": 26,
											"value": "295"
										},
										{
											"begin": 11046,
											"end": 11076,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11035,
											"end": 11076,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 11035,
											"end": 11076,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11225,
											"end": 11226,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11216,
											"end": 11223,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11212,
											"end": 11227,
											"name": "DIV",
											"source": 26
										},
										{
											"begin": 11209,
											"end": 11210,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 11206,
											"end": 11228,
											"name": "EQ",
											"source": 26
										},
										{
											"begin": 11186,
											"end": 11187,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 11179,
											"end": 11188,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 11159,
											"end": 11242,
											"name": "OR",
											"source": 26
										},
										{
											"begin": 11136,
											"end": 11275,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "296"
										},
										{
											"begin": 11136,
											"end": 11275,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 11255,
											"end": 11273,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "297"
										},
										{
											"begin": 11255,
											"end": 11273,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 11255,
											"end": 11273,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11255,
											"end": 11273,
											"name": "tag",
											"source": 26,
											"value": "297"
										},
										{
											"begin": 11255,
											"end": 11273,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11136,
											"end": 11275,
											"name": "tag",
											"source": 26,
											"value": "296"
										},
										{
											"begin": 11136,
											"end": 11275,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 10920,
											"end": 11282,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 10872,
											"end": 11282,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 10872,
											"end": 11282,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 10872,
											"end": 11282,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 10872,
											"end": 11282,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 10872,
											"end": 11282,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11288,
											"end": 11482,
											"name": "tag",
											"source": 26,
											"value": "116"
										},
										{
											"begin": 11288,
											"end": 11482,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11328,
											"end": 11332,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 11348,
											"end": 11368,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "299"
										},
										{
											"begin": 11366,
											"end": 11367,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11348,
											"end": 11368,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 11348,
											"end": 11368,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11348,
											"end": 11368,
											"name": "tag",
											"source": 26,
											"value": "299"
										},
										{
											"begin": 11348,
											"end": 11368,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11343,
											"end": 11368,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 11343,
											"end": 11368,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11382,
											"end": 11402,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "300"
										},
										{
											"begin": 11400,
											"end": 11401,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 11382,
											"end": 11402,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 11382,
											"end": 11402,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11382,
											"end": 11402,
											"name": "tag",
											"source": 26,
											"value": "300"
										},
										{
											"begin": 11382,
											"end": 11402,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11377,
											"end": 11402,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 11377,
											"end": 11402,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11426,
											"end": 11427,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11423,
											"end": 11424,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11419,
											"end": 11428,
											"name": "SUB",
											"source": 26
										},
										{
											"begin": 11411,
											"end": 11428,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 11411,
											"end": 11428,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11450,
											"end": 11451,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 11444,
											"end": 11448,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 11441,
											"end": 11452,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 11438,
											"end": 11475,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 11438,
											"end": 11475,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "301"
										},
										{
											"begin": 11438,
											"end": 11475,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 11455,
											"end": 11473,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "302"
										},
										{
											"begin": 11455,
											"end": 11473,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 11455,
											"end": 11473,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11455,
											"end": 11473,
											"name": "tag",
											"source": 26,
											"value": "302"
										},
										{
											"begin": 11455,
											"end": 11473,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11438,
											"end": 11475,
											"name": "tag",
											"source": 26,
											"value": "301"
										},
										{
											"begin": 11438,
											"end": 11475,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11288,
											"end": 11482,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 11288,
											"end": 11482,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 11288,
											"end": 11482,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11288,
											"end": 11482,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11288,
											"end": 11482,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11488,
											"end": 11679,
											"name": "tag",
											"source": 26,
											"value": "118"
										},
										{
											"begin": 11488,
											"end": 11679,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11528,
											"end": 11531,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 11547,
											"end": 11567,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "304"
										},
										{
											"begin": 11565,
											"end": 11566,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11547,
											"end": 11567,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 11547,
											"end": 11567,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11547,
											"end": 11567,
											"name": "tag",
											"source": 26,
											"value": "304"
										},
										{
											"begin": 11547,
											"end": 11567,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 11542,
											"end": 11567,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11581,
											"end": 11601,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "305"
										},
										{
											"begin": 11599,
											"end": 11600,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 11581,
											"end": 11601,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 11581,
											"end": 11601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11581,
											"end": 11601,
											"name": "tag",
											"source": 26,
											"value": "305"
										},
										{
											"begin": 11581,
											"end": 11601,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11576,
											"end": 11601,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 11576,
											"end": 11601,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11624,
											"end": 11625,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11621,
											"end": 11622,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11617,
											"end": 11626,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 11610,
											"end": 11626,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 11610,
											"end": 11626,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11645,
											"end": 11648,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 11642,
											"end": 11643,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11639,
											"end": 11649,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 11636,
											"end": 11672,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 11636,
											"end": 11672,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "306"
										},
										{
											"begin": 11636,
											"end": 11672,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 11652,
											"end": 11670,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "307"
										},
										{
											"begin": 11652,
											"end": 11670,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 11652,
											"end": 11670,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11652,
											"end": 11670,
											"name": "tag",
											"source": 26,
											"value": "307"
										},
										{
											"begin": 11652,
											"end": 11670,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11636,
											"end": 11672,
											"name": "tag",
											"source": 26,
											"value": "306"
										},
										{
											"begin": 11636,
											"end": 11672,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11488,
											"end": 11679,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 11488,
											"end": 11679,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 11488,
											"end": 11679,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11488,
											"end": 11679,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11488,
											"end": 11679,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11685,
											"end": 11918,
											"name": "tag",
											"source": 26,
											"value": "124"
										},
										{
											"begin": 11685,
											"end": 11918,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11724,
											"end": 11727,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 11747,
											"end": 11771,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "309"
										},
										{
											"begin": 11765,
											"end": 11770,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11747,
											"end": 11771,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 11747,
											"end": 11771,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11747,
											"end": 11771,
											"name": "tag",
											"source": 26,
											"value": "309"
										},
										{
											"begin": 11747,
											"end": 11771,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11738,
											"end": 11771,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 11738,
											"end": 11771,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11793,
											"end": 11859,
											"name": "PUSH",
											"source": 26,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11786,
											"end": 11791,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11783,
											"end": 11860,
											"name": "SUB",
											"source": 26
										},
										{
											"begin": 11780,
											"end": 11883,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "310"
										},
										{
											"begin": 11780,
											"end": 11883,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 11863,
											"end": 11881,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "311"
										},
										{
											"begin": 11863,
											"end": 11881,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 11863,
											"end": 11881,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11863,
											"end": 11881,
											"name": "tag",
											"source": 26,
											"value": "311"
										},
										{
											"begin": 11863,
											"end": 11881,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11780,
											"end": 11883,
											"name": "tag",
											"source": 26,
											"value": "310"
										},
										{
											"begin": 11780,
											"end": 11883,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11910,
											"end": 11911,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 11903,
											"end": 11908,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 11899,
											"end": 11912,
											"name": "ADD",
											"source": 26
										},
										{
											"begin": 11892,
											"end": 11912,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 11892,
											"end": 11912,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11685,
											"end": 11918,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 11685,
											"end": 11918,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 11685,
											"end": 11918,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11685,
											"end": 11918,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 11924,
											"end": 12026,
											"name": "tag",
											"source": 26,
											"value": "164"
										},
										{
											"begin": 11924,
											"end": 12026,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 11966,
											"end": 11974,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 12013,
											"end": 12018,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 12010,
											"end": 12011,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 12006,
											"end": 12019,
											"name": "SHR",
											"source": 26
										},
										{
											"begin": 11985,
											"end": 12019,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 11985,
											"end": 12019,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11924,
											"end": 12026,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 11924,
											"end": 12026,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 11924,
											"end": 12026,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 11924,
											"end": 12026,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 12032,
											"end": 12880,
											"name": "tag",
											"source": 26,
											"value": "165"
										},
										{
											"begin": 12032,
											"end": 12880,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 12093,
											"end": 12098,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 12100,
											"end": 12104,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 12124,
											"end": 12130,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 12115,
											"end": 12130,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 12115,
											"end": 12130,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12148,
											"end": 12153,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 12139,
											"end": 12153,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 12139,
											"end": 12153,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12162,
											"end": 12874,
											"name": "tag",
											"source": 26,
											"value": "314"
										},
										{
											"begin": 12162,
											"end": 12874,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 12183,
											"end": 12184,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 12173,
											"end": 12181,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 12170,
											"end": 12185,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 12162,
											"end": 12874,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 12162,
											"end": 12874,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "316"
										},
										{
											"begin": 12162,
											"end": 12874,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 12278,
											"end": 12282,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 12273,
											"end": 12276,
											"name": "DUP7",
											"source": 26
										},
										{
											"begin": 12269,
											"end": 12283,
											"name": "DIV",
											"source": 26
										},
										{
											"begin": 12263,
											"end": 12267,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 12260,
											"end": 12284,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 12257,
											"end": 12307,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 12257,
											"end": 12307,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "317"
										},
										{
											"begin": 12257,
											"end": 12307,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 12287,
											"end": 12305,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "318"
										},
										{
											"begin": 12287,
											"end": 12305,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 12287,
											"end": 12305,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 12287,
											"end": 12305,
											"name": "tag",
											"source": 26,
											"value": "318"
										},
										{
											"begin": 12287,
											"end": 12305,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 12257,
											"end": 12307,
											"name": "tag",
											"source": 26,
											"value": "317"
										},
										{
											"begin": 12257,
											"end": 12307,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 12337,
											"end": 12338,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 12327,
											"end": 12335,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 12323,
											"end": 12339,
											"name": "AND",
											"source": 26
										},
										{
											"begin": 12320,
											"end": 12771,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 12320,
											"end": 12771,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "319"
										},
										{
											"begin": 12320,
											"end": 12771,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 12752,
											"end": 12756,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 12745,
											"end": 12750,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 12741,
											"end": 12757,
											"name": "MUL",
											"source": 26
										},
										{
											"begin": 12732,
											"end": 12757,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 12732,
											"end": 12757,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12320,
											"end": 12771,
											"name": "tag",
											"source": 26,
											"value": "319"
										},
										{
											"begin": 12320,
											"end": 12771,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 12802,
											"end": 12806,
											"name": "DUP1",
											"source": 26
										},
										{
											"begin": 12796,
											"end": 12800,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 12792,
											"end": 12807,
											"name": "MUL",
											"source": 26
										},
										{
											"begin": 12784,
											"end": 12807,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 12784,
											"end": 12807,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12832,
											"end": 12864,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "320"
										},
										{
											"begin": 12855,
											"end": 12863,
											"name": "DUP6",
											"source": 26
										},
										{
											"begin": 12832,
											"end": 12864,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "164"
										},
										{
											"begin": 12832,
											"end": 12864,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 12832,
											"end": 12864,
											"name": "tag",
											"source": 26,
											"value": "320"
										},
										{
											"begin": 12832,
											"end": 12864,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 12820,
											"end": 12864,
											"name": "SWAP5",
											"source": 26
										},
										{
											"begin": 12820,
											"end": 12864,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12162,
											"end": 12874,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "314"
										},
										{
											"begin": 12162,
											"end": 12874,
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 12162,
											"end": 12874,
											"name": "tag",
											"source": 26,
											"value": "316"
										},
										{
											"begin": 12162,
											"end": 12874,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 12032,
											"end": 12880,
											"name": "SWAP5",
											"source": 26
										},
										{
											"begin": 12032,
											"end": 12880,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12032,
											"end": 12880,
											"name": "SWAP5",
											"source": 26
										},
										{
											"begin": 12032,
											"end": 12880,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 12032,
											"end": 12880,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12032,
											"end": 12880,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12032,
											"end": 12880,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12032,
											"end": 12880,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 12886,
											"end": 13959,
											"name": "tag",
											"source": 26,
											"value": "166"
										},
										{
											"begin": 12886,
											"end": 13959,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 12940,
											"end": 12945,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 13131,
											"end": 13139,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 13121,
											"end": 13161,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "322"
										},
										{
											"begin": 13121,
											"end": 13161,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 13152,
											"end": 13153,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 13143,
											"end": 13153,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 13143,
											"end": 13153,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13154,
											"end": 13159,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "321"
										},
										{
											"begin": 13154,
											"end": 13159,
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13121,
											"end": 13161,
											"name": "tag",
											"source": 26,
											"value": "322"
										},
										{
											"begin": 13121,
											"end": 13161,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13180,
											"end": 13184,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 13170,
											"end": 13206,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "323"
										},
										{
											"begin": 13170,
											"end": 13206,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 13197,
											"end": 13198,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 13188,
											"end": 13198,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 13188,
											"end": 13198,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13199,
											"end": 13204,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "321"
										},
										{
											"begin": 13199,
											"end": 13204,
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13170,
											"end": 13206,
											"name": "tag",
											"source": 26,
											"value": "323"
										},
										{
											"begin": 13170,
											"end": 13206,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13266,
											"end": 13270,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 13314,
											"end": 13315,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 13309,
											"end": 13336,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 13309,
											"end": 13336,
											"name": "EQ",
											"source": 26
										},
										{
											"begin": 13309,
											"end": 13336,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "325"
										},
										{
											"begin": 13309,
											"end": 13336,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 13350,
											"end": 13351,
											"name": "PUSH",
											"source": 26,
											"value": "2"
										},
										{
											"begin": 13345,
											"end": 13536,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 13345,
											"end": 13536,
											"name": "EQ",
											"source": 26
										},
										{
											"begin": 13345,
											"end": 13536,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "326"
										},
										{
											"begin": 13345,
											"end": 13536,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 13259,
											"end": 13536,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "324"
										},
										{
											"begin": 13259,
											"end": 13536,
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13309,
											"end": 13336,
											"name": "tag",
											"source": 26,
											"value": "325"
										},
										{
											"begin": 13309,
											"end": 13336,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13327,
											"end": 13328,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 13318,
											"end": 13328,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 13318,
											"end": 13328,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13329,
											"end": 13334,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13329,
											"end": 13334,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "321"
										},
										{
											"begin": 13329,
											"end": 13334,
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13345,
											"end": 13536,
											"name": "tag",
											"source": 26,
											"value": "326"
										},
										{
											"begin": 13345,
											"end": 13536,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13390,
											"end": 13393,
											"name": "PUSH",
											"source": 26,
											"value": "FF"
										},
										{
											"begin": 13380,
											"end": 13388,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 13377,
											"end": 13394,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 13374,
											"end": 13417,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 13374,
											"end": 13417,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "327"
										},
										{
											"begin": 13374,
											"end": 13417,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 13397,
											"end": 13415,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "328"
										},
										{
											"begin": 13397,
											"end": 13415,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 13397,
											"end": 13415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13397,
											"end": 13415,
											"name": "tag",
											"source": 26,
											"value": "328"
										},
										{
											"begin": 13397,
											"end": 13415,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13374,
											"end": 13417,
											"name": "tag",
											"source": 26,
											"value": "327"
										},
										{
											"begin": 13374,
											"end": 13417,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13446,
											"end": 13454,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 13443,
											"end": 13444,
											"name": "PUSH",
											"source": 26,
											"value": "2"
										},
										{
											"begin": 13439,
											"end": 13455,
											"name": "EXP",
											"source": 26
										},
										{
											"begin": 13430,
											"end": 13455,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 13430,
											"end": 13455,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13481,
											"end": 13484,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 13474,
											"end": 13479,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 13471,
											"end": 13485,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 13468,
											"end": 13508,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 13468,
											"end": 13508,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "329"
										},
										{
											"begin": 13468,
											"end": 13508,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 13488,
											"end": 13506,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "330"
										},
										{
											"begin": 13488,
											"end": 13506,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 13488,
											"end": 13506,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13488,
											"end": 13506,
											"name": "tag",
											"source": 26,
											"value": "330"
										},
										{
											"begin": 13488,
											"end": 13506,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13468,
											"end": 13508,
											"name": "tag",
											"source": 26,
											"value": "329"
										},
										{
											"begin": 13468,
											"end": 13508,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13521,
											"end": 13526,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13521,
											"end": 13526,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "321"
										},
										{
											"begin": 13521,
											"end": 13526,
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13259,
											"end": 13536,
											"name": "tag",
											"source": 26,
											"value": "324"
										},
										{
											"begin": 13259,
											"end": 13536,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13259,
											"end": 13536,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13645,
											"end": 13647,
											"name": "PUSH",
											"source": 26,
											"value": "20"
										},
										{
											"begin": 13635,
											"end": 13643,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 13632,
											"end": 13648,
											"name": "LT",
											"source": 26
										},
										{
											"begin": 13626,
											"end": 13629,
											"name": "PUSH",
											"source": 26,
											"value": "133"
										},
										{
											"begin": 13620,
											"end": 13624,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 13617,
											"end": 13630,
											"name": "LT",
											"source": 26
										},
										{
											"begin": 13613,
											"end": 13649,
											"name": "AND",
											"source": 26
										},
										{
											"begin": 13595,
											"end": 13597,
											"name": "PUSH",
											"source": 26,
											"value": "4E"
										},
										{
											"begin": 13585,
											"end": 13593,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 13582,
											"end": 13598,
											"name": "LT",
											"source": 26
										},
										{
											"begin": 13577,
											"end": 13579,
											"name": "PUSH",
											"source": 26,
											"value": "B"
										},
										{
											"begin": 13571,
											"end": 13575,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 13568,
											"end": 13580,
											"name": "LT",
											"source": 26
										},
										{
											"begin": 13564,
											"end": 13599,
											"name": "AND",
											"source": 26
										},
										{
											"begin": 13548,
											"end": 13659,
											"name": "OR",
											"source": 26
										},
										{
											"begin": 13545,
											"end": 13791,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 13545,
											"end": 13791,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "331"
										},
										{
											"begin": 13545,
											"end": 13791,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 13701,
											"end": 13709,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 13695,
											"end": 13699,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 13691,
											"end": 13710,
											"name": "EXP",
											"source": 26
										},
										{
											"begin": 13682,
											"end": 13710,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 13682,
											"end": 13710,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13736,
											"end": 13739,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 13729,
											"end": 13734,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 13726,
											"end": 13740,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 13723,
											"end": 13763,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 13723,
											"end": 13763,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "332"
										},
										{
											"begin": 13723,
											"end": 13763,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 13743,
											"end": 13761,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "333"
										},
										{
											"begin": 13743,
											"end": 13761,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 13743,
											"end": 13761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13743,
											"end": 13761,
											"name": "tag",
											"source": 26,
											"value": "333"
										},
										{
											"begin": 13743,
											"end": 13761,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13723,
											"end": 13763,
											"name": "tag",
											"source": 26,
											"value": "332"
										},
										{
											"begin": 13723,
											"end": 13763,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13776,
											"end": 13781,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "321"
										},
										{
											"begin": 13776,
											"end": 13781,
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13545,
											"end": 13791,
											"name": "tag",
											"source": 26,
											"value": "331"
										},
										{
											"begin": 13545,
											"end": 13791,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13816,
											"end": 13858,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "334"
										},
										{
											"begin": 13854,
											"end": 13857,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 13844,
											"end": 13852,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 13838,
											"end": 13842,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 13835,
											"end": 13836,
											"name": "PUSH",
											"source": 26,
											"value": "1"
										},
										{
											"begin": 13816,
											"end": 13858,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "165"
										},
										{
											"begin": 13816,
											"end": 13858,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13816,
											"end": 13858,
											"name": "tag",
											"source": 26,
											"value": "334"
										},
										{
											"begin": 13816,
											"end": 13858,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13801,
											"end": 13858,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 13801,
											"end": 13858,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13801,
											"end": 13858,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 13801,
											"end": 13858,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13890,
											"end": 13894,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 13885,
											"end": 13888,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 13881,
											"end": 13895,
											"name": "DIV",
											"source": 26
										},
										{
											"begin": 13874,
											"end": 13879,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 13871,
											"end": 13896,
											"name": "GT",
											"source": 26
										},
										{
											"begin": 13868,
											"end": 13919,
											"name": "ISZERO",
											"source": 26
										},
										{
											"begin": 13868,
											"end": 13919,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "335"
										},
										{
											"begin": 13868,
											"end": 13919,
											"name": "JUMPI",
											"source": 26
										},
										{
											"begin": 13899,
											"end": 13917,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "336"
										},
										{
											"begin": 13899,
											"end": 13917,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "163"
										},
										{
											"begin": 13899,
											"end": 13917,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13899,
											"end": 13917,
											"name": "tag",
											"source": 26,
											"value": "336"
										},
										{
											"begin": 13899,
											"end": 13917,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13868,
											"end": 13919,
											"name": "tag",
											"source": 26,
											"value": "335"
										},
										{
											"begin": 13868,
											"end": 13919,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 13948,
											"end": 13952,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 13941,
											"end": 13946,
											"name": "DUP2",
											"source": 26
										},
										{
											"begin": 13937,
											"end": 13953,
											"name": "MUL",
											"source": 26
										},
										{
											"begin": 13928,
											"end": 13953,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 13928,
											"end": 13953,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12886,
											"end": 13959,
											"name": "tag",
											"source": 26,
											"value": "321"
										},
										{
											"begin": 12886,
											"end": 13959,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 12886,
											"end": 13959,
											"name": "SWAP4",
											"source": 26
										},
										{
											"begin": 12886,
											"end": 13959,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 12886,
											"end": 13959,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12886,
											"end": 13959,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12886,
											"end": 13959,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 12886,
											"end": 13959,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 13965,
											"end": 14250,
											"name": "tag",
											"source": 26,
											"value": "127"
										},
										{
											"begin": 13965,
											"end": 14250,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 14025,
											"end": 14030,
											"name": "PUSH",
											"source": 26,
											"value": "0"
										},
										{
											"begin": 14049,
											"end": 14072,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "338"
										},
										{
											"begin": 14067,
											"end": 14071,
											"name": "DUP3",
											"source": 26
										},
										{
											"begin": 14049,
											"end": 14072,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 14049,
											"end": 14072,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 14049,
											"end": 14072,
											"name": "tag",
											"source": 26,
											"value": "338"
										},
										{
											"begin": 14049,
											"end": 14072,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 14041,
											"end": 14072,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 14041,
											"end": 14072,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 14093,
											"end": 14120,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "339"
										},
										{
											"begin": 14111,
											"end": 14119,
											"name": "DUP4",
											"source": 26
										},
										{
											"begin": 14093,
											"end": 14120,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "136"
										},
										{
											"begin": 14093,
											"end": 14120,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 14093,
											"end": 14120,
											"name": "tag",
											"source": 26,
											"value": "339"
										},
										{
											"begin": 14093,
											"end": 14120,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 14081,
											"end": 14120,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 14081,
											"end": 14120,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 14139,
											"end": 14243,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "340"
										},
										{
											"begin": 14176,
											"end": 14242,
											"name": "PUSH",
											"source": 26,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14166,
											"end": 14174,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 14160,
											"end": 14164,
											"name": "DUP5",
											"source": 26
										},
										{
											"begin": 14139,
											"end": 14243,
											"name": "PUSH [tag]",
											"source": 26,
											"value": "166"
										},
										{
											"begin": 14139,
											"end": 14243,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 26
										},
										{
											"begin": 14139,
											"end": 14243,
											"name": "tag",
											"source": 26,
											"value": "340"
										},
										{
											"begin": 14139,
											"end": 14243,
											"name": "JUMPDEST",
											"source": 26
										},
										{
											"begin": 14130,
											"end": 14243,
											"name": "SWAP1",
											"source": 26
										},
										{
											"begin": 14130,
											"end": 14243,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13965,
											"end": 14250,
											"name": "SWAP3",
											"source": 26
										},
										{
											"begin": 13965,
											"end": 14250,
											"name": "SWAP2",
											"source": 26
										},
										{
											"begin": 13965,
											"end": 14250,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13965,
											"end": 14250,
											"name": "POP",
											"source": 26
										},
										{
											"begin": 13965,
											"end": 14250,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 26
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC721/IERC721.sol",
								"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"@openzeppelin/contracts/token/ERC777/IERC777.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
								"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
								"premiere/IRegistry.sol",
								"premiere/Premiere.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"balanceOf(address,uint256)": "00fdd58e",
							"isSubscribed(address,address,string,string,string)": "bb79f587"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"profileId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"minFlowRate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"maxTimestamp\",\"type\":\"string\"}],\"name\":\"isSubscribed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"subscribed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"premiere/Premiere.sol\":\"Premiere\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0x8a191d6f5dcdfd97e8fbbe17382fa96f51dbaddea6ed704206e7cbda5d12cc65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5bed573cf54d2406d0e7566ab6cd37c31025c6fab3b5b8d8ef9b79b1cab098fd\",\"dweb:/ipfs/QmegphCXp9qTAvefUYyW8eGdaGQMLJ4JrEXELU7WhisRcS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]},\"premiere/IRegistry.sol\":{\"keccak256\":\"0x943209b5f4797b7dadf290f4bd6f985622f1ebf8066babce3d33f6f34477d089\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://c2694ee4c4a62c87a7ee88550b22bd341d3cabbea606f474403667a158ce57f6\",\"dweb:/ipfs/QmQu2XCSxau6LF4MsukgwrjV5PgSC1CnNGYDiZAEHhKesJ\"]},\"premiere/Premiere.sol\":{\"keccak256\":\"0xe8a47ca2d8c0b3cfa893d87800d792be39a63214cc9c2476d75f8dc69092e2a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46727cd4391dfcf24dc80bbc908faa109021e13169a9c6a73f3589d04ebcf633\",\"dweb:/ipfs/Qmaur446eTxVkfY1DqyBppACHq2g6YgPkcyQAxwJUzujGh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 4400,
								"contract": "premiere/Premiere.sol:Premiere",
								"label": "_cfaAddress",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 4403,
								"contract": "premiere/Premiere.sol:Premiere",
								"label": "_superTokenAddress",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 4406,
								"contract": "premiere/Premiere.sol:Premiere",
								"label": "_lensHubAddress",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 4409,
								"contract": "premiere/Premiere.sol:Premiere",
								"label": "_tbaRegistry",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 4412,
								"contract": "premiere/Premiere.sol:Premiere",
								"label": "_minFlowRate",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 4415,
								"contract": "premiere/Premiere.sol:Premiere",
								"label": "_maxTimestamp",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2676:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2668:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2690:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2682:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2702:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2694:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2694:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:42:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2728:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2728:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2727:6:0"
									},
									"scope": 77,
									"src": "2646:88:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2534:0",
							"usedErrors": []
						}
					],
					"src": "106:2631:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							624
						],
						"IERC721": [
							193
						]
					},
					"id": 194,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 80,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 194,
							"sourceUnit": 625,
							"src": "133:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 82,
										"name": "IERC165",
										"nameLocations": [
											"271:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 624,
										"src": "271:7:1"
									},
									"id": 83,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:1"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 81,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 193,
							"linearizedBaseContracts": [
								193,
								624
							],
							"name": "IERC721",
							"nameLocation": "260:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 92,
									"name": "Transfer",
									"nameLocation": "384:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "393:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 88,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "415:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 87,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "435:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 89,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:1"
									},
									"src": "378:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 101,
									"name": "Approval",
									"nameLocation": "571:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "580:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 94,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "603:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "629:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:1"
									},
									"src": "565:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 110,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "803:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "826:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "852:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 107,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:1"
									},
									"src": "782:85:1"
								},
								{
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 118,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "973:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "1011:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:1"
									},
									"scope": 193,
									"src": "954:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "1187:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "1227:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:1"
									},
									"scope": 193,
									"src": "1170:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1843:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1835:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1835:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1857:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1849:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1849:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1869:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1861:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1861:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1893:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1878:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 134,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1878:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:64:1"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1907:0:1"
									},
									"scope": 193,
									"src": "1809:99:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "1914:687:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2615:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2640:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2632:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 140,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2632:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2654:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2646:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2646:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2666:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2658:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2658:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2631:43:1"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2683:0:1"
									},
									"scope": 193,
									"src": "2606:78:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "2690:732:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3436:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3457:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "3449:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3449:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3471:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "3463:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3463:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3483:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "3475:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3448:43:1"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3500:0:1"
									},
									"scope": 193,
									"src": "3427:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "3507:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3973:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3989:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "3981:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3981:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4001:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "3993:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3993:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3980:29:1"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4018:0:1"
									},
									"scope": 193,
									"src": "3964:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "4025:309:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 174,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4348:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4374:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "4366:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4366:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4389:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "4384:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 170,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4384:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:33:1"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4407:0:1"
									},
									"scope": 193,
									"src": "4339:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 175,
										"nodeType": "StructuredDocumentation",
										"src": "4414:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 182,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4567:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4587:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "4579:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4579:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4578:17:1"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4627:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "4619:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4619:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4618:18:1"
									},
									"scope": 193,
									"src": "4558:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "4643:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4795:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4820:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "4812:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4835:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "4827:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4827:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4811:33:1"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "4868:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4868:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4867:6:1"
									},
									"scope": 193,
									"src": "4786:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 194,
							"src": "250:4626:1",
							"usedErrors": []
						}
					],
					"src": "108:4769:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							624
						],
						"IERC721": [
							193
						],
						"IERC721Metadata": [
							220
						]
					},
					"id": 221,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 195,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 196,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 221,
							"sourceUnit": 194,
							"src": "137:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 198,
										"name": "IERC721",
										"nameLocations": [
											"326:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 193,
										"src": "326:7:2"
									},
									"id": 199,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:2"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 197,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:2",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 220,
							"linearizedBaseContracts": [
								220,
								193,
								624
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:2",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 205,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:2"
									},
									"returnParameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "442:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 202,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:2"
									},
									"scope": 220,
									"src": "403:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:2",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "569:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 208,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:2"
									},
									"scope": 220,
									"src": "528:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:2",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "703:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "743:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 216,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:2"
									},
									"scope": 220,
									"src": "685:73:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 221,
							"src": "297:463:2",
							"usedErrors": []
						}
					],
					"src": "112:649:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
					"exportedSymbols": {
						"IERC777": [
							383
						]
					},
					"id": 384,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 222,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC777",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 223,
								"nodeType": "StructuredDocumentation",
								"src": "133:372:3",
								"text": " @dev Interface of the ERC777Token standard as defined in the EIP.\n This contract uses the\n https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n token holders and recipients react to token movements by using setting implementers\n for the associated interfaces in said registry. See {IERC1820Registry} and\n {ERC1820Implementer}."
							},
							"fullyImplemented": false,
							"id": 383,
							"linearizedBaseContracts": [
								383
							],
							"name": "IERC777",
							"nameLocation": "516:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 224,
										"nodeType": "StructuredDocumentation",
										"src": "530:199:3",
										"text": " @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n Note that some additional user `data` and `operatorData` can be logged in the event."
									},
									"eventSelector": "2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d",
									"id": 236,
									"name": "Minted",
									"nameLocation": "740:6:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "763:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "747:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "747:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "789:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "773:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "773:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "801:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "793:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "815:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "809:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 231,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "827:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "821:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 233,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "821:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "746:94:3"
									},
									"src": "734:107:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "847:187:3",
										"text": " @dev Emitted when `operator` destroys `amount` tokens from `account`.\n Note that some additional user `data` and `operatorData` can be logged in the event."
									},
									"eventSelector": "a78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a4098",
									"id": 249,
									"name": "Burned",
									"nameLocation": "1045:6:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1068:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1052:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1052:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1094:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1078:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1078:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1108:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1100:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1100:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1122:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1116:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 244,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1116:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "1134:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1128:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 246,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1128:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1051:96:3"
									},
									"src": "1039:109:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "1154:83:3",
										"text": " @dev Emitted when `operator` is made operator for `tokenHolder`."
									},
									"eventSelector": "f4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f9",
									"id": 256,
									"name": "AuthorizedOperator",
									"nameLocation": "1248:18:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1283:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "1267:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "1309:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "1293:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1293:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:55:3"
									},
									"src": "1242:80:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "1328:97:3",
										"text": " @dev Emitted when `operator` is revoked its operator status for `tokenHolder`."
									},
									"eventSelector": "50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa1",
									"id": 263,
									"name": "RevokedOperator",
									"nameLocation": "1436:15:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1468:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1452:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "1494:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1478:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1478:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1451:55:3"
									},
									"src": "1430:77:3"
								},
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "1513:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1581:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1585:2:3"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "1611:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1611:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1610:15:3"
									},
									"scope": 383,
									"src": "1572:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "1632:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 275,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1748:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1754:2:3"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "1780:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 272,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1780:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1779:15:3"
									},
									"scope": 383,
									"src": "1739:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 276,
										"nodeType": "StructuredDocumentation",
										"src": "1801:287:3",
										"text": " @dev Returns the smallest part of the token that is not divisible. This\n means all token operations (creation, movement and destruction) must have\n amounts that are a multiple of this number.\n For most token contracts, this value will equal 1."
									},
									"functionSelector": "556f0dc7",
									"id": 281,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "granularity",
									"nameLocation": "2102:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2113:2:3"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "2139:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2139:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2138:9:3"
									},
									"scope": 383,
									"src": "2093:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "2154:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2234:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2245:2:3"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "2271:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2271:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2270:9:3"
									},
									"scope": 383,
									"src": "2225:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "2286:83:3",
										"text": " @dev Returns the amount of tokens owned by an account (`owner`)."
									},
									"functionSelector": "70a08231",
									"id": 295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2383:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2401:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "2393:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2393:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2392:15:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "2431:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2431:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:9:3"
									},
									"scope": 383,
									"src": "2374:66:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "2446:585:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n If send or receive hooks are registered for the caller and `recipient`,\n the corresponding functions will be called with `data` and empty\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "9bd9bbc6",
									"id": 305,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "3045:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "3058:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3050:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3050:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3077:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3069:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3069:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3100:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3085:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 301,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3085:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3049:56:3"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3114:0:3"
									},
									"scope": 383,
									"src": "3036:79:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "3121:404:3",
										"text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply.\n If a send hook is registered for the caller, the corresponding function\n will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - the caller must have at least `amount` tokens."
									},
									"functionSelector": "fe9d9303",
									"id": 313,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "3539:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3552:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "3544:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3544:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3575:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "3560:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 309,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3560:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3543:37:3"
									},
									"returnParameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3589:0:3"
									},
									"scope": 383,
									"src": "3530:60:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "3596:249:3",
										"text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
									},
									"functionSelector": "d95b6371",
									"id": 323,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOperatorFor",
									"nameLocation": "3859:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3881:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "3873:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3873:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "3899:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "3891:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 317,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3891:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3872:39:3"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "3935:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 320,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3935:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3934:6:3"
									},
									"scope": 383,
									"src": "3850:91:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 324,
										"nodeType": "StructuredDocumentation",
										"src": "3947:233:3",
										"text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n Emits an {AuthorizedOperator} event.\n Requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "959b8c3f",
									"id": 329,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeOperator",
									"nameLocation": "4194:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4220:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "4212:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 325,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4212:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4211:18:3"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4238:0:3"
									},
									"scope": 383,
									"src": "4185:54:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "4245:261:3",
										"text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n Emits a {RevokedOperator} event.\n Requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "fad8b32a",
									"id": 335,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeOperator",
									"nameLocation": "4520:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4543:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "4535:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4535:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4534:18:3"
									},
									"returnParameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4561:0:3"
									},
									"scope": 383,
									"src": "4511:51:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "4568:338:3",
										"text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
									},
									"functionSelector": "06e48538",
									"id": 342,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultOperators",
									"nameLocation": "4920:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4936:2:3"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 342,
												"src": "4962:16:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 338,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "4962:7:3",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 339,
													"nodeType": "ArrayTypeName",
													"src": "4962:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4961:18:3"
									},
									"scope": 383,
									"src": "4911:69:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 343,
										"nodeType": "StructuredDocumentation",
										"src": "4986:714:3",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `data` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "62ad1b83",
									"id": 356,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorSend",
									"nameLocation": "5714:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5744:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5736:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5736:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5768:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5760:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5760:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5795:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5787:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5826:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5811:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 350,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5811:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "5855:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5840:27:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 352,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5840:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5726:147:3"
									},
									"returnParameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5882:0:3"
									},
									"scope": 383,
									"src": "5705:178:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 357,
										"nodeType": "StructuredDocumentation",
										"src": "5889:532:3",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `data` and `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
									},
									"functionSelector": "fc673c4f",
									"id": 368,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorBurn",
									"nameLocation": "6435:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6456:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6448:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6448:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6473:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6465:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6465:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6496:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6481:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 362,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6481:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "6517:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6502:27:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 364,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6502:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6447:83:3"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6539:0:3"
									},
									"scope": 383,
									"src": "6426:114:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"eventSelector": "06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987",
									"id": 382,
									"name": "Sent",
									"nameLocation": "6552:4:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6582:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6566:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6616:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6600:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6646:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6630:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6630:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6666:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6658:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6658:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6688:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6682:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 377,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6682:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 380,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "6708:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6702:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 379,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6702:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6556:170:3"
									},
									"src": "6546:181:3"
								}
							],
							"scope": 384,
							"src": "506:6223:3",
							"usedErrors": []
						}
					],
					"src": "108:6622:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							1490
						],
						"SignedMath": [
							1595
						],
						"Strings": [
							612
						]
					},
					"id": 613,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 385,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 386,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 613,
							"sourceUnit": 1491,
							"src": "126:25:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 387,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 613,
							"sourceUnit": 1596,
							"src": "152:31:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 388,
								"nodeType": "StructuredDocumentation",
								"src": "185:34:4",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 612,
							"linearizedBaseContracts": [
								612
							],
							"name": "Strings",
							"nameLocation": "228:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 391,
									"mutability": "constant",
									"name": "_SYMBOLS",
									"nameLocation": "267:8:4",
									"nodeType": "VariableDeclaration",
									"scope": 612,
									"src": "242:54:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 389,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "242:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 390,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "278:18:4",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 394,
									"mutability": "constant",
									"name": "_ADDRESS_LENGTH",
									"nameLocation": "325:15:4",
									"nodeType": "VariableDeclaration",
									"scope": 612,
									"src": "302:43:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 392,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "302:5:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 393,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "343:2:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 441,
										"nodeType": "Block",
										"src": "518:625:4",
										"statements": [
											{
												"id": 440,
												"nodeType": "UncheckedBlock",
												"src": "528:609:4",
												"statements": [
													{
														"assignments": [
															403
														],
														"declarations": [
															{
																"constant": false,
																"id": 403,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "560:6:4",
																"nodeType": "VariableDeclaration",
																"scope": 440,
																"src": "552:14:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 402,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "552:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 410,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 406,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 397,
																		"src": "580:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 404,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1490,
																		"src": "569:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$1490_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 405,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "574:5:4",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1327,
																	"src": "569:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 407,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "569:17:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "589:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "569:21:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "552:38:4"
													},
													{
														"assignments": [
															412
														],
														"declarations": [
															{
																"constant": false,
																"id": 412,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "618:6:4",
																"nodeType": "VariableDeclaration",
																"scope": 440,
																"src": "604:20:4",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 411,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "604:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 417,
														"initialValue": {
															"arguments": [
																{
																	"id": 415,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 403,
																	"src": "638:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 414,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "627:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 413,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "631:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "627:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "604:41:4"
													},
													{
														"assignments": [
															419
														],
														"declarations": [
															{
																"constant": false,
																"id": 419,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "667:3:4",
																"nodeType": "VariableDeclaration",
																"scope": 440,
																"src": "659:11:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 418,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "659:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 420,
														"nodeType": "VariableDeclarationStatement",
														"src": "659:11:4"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "740:67:4",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "758:35:4",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:4"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "781:2:4",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "785:6:4"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "777:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "777:15:4"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "765:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "765:28:4"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "758:3:4"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 412,
																"isOffset": false,
																"isSlot": false,
																"src": "769:6:4",
																"valueSize": 1
															},
															{
																"declaration": 403,
																"isOffset": false,
																"isSlot": false,
																"src": "785:6:4",
																"valueSize": 1
															},
															{
																"declaration": 419,
																"isOffset": false,
																"isSlot": false,
																"src": "758:3:4",
																"valueSize": 1
															}
														],
														"id": 421,
														"nodeType": "InlineAssembly",
														"src": "731:76:4"
													},
													{
														"body": {
															"id": 436,
															"nodeType": "Block",
															"src": "833:267:4",
															"statements": [
																{
																	"expression": {
																		"id": 424,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "851:5:4",
																		"subExpression": {
																			"id": 423,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 419,
																			"src": "851:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 425,
																	"nodeType": "ExpressionStatement",
																	"src": "851:5:4"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "934:84:4",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "964:3:4"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "978:5:4"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "985:2:4",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "974:3:4"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "974:14:4"
																								},
																								{
																									"name": "_SYMBOLS",
																									"nodeType": "YulIdentifier",
																									"src": "990:8:4"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "969:4:4"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "969:30:4"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "956:7:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "956:44:4"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "956:44:4"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "paris",
																	"externalReferences": [
																		{
																			"declaration": 391,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "990:8:4",
																			"valueSize": 1
																		},
																		{
																			"declaration": 419,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "964:3:4",
																			"valueSize": 1
																		},
																		{
																			"declaration": 397,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "978:5:4",
																			"valueSize": 1
																		}
																	],
																	"id": 426,
																	"nodeType": "InlineAssembly",
																	"src": "925:93:4"
																},
																{
																	"expression": {
																		"id": 429,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 427,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 397,
																			"src": "1035:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 428,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1044:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1035:11:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 430,
																	"nodeType": "ExpressionStatement",
																	"src": "1035:11:4"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 431,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 397,
																			"src": "1068:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 432,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1077:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1068:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 435,
																	"nodeType": "IfStatement",
																	"src": "1064:21:4",
																	"trueBody": {
																		"id": 434,
																		"nodeType": "Break",
																		"src": "1080:5:4"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 422,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "827:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 437,
														"nodeType": "WhileStatement",
														"src": "820:280:4"
													},
													{
														"expression": {
															"id": 438,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "1120:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 401,
														"id": 439,
														"nodeType": "Return",
														"src": "1113:13:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 395,
										"nodeType": "StructuredDocumentation",
										"src": "352:90:4",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "456:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "473:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "465:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 396,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "465:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "464:15:4"
									},
									"returnParameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "503:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 399,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:15:4"
									},
									"scope": 612,
									"src": "447:696:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 469,
										"nodeType": "Block",
										"src": "1313:103:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 456,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 454,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 445,
																			"src": "1354:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1362:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1354:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"hexValue": "",
																		"id": 458,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1372:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	},
																	"id": 459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1354:20:4",
																	"trueExpression": {
																		"hexValue": "2d",
																		"id": 457,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1366:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																			"typeString": "literal_string \"-\""
																		},
																		"value": "-"
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 463,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 445,
																					"src": "1400:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_int256",
																						"typeString": "int256"
																					}
																				],
																				"expression": {
																					"id": 461,
																					"name": "SignedMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1595,
																					"src": "1385:10:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SignedMath_$1595_$",
																						"typeString": "type(library SignedMath)"
																					}
																				},
																				"id": 462,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "1396:3:4",
																				"memberName": "abs",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1594,
																				"src": "1385:14:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																					"typeString": "function (int256) pure returns (uint256)"
																				}
																			},
																			"id": 464,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1385:21:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 460,
																		"name": "toString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			442,
																			470
																		],
																		"referencedDeclaration": 442,
																		"src": "1376:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 465,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1376:31:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 452,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1337:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 453,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1341:12:4",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "1337:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1337:71:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 451,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1330:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 450,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1330:6:4",
															"typeDescriptions": {}
														}
													},
													"id": 467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1330:79:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 449,
												"id": 468,
												"nodeType": "Return",
												"src": "1323:86:4"
											}
										]
									},
									"documentation": {
										"id": 443,
										"nodeType": "StructuredDocumentation",
										"src": "1149:89:4",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 470,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "1252:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1268:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "1261:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 444,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1261:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1260:14:4"
									},
									"returnParameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "1298:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 447,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1298:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:15:4"
									},
									"scope": 612,
									"src": "1243:173:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 489,
										"nodeType": "Block",
										"src": "1595:100:4",
										"statements": [
											{
												"id": 488,
												"nodeType": "UncheckedBlock",
												"src": "1605:84:4",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 479,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 473,
																	"src": "1648:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 485,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 482,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 473,
																				"src": "1667:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 480,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1490,
																				"src": "1655:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$1490_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1660:6:4",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1450,
																			"src": "1655:11:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 483,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1655:18:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 484,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1676:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1655:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 478,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	490,
																	566,
																	586
																],
																"referencedDeclaration": 566,
																"src": "1636:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1636:42:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 477,
														"id": 487,
														"nodeType": "Return",
														"src": "1629:49:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 471,
										"nodeType": "StructuredDocumentation",
										"src": "1422:94:4",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1530:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1550:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "1542:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1541:15:4"
									},
									"returnParameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "1580:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 475,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1580:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1579:15:4"
									},
									"scope": 612,
									"src": "1521:174:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 565,
										"nodeType": "Block",
										"src": "1908:347:4",
										"statements": [
											{
												"assignments": [
													501
												],
												"declarations": [
													{
														"constant": false,
														"id": 501,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1931:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 565,
														"src": "1918:19:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 500,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1918:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 510,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 506,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 504,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1950:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 505,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 495,
																	"src": "1954:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1950:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 507,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1963:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1950:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1940:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 502,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1944:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1940:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1918:47:4"
											},
											{
												"expression": {
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 511,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "1975:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 513,
														"indexExpression": {
															"hexValue": "30",
															"id": 512,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1982:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1975:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 514,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1987:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1975:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 516,
												"nodeType": "ExpressionStatement",
												"src": "1975:15:4"
											},
											{
												"expression": {
													"id": 521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 517,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "2000:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 519,
														"indexExpression": {
															"hexValue": "31",
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2007:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2000:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 520,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2012:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2000:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 522,
												"nodeType": "ExpressionStatement",
												"src": "2000:15:4"
											},
											{
												"body": {
													"id": 551,
													"nodeType": "Block",
													"src": "2070:83:4",
													"statements": [
														{
															"expression": {
																"id": 545,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 537,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 501,
																		"src": "2084:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 539,
																	"indexExpression": {
																		"id": 538,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 524,
																		"src": "2091:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2084:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 540,
																		"name": "_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 391,
																		"src": "2096:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 544,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 543,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 541,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 493,
																			"src": "2105:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 542,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2113:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2105:11:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2096:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2084:33:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 546,
															"nodeType": "ExpressionStatement",
															"src": "2084:33:4"
														},
														{
															"expression": {
																"id": 549,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 547,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 493,
																	"src": "2131:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 548,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2141:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2131:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 550,
															"nodeType": "ExpressionStatement",
															"src": "2131:11:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 531,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 524,
														"src": "2058:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 532,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2062:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2058:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 552,
												"initializationExpression": {
													"assignments": [
														524
													],
													"declarations": [
														{
															"constant": false,
															"id": 524,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2038:1:4",
															"nodeType": "VariableDeclaration",
															"scope": 552,
															"src": "2030:9:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 523,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2030:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 530,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 529,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 527,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 525,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2042:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 526,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 495,
																"src": "2046:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2042:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 528,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2055:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2042:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2030:26:4"
												},
												"loopExpression": {
													"expression": {
														"id": 535,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2065:3:4",
														"subExpression": {
															"id": 534,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "2067:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 536,
													"nodeType": "ExpressionStatement",
													"src": "2065:3:4"
												},
												"nodeType": "ForStatement",
												"src": "2025:128:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 554,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 493,
																"src": "2170:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 555,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2179:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2170:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2182:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 553,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2162:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2162:55:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 559,
												"nodeType": "ExpressionStatement",
												"src": "2162:55:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 562,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "2241:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 561,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2234:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 560,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2234:6:4",
															"typeDescriptions": {}
														}
													},
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2234:14:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 499,
												"id": 564,
												"nodeType": "Return",
												"src": "2227:21:4"
											}
										]
									},
									"documentation": {
										"id": 491,
										"nodeType": "StructuredDocumentation",
										"src": "1701:112:4",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1827:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1847:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "1839:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1839:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1862:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "1854:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1854:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:31:4"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "1893:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 497,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1893:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1892:15:4"
									},
									"scope": 612,
									"src": "1818:437:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 585,
										"nodeType": "Block",
										"src": "2480:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 579,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 569,
																			"src": "2525:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 578,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2517:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 577,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2517:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 580,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2517:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 576,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2509:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 575,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2509:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 581,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2509:22:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 582,
															"name": "_ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 394,
															"src": "2533:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 574,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															490,
															566,
															586
														],
														"referencedDeclaration": 566,
														"src": "2497:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2497:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 573,
												"id": 584,
												"nodeType": "Return",
												"src": "2490:59:4"
											}
										]
									},
									"documentation": {
										"id": 567,
										"nodeType": "StructuredDocumentation",
										"src": "2261:141:4",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."
									},
									"id": 586,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2416:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2436:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "2428:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2428:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2427:14:4"
									},
									"returnParameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "2465:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 571,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2465:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:4"
									},
									"scope": 612,
									"src": "2407:149:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 610,
										"nodeType": "Block",
										"src": "2711:66:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 599,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 589,
																		"src": "2744:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 598,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2738:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 597,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2738:5:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 600,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2738:8:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 596,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2728:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 601,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:19:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 605,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 591,
																		"src": "2767:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 604,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2761:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 603,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2761:5:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2761:8:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 602,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "2751:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 607,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2751:19:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2728:42:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 595,
												"id": 609,
												"nodeType": "Return",
												"src": "2721:49:4"
											}
										]
									},
									"documentation": {
										"id": 587,
										"nodeType": "StructuredDocumentation",
										"src": "2562:66:4",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 611,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2642:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2662:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "2648:15:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 588,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2648:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2679:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "2665:15:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 590,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2665:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2647:34:4"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "2705:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 593,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2705:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2704:6:4"
									},
									"scope": 612,
									"src": "2633:144:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 613,
							"src": "220:2559:4",
							"usedErrors": []
						}
					],
					"src": "101:2679:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							624
						]
					},
					"id": 625,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 614,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 615,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:5",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 624,
							"linearizedBaseContracts": [
								624
							],
							"name": "IERC165",
							"nameLocation": "415:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 616,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:5",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 623,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "801:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 617,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:5"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "844:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 620,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:5"
									},
									"scope": 624,
									"src": "774:76:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 625,
							"src": "405:447:5",
							"usedErrors": []
						}
					],
					"src": "100:753:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							1490
						]
					},
					"id": 1491,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 626,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "103:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 627,
								"nodeType": "StructuredDocumentation",
								"src": "128:73:6",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 1490,
							"linearizedBaseContracts": [
								1490
							],
							"name": "Math",
							"nameLocation": "210:4:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Math.Rounding",
									"id": 631,
									"members": [
										{
											"id": 628,
											"name": "Down",
											"nameLocation": "245:4:6",
											"nodeType": "EnumValue",
											"src": "245:4:6"
										},
										{
											"id": 629,
											"name": "Up",
											"nameLocation": "287:2:6",
											"nodeType": "EnumValue",
											"src": "287:2:6"
										},
										{
											"id": 630,
											"name": "Zero",
											"nameLocation": "318:4:6",
											"nodeType": "EnumValue",
											"src": "318:4:6"
										}
									],
									"name": "Rounding",
									"nameLocation": "226:8:6",
									"nodeType": "EnumDefinition",
									"src": "221:122:6"
								},
								{
									"body": {
										"id": 648,
										"nodeType": "Block",
										"src": "480:37:6",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 643,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 641,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "497:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 642,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "501:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "497:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 645,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "509:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "497:13:6",
													"trueExpression": {
														"id": 644,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 634,
														"src": "505:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 640,
												"id": 647,
												"nodeType": "Return",
												"src": "490:20:6"
											}
										]
									},
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "349:59:6",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 649,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "422:3:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "434:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "426:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 633,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "445:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "437:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:22:6"
									},
									"returnParameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "471:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:9:6"
									},
									"scope": 1490,
									"src": "413:104:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 666,
										"nodeType": "Block",
										"src": "655:37:6",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 661,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 659,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "672:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 660,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "676:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "672:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 663,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 654,
														"src": "684:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "672:13:6",
													"trueExpression": {
														"id": 662,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 652,
														"src": "680:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 658,
												"id": 665,
												"nodeType": "Return",
												"src": "665:20:6"
											}
										]
									},
									"documentation": {
										"id": 650,
										"nodeType": "StructuredDocumentation",
										"src": "523:60:6",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 667,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "597:3:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "601:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 651,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "612:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:6"
									},
									"returnParameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 667,
												"src": "646:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:9:6"
									},
									"scope": 1490,
									"src": "588:104:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "876:82:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 679,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 677,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 670,
																	"src": "931:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 678,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "935:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "931:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 680,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "930:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 686,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 683,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 681,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 670,
																		"src": "941:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 682,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 672,
																		"src": "945:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "941:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 684,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "940:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 685,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "950:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "940:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "930:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 676,
												"id": 688,
												"nodeType": "Return",
												"src": "923:28:6"
											}
										]
									},
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "698:102:6",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "814:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "830:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "822:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "841:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "833:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 671,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:22:6"
									},
									"returnParameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "867:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 674,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:9:6"
									},
									"scope": 1490,
									"src": "805:153:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 714,
										"nodeType": "Block",
										"src": "1228:123:6",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 702,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 700,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "1316:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 701,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1321:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "1316:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 711,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 709,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 706,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 704,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 693,
																			"src": "1330:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 705,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1334:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "1330:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 707,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1329:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 708,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 695,
																"src": "1339:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1329:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 710,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1343:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1329:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "1316:28:6",
													"trueExpression": {
														"hexValue": "30",
														"id": 703,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1325:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 699,
												"id": 713,
												"nodeType": "Return",
												"src": "1309:35:6"
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "964:188:6",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."
									},
									"id": 715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "1166:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1182:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "1174:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 692,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1174:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1193:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "1185:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1185:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1173:22:6"
									},
									"returnParameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "1219:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 697,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1218:9:6"
									},
									"scope": 1490,
									"src": "1157:194:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 837,
										"nodeType": "Block",
										"src": "1765:4115:6",
										"statements": [
											{
												"id": 836,
												"nodeType": "UncheckedBlock",
												"src": "1775:4099:6",
												"statements": [
													{
														"assignments": [
															728
														],
														"declarations": [
															{
																"constant": false,
																"id": 728,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "2104:5:6",
																"nodeType": "VariableDeclaration",
																"scope": 836,
																"src": "2096:13:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 727,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2096:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 729,
														"nodeType": "VariableDeclarationStatement",
														"src": "2096:13:6"
													},
													{
														"assignments": [
															731
														],
														"declarations": [
															{
																"constant": false,
																"id": 731,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "2176:5:6",
																"nodeType": "VariableDeclaration",
																"scope": 836,
																"src": "2168:13:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 730,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2168:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 732,
														"nodeType": "VariableDeclarationStatement",
														"src": "2168:13:6"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "2248:157:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2266:30:6",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2283:1:6"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2286:1:6"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2293:1:6",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2289:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2289:6:6"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "2276:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2276:20:6"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "2270:2:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2313:18:6",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "2326:1:6"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2329:1:6"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "2322:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2322:9:6"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "2313:5:6"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2348:43:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2365:2:6"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2369:5:6"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2361:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2361:14:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "2380:2:6"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "2384:5:6"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "2377:2:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2377:13:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2357:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2357:34:6"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "2348:5:6"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 728,
																"isOffset": false,
																"isSlot": false,
																"src": "2313:5:6",
																"valueSize": 1
															},
															{
																"declaration": 728,
																"isOffset": false,
																"isSlot": false,
																"src": "2369:5:6",
																"valueSize": 1
															},
															{
																"declaration": 728,
																"isOffset": false,
																"isSlot": false,
																"src": "2384:5:6",
																"valueSize": 1
															},
															{
																"declaration": 731,
																"isOffset": false,
																"isSlot": false,
																"src": "2348:5:6",
																"valueSize": 1
															},
															{
																"declaration": 718,
																"isOffset": false,
																"isSlot": false,
																"src": "2283:1:6",
																"valueSize": 1
															},
															{
																"declaration": 718,
																"isOffset": false,
																"isSlot": false,
																"src": "2326:1:6",
																"valueSize": 1
															},
															{
																"declaration": 720,
																"isOffset": false,
																"isSlot": false,
																"src": "2286:1:6",
																"valueSize": 1
															},
															{
																"declaration": 720,
																"isOffset": false,
																"isSlot": false,
																"src": "2329:1:6",
																"valueSize": 1
															}
														],
														"id": 733,
														"nodeType": "InlineAssembly",
														"src": "2239:166:6"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 736,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 734,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 731,
																"src": "2486:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 735,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2495:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2486:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 742,
														"nodeType": "IfStatement",
														"src": "2482:368:6",
														"trueBody": {
															"id": 741,
															"nodeType": "Block",
															"src": "2498:352:6",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 739,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 737,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 728,
																			"src": "2816:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 738,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 722,
																			"src": "2824:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2816:19:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 726,
																	"id": 740,
																	"nodeType": "Return",
																	"src": "2809:26:6"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 746,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 744,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "2960:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"id": 745,
																		"name": "prod1",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 731,
																		"src": "2974:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2960:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "4d6174683a206d756c446976206f766572666c6f77",
																	"id": 747,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2981:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	},
																	"value": "Math: mulDiv overflow"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851",
																		"typeString": "literal_string \"Math: mulDiv overflow\""
																	}
																],
																"id": 743,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2952:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 748,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2952:53:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 749,
														"nodeType": "ExpressionStatement",
														"src": "2952:53:6"
													},
													{
														"assignments": [
															751
														],
														"declarations": [
															{
																"constant": false,
																"id": 751,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "3269:9:6",
																"nodeType": "VariableDeclaration",
																"scope": 836,
																"src": "3261:17:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 750,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3261:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 752,
														"nodeType": "VariableDeclarationStatement",
														"src": "3261:17:6"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3301:291:6",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "3370:38:6",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "3390:1:6"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3393:1:6"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "3396:11:6"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "3383:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3383:25:6"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "3370:9:6"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3490:41:6",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "3503:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "3513:9:6"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "3524:5:6"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "3510:2:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3510:20:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3499:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3499:32:6"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "3490:5:6"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3548:30:6",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "3561:5:6"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "3568:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3557:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3557:21:6"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "3548:5:6"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 722,
																"isOffset": false,
																"isSlot": false,
																"src": "3396:11:6",
																"valueSize": 1
															},
															{
																"declaration": 728,
																"isOffset": false,
																"isSlot": false,
																"src": "3524:5:6",
																"valueSize": 1
															},
															{
																"declaration": 728,
																"isOffset": false,
																"isSlot": false,
																"src": "3548:5:6",
																"valueSize": 1
															},
															{
																"declaration": 728,
																"isOffset": false,
																"isSlot": false,
																"src": "3561:5:6",
																"valueSize": 1
															},
															{
																"declaration": 731,
																"isOffset": false,
																"isSlot": false,
																"src": "3490:5:6",
																"valueSize": 1
															},
															{
																"declaration": 731,
																"isOffset": false,
																"isSlot": false,
																"src": "3503:5:6",
																"valueSize": 1
															},
															{
																"declaration": 751,
																"isOffset": false,
																"isSlot": false,
																"src": "3370:9:6",
																"valueSize": 1
															},
															{
																"declaration": 751,
																"isOffset": false,
																"isSlot": false,
																"src": "3513:9:6",
																"valueSize": 1
															},
															{
																"declaration": 751,
																"isOffset": false,
																"isSlot": false,
																"src": "3568:9:6",
																"valueSize": 1
															},
															{
																"declaration": 718,
																"isOffset": false,
																"isSlot": false,
																"src": "3390:1:6",
																"valueSize": 1
															},
															{
																"declaration": 720,
																"isOffset": false,
																"isSlot": false,
																"src": "3393:1:6",
																"valueSize": 1
															}
														],
														"id": 753,
														"nodeType": "InlineAssembly",
														"src": "3292:300:6"
													},
													{
														"assignments": [
															755
														],
														"declarations": [
															{
																"constant": false,
																"id": 755,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "3907:4:6",
																"nodeType": "VariableDeclaration",
																"scope": 836,
																"src": "3899:12:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 754,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3899:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 763,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 756,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 722,
																"src": "3914:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 760,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 758,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "~",
																			"prefix": true,
																			"src": "3929:12:6",
																			"subExpression": {
																				"id": 757,
																				"name": "denominator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 722,
																				"src": "3930:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 759,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3944:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3929:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 761,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3928:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3914:32:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3899:47:6"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "3969:362:6",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "4034:37:6",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "4053:11:6"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4066:4:6"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4049:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4049:22:6"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "4034:11:6"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4138:25:6",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "4151:5:6"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "4158:4:6"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4147:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4147:16:6"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "4138:5:6"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4278:39:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4298:1:6",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "4301:4:6"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "4294:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4294:12:6"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "4308:4:6"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4290:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4290:23:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4315:1:6",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4286:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4286:31:6"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "4278:4:6"
																		}
																	]
																}
															]
														},
														"evmVersion": "paris",
														"externalReferences": [
															{
																"declaration": 722,
																"isOffset": false,
																"isSlot": false,
																"src": "4034:11:6",
																"valueSize": 1
															},
															{
																"declaration": 722,
																"isOffset": false,
																"isSlot": false,
																"src": "4053:11:6",
																"valueSize": 1
															},
															{
																"declaration": 728,
																"isOffset": false,
																"isSlot": false,
																"src": "4138:5:6",
																"valueSize": 1
															},
															{
																"declaration": 728,
																"isOffset": false,
																"isSlot": false,
																"src": "4151:5:6",
																"valueSize": 1
															},
															{
																"declaration": 755,
																"isOffset": false,
																"isSlot": false,
																"src": "4066:4:6",
																"valueSize": 1
															},
															{
																"declaration": 755,
																"isOffset": false,
																"isSlot": false,
																"src": "4158:4:6",
																"valueSize": 1
															},
															{
																"declaration": 755,
																"isOffset": false,
																"isSlot": false,
																"src": "4278:4:6",
																"valueSize": 1
															},
															{
																"declaration": 755,
																"isOffset": false,
																"isSlot": false,
																"src": "4301:4:6",
																"valueSize": 1
															},
															{
																"declaration": 755,
																"isOffset": false,
																"isSlot": false,
																"src": "4308:4:6",
																"valueSize": 1
															}
														],
														"id": 764,
														"nodeType": "InlineAssembly",
														"src": "3960:371:6"
													},
													{
														"expression": {
															"id": 769,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 765,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 728,
																"src": "4397:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 768,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 766,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 731,
																	"src": "4406:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 767,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 755,
																	"src": "4414:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4406:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4397:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 770,
														"nodeType": "ExpressionStatement",
														"src": "4397:21:6"
													},
													{
														"assignments": [
															772
														],
														"declarations": [
															{
																"constant": false,
																"id": 772,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "4744:7:6",
																"nodeType": "VariableDeclaration",
																"scope": 836,
																"src": "4736:15:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 771,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4736:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 779,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 775,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 773,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4755:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 774,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 722,
																			"src": "4759:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4755:15:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 776,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4754:17:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 777,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4774:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "4754:21:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4736:39:6"
													},
													{
														"expression": {
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 780,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 772,
																"src": "4992:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 785,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 781,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5003:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 784,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 782,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "5007:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 783,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 772,
																		"src": "5021:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5007:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5003:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4992:36:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 787,
														"nodeType": "ExpressionStatement",
														"src": "4992:36:6"
													},
													{
														"expression": {
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 788,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 772,
																"src": "5061:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 793,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 789,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5072:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 792,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 790,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "5076:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 791,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 772,
																		"src": "5090:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5076:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5072:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5061:36:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 795,
														"nodeType": "ExpressionStatement",
														"src": "5061:36:6"
													},
													{
														"expression": {
															"id": 802,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 796,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 772,
																"src": "5131:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 797,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5142:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 798,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "5146:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 799,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 772,
																		"src": "5160:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5146:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5142:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5131:36:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 803,
														"nodeType": "ExpressionStatement",
														"src": "5131:36:6"
													},
													{
														"expression": {
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 804,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 772,
																"src": "5201:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 809,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 805,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5212:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 808,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 806,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "5216:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 807,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 772,
																		"src": "5230:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5216:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5212:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5201:36:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 811,
														"nodeType": "ExpressionStatement",
														"src": "5201:36:6"
													},
													{
														"expression": {
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 812,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 772,
																"src": "5271:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 817,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 813,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5282:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 816,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 814,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "5286:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 815,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 772,
																		"src": "5300:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5286:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5282:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5271:36:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 819,
														"nodeType": "ExpressionStatement",
														"src": "5271:36:6"
													},
													{
														"expression": {
															"id": 826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 820,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 772,
																"src": "5342:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 825,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 821,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5353:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 824,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 822,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "5357:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 823,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 772,
																		"src": "5371:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5357:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5353:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5342:36:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 827,
														"nodeType": "ExpressionStatement",
														"src": "5342:36:6"
													},
													{
														"expression": {
															"id": 832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 828,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 725,
																"src": "5812:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 831,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 829,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 728,
																	"src": "5821:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 830,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 772,
																	"src": "5829:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5821:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5812:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 833,
														"nodeType": "ExpressionStatement",
														"src": "5812:24:6"
													},
													{
														"expression": {
															"id": 834,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 725,
															"src": "5857:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 726,
														"id": 835,
														"nodeType": "Return",
														"src": "5850:13:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "1357:305:6",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."
									},
									"id": 838,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "1676:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "1691:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "1683:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1683:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "1702:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "1694:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1694:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "1713:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "1705:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:43:6"
									},
									"returnParameters": {
										"id": 726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 725,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "1757:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "1749:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 724,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1749:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1748:16:6"
									},
									"scope": 1490,
									"src": "1667:4213:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 881,
										"nodeType": "Block",
										"src": "6122:189:6",
										"statements": [
											{
												"assignments": [
													854
												],
												"declarations": [
													{
														"constant": false,
														"id": 854,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "6140:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 881,
														"src": "6132:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 853,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6132:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 860,
												"initialValue": {
													"arguments": [
														{
															"id": 856,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 841,
															"src": "6156:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 857,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 843,
															"src": "6159:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 858,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 845,
															"src": "6162:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 855,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															838,
															882
														],
														"referencedDeclaration": 838,
														"src": "6149:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6149:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:42:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 872,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_enum$_Rounding_$631",
															"typeString": "enum Math.Rounding"
														},
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 861,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 848,
															"src": "6188:8:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$631",
																"typeString": "enum Math.Rounding"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 862,
																"name": "Rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 631,
																"src": "6200:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$631_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 863,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6209:2:6",
															"memberName": "Up",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 629,
															"src": "6200:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$631",
																"typeString": "enum Math.Rounding"
															}
														},
														"src": "6188:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 866,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 841,
																	"src": "6222:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 867,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 843,
																	"src": "6225:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 868,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "6228:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 865,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "6215:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 869,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6215:25:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 870,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6243:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6215:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6188:56:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 878,
												"nodeType": "IfStatement",
												"src": "6184:98:6",
												"trueBody": {
													"id": 877,
													"nodeType": "Block",
													"src": "6246:36:6",
													"statements": [
														{
															"expression": {
																"id": 875,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 873,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 854,
																	"src": "6260:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 874,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6270:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "6260:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 876,
															"nodeType": "ExpressionStatement",
															"src": "6260:11:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 879,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 854,
													"src": "6298:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 852,
												"id": 880,
												"nodeType": "Return",
												"src": "6291:13:6"
											}
										]
									},
									"documentation": {
										"id": 839,
										"nodeType": "StructuredDocumentation",
										"src": "5886:121:6",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 882,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "6021:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "6036:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "6028:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 840,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6028:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "6047:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "6039:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "6058:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "6050:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6050:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "6080:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "6071:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$631",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 847,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 846,
														"name": "Rounding",
														"nameLocations": [
															"6071:8:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 631,
														"src": "6071:8:6"
													},
													"referencedDeclaration": 631,
													"src": "6071:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$631",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6027:62:6"
									},
									"returnParameters": {
										"id": 852,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "6113:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 850,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6113:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6112:9:6"
									},
									"scope": 1490,
									"src": "6012:299:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 993,
										"nodeType": "Block",
										"src": "6587:1585:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 890,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 885,
														"src": "6601:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 891,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6606:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6601:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 896,
												"nodeType": "IfStatement",
												"src": "6597:45:6",
												"trueBody": {
													"id": 895,
													"nodeType": "Block",
													"src": "6609:33:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 893,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6630:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 889,
															"id": 894,
															"nodeType": "Return",
															"src": "6623:8:6"
														}
													]
												}
											},
											{
												"assignments": [
													898
												],
												"declarations": [
													{
														"constant": false,
														"id": 898,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7329:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 993,
														"src": "7321:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 897,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7321:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 907,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 899,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7338:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 904,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 901,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 885,
																			"src": "7349:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 900,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			1162,
																			1198
																		],
																		"referencedDeclaration": 1162,
																		"src": "7344:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 902,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7344:7:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 903,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7355:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7344:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 905,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "7343:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7338:19:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7321:36:6"
											},
											{
												"id": 992,
												"nodeType": "UncheckedBlock",
												"src": "7758:408:6",
												"statements": [
													{
														"expression": {
															"id": 917,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 908,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 898,
																"src": "7782:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 916,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 913,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 909,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 898,
																				"src": "7792:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 912,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 910,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 885,
																					"src": "7801:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 911,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 898,
																					"src": "7805:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7801:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7792:19:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 914,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7791:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 915,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7816:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7791:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7782:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 918,
														"nodeType": "ExpressionStatement",
														"src": "7782:35:6"
													},
													{
														"expression": {
															"id": 928,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 919,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 898,
																"src": "7831:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 924,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 920,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 898,
																				"src": "7841:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 923,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 921,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 885,
																					"src": "7850:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 922,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 898,
																					"src": "7854:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7850:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7841:19:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 925,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7840:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 926,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7865:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7840:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7831:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 929,
														"nodeType": "ExpressionStatement",
														"src": "7831:35:6"
													},
													{
														"expression": {
															"id": 939,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 930,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 898,
																"src": "7880:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 938,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 935,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 931,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 898,
																				"src": "7890:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 934,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 932,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 885,
																					"src": "7899:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 933,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 898,
																					"src": "7903:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7899:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7890:19:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 936,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7889:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 937,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7914:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7889:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7880:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 940,
														"nodeType": "ExpressionStatement",
														"src": "7880:35:6"
													},
													{
														"expression": {
															"id": 950,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 941,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 898,
																"src": "7929:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 949,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 946,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 942,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 898,
																				"src": "7939:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 945,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 943,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 885,
																					"src": "7948:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 944,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 898,
																					"src": "7952:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7948:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7939:19:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 947,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7938:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 948,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7963:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7938:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7929:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 951,
														"nodeType": "ExpressionStatement",
														"src": "7929:35:6"
													},
													{
														"expression": {
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 952,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 898,
																"src": "7978:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 960,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 957,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 953,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 898,
																				"src": "7988:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 956,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 954,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 885,
																					"src": "7997:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 955,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 898,
																					"src": "8001:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7997:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7988:19:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 958,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7987:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 959,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8012:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7987:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7978:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 962,
														"nodeType": "ExpressionStatement",
														"src": "7978:35:6"
													},
													{
														"expression": {
															"id": 972,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 963,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 898,
																"src": "8027:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 971,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 968,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 964,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 898,
																				"src": "8037:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 967,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 965,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 885,
																					"src": "8046:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 966,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 898,
																					"src": "8050:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8046:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8037:19:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 969,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8036:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 970,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8061:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8036:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8027:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 973,
														"nodeType": "ExpressionStatement",
														"src": "8027:35:6"
													},
													{
														"expression": {
															"id": 983,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 974,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 898,
																"src": "8076:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 982,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 979,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 975,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 898,
																				"src": "8086:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 978,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 976,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 885,
																					"src": "8095:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 977,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 898,
																					"src": "8099:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8095:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8086:19:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 980,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8085:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 981,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8110:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8085:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8076:35:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 984,
														"nodeType": "ExpressionStatement",
														"src": "8076:35:6"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 986,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 898,
																	"src": "8136:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 989,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 987,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 885,
																		"src": "8144:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 988,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 898,
																		"src": "8148:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8144:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 985,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 667,
																"src": "8132:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8132:23:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 889,
														"id": 991,
														"nodeType": "Return",
														"src": "8125:30:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 883,
										"nodeType": "StructuredDocumentation",
										"src": "6317:208:6",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 994,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "6539:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6552:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "6544:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 884,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6544:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6543:11:6"
									},
									"returnParameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "6578:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 887,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6578:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6577:9:6"
									},
									"scope": 1490,
									"src": "6530:1642:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1029,
										"nodeType": "Block",
										"src": "8348:161:6",
										"statements": [
											{
												"id": 1028,
												"nodeType": "UncheckedBlock",
												"src": "8358:145:6",
												"statements": [
													{
														"assignments": [
															1006
														],
														"declarations": [
															{
																"constant": false,
																"id": 1006,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "8390:6:6",
																"nodeType": "VariableDeclaration",
																"scope": 1028,
																"src": "8382:14:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1005,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "8382:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1010,
														"initialValue": {
															"arguments": [
																{
																	"id": 1008,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 997,
																	"src": "8404:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1007,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	994,
																	1030
																],
																"referencedDeclaration": 994,
																"src": "8399:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1009,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8399:7:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "8382:24:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1026,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1011,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1006,
																"src": "8427:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1021,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$631",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1015,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1012,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1000,
																					"src": "8437:8:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$631",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1013,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 631,
																						"src": "8449:8:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$631_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1014,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "8458:2:6",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 629,
																					"src": "8449:11:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$631",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "8437:23:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1020,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1018,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1016,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1006,
																						"src": "8464:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1017,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1006,
																						"src": "8473:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "8464:15:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1019,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 997,
																					"src": "8482:1:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8464:19:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "8437:46:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1023,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8490:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1024,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "8437:54:6",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1022,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8486:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1025,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "8436:56:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "8427:65:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1004,
														"id": 1027,
														"nodeType": "Return",
														"src": "8420:72:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 995,
										"nodeType": "StructuredDocumentation",
										"src": "8178:89:6",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 1030,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8281:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8294:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "8286:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 996,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8286:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8306:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "8297:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$631",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 999,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 998,
														"name": "Rounding",
														"nameLocations": [
															"8297:8:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 631,
														"src": "8297:8:6"
													},
													"referencedDeclaration": 631,
													"src": "8297:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$631",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8285:30:6"
									},
									"returnParameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "8339:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1002,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8339:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8338:9:6"
									},
									"scope": 1490,
									"src": "8272:237:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1161,
										"nodeType": "Block",
										"src": "8694:922:6",
										"statements": [
											{
												"assignments": [
													1039
												],
												"declarations": [
													{
														"constant": false,
														"id": 1039,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8712:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1161,
														"src": "8704:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1038,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8704:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1041,
												"initialValue": {
													"hexValue": "30",
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8721:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8704:18:6"
											},
											{
												"id": 1158,
												"nodeType": "UncheckedBlock",
												"src": "8732:855:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1046,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1044,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1042,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "8760:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1043,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8769:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "8760:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1045,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8775:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8760:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1056,
														"nodeType": "IfStatement",
														"src": "8756:99:6",
														"trueBody": {
															"id": 1055,
															"nodeType": "Block",
															"src": "8778:77:6",
															"statements": [
																{
																	"expression": {
																		"id": 1049,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1047,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1033,
																			"src": "8796:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1048,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8806:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8796:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1050,
																	"nodeType": "ExpressionStatement",
																	"src": "8796:13:6"
																},
																{
																	"expression": {
																		"id": 1053,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1051,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1039,
																			"src": "8827:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1052,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8837:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "8827:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1054,
																	"nodeType": "ExpressionStatement",
																	"src": "8827:13:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1061,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1059,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1057,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "8872:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1058,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8881:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "8872:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1060,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8886:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8872:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1071,
														"nodeType": "IfStatement",
														"src": "8868:96:6",
														"trueBody": {
															"id": 1070,
															"nodeType": "Block",
															"src": "8889:75:6",
															"statements": [
																{
																	"expression": {
																		"id": 1064,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1062,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1033,
																			"src": "8907:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1063,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8917:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8907:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1065,
																	"nodeType": "ExpressionStatement",
																	"src": "8907:12:6"
																},
																{
																	"expression": {
																		"id": 1068,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1066,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1039,
																			"src": "8937:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1067,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8947:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "8937:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1069,
																	"nodeType": "ExpressionStatement",
																	"src": "8937:12:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1076,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1074,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1072,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "8981:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1073,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8990:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "8981:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1075,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8995:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8981:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1086,
														"nodeType": "IfStatement",
														"src": "8977:96:6",
														"trueBody": {
															"id": 1085,
															"nodeType": "Block",
															"src": "8998:75:6",
															"statements": [
																{
																	"expression": {
																		"id": 1079,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1077,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1033,
																			"src": "9016:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1078,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9026:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9016:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1080,
																	"nodeType": "ExpressionStatement",
																	"src": "9016:12:6"
																},
																{
																	"expression": {
																		"id": 1083,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1081,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1039,
																			"src": "9046:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1082,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9056:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "9046:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1084,
																	"nodeType": "ExpressionStatement",
																	"src": "9046:12:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1091,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1089,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1087,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "9090:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1088,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9099:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "9090:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9104:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9090:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1101,
														"nodeType": "IfStatement",
														"src": "9086:96:6",
														"trueBody": {
															"id": 1100,
															"nodeType": "Block",
															"src": "9107:75:6",
															"statements": [
																{
																	"expression": {
																		"id": 1094,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1092,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1033,
																			"src": "9125:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1093,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9135:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9125:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1095,
																	"nodeType": "ExpressionStatement",
																	"src": "9125:12:6"
																},
																{
																	"expression": {
																		"id": 1098,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1096,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1039,
																			"src": "9155:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1097,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9165:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "9155:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1099,
																	"nodeType": "ExpressionStatement",
																	"src": "9155:12:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1104,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1102,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "9199:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1103,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9208:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "9199:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1105,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9212:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9199:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1116,
														"nodeType": "IfStatement",
														"src": "9195:93:6",
														"trueBody": {
															"id": 1115,
															"nodeType": "Block",
															"src": "9215:73:6",
															"statements": [
																{
																	"expression": {
																		"id": 1109,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1107,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1033,
																			"src": "9233:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1108,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9243:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9233:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1110,
																	"nodeType": "ExpressionStatement",
																	"src": "9233:11:6"
																},
																{
																	"expression": {
																		"id": 1113,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1111,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1039,
																			"src": "9262:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1112,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9272:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "9262:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1114,
																	"nodeType": "ExpressionStatement",
																	"src": "9262:11:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1117,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "9305:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 1118,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9314:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "9305:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1120,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9318:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9305:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1131,
														"nodeType": "IfStatement",
														"src": "9301:93:6",
														"trueBody": {
															"id": 1130,
															"nodeType": "Block",
															"src": "9321:73:6",
															"statements": [
																{
																	"expression": {
																		"id": 1124,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1122,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1033,
																			"src": "9339:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1123,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9349:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9339:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1125,
																	"nodeType": "ExpressionStatement",
																	"src": "9339:11:6"
																},
																{
																	"expression": {
																		"id": 1128,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1126,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1039,
																			"src": "9368:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1127,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9378:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "9368:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1129,
																	"nodeType": "ExpressionStatement",
																	"src": "9368:11:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1134,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1132,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "9411:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 1133,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9420:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "9411:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1135,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9424:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9411:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1146,
														"nodeType": "IfStatement",
														"src": "9407:93:6",
														"trueBody": {
															"id": 1145,
															"nodeType": "Block",
															"src": "9427:73:6",
															"statements": [
																{
																	"expression": {
																		"id": 1139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1137,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1033,
																			"src": "9445:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1138,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9455:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9445:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1140,
																	"nodeType": "ExpressionStatement",
																	"src": "9445:11:6"
																},
																{
																	"expression": {
																		"id": 1143,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1141,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1039,
																			"src": "9474:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1142,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9484:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "9474:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1144,
																	"nodeType": "ExpressionStatement",
																	"src": "9474:11:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1151,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1149,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1147,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1033,
																	"src": "9517:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1148,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9526:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9517:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1150,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9530:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9517:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1157,
														"nodeType": "IfStatement",
														"src": "9513:64:6",
														"trueBody": {
															"id": 1156,
															"nodeType": "Block",
															"src": "9533:44:6",
															"statements": [
																{
																	"expression": {
																		"id": 1154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1152,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1039,
																			"src": "9551:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1153,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9561:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9551:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1155,
																	"nodeType": "ExpressionStatement",
																	"src": "9551:11:6"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1159,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1039,
													"src": "9603:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1037,
												"id": 1160,
												"nodeType": "Return",
												"src": "9596:13:6"
											}
										]
									},
									"documentation": {
										"id": 1031,
										"nodeType": "StructuredDocumentation",
										"src": "8515:113:6",
										"text": " @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1162,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "8642:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8655:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1162,
												"src": "8647:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8647:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8646:15:6"
									},
									"returnParameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1162,
												"src": "8685:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1035,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8685:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8684:9:6"
									},
									"scope": 1490,
									"src": "8633:983:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1197,
										"nodeType": "Block",
										"src": "9849:165:6",
										"statements": [
											{
												"id": 1196,
												"nodeType": "UncheckedBlock",
												"src": "9859:149:6",
												"statements": [
													{
														"assignments": [
															1174
														],
														"declarations": [
															{
																"constant": false,
																"id": 1174,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "9891:6:6",
																"nodeType": "VariableDeclaration",
																"scope": 1196,
																"src": "9883:14:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1173,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9883:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1178,
														"initialValue": {
															"arguments": [
																{
																	"id": 1176,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1165,
																	"src": "9905:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1175,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1162,
																	1198
																],
																"referencedDeclaration": 1162,
																"src": "9900:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9900:11:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "9883:28:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1179,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1174,
																"src": "9932:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1189,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$631",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1183,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1180,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1168,
																					"src": "9942:8:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$631",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1181,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 631,
																						"src": "9954:8:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$631_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1182,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "9963:2:6",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 629,
																					"src": "9954:11:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$631",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "9942:23:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1188,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1186,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 1184,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "9969:1:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 1185,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1174,
																						"src": "9974:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "9969:11:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1187,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1165,
																					"src": "9983:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9969:19:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "9942:46:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1191,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9995:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1192,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "9942:54:6",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1190,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9991:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1193,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "9941:56:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "9932:65:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1172,
														"id": 1195,
														"nodeType": "Return",
														"src": "9925:72:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1163,
										"nodeType": "StructuredDocumentation",
										"src": "9622:142:6",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1198,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "9778:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9791:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "9783:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9783:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1168,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9807:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "9798:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$631",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1167,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1166,
														"name": "Rounding",
														"nameLocations": [
															"9798:8:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 631,
														"src": "9798:8:6"
													},
													"referencedDeclaration": 631,
													"src": "9798:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$631",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9782:34:6"
									},
									"returnParameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "9840:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9840:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9839:9:6"
									},
									"scope": 1490,
									"src": "9769:245:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1326,
										"nodeType": "Block",
										"src": "10201:854:6",
										"statements": [
											{
												"assignments": [
													1207
												],
												"declarations": [
													{
														"constant": false,
														"id": 1207,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10219:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1326,
														"src": "10211:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1206,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10211:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1209,
												"initialValue": {
													"hexValue": "30",
													"id": 1208,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10228:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10211:18:6"
											},
											{
												"id": 1323,
												"nodeType": "UncheckedBlock",
												"src": "10239:787:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1210,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1201,
																"src": "10267:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 1213,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1211,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10276:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1212,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10282:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10276:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "10267:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1226,
														"nodeType": "IfStatement",
														"src": "10263:103:6",
														"trueBody": {
															"id": 1225,
															"nodeType": "Block",
															"src": "10286:80:6",
															"statements": [
																{
																	"expression": {
																		"id": 1219,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1215,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1201,
																			"src": "10304:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 1218,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1216,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10313:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 1217,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10319:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "10313:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "10304:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1220,
																	"nodeType": "ExpressionStatement",
																	"src": "10304:17:6"
																},
																{
																	"expression": {
																		"id": 1223,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1221,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1207,
																			"src": "10339:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1222,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10349:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10339:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1224,
																	"nodeType": "ExpressionStatement",
																	"src": "10339:12:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1227,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1201,
																"src": "10383:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 1230,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1228,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10392:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1229,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10398:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "10392:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "10383:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1243,
														"nodeType": "IfStatement",
														"src": "10379:103:6",
														"trueBody": {
															"id": 1242,
															"nodeType": "Block",
															"src": "10402:80:6",
															"statements": [
																{
																	"expression": {
																		"id": 1236,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1232,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1201,
																			"src": "10420:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 1235,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1233,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10429:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 1234,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10435:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "10429:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "10420:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1237,
																	"nodeType": "ExpressionStatement",
																	"src": "10420:17:6"
																},
																{
																	"expression": {
																		"id": 1240,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1238,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1207,
																			"src": "10455:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1239,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10465:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "10455:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1241,
																	"nodeType": "ExpressionStatement",
																	"src": "10455:12:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1244,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1201,
																"src": "10499:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 1247,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1245,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10508:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10514:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "10508:8:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "10499:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1260,
														"nodeType": "IfStatement",
														"src": "10495:103:6",
														"trueBody": {
															"id": 1259,
															"nodeType": "Block",
															"src": "10518:80:6",
															"statements": [
																{
																	"expression": {
																		"id": 1253,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1249,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1201,
																			"src": "10536:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 1252,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1250,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10545:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 1251,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10551:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "10545:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "10536:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1254,
																	"nodeType": "ExpressionStatement",
																	"src": "10536:17:6"
																},
																{
																	"expression": {
																		"id": 1257,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1255,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1207,
																			"src": "10571:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1256,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10581:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "10571:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1258,
																	"nodeType": "ExpressionStatement",
																	"src": "10571:12:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1265,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1261,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1201,
																"src": "10615:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 1264,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1262,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10624:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1263,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10630:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "10624:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "10615:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1277,
														"nodeType": "IfStatement",
														"src": "10611:100:6",
														"trueBody": {
															"id": 1276,
															"nodeType": "Block",
															"src": "10633:78:6",
															"statements": [
																{
																	"expression": {
																		"id": 1270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1266,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1201,
																			"src": "10651:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 1269,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1267,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10660:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 1268,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10666:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "10660:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "10651:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1271,
																	"nodeType": "ExpressionStatement",
																	"src": "10651:16:6"
																},
																{
																	"expression": {
																		"id": 1274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1272,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1207,
																			"src": "10685:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1273,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10695:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "10685:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1275,
																	"nodeType": "ExpressionStatement",
																	"src": "10685:11:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1282,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1278,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1201,
																"src": "10728:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 1281,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1279,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10737:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 1280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10743:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "10737:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "10728:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1294,
														"nodeType": "IfStatement",
														"src": "10724:100:6",
														"trueBody": {
															"id": 1293,
															"nodeType": "Block",
															"src": "10746:78:6",
															"statements": [
																{
																	"expression": {
																		"id": 1287,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1283,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1201,
																			"src": "10764:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 1286,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1284,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10773:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 1285,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10779:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "10773:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "10764:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1288,
																	"nodeType": "ExpressionStatement",
																	"src": "10764:16:6"
																},
																{
																	"expression": {
																		"id": 1291,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1289,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1207,
																			"src": "10798:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1290,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10808:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "10798:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1292,
																	"nodeType": "ExpressionStatement",
																	"src": "10798:11:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1299,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1295,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1201,
																"src": "10841:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 1298,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1296,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10850:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 1297,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10856:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "10850:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "10841:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1311,
														"nodeType": "IfStatement",
														"src": "10837:100:6",
														"trueBody": {
															"id": 1310,
															"nodeType": "Block",
															"src": "10859:78:6",
															"statements": [
																{
																	"expression": {
																		"id": 1304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1300,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1201,
																			"src": "10877:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 1303,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 1301,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10886:2:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 1302,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10892:1:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "10886:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "10877:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1305,
																	"nodeType": "ExpressionStatement",
																	"src": "10877:16:6"
																},
																{
																	"expression": {
																		"id": 1308,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1306,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1207,
																			"src": "10911:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1307,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10921:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "10911:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1309,
																	"nodeType": "ExpressionStatement",
																	"src": "10911:11:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1316,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1312,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1201,
																"src": "10954:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 1315,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1313,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10963:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1314,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10969:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10963:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "10954:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1322,
														"nodeType": "IfStatement",
														"src": "10950:66:6",
														"trueBody": {
															"id": 1321,
															"nodeType": "Block",
															"src": "10972:44:6",
															"statements": [
																{
																	"expression": {
																		"id": 1319,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1317,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1207,
																			"src": "10990:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1318,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11000:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "10990:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1320,
																	"nodeType": "ExpressionStatement",
																	"src": "10990:11:6"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1324,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1207,
													"src": "11042:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1205,
												"id": 1325,
												"nodeType": "Return",
												"src": "11035:13:6"
											}
										]
									},
									"documentation": {
										"id": 1199,
										"nodeType": "StructuredDocumentation",
										"src": "10020:114:6",
										"text": " @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1327,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "10148:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10162:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1327,
												"src": "10154:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10154:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10153:15:6"
									},
									"returnParameters": {
										"id": 1205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1327,
												"src": "10192:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10192:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10191:9:6"
									},
									"scope": 1490,
									"src": "10139:916:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1362,
										"nodeType": "Block",
										"src": "11290:167:6",
										"statements": [
											{
												"id": 1361,
												"nodeType": "UncheckedBlock",
												"src": "11300:151:6",
												"statements": [
													{
														"assignments": [
															1339
														],
														"declarations": [
															{
																"constant": false,
																"id": 1339,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11332:6:6",
																"nodeType": "VariableDeclaration",
																"scope": 1361,
																"src": "11324:14:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1338,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11324:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1343,
														"initialValue": {
															"arguments": [
																{
																	"id": 1341,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1330,
																	"src": "11347:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1340,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1327,
																	1363
																],
																"referencedDeclaration": 1327,
																"src": "11341:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11341:12:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11324:29:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1359,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1344,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1339,
																"src": "11374:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1354,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$631",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1348,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1345,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1333,
																					"src": "11384:8:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$631",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1346,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 631,
																						"src": "11396:8:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$631_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1347,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "11405:2:6",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 629,
																					"src": "11396:11:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$631",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "11384:23:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1353,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1351,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 1349,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "11411:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 1350,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1339,
																						"src": "11417:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "11411:12:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1352,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1330,
																					"src": "11426:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11411:20:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "11384:47:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1356,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11438:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1357,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "11384:55:6",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1355,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11434:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1358,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "11383:57:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11374:66:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1337,
														"id": 1360,
														"nodeType": "Return",
														"src": "11367:73:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1328,
										"nodeType": "StructuredDocumentation",
										"src": "11061:143:6",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "11218:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11232:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "11224:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11224:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1333,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11248:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "11239:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$631",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1332,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1331,
														"name": "Rounding",
														"nameLocations": [
															"11239:8:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 631,
														"src": "11239:8:6"
													},
													"referencedDeclaration": 631,
													"src": "11239:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$631",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11223:34:6"
									},
									"returnParameters": {
										"id": 1337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1336,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1363,
												"src": "11281:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1335,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11281:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11280:9:6"
									},
									"scope": 1490,
									"src": "11209:248:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1449,
										"nodeType": "Block",
										"src": "11771:600:6",
										"statements": [
											{
												"assignments": [
													1372
												],
												"declarations": [
													{
														"constant": false,
														"id": 1372,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11789:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1449,
														"src": "11781:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1371,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11781:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1374,
												"initialValue": {
													"hexValue": "30",
													"id": 1373,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11798:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11781:18:6"
											},
											{
												"id": 1446,
												"nodeType": "UncheckedBlock",
												"src": "11809:533:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1379,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1375,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1366,
																	"src": "11837:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 1376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11846:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11837:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1378,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11852:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11837:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1389,
														"nodeType": "IfStatement",
														"src": "11833:98:6",
														"trueBody": {
															"id": 1388,
															"nodeType": "Block",
															"src": "11855:76:6",
															"statements": [
																{
																	"expression": {
																		"id": 1382,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1380,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1366,
																			"src": "11873:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 1381,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11883:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11873:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1383,
																	"nodeType": "ExpressionStatement",
																	"src": "11873:13:6"
																},
																{
																	"expression": {
																		"id": 1386,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1384,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1372,
																			"src": "11904:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1385,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11914:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11904:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1387,
																	"nodeType": "ExpressionStatement",
																	"src": "11904:12:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1392,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1390,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1366,
																	"src": "11948:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 1391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11957:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11948:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1393,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11962:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11948:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1404,
														"nodeType": "IfStatement",
														"src": "11944:95:6",
														"trueBody": {
															"id": 1403,
															"nodeType": "Block",
															"src": "11965:74:6",
															"statements": [
																{
																	"expression": {
																		"id": 1397,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1395,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1366,
																			"src": "11983:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 1396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11993:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11983:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1398,
																	"nodeType": "ExpressionStatement",
																	"src": "11983:12:6"
																},
																{
																	"expression": {
																		"id": 1401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1399,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1372,
																			"src": "12013:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 1400,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12023:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12013:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1402,
																	"nodeType": "ExpressionStatement",
																	"src": "12013:11:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1407,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1405,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1366,
																	"src": "12056:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 1406,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12065:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12056:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1408,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12070:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12056:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1419,
														"nodeType": "IfStatement",
														"src": "12052:95:6",
														"trueBody": {
															"id": 1418,
															"nodeType": "Block",
															"src": "12073:74:6",
															"statements": [
																{
																	"expression": {
																		"id": 1412,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1410,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1366,
																			"src": "12091:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 1411,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12101:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12091:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1413,
																	"nodeType": "ExpressionStatement",
																	"src": "12091:12:6"
																},
																{
																	"expression": {
																		"id": 1416,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1414,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1372,
																			"src": "12121:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 1415,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12131:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12121:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1417,
																	"nodeType": "ExpressionStatement",
																	"src": "12121:11:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1424,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1422,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1420,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1366,
																	"src": "12164:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 1421,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12173:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12164:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1423,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12178:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12164:15:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1434,
														"nodeType": "IfStatement",
														"src": "12160:95:6",
														"trueBody": {
															"id": 1433,
															"nodeType": "Block",
															"src": "12181:74:6",
															"statements": [
																{
																	"expression": {
																		"id": 1427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1425,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1366,
																			"src": "12199:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 1426,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12209:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12199:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1428,
																	"nodeType": "ExpressionStatement",
																	"src": "12199:12:6"
																},
																{
																	"expression": {
																		"id": 1431,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1429,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1372,
																			"src": "12229:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 1430,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12239:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12229:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1432,
																	"nodeType": "ExpressionStatement",
																	"src": "12229:11:6"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1435,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1366,
																	"src": "12272:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 1436,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12281:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12272:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1438,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12285:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12272:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1445,
														"nodeType": "IfStatement",
														"src": "12268:64:6",
														"trueBody": {
															"id": 1444,
															"nodeType": "Block",
															"src": "12288:44:6",
															"statements": [
																{
																	"expression": {
																		"id": 1442,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1440,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1372,
																			"src": "12306:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 1441,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12316:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "12306:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1443,
																	"nodeType": "ExpressionStatement",
																	"src": "12306:11:6"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 1447,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1372,
													"src": "12358:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1370,
												"id": 1448,
												"nodeType": "Return",
												"src": "12351:13:6"
											}
										]
									},
									"documentation": {
										"id": 1364,
										"nodeType": "StructuredDocumentation",
										"src": "11463:240:6",
										"text": " @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 1450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "11717:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11732:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1450,
												"src": "11724:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11724:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11723:15:6"
									},
									"returnParameters": {
										"id": 1370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1369,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1450,
												"src": "11762:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1368,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11762:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11761:9:6"
									},
									"scope": 1490,
									"src": "11708:663:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1488,
										"nodeType": "Block",
										"src": "12608:174:6",
										"statements": [
											{
												"id": 1487,
												"nodeType": "UncheckedBlock",
												"src": "12618:158:6",
												"statements": [
													{
														"assignments": [
															1462
														],
														"declarations": [
															{
																"constant": false,
																"id": 1462,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12650:6:6",
																"nodeType": "VariableDeclaration",
																"scope": 1487,
																"src": "12642:14:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1461,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12642:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1466,
														"initialValue": {
															"arguments": [
																{
																	"id": 1464,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1453,
																	"src": "12666:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1463,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1450,
																	1489
																],
																"referencedDeclaration": 1450,
																"src": "12659:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 1465,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12659:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12642:30:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1485,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1467,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1462,
																"src": "12693:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1480,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_enum$_Rounding_$631",
																					"typeString": "enum Math.Rounding"
																				},
																				"id": 1471,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1468,
																					"name": "rounding",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1456,
																					"src": "12703:8:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$631",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"expression": {
																						"id": 1469,
																						"name": "Rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 631,
																						"src": "12715:8:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_enum$_Rounding_$631_$",
																							"typeString": "type(enum Math.Rounding)"
																						}
																					},
																					"id": 1470,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "12724:2:6",
																					"memberName": "Up",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 629,
																					"src": "12715:11:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_enum$_Rounding_$631",
																						"typeString": "enum Math.Rounding"
																					}
																				},
																				"src": "12703:23:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1479,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1477,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 1472,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12730:1:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1475,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1473,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1462,
																									"src": "12736:6:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 1474,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12746:1:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "12736:11:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1476,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "12735:13:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12730:18:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1478,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1453,
																					"src": "12751:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12730:26:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12703:53:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 1482,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12763:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 1483,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12703:61:6",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 1481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12759:1:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1484,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12702:63:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12693:72:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1460,
														"id": 1486,
														"nodeType": "Return",
														"src": "12686:79:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1451,
										"nodeType": "StructuredDocumentation",
										"src": "12377:144:6",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 1489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "12535:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12550:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "12542:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1452,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12542:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12566:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "12557:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$631",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1455,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1454,
														"name": "Rounding",
														"nameLocations": [
															"12557:8:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 631,
														"src": "12557:8:6"
													},
													"referencedDeclaration": 631,
													"src": "12557:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$631",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12541:34:6"
									},
									"returnParameters": {
										"id": 1460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1459,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1489,
												"src": "12599:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1458,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12599:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12598:9:6"
									},
									"scope": 1490,
									"src": "12526:256:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1491,
							"src": "202:12582:6",
							"usedErrors": []
						}
					],
					"src": "103:12682:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							1595
						]
					},
					"id": 1596,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1492,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1493,
								"nodeType": "StructuredDocumentation",
								"src": "134:80:7",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 1595,
							"linearizedBaseContracts": [
								1595
							],
							"name": "SignedMath",
							"nameLocation": "223:10:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1510,
										"nodeType": "Block",
										"src": "375:37:7",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 1505,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1503,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1496,
															"src": "392:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1504,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1498,
															"src": "396:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "392:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1507,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1498,
														"src": "404:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 1508,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "392:13:7",
													"trueExpression": {
														"id": 1506,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1496,
														"src": "400:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 1502,
												"id": 1509,
												"nodeType": "Return",
												"src": "385:20:7"
											}
										]
									},
									"documentation": {
										"id": 1494,
										"nodeType": "StructuredDocumentation",
										"src": "240:66:7",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 1511,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "320:3:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "331:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "324:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1495,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "324:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "341:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "334:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1497,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "334:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "323:20:7"
									},
									"returnParameters": {
										"id": 1502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1501,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "367:6:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1500,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "367:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "366:8:7"
									},
									"scope": 1595,
									"src": "311:101:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1528,
										"nodeType": "Block",
										"src": "554:37:7",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 1523,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1521,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1514,
															"src": "571:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 1522,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1516,
															"src": "575:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "571:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1525,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1516,
														"src": "583:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 1526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "571:13:7",
													"trueExpression": {
														"id": 1524,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1514,
														"src": "579:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 1520,
												"id": 1527,
												"nodeType": "Return",
												"src": "564:20:7"
											}
										]
									},
									"documentation": {
										"id": 1512,
										"nodeType": "StructuredDocumentation",
										"src": "418:67:7",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 1529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "499:3:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "510:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1529,
												"src": "503:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1513,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "503:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1516,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "520:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1529,
												"src": "513:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1515,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "513:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "502:20:7"
									},
									"returnParameters": {
										"id": 1520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1529,
												"src": "546:6:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1518,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "546:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "545:8:7"
									},
									"scope": 1595,
									"src": "490:101:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1572,
										"nodeType": "Block",
										"src": "796:162:7",
										"statements": [
											{
												"assignments": [
													1540
												],
												"declarations": [
													{
														"constant": false,
														"id": 1540,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "865:1:7",
														"nodeType": "VariableDeclaration",
														"scope": 1572,
														"src": "858:8:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 1539,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "858:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1553,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1543,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1541,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1532,
																	"src": "870:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1542,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1534,
																	"src": "874:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "870:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1544,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "869:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1550,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 1547,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1545,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1532,
																				"src": "881:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 1546,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1534,
																				"src": "885:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "881:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 1548,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "880:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1549,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "891:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "880:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1551,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "879:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "869:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "858:35:7"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 1570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1554,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1540,
														"src": "910:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1568,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1562,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 1559,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1540,
																						"src": "930:1:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 1558,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "922:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 1557,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "922:7:7",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1560,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "922:10:7",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 1561,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "936:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "922:17:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1556,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "915:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 1555,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "915:6:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1563,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "915:25:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 1566,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1564,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1532,
																				"src": "944:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 1565,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1534,
																				"src": "948:1:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "944:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 1567,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "943:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "915:35:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 1569,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "914:37:7",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "910:41:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 1538,
												"id": 1571,
												"nodeType": "Return",
												"src": "903:48:7"
											}
										]
									},
									"documentation": {
										"id": 1530,
										"nodeType": "StructuredDocumentation",
										"src": "597:126:7",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 1573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "737:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "752:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1573,
												"src": "745:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1531,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "745:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "762:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1573,
												"src": "755:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1533,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "755:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "744:20:7"
									},
									"returnParameters": {
										"id": 1538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1573,
												"src": "788:6:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1536,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "788:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "787:8:7"
									},
									"scope": 1595,
									"src": "728:230:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1593,
										"nodeType": "Block",
										"src": "1102:158:7",
										"statements": [
											{
												"id": 1592,
												"nodeType": "UncheckedBlock",
												"src": "1112:142:7",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 1585,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1583,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1576,
																			"src": "1227:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1584,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1232:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1227:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 1588,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1240:2:7",
																		"subExpression": {
																			"id": 1587,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1576,
																			"src": "1241:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 1589,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1227:15:7",
																	"trueExpression": {
																		"id": 1586,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1576,
																		"src": "1236:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 1582,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1219:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1581,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1219:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1590,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1219:24:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1580,
														"id": 1591,
														"nodeType": "Return",
														"src": "1212:31:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1574,
										"nodeType": "StructuredDocumentation",
										"src": "964:78:7",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 1594,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1056:3:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1576,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1067:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1594,
												"src": "1060:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1575,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1059:10:7"
									},
									"returnParameters": {
										"id": 1580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1579,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1594,
												"src": "1093:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1093:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:9:7"
									},
									"scope": 1595,
									"src": "1047:213:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1596,
							"src": "215:1047:7",
							"usedErrors": []
						}
					],
					"src": "109:1154:7"
				},
				"id": 7
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
					"exportedSymbols": {
						"IConstantFlowAgreementV1": [
							2005
						],
						"ISuperAgreement": [
							2666
						],
						"ISuperfluidToken": [
							4323
						]
					},
					"id": 2006,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1597,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:8"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "../superfluid/ISuperAgreement.sol",
							"id": 1599,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2006,
							"sourceUnit": 2667,
							"src": "59:68:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1598,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2666,
										"src": "68:15:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "../superfluid/ISuperfluidToken.sol",
							"id": 1601,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2006,
							"sourceUnit": 4324,
							"src": "128:70:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1600,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4323,
										"src": "137:16:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1603,
										"name": "ISuperAgreement",
										"nameLocations": [
											"320:15:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2666,
										"src": "320:15:8"
									},
									"id": 1604,
									"nodeType": "InheritanceSpecifier",
									"src": "320:15:8"
								}
							],
							"canonicalName": "IConstantFlowAgreementV1",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1602,
								"nodeType": "StructuredDocumentation",
								"src": "200:73:8",
								"text": " @title Constant Flow Agreement interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 2005,
							"linearizedBaseContracts": [
								2005,
								2666
							],
							"name": "IConstantFlowAgreementV1",
							"nameLocation": "292:24:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "4b993136",
									"id": 1606,
									"name": "CFA_ACL_NO_SENDER_CREATE",
									"nameLocation": "523:24:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "547:2:8"
									},
									"src": "517:33:8"
								},
								{
									"errorSelector": "edfa0d3b",
									"id": 1608,
									"name": "CFA_ACL_NO_SENDER_UPDATE",
									"nameLocation": "589:24:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1607,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "613:2:8"
									},
									"src": "583:33:8"
								},
								{
									"errorSelector": "a3eab6ac",
									"id": 1610,
									"name": "CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS",
									"nameLocation": "655:38:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1609,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "693:2:8"
									},
									"src": "649:47:8"
								},
								{
									"errorSelector": "ac434b5f",
									"id": 1612,
									"name": "CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS",
									"nameLocation": "721:38:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:8"
									},
									"src": "715:47:8"
								},
								{
									"errorSelector": "e30f1bff",
									"id": 1614,
									"name": "CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS",
									"nameLocation": "787:38:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1613,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "825:2:8"
									},
									"src": "781:47:8"
								},
								{
									"errorSelector": "a0645c1f",
									"id": 1616,
									"name": "CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED",
									"nameLocation": "853:36:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "889:2:8"
									},
									"src": "847:45:8"
								},
								{
									"errorSelector": "7939d66c",
									"id": 1618,
									"name": "CFA_ACL_UNCLEAN_PERMISSIONS",
									"nameLocation": "919:27:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1617,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "946:2:8"
									},
									"src": "913:36:8"
								},
								{
									"errorSelector": "b0ed394d",
									"id": 1620,
									"name": "CFA_ACL_NO_SENDER_FLOW_OPERATOR",
									"nameLocation": "985:31:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1619,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1016:2:8"
									},
									"src": "979:40:8"
								},
								{
									"errorSelector": "86e0377d",
									"id": 1622,
									"name": "CFA_ACL_NO_NEGATIVE_ALLOWANCE",
									"nameLocation": "1051:29:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1621,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1080:2:8"
									},
									"src": "1045:38:8"
								},
								{
									"errorSelector": "801b6863",
									"id": 1624,
									"name": "CFA_FLOW_ALREADY_EXISTS",
									"nameLocation": "1117:23:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1623,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1140:2:8"
									},
									"src": "1111:32:8"
								},
								{
									"errorSelector": "5a32bf24",
									"id": 1626,
									"name": "CFA_FLOW_DOES_NOT_EXIST",
									"nameLocation": "1183:23:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1625,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1206:2:8"
									},
									"src": "1177:32:8"
								},
								{
									"errorSelector": "ea76c9b3",
									"id": 1628,
									"name": "CFA_INSUFFICIENT_BALANCE",
									"nameLocation": "1249:24:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1627,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1273:2:8"
									},
									"src": "1243:33:8"
								},
								{
									"errorSelector": "1ce9b067",
									"id": 1630,
									"name": "CFA_ZERO_ADDRESS_SENDER",
									"nameLocation": "1315:23:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1629,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:8"
									},
									"src": "1309:32:8"
								},
								{
									"errorSelector": "78e02b2a",
									"id": 1632,
									"name": "CFA_ZERO_ADDRESS_RECEIVER",
									"nameLocation": "1381:25:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1631,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1406:2:8"
									},
									"src": "1375:34:8"
								},
								{
									"errorSelector": "9f76430b",
									"id": 1634,
									"name": "CFA_HOOK_OUT_OF_GAS",
									"nameLocation": "1447:19:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1466:2:8"
									},
									"src": "1441:28:8"
								},
								{
									"errorSelector": "752c2b9c",
									"id": 1636,
									"name": "CFA_DEPOSIT_TOO_BIG",
									"nameLocation": "1513:19:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1532:2:8"
									},
									"src": "1507:28:8"
								},
								{
									"errorSelector": "0c9c55c1",
									"id": 1638,
									"name": "CFA_FLOW_RATE_TOO_BIG",
									"nameLocation": "1579:21:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1637,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1600:2:8"
									},
									"src": "1573:30:8"
								},
								{
									"errorSelector": "ce11b5d1",
									"id": 1640,
									"name": "CFA_NON_CRITICAL_SENDER",
									"nameLocation": "1645:23:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1639,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1668:2:8"
									},
									"src": "1639:32:8"
								},
								{
									"errorSelector": "91acad16",
									"id": 1642,
									"name": "CFA_INVALID_FLOW_RATE",
									"nameLocation": "1711:21:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1641,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1732:2:8"
									},
									"src": "1705:30:8"
								},
								{
									"errorSelector": "a47338ef",
									"id": 1644,
									"name": "CFA_NO_SELF_FLOW",
									"nameLocation": "1777:16:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1643,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:8"
									},
									"src": "1771:25:8"
								},
								{
									"baseFunctions": [
										2648
									],
									"body": {
										"id": 1655,
										"nodeType": "Block",
										"src": "1962:95:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e61677265656d656e74732e436f6e7374616e74466c6f7741677265656d656e742e7631",
															"id": 1652,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1989:60:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3",
																"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\""
															},
															"value": "org.superfluid-finance.agreements.ConstantFlowAgreement.v1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_a9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3",
																"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\""
															}
														],
														"id": 1651,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "1979:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1653,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1979:71:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1650,
												"id": 1654,
												"nodeType": "Return",
												"src": "1972:78:8"
											}
										]
									},
									"documentation": {
										"id": 1645,
										"nodeType": "StructuredDocumentation",
										"src": "1838:53:8",
										"text": "@dev ISuperAgreement.agreementType implementation"
									},
									"functionSelector": "7730599e",
									"id": 1656,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "agreementType",
									"nameLocation": "1905:13:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1647,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1930:8:8"
									},
									"parameters": {
										"id": 1646,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1918:2:8"
									},
									"returnParameters": {
										"id": 1650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1649,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1656,
												"src": "1953:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1648,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1953:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1952:9:8"
									},
									"scope": 2005,
									"src": "1896:161:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1657,
										"nodeType": "StructuredDocumentation",
										"src": "2063:239:8",
										"text": " @notice Get the maximum flow rate allowed with the deposit\n @dev The deposit is clipped and rounded down\n @param deposit Deposit amount used for creating the flow\n @return flowRate The maximum flow rate"
									},
									"functionSelector": "0602f7db",
									"id": 1667,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getMaximumFlowRateFromDeposit",
									"nameLocation": "2316:29:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2372:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1667,
												"src": "2355:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1659,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1658,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2355:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "2355:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "2355:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1662,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2395:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1667,
												"src": "2387:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2387:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:58:8"
									},
									"returnParameters": {
										"id": 1666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1665,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "2457:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1667,
												"src": "2451:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1664,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "2451:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2450:16:8"
									},
									"scope": 2005,
									"src": "2307:160:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1668,
										"nodeType": "StructuredDocumentation",
										"src": "2473:482:8",
										"text": " @notice Get the deposit required for creating the flow\n @dev Calculates the deposit based on the liquidationPeriod and flowRate\n @param flowRate Flow rate to be tested\n @return deposit The deposit amount based on flowRate and liquidationPeriod\n @custom:note \n - if calculated deposit (flowRate * liquidationPeriod) is less\n   than the minimum deposit, we use the minimum deposit otherwise\n   we use the calculated deposit"
									},
									"functionSelector": "8d997f6e",
									"id": 1678,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDepositRequiredForFlowRate",
									"nameLocation": "2969:29:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1671,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3025:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1678,
												"src": "3008:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1670,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1669,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"3008:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "3008:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "3008:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1673,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "3046:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1678,
												"src": "3040:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1672,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "3040:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2998:57:8"
									},
									"returnParameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "3111:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1678,
												"src": "3103:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3102:17:8"
									},
									"scope": 2005,
									"src": "2960:160:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1679,
										"nodeType": "StructuredDocumentation",
										"src": "3126:306:8",
										"text": " @dev Returns whether it is the patrician period based on host.getNow()\n @param account The account we are interested in\n @return isCurrentlyPatricianPeriod Whether it is currently the patrician period dictated by governance\n @return timestamp The value of host.getNow()"
									},
									"functionSelector": "4fe9c291",
									"id": 1691,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPatricianPeriodNow",
									"nameLocation": "3446:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1682,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3493:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1691,
												"src": "3476:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1681,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1680,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"3476:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "3476:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "3476:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1684,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3516:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1691,
												"src": "3508:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1683,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3508:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3466:58:8"
									},
									"returnParameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1687,
												"mutability": "mutable",
												"name": "isCurrentlyPatricianPeriod",
												"nameLocation": "3577:26:8",
												"nodeType": "VariableDeclaration",
												"scope": 1691,
												"src": "3572:31:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1686,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3572:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3613:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1691,
												"src": "3605:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1688,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3605:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3571:52:8"
									},
									"scope": 2005,
									"src": "3437:187:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1692,
										"nodeType": "StructuredDocumentation",
										"src": "3630:329:8",
										"text": " @dev Returns whether it is the patrician period based on timestamp\n @param account The account we are interested in\n @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n @return bool Whether it is currently the patrician period dictated by governance"
									},
									"functionSelector": "4b839e0b",
									"id": 1704,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPatricianPeriod",
									"nameLocation": "3973:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1695,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4017:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "4000:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1694,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1693,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"4000:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "4000:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "4000:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1697,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4040:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "4032:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1696,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4032:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1699,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "4065:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "4057:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1698,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4057:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3990:90:8"
									},
									"returnParameters": {
										"id": 1703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "4126:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1701,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4126:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4125:6:8"
									},
									"scope": 2005,
									"src": "3964:168:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1705,
										"nodeType": "StructuredDocumentation",
										"src": "4138:464:8",
										"text": " @dev msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\n @param token Super token address\n @param flowOperator The permission grantee address\n @param permissions A bitmask representation of the granted permissions\n @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "811b3d40",
									"id": 1721,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlowOperatorPermissions",
									"nameLocation": "4616:29:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1708,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4672:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1721,
												"src": "4655:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1707,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1706,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"4655:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "4655:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "4655:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1710,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "4695:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1721,
												"src": "4687:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1709,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4687:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1712,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "4723:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1721,
												"src": "4717:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1711,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4717:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1714,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "4750:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1721,
												"src": "4744:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1713,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "4744:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1716,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "4792:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1721,
												"src": "4777:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1715,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4777:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4645:156:8"
									},
									"returnParameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "4857:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1721,
												"src": "4844:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4844:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4843:21:8"
									},
									"scope": 2005,
									"src": "4607:258:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1722,
										"nodeType": "StructuredDocumentation",
										"src": "4871:508:8",
										"text": " @notice msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\n @dev if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n @param token Super token address\n @param flowOperator The permission grantee address\n @param addedFlowRateAllowance The flow rate allowance delta\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @return newCtx The new context bytes"
									},
									"functionSelector": "ac5f5d00",
									"id": 1736,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseFlowRateAllowance",
									"nameLocation": "5393:25:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1725,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5445:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "5428:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1724,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1723,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"5428:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "5428:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "5428:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1727,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "5468:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "5460:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5460:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1729,
												"mutability": "mutable",
												"name": "addedFlowRateAllowance",
												"nameLocation": "5496:22:8",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "5490:28:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1728,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "5490:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1731,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "5543:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "5528:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1730,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5528:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5418:134:8"
									},
									"returnParameters": {
										"id": 1735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "5591:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1736,
												"src": "5578:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1733,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5578:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5577:21:8"
									},
									"scope": 2005,
									"src": "5384:215:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1737,
										"nodeType": "StructuredDocumentation",
										"src": "5605:520:8",
										"text": " @dev msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`\n @dev if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n @param token Super token address\n @param flowOperator The permission grantee address\n @param subtractedFlowRateAllowance The flow rate allowance delta\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @return newCtx The new context bytes"
									},
									"functionSelector": "5f51fb23",
									"id": 1751,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseFlowRateAllowance",
									"nameLocation": "6139:25:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1740,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6191:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "6174:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1739,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1738,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"6174:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "6174:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "6174:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1742,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "6214:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "6206:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1741,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1744,
												"mutability": "mutable",
												"name": "subtractedFlowRateAllowance",
												"nameLocation": "6242:27:8",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "6236:33:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1743,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "6236:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1746,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "6294:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "6279:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1745,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6279:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6164:139:8"
									},
									"returnParameters": {
										"id": 1750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1749,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "6342:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1751,
												"src": "6329:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1748,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6329:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6328:21:8"
									},
									"scope": 2005,
									"src": "6130:220:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1752,
										"nodeType": "StructuredDocumentation",
										"src": "6356:295:8",
										"text": " @dev msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\n @param token Super token address\n @param flowOperator The permission grantee address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "54b770e3",
									"id": 1764,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeFlowOperatorWithFullControl",
									"nameLocation": "6665:36:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1755,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6728:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "6711:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1754,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1753,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"6711:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "6711:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "6711:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1757,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "6751:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "6743:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1756,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6743:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "6788:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "6773:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1758,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6773:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6701:96:8"
									},
									"returnParameters": {
										"id": 1763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "6852:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "6839:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1761,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6839:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6838:21:8"
									},
									"scope": 2005,
									"src": "6656:204:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1765,
										"nodeType": "StructuredDocumentation",
										"src": "6867:346:8",
										"text": " @notice msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\n @dev `permissions` and `flowRateAllowance` will both be set to 0\n @param token Super token address\n @param flowOperator The permission grantee address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "062e56ec",
									"id": 1777,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeFlowOperatorWithFullControl",
									"nameLocation": "7227:33:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1768,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7287:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "7270:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1767,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1766,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"7270:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "7270:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "7270:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1770,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "7310:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "7302:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1769,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7302:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1772,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "7347:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "7332:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1771,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7332:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7260:96:8"
									},
									"returnParameters": {
										"id": 1776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1775,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "7411:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1777,
												"src": "7398:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1774,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7398:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7397:21:8"
									},
									"scope": 2005,
									"src": "7218:201:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1778,
										"nodeType": "StructuredDocumentation",
										"src": "7425:553:8",
										"text": " @notice Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\n @param token Super token address\n @param sender The permission granter address\n @param flowOperator The permission grantee address\n @return flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n @return permissions A bitmask representation of the granted permissions\n @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"functionSelector": "00422bbe",
									"id": 1794,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowOperatorData",
									"nameLocation": "7992:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1781,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8037:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "8020:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1780,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1779,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"8020:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "8020:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "8020:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1783,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "8059:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "8051:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8051:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1785,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "8082:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "8074:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8074:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8011:89:8"
									},
									"returnParameters": {
										"id": 1793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1788,
												"mutability": "mutable",
												"name": "flowOperatorId",
												"nameLocation": "8167:14:8",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "8159:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1787,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8159:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1790,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "8201:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "8195:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1789,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8195:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1792,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "8232:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1794,
												"src": "8226:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1791,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "8226:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8145:114:8"
									},
									"scope": 2005,
									"src": "7983:277:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1795,
										"nodeType": "StructuredDocumentation",
										"src": "8266:394:8",
										"text": " @notice Get flow operator using flowOperatorId\n @param token Super token address\n @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n @return permissions A bitmask representation of the granted permissions\n @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"functionSelector": "09d256ef",
									"id": 1807,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowOperatorDataByID",
									"nameLocation": "8674:23:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1801,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1798,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8723:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1807,
												"src": "8706:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1797,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1796,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"8706:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "8706:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "8706:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1800,
												"mutability": "mutable",
												"name": "flowOperatorId",
												"nameLocation": "8745:14:8",
												"nodeType": "VariableDeclaration",
												"scope": 1807,
												"src": "8737:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1799,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8737:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8697:68:8"
									},
									"returnParameters": {
										"id": 1806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1803,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "8832:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1807,
												"src": "8826:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1802,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8826:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1805,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "8863:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1807,
												"src": "8857:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1804,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "8857:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8812:78:8"
									},
									"scope": 2005,
									"src": "8665:226:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1808,
										"nodeType": "StructuredDocumentation",
										"src": "8897:741:8",
										"text": " @notice Create a flow betwen ctx.msgSender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @custom:callbacks \n - AgreementCreated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - A deposit is taken as safety margin for the solvency agents\n - A extra gas fee may be taken to pay for solvency agent liquidations"
									},
									"functionSelector": "62fc305e",
									"id": 1822,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createFlow",
									"nameLocation": "9652:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9689:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "9672:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1810,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1809,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"9672:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "9672:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "9672:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1813,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9712:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "9704:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1812,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9704:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1815,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "9736:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "9730:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1814,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "9730:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1817,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "9769:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "9754:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1816,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9754:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9662:116:8"
									},
									"returnParameters": {
										"id": 1821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1820,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "9833:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1822,
												"src": "9820:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1819,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9820:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9819:21:8"
									},
									"scope": 2005,
									"src": "9643:198:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1823,
										"nodeType": "StructuredDocumentation",
										"src": "9847:436:8",
										"text": " @notice Create a flow between sender and receiver\n @dev A flow created by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param sender Flow sender address (has granted permissions)\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "94229ecb",
									"id": 1839,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createFlowByOperator",
									"nameLocation": "10297:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1826,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "10344:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "10327:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1825,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1824,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"10327:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "10327:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "10327:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "10367:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "10359:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10359:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1830,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "10391:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "10383:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10383:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "10415:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "10409:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1831,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "10409:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1834,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "10448:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "10433:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1833,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10433:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10317:140:8"
									},
									"returnParameters": {
										"id": 1838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1837,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "10512:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1839,
												"src": "10499:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1836,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10499:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10498:21:8"
									},
									"scope": 2005,
									"src": "10288:232:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1840,
										"nodeType": "StructuredDocumentation",
										"src": "10526:833:8",
										"text": " @notice Update the flow rate between ctx.msgSender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @custom:callbacks \n - AgreementUpdated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - Only the flow sender may update the flow rate\n - Even if the flow rate is zero, the flow is not deleted\n from the system\n - Deposit amount will be adjusted accordingly\n - No new gas fee is charged"
									},
									"functionSelector": "50209a62",
									"id": 1854,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlow",
									"nameLocation": "11373:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1843,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "11410:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1854,
												"src": "11393:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1842,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1841,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"11393:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "11393:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "11393:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1845,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "11433:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1854,
												"src": "11425:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1844,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11425:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1847,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "11457:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1854,
												"src": "11451:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1846,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "11451:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1849,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "11490:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1854,
												"src": "11475:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1848,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11475:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11383:116:8"
									},
									"returnParameters": {
										"id": 1853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "11554:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1854,
												"src": "11541:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1851,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11541:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11540:21:8"
									},
									"scope": 2005,
									"src": "11364:198:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1855,
										"nodeType": "StructuredDocumentation",
										"src": "11568:436:8",
										"text": " @notice Update a flow between sender and receiver\n @dev A flow updated by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param sender Flow sender address (has granted permissions)\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "354b9590",
									"id": 1871,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlowByOperator",
									"nameLocation": "12018:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1867,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1858,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "12065:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "12048:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1857,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1856,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"12048:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "12048:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "12048:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1860,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "12088:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "12080:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12080:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1862,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12112:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "12104:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12104:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1864,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "12136:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "12130:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1863,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "12130:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1866,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "12169:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "12154:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1865,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12154:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12038:140:8"
									},
									"returnParameters": {
										"id": 1870,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1869,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "12233:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1871,
												"src": "12220:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1868,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12220:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12219:21:8"
									},
									"scope": 2005,
									"src": "12009:232:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1872,
										"nodeType": "StructuredDocumentation",
										"src": "12247:415:8",
										"text": " @dev Get the flow data between `sender` and `receiver` of `token`\n @param token Super token address\n @param sender Flow receiver\n @param receiver Flow sender\n @return timestamp Timestamp of when the flow is updated\n @return flowRate The flow rate\n @return deposit The amount of deposit the flow\n @return owedDeposit The amount of owed deposit of the flow"
									},
									"functionSelector": "e6a1e888",
									"id": 1890,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlow",
									"nameLocation": "12676:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "12710:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1890,
												"src": "12693:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1874,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1873,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"12693:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "12693:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "12693:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1877,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "12733:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1890,
												"src": "12725:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1876,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12725:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1879,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12757:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1890,
												"src": "12749:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1878,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12749:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12683:88:8"
									},
									"returnParameters": {
										"id": 1889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1882,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "12840:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1890,
												"src": "12832:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12832:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1884,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "12869:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1890,
												"src": "12863:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1883,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "12863:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1886,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "12899:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1890,
												"src": "12891:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1885,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12891:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1888,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "12928:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1890,
												"src": "12920:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1887,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12920:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12818:131:8"
									},
									"scope": 2005,
									"src": "12667:283:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1891,
										"nodeType": "StructuredDocumentation",
										"src": "12956:445:8",
										"text": " @notice Get flow data using agreementId\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param agreementId The agreement ID\n @return timestamp Timestamp of when the flow is updated\n @return flowRate The flow rate\n @return deposit The deposit amount of the flow\n @return owedDeposit The owed deposit amount of the flow"
									},
									"functionSelector": "aabd2668",
									"id": 1907,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowByID",
									"nameLocation": "13415:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1894,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "13452:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13435:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1893,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1892,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"13435:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "13435:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "13435:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1896,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "13474:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13466:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1895,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13466:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13426:65:8"
									},
									"returnParameters": {
										"id": 1906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1899,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "13560:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13552:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13552:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1901,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "13589:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13583:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1900,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "13583:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1903,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "13619:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13611:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1902,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13611:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1905,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "13648:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13640:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1904,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13640:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13538:131:8"
									},
									"scope": 2005,
									"src": "13406:264:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1908,
										"nodeType": "StructuredDocumentation",
										"src": "13676:436:8",
										"text": " @dev Get the aggregated flow info of the account\n @param token Super token address\n @param account Account for the query\n @return timestamp Timestamp of when a flow was last updated for account\n @return flowRate The net flow rate of token for account\n @return deposit The sum of all deposits for account's flows\n @return owedDeposit The sum of all owed deposits for account's flows"
									},
									"functionSelector": "0f1ac495",
									"id": 1924,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccountFlowInfo",
									"nameLocation": "14126:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1911,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14171:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1924,
												"src": "14154:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1910,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1909,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"14154:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "14154:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "14154:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1913,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14194:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1924,
												"src": "14186:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1912,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14186:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14144:63:8"
									},
									"returnParameters": {
										"id": 1923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1916,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "14276:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1924,
												"src": "14268:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14268:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1918,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "14305:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1924,
												"src": "14299:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1917,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "14299:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1920,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "14335:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1924,
												"src": "14327:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14327:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1922,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "14364:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1924,
												"src": "14356:19:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1921,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14356:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14254:122:8"
									},
									"scope": 2005,
									"src": "14117:260:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1925,
										"nodeType": "StructuredDocumentation",
										"src": "14383:182:8",
										"text": " @dev Get the net flow rate of the account\n @param token Super token address\n @param account Account for the query\n @return flowRate Net flow rate"
									},
									"functionSelector": "e8e7e2d1",
									"id": 1935,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNetFlow",
									"nameLocation": "14579:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1928,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14616:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1935,
												"src": "14599:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1927,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1926,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"14599:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "14599:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "14599:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1930,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14639:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1935,
												"src": "14631:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1929,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14631:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14589:63:8"
									},
									"returnParameters": {
										"id": 1934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1933,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "14706:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1935,
												"src": "14700:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1932,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "14700:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14699:16:8"
									},
									"scope": 2005,
									"src": "14570:146:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1936,
										"nodeType": "StructuredDocumentation",
										"src": "14722:763:8",
										"text": " @notice Delete the flow between sender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @param receiver Flow receiver address\n @custom:callbacks \n - AgreementTerminated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - Both flow sender and receiver may delete the flow\n - If Sender account is insolvent or in critical state, a solvency agent may\n   also terminate the agreement\n - Gas fee may be returned to the sender"
									},
									"functionSelector": "b4b333c6",
									"id": 1950,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteFlow",
									"nameLocation": "15499:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1939,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "15536:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1950,
												"src": "15519:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1938,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1937,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"15519:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "15519:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "15519:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1941,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "15559:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1950,
												"src": "15551:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1940,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15551:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1943,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "15583:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1950,
												"src": "15575:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1942,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15575:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1945,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "15616:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1950,
												"src": "15601:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1944,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15601:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15509:116:8"
									},
									"returnParameters": {
										"id": 1949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1948,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15680:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1950,
												"src": "15667:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1947,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15667:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15666:21:8"
									},
									"scope": 2005,
									"src": "15490:198:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1951,
										"nodeType": "StructuredDocumentation",
										"src": "15694:321:8",
										"text": " @notice Delete the flow between sender and receiver\n @dev A flow deleted by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @param receiver Flow receiver address"
									},
									"functionSelector": "4c8b181f",
									"id": 1965,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteFlowByOperator",
									"nameLocation": "16029:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1954,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16076:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1965,
												"src": "16059:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1953,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1952,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"16059:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "16059:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "16059:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1956,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "16099:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1965,
												"src": "16091:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16091:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1958,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "16123:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1965,
												"src": "16115:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1957,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16115:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1960,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16156:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1965,
												"src": "16141:18:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1959,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16141:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16049:116:8"
									},
									"returnParameters": {
										"id": 1964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1963,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16220:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1965,
												"src": "16207:19:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1962,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16207:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16206:21:8"
									},
									"scope": 2005,
									"src": "16020:208:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1966,
										"nodeType": "StructuredDocumentation",
										"src": "16239:353:8",
										"text": " @dev Flow operator updated event\n @param token Super token address\n @param sender Flow sender address\n @param flowOperator Flow operator address\n @param permissions Octo bitmask representation of permissions\n @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"eventSelector": "c0d5d3a6ac18cc1769788c925e6e7fc89cd47e4270a42884736fa9b3ec09f3a8",
									"id": 1979,
									"name": "FlowOperatorUpdated",
									"nameLocation": "16603:19:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1969,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16657:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1979,
												"src": "16632:30:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1968,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1967,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"16632:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "16632:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "16632:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1971,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "16688:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1979,
												"src": "16672:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1970,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16672:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1973,
												"indexed": true,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "16720:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1979,
												"src": "16704:28:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16704:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1975,
												"indexed": false,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "16748:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1979,
												"src": "16742:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1974,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "16742:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1977,
												"indexed": false,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "16775:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1979,
												"src": "16769:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1976,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "16769:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16622:176:8"
									},
									"src": "16597:202:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1980,
										"nodeType": "StructuredDocumentation",
										"src": "16805:466:8",
										"text": " @dev Flow updated event\n @param token Super token address\n @param sender Flow sender address\n @param receiver Flow recipient address\n @param flowRate Flow rate in amount per second for this flow\n @param totalSenderFlowRate Total flow rate in amount per second for the sender\n @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n @param userData The user provided data"
									},
									"eventSelector": "57269d2ebcccecdcc0d9d2c0a0b80ead95f344e28ec20f50f709811f209d4e0e",
									"id": 1997,
									"name": "FlowUpdated",
									"nameLocation": "17282:11:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1983,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "17328:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "17303:30:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1982,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1981,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"17303:16:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "17303:16:8"
													},
													"referencedDeclaration": 4323,
													"src": "17303:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1985,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "17359:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "17343:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1984,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17343:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1987,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "17391:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "17375:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17375:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1989,
												"indexed": false,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "17415:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "17409:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1988,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "17409:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1991,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalSenderFlowRate",
												"nameLocation": "17440:19:8",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "17433:26:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1990,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "17433:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1993,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalReceiverFlowRate",
												"nameLocation": "17476:21:8",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "17469:28:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1992,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "17469:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1995,
												"indexed": false,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "17513:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1997,
												"src": "17507:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1994,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17507:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17293:234:8"
									},
									"src": "17276:252:8"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1998,
										"nodeType": "StructuredDocumentation",
										"src": "17534:181:8",
										"text": " @dev Flow updated extension event\n @param flowOperator Flow operator address - the Context.msgSender\n @param deposit The deposit amount for the stream"
									},
									"eventSelector": "71e0c98e270fc3084227b473f176924d5303ece8c639e679998a2d7dc8e70f74",
									"id": 2004,
									"name": "FlowUpdatedExtension",
									"nameLocation": "17726:20:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2000,
												"indexed": true,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "17772:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2004,
												"src": "17756:28:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1999,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17756:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2002,
												"indexed": false,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "17802:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2004,
												"src": "17794:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2001,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17794:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17746:69:8"
									},
									"src": "17720:96:8"
								}
							],
							"scope": 2006,
							"src": "274:17544:8",
							"usedErrors": [
								1606,
								1608,
								1610,
								1612,
								1614,
								1616,
								1618,
								1620,
								1622,
								1624,
								1626,
								1628,
								1630,
								1632,
								1634,
								1636,
								1638,
								1640,
								1642,
								1644
							]
						}
					],
					"src": "32:17787:8"
				},
				"id": 8
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
					"exportedSymbols": {
						"BatchOperation": [
							2377
						],
						"ContextDefinitions": [
							2244
						],
						"FlowOperatorDefinitions": [
							2331
						],
						"SuperAppDefinitions": [
							2168
						],
						"SuperfluidGovernanceConfigs": [
							2478
						]
					},
					"id": 2479,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2007,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SuperAppDefinitions",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2008,
								"nodeType": "StructuredDocumentation",
								"src": "59:69:9",
								"text": " @title Super app definitions library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 2168,
							"linearizedBaseContracts": [
								2168
							],
							"name": "SuperAppDefinitions",
							"nameLocation": "137:19:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2011,
									"mutability": "constant",
									"name": "APP_LEVEL_MASK",
									"nameLocation": "612:14:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "586:47:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2009,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "586:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "30784646",
										"id": 2010,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "629:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0xFF"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2016,
									"mutability": "constant",
									"name": "APP_LEVEL_FINAL",
									"nameLocation": "757:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "731:50:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2012,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "731:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"id": 2015,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2013,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "775:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "30",
											"id": 2014,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "780:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_0_by_1",
												"typeString": "int_const 0"
											},
											"value": "0"
										},
										"src": "775:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2021,
									"mutability": "constant",
									"name": "APP_LEVEL_SECOND",
									"nameLocation": "912:16:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "886:51:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2017,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "886:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"id": 2020,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2018,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "931:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "31",
											"id": 2019,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "936:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"src": "931:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2035,
										"nodeType": "Block",
										"src": "1023:58:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2032,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2030,
																"name": "configWord",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2023,
																"src": "1046:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"id": 2031,
																"name": "APP_LEVEL_MASK",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2011,
																"src": "1059:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1046:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2029,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1040:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint8_$",
															"typeString": "type(uint8)"
														},
														"typeName": {
															"id": 2028,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "1040:5:9",
															"typeDescriptions": {}
														}
													},
													"id": 2033,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1040:34:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 2027,
												"id": 2034,
												"nodeType": "Return",
												"src": "1033:41:9"
											}
										]
									},
									"id": 2036,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAppCallbackLevel",
									"nameLocation": "953:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2023,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "981:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2036,
												"src": "973:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:20:9"
									},
									"returnParameters": {
										"id": 2027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2026,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2036,
												"src": "1016:5:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2025,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1016:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1015:7:9"
									},
									"scope": 2168,
									"src": "944:137:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2041,
									"mutability": "constant",
									"name": "APP_JAIL_BIT",
									"nameLocation": "1113:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "1087:48:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2037,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1087:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_32768_by_1",
											"typeString": "int_const 32768"
										},
										"id": 2040,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2038,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1128:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "3135",
											"id": 2039,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1133:2:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_15_by_1",
												"typeString": "int_const 15"
											},
											"value": "15"
										},
										"src": "1128:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_32768_by_1",
											"typeString": "int_const 32768"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2056,
										"nodeType": "Block",
										"src": "1211:75:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2054,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2051,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2048,
																	"name": "configWord",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2043,
																	"src": "1229:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"expression": {
																		"id": 2049,
																		"name": "SuperAppDefinitions",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2168,
																		"src": "1242:19:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SuperAppDefinitions_$2168_$",
																			"typeString": "type(library SuperAppDefinitions)"
																		}
																	},
																	"id": 2050,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "1262:12:9",
																	"memberName": "APP_JAIL_BIT",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2041,
																	"src": "1242:32:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1229:45:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2052,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1228:47:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2053,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1278:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1228:51:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2047,
												"id": 2055,
												"nodeType": "Return",
												"src": "1221:58:9"
											}
										]
									},
									"id": 2057,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isAppJailed",
									"nameLocation": "1150:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2043,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "1170:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2057,
												"src": "1162:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2042,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1162:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:20:9"
									},
									"returnParameters": {
										"id": 2047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2046,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2057,
												"src": "1205:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2045,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1205:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1204:6:9"
									},
									"scope": 2168,
									"src": "1141:145:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2062,
									"mutability": "constant",
									"name": "AGREEMENT_CALLBACK_NOOP_BITMASKS",
									"nameLocation": "1519:32:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "1493:71:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2058,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1493:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_1095216660480_by_1",
											"typeString": "int_const 1095216660480"
										},
										"id": 2061,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "30784646",
											"id": 2059,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1554:4:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_255_by_1",
												"typeString": "int_const 255"
											},
											"value": "0xFF"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "3332",
											"id": 2060,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1562:2:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_32_by_1",
												"typeString": "int_const 32"
											},
											"value": "32"
										},
										"src": "1554:10:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1095216660480_by_1",
											"typeString": "int_const 1095216660480"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2070,
									"mutability": "constant",
									"name": "BEFORE_AGREEMENT_CREATED_NOOP",
									"nameLocation": "1596:29:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "1570:71:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2063,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1570:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_4294967296_by_1",
											"typeString": "int_const 4294967296"
										},
										"id": 2069,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2064,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1628:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_32_by_1",
														"typeString": "int_const 32"
													},
													"id": 2067,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 2065,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1634:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "30",
														"id": 2066,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1639:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1634:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_32_by_1",
														"typeString": "int_const 32"
													}
												}
											],
											"id": 2068,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1633:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_32_by_1",
												"typeString": "int_const 32"
											}
										},
										"src": "1628:13:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4294967296_by_1",
											"typeString": "int_const 4294967296"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2078,
									"mutability": "constant",
									"name": "AFTER_AGREEMENT_CREATED_NOOP",
									"nameLocation": "1673:28:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "1647:70:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2071,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1647:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_8589934592_by_1",
											"typeString": "int_const 8589934592"
										},
										"id": 2077,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2072,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1704:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_33_by_1",
														"typeString": "int_const 33"
													},
													"id": 2075,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 2073,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1710:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 2074,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1715:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1710:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_33_by_1",
														"typeString": "int_const 33"
													}
												}
											],
											"id": 2076,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1709:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_33_by_1",
												"typeString": "int_const 33"
											}
										},
										"src": "1704:13:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_8589934592_by_1",
											"typeString": "int_const 8589934592"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2086,
									"mutability": "constant",
									"name": "BEFORE_AGREEMENT_UPDATED_NOOP",
									"nameLocation": "1749:29:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "1723:71:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2079,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_17179869184_by_1",
											"typeString": "int_const 17179869184"
										},
										"id": 2085,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2080,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1781:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_34_by_1",
														"typeString": "int_const 34"
													},
													"id": 2083,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 2081,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1787:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "32",
														"id": 2082,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1792:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "1787:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_34_by_1",
														"typeString": "int_const 34"
													}
												}
											],
											"id": 2084,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1786:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_34_by_1",
												"typeString": "int_const 34"
											}
										},
										"src": "1781:13:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_17179869184_by_1",
											"typeString": "int_const 17179869184"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2094,
									"mutability": "constant",
									"name": "AFTER_AGREEMENT_UPDATED_NOOP",
									"nameLocation": "1826:28:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "1800:70:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2087,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1800:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_34359738368_by_1",
											"typeString": "int_const 34359738368"
										},
										"id": 2093,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2088,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1857:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_35_by_1",
														"typeString": "int_const 35"
													},
													"id": 2091,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 2089,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1863:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "33",
														"id": 2090,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1868:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "1863:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_35_by_1",
														"typeString": "int_const 35"
													}
												}
											],
											"id": 2092,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1862:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_35_by_1",
												"typeString": "int_const 35"
											}
										},
										"src": "1857:13:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_34359738368_by_1",
											"typeString": "int_const 34359738368"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2102,
									"mutability": "constant",
									"name": "BEFORE_AGREEMENT_TERMINATED_NOOP",
									"nameLocation": "1902:32:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "1876:74:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2095,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1876:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_68719476736_by_1",
											"typeString": "int_const 68719476736"
										},
										"id": 2101,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2096,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1937:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_36_by_1",
														"typeString": "int_const 36"
													},
													"id": 2099,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 2097,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1943:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "34",
														"id": 2098,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1948:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "4"
													},
													"src": "1943:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_36_by_1",
														"typeString": "int_const 36"
													}
												}
											],
											"id": 2100,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1942:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_36_by_1",
												"typeString": "int_const 36"
											}
										},
										"src": "1937:13:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_68719476736_by_1",
											"typeString": "int_const 68719476736"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2110,
									"mutability": "constant",
									"name": "AFTER_AGREEMENT_TERMINATED_NOOP",
									"nameLocation": "1982:31:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "1956:73:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2103,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1956:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_137438953472_by_1",
											"typeString": "int_const 137438953472"
										},
										"id": 2109,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2104,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2016:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_37_by_1",
														"typeString": "int_const 37"
													},
													"id": 2107,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 2105,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2022:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "35",
														"id": 2106,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2027:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_5_by_1",
															"typeString": "int_const 5"
														},
														"value": "5"
													},
													"src": "2022:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_37_by_1",
														"typeString": "int_const 37"
													}
												}
											],
											"id": 2108,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "2021:8:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_37_by_1",
												"typeString": "int_const 37"
											}
										},
										"src": "2016:13:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_137438953472_by_1",
											"typeString": "int_const 137438953472"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2113,
									"mutability": "constant",
									"name": "APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR",
									"nameLocation": "2247:41:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2221:71:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2111,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2221:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 2112,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2291:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2116,
									"mutability": "constant",
									"name": "APP_RULE_NO_REGISTRATION_FOR_EOA",
									"nameLocation": "2324:32:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2298:62:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2114,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2298:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 2115,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2359:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2119,
									"mutability": "constant",
									"name": "APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK",
									"nameLocation": "2392:42:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2366:73:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2117,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2366:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3130",
										"id": 2118,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2437:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10_by_1",
											"typeString": "int_const 10"
										},
										"value": "10"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2122,
									"mutability": "constant",
									"name": "APP_RULE_NO_CRITICAL_SENDER_ACCOUNT",
									"nameLocation": "2471:35:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2445:66:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2120,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2445:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3131",
										"id": 2121,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2509:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_11_by_1",
											"typeString": "int_const 11"
										},
										"value": "11"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2125,
									"mutability": "constant",
									"name": "APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT",
									"nameLocation": "2543:37:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2517:68:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2123,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2517:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3132",
										"id": 2124,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2583:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_12_by_1",
											"typeString": "int_const 12"
										},
										"value": "12"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2128,
									"mutability": "constant",
									"name": "APP_RULE_CTX_IS_READONLY",
									"nameLocation": "2617:24:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2591:55:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2126,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2591:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 2127,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2644:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2131,
									"mutability": "constant",
									"name": "APP_RULE_CTX_IS_NOT_CLEAN",
									"nameLocation": "2678:25:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2652:56:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2129,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2652:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3231",
										"id": 2130,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2706:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_21_by_1",
											"typeString": "int_const 21"
										},
										"value": "21"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2134,
									"mutability": "constant",
									"name": "APP_RULE_CTX_IS_MALFORMATED",
									"nameLocation": "2740:27:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2714:58:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2132,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2714:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3232",
										"id": 2133,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2770:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_22_by_1",
											"typeString": "int_const 22"
										},
										"value": "22"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2137,
									"mutability": "constant",
									"name": "APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED",
									"nameLocation": "2804:41:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2778:72:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2135,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2778:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3330",
										"id": 2136,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2848:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_30_by_1",
											"typeString": "int_const 30"
										},
										"value": "30"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2140,
									"mutability": "constant",
									"name": "APP_RULE_COMPOSITE_APP_IS_JAILED",
									"nameLocation": "2882:32:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2856:63:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2138,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2856:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3331",
										"id": 2139,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2917:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_31_by_1",
											"typeString": "int_const 31"
										},
										"value": "31"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2143,
									"mutability": "constant",
									"name": "APP_RULE_MAX_APP_LEVEL_REACHED",
									"nameLocation": "2951:30:9",
									"nodeType": "VariableDeclaration",
									"scope": 2168,
									"src": "2925:61:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2141,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2925:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3430",
										"id": 2142,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2984:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_40_by_1",
											"typeString": "int_const 40"
										},
										"value": "40"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2166,
										"nodeType": "Block",
										"src": "3179:120:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2158,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2150,
																	"name": "configWord",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2145,
																	"src": "3197:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "~",
																	"prefix": true,
																	"src": "3210:67:9",
																	"subExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2155,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2153,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2151,
																						"name": "APP_LEVEL_MASK",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2011,
																						"src": "3212:14:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "|",
																					"rightExpression": {
																						"id": 2152,
																						"name": "APP_JAIL_BIT",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2041,
																						"src": "3229:12:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3212:29:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "|",
																				"rightExpression": {
																					"id": 2154,
																					"name": "AGREEMENT_CALLBACK_NOOP_BITMASKS",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2062,
																					"src": "3244:32:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3212:64:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2156,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "3211:66:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3197:80:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2159,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3196:82:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2162,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3290:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2161,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3282:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2160,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3282:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 2163,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3282:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3196:96:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2149,
												"id": 2165,
												"nodeType": "Return",
												"src": "3189:103:9"
											}
										]
									},
									"id": 2167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isConfigWordClean",
									"nameLocation": "3112:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2145,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "3138:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2167,
												"src": "3130:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3130:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3129:20:9"
									},
									"returnParameters": {
										"id": 2149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2148,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2167,
												"src": "3173:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2147,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3173:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3172:6:9"
									},
									"scope": 2168,
									"src": "3103:196:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2479,
							"src": "129:3172:9",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ContextDefinitions",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2169,
								"nodeType": "StructuredDocumentation",
								"src": "3303:67:9",
								"text": " @title Context definitions library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 2244,
							"linearizedBaseContracts": [
								2244
							],
							"name": "ContextDefinitions",
							"nameLocation": "3379:18:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2172,
									"mutability": "constant",
									"name": "CALL_INFO_APP_LEVEL_MASK",
									"nameLocation": "3626:24:9",
									"nodeType": "VariableDeclaration",
									"scope": 2244,
									"src": "3600:57:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2170,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3600:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "30784646",
										"id": 2171,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3653:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0xFF"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2175,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_SHIFT",
									"nameLocation": "3707:25:9",
									"nodeType": "VariableDeclaration",
									"scope": 2244,
									"src": "3681:56:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2173,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3681:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3332",
										"id": 2174,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3735:2:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_32_by_1",
											"typeString": "int_const 32"
										},
										"value": "32"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2180,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_MASK",
									"nameLocation": "3769:24:9",
									"nodeType": "VariableDeclaration",
									"scope": 2244,
									"src": "3743:85:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2176,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3743:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 2179,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "307846",
											"id": 2177,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3796:3:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_15_by_1",
												"typeString": "int_const 15"
											},
											"value": "0xF"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"id": 2178,
											"name": "CALL_INFO_CALL_TYPE_SHIFT",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 2175,
											"src": "3803:25:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "3796:32:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2183,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_AGREEMENT",
									"nameLocation": "3858:29:9",
									"nodeType": "VariableDeclaration",
									"scope": 2244,
									"src": "3834:57:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2181,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3834:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 2182,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3890:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2186,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_APP_ACTION",
									"nameLocation": "3921:30:9",
									"nodeType": "VariableDeclaration",
									"scope": 2244,
									"src": "3897:58:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2184,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3897:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 2185,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3954:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2189,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_APP_CALLBACK",
									"nameLocation": "3985:32:9",
									"nodeType": "VariableDeclaration",
									"scope": 2244,
									"src": "3961:60:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2187,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3961:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 2188,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "4020:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2219,
										"nodeType": "Block",
										"src": "4153:172:9",
										"statements": [
											{
												"expression": {
													"id": 2205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2198,
														"name": "appCallbackLevel",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2194,
														"src": "4163:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2203,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2201,
																	"name": "callInfo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2191,
																	"src": "4188:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2202,
																	"name": "CALL_INFO_APP_LEVEL_MASK",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2172,
																	"src": "4199:24:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4188:35:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2200,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4182:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 2199,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "4182:5:9",
																"typeDescriptions": {}
															}
														},
														"id": 2204,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4182:42:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4163:61:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 2206,
												"nodeType": "ExpressionStatement",
												"src": "4163:61:9"
											},
											{
												"expression": {
													"id": 2217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2207,
														"name": "callType",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2196,
														"src": "4234:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2215,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2210,
																				"name": "callInfo",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2191,
																				"src": "4252:8:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&",
																			"rightExpression": {
																				"id": 2211,
																				"name": "CALL_INFO_CALL_TYPE_MASK",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2180,
																				"src": "4263:24:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4252:35:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2213,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4251:37:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"id": 2214,
																	"name": "CALL_INFO_CALL_TYPE_SHIFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2175,
																	"src": "4292:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4251:66:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2209,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4245:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 2208,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "4245:5:9",
																"typeDescriptions": {}
															}
														},
														"id": 2216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4245:73:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4234:84:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 2218,
												"nodeType": "ExpressionStatement",
												"src": "4234:84:9"
											}
										]
									},
									"id": 2220,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodeCallInfo",
									"nameLocation": "4037:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2191,
												"mutability": "mutable",
												"name": "callInfo",
												"nameLocation": "4060:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2220,
												"src": "4052:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4052:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4051:18:9"
									},
									"returnParameters": {
										"id": 2197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2194,
												"mutability": "mutable",
												"name": "appCallbackLevel",
												"nameLocation": "4115:16:9",
												"nodeType": "VariableDeclaration",
												"scope": 2220,
												"src": "4109:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2193,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4109:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2196,
												"mutability": "mutable",
												"name": "callType",
												"nameLocation": "4139:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2220,
												"src": "4133:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2195,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4133:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4108:40:9"
									},
									"scope": 2244,
									"src": "4028:297:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2242,
										"nodeType": "Block",
										"src": "4456:100:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2231,
																"name": "appCallbackLevel",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2222,
																"src": "4481:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"id": 2230,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4473:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2229,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4473:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 2232,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4473:25:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "|",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2238,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2235,
																			"name": "callType",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2224,
																			"src": "4510:8:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 2234,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4502:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 2233,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "4502:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4502:17:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<<",
																"rightExpression": {
																	"id": 2237,
																	"name": "CALL_INFO_CALL_TYPE_SHIFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2175,
																	"src": "4523:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4502:46:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2239,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4501:48:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4473:76:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2228,
												"id": 2241,
												"nodeType": "Return",
												"src": "4466:83:9"
											}
										]
									},
									"id": 2243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "encodeCallInfo",
									"nameLocation": "4340:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2222,
												"mutability": "mutable",
												"name": "appCallbackLevel",
												"nameLocation": "4361:16:9",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "4355:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2221,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4355:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2224,
												"mutability": "mutable",
												"name": "callType",
												"nameLocation": "4385:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "4379:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2223,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4379:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4354:40:9"
									},
									"returnParameters": {
										"id": 2228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2227,
												"mutability": "mutable",
												"name": "callInfo",
												"nameLocation": "4442:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "4434:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4434:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:18:9"
									},
									"scope": 2244,
									"src": "4331:225:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2479,
							"src": "3371:1188:9",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "FlowOperatorDefinitions",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2245,
								"nodeType": "StructuredDocumentation",
								"src": "4561:74:9",
								"text": " @title Flow Operator definitions library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 2331,
							"linearizedBaseContracts": [
								2331
							],
							"name": "FlowOperatorDefinitions",
							"nameLocation": "4645:23:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2253,
									"mutability": "constant",
									"name": "AUTHORIZE_FLOW_OPERATOR_CREATE",
									"nameLocation": "4699:30:9",
									"nodeType": "VariableDeclaration",
									"scope": 2331,
									"src": "4675:70:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2246,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4675:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 2252,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"arguments": [
												{
													"hexValue": "31",
													"id": 2249,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4738:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													}
												],
												"id": 2248,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "4732:5:9",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint8_$",
													"typeString": "type(uint8)"
												},
												"typeName": {
													"id": 2247,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4732:5:9",
													"typeDescriptions": {}
												}
											},
											"id": 2250,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "4732:8:9",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "30",
											"id": 2251,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4744:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_0_by_1",
												"typeString": "int_const 0"
											},
											"value": "0"
										},
										"src": "4732:13:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2261,
									"mutability": "constant",
									"name": "AUTHORIZE_FLOW_OPERATOR_UPDATE",
									"nameLocation": "4775:30:9",
									"nodeType": "VariableDeclaration",
									"scope": 2331,
									"src": "4751:70:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2254,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4751:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 2260,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"arguments": [
												{
													"hexValue": "31",
													"id": 2257,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4814:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													}
												],
												"id": 2256,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "4808:5:9",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint8_$",
													"typeString": "type(uint8)"
												},
												"typeName": {
													"id": 2255,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4808:5:9",
													"typeDescriptions": {}
												}
											},
											"id": 2258,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "4808:8:9",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "31",
											"id": 2259,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4820:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"src": "4808:13:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2269,
									"mutability": "constant",
									"name": "AUTHORIZE_FLOW_OPERATOR_DELETE",
									"nameLocation": "4851:30:9",
									"nodeType": "VariableDeclaration",
									"scope": 2331,
									"src": "4827:70:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2262,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4827:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 2268,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"arguments": [
												{
													"hexValue": "31",
													"id": 2265,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4890:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													}
												],
												"id": 2264,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "4884:5:9",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint8_$",
													"typeString": "type(uint8)"
												},
												"typeName": {
													"id": 2263,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4884:5:9",
													"typeDescriptions": {}
												}
											},
											"id": 2266,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "typeConversion",
											"lValueRequested": false,
											"nameLocations": [],
											"names": [],
											"nodeType": "FunctionCall",
											"src": "4884:8:9",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "32",
											"id": 2267,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4896:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"src": "4884:13:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2276,
									"mutability": "constant",
									"name": "AUTHORIZE_FULL_CONTROL",
									"nameLocation": "4927:22:9",
									"nodeType": "VariableDeclaration",
									"scope": 2331,
									"src": "4903:153:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2270,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4903:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 2275,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"commonType": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"id": 2273,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"leftExpression": {
												"id": 2271,
												"name": "AUTHORIZE_FLOW_OPERATOR_CREATE",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2253,
												"src": "4960:30:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "|",
											"rightExpression": {
												"id": 2272,
												"name": "AUTHORIZE_FLOW_OPERATOR_UPDATE",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 2261,
												"src": "4993:30:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"src": "4960:63:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "|",
										"rightExpression": {
											"id": 2274,
											"name": "AUTHORIZE_FLOW_OPERATOR_DELETE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 2269,
											"src": "5026:30:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"src": "4960:96:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2286,
									"mutability": "constant",
									"name": "REVOKE_FLOW_OPERATOR_CREATE",
									"nameLocation": "5086:27:9",
									"nodeType": "VariableDeclaration",
									"scope": 2331,
									"src": "5062:70:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2277,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "5062:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"id": 2285,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "~",
										"prefix": true,
										"src": "5116:16:9",
										"subExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 2283,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 2280,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5124:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"id": 2279,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5118:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 2278,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5118:5:9",
																"typeDescriptions": {}
															}
														},
														"id": 2281,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5118:8:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "30",
														"id": 2282,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5130:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5118:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												}
											],
											"id": 2284,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "5117:15:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2296,
									"mutability": "constant",
									"name": "REVOKE_FLOW_OPERATOR_UPDATE",
									"nameLocation": "5162:27:9",
									"nodeType": "VariableDeclaration",
									"scope": 2331,
									"src": "5138:70:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2287,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "5138:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"id": 2295,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "~",
										"prefix": true,
										"src": "5192:16:9",
										"subExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 2293,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 2290,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5200:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"id": 2289,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5194:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 2288,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5194:5:9",
																"typeDescriptions": {}
															}
														},
														"id": 2291,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5194:8:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "31",
														"id": 2292,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5206:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5194:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												}
											],
											"id": 2294,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "5193:15:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2306,
									"mutability": "constant",
									"name": "REVOKE_FLOW_OPERATOR_DELETE",
									"nameLocation": "5238:27:9",
									"nodeType": "VariableDeclaration",
									"scope": 2331,
									"src": "5214:70:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2297,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "5214:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"id": 2305,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "~",
										"prefix": true,
										"src": "5268:16:9",
										"subExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 2303,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 2300,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5276:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"id": 2299,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5270:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 2298,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5270:5:9",
																"typeDescriptions": {}
															}
														},
														"id": 2301,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5270:8:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "32",
														"id": 2302,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5282:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "5270:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												}
											],
											"id": 2304,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "5269:15:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2329,
										"nodeType": "Block",
										"src": "5367:209:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 2327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 2321,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2313,
																	"name": "permissions",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2308,
																	"src": "5398:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2320,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "~",
																	"prefix": true,
																	"src": "5412:131:9",
																	"subExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				},
																				"id": 2318,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					},
																					"id": 2316,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2314,
																						"name": "AUTHORIZE_FLOW_OPERATOR_CREATE",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2253,
																						"src": "5414:30:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "|",
																					"rightExpression": {
																						"id": 2315,
																						"name": "AUTHORIZE_FLOW_OPERATOR_UPDATE",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2261,
																						"src": "5463:30:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					},
																					"src": "5414:79:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "|",
																				"rightExpression": {
																					"id": 2317,
																					"name": "AUTHORIZE_FLOW_OPERATOR_DELETE",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2269,
																					"src": "5512:30:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"src": "5414:128:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			}
																		],
																		"id": 2319,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5413:130:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "5398:145:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"id": 2322,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5384:173:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2325,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5567:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2324,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5561:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 2323,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5561:5:9",
																"typeDescriptions": {}
															}
														},
														"id": 2326,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5561:8:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5384:185:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2312,
												"id": 2328,
												"nodeType": "Return",
												"src": "5377:192:9"
											}
										]
									},
									"id": 2330,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isPermissionsClean",
									"nameLocation": "5300:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2308,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "5325:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 2330,
												"src": "5319:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2307,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5319:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:19:9"
									},
									"returnParameters": {
										"id": 2312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2330,
												"src": "5361:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2310,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5361:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5360:6:9"
									},
									"scope": 2331,
									"src": "5291:285:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2479,
							"src": "4637:942:9",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "BatchOperation",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2332,
								"nodeType": "StructuredDocumentation",
								"src": "5581:63:9",
								"text": " @title Batch operation library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 2377,
							"linearizedBaseContracts": [
								2377
							],
							"name": "BatchOperation",
							"nameLocation": "5653:14:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 2333,
										"nodeType": "StructuredDocumentation",
										"src": "5674:200:9",
										"text": " @dev ERC20.approve batch operation type\n Call spec:\n ISuperToken(target).operationApprove(\n     abi.decode(data, (address spender, uint256 amount))\n )"
									},
									"id": 2336,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_APPROVE",
									"nameLocation": "5904:28:9",
									"nodeType": "VariableDeclaration",
									"scope": 2377,
									"src": "5879:57:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2334,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "5879:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 2335,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5935:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2337,
										"nodeType": "StructuredDocumentation",
										"src": "5942:227:9",
										"text": " @dev ERC20.transferFrom batch operation type\n Call spec:\n ISuperToken(target).operationTransferFrom(\n     abi.decode(data, (address sender, address recipient, uint256 amount)\n )"
									},
									"id": 2340,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_TRANSFER_FROM",
									"nameLocation": "6199:34:9",
									"nodeType": "VariableDeclaration",
									"scope": 2377,
									"src": "6174:63:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2338,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "6174:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 2339,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6236:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2341,
										"nodeType": "StructuredDocumentation",
										"src": "6243:212:9",
										"text": " @dev ERC777.send batch operation type\n Call spec:\n ISuperToken(target).operationSend(\n     abi.decode(data, (address recipient, uint256 amount, bytes userData)\n )"
									},
									"id": 2344,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC777_SEND",
									"nameLocation": "6485:26:9",
									"nodeType": "VariableDeclaration",
									"scope": 2377,
									"src": "6460:55:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2342,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "6460:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 2343,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6514:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2345,
										"nodeType": "StructuredDocumentation",
										"src": "6521:241:9",
										"text": " @dev ERC20.increaseAllowance batch operation type\n Call spec:\n ISuperToken(target).operationIncreaseAllowance(\n     abi.decode(data, (address account, address spender, uint256 addedValue))\n )"
									},
									"id": 2348,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE",
									"nameLocation": "6792:39:9",
									"nodeType": "VariableDeclaration",
									"scope": 2377,
									"src": "6767:68:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2346,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "6767:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "34",
										"id": 2347,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6834:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4_by_1",
											"typeString": "int_const 4"
										},
										"value": "4"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2349,
										"nodeType": "StructuredDocumentation",
										"src": "6841:246:9",
										"text": " @dev ERC20.decreaseAllowance batch operation type\n Call spec:\n ISuperToken(target).operationDecreaseAllowance(\n     abi.decode(data, (address account, address spender, uint256 subtractedValue))\n )"
									},
									"id": 2352,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE",
									"nameLocation": "7117:39:9",
									"nodeType": "VariableDeclaration",
									"scope": 2377,
									"src": "7092:68:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2350,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7092:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "35",
										"id": 2351,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7159:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_5_by_1",
											"typeString": "int_const 5"
										},
										"value": "5"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2353,
										"nodeType": "StructuredDocumentation",
										"src": "7166:187:9",
										"text": " @dev SuperToken.upgrade batch operation type\n Call spec:\n ISuperToken(target).operationUpgrade(\n     abi.decode(data, (uint256 amount)\n )"
									},
									"id": 2358,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERTOKEN_UPGRADE",
									"nameLocation": "7383:33:9",
									"nodeType": "VariableDeclaration",
									"scope": 2377,
									"src": "7358:68:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2354,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7358:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_101_by_1",
											"typeString": "int_const 101"
										},
										"id": 2357,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2355,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7419:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "313030",
											"id": 2356,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7423:3:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_100_by_1",
												"typeString": "int_const 100"
											},
											"value": "100"
										},
										"src": "7419:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_101_by_1",
											"typeString": "int_const 101"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2359,
										"nodeType": "StructuredDocumentation",
										"src": "7432:191:9",
										"text": " @dev SuperToken.downgrade batch operation type\n Call spec:\n ISuperToken(target).operationDowngrade(\n     abi.decode(data, (uint256 amount)\n )"
									},
									"id": 2364,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERTOKEN_DOWNGRADE",
									"nameLocation": "7653:35:9",
									"nodeType": "VariableDeclaration",
									"scope": 2377,
									"src": "7628:70:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2360,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7628:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_102_by_1",
											"typeString": "int_const 102"
										},
										"id": 2363,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "32",
											"id": 2361,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7691:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "313030",
											"id": 2362,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7695:3:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_100_by_1",
												"typeString": "int_const 100"
											},
											"value": "100"
										},
										"src": "7691:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102_by_1",
											"typeString": "int_const 102"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2365,
										"nodeType": "StructuredDocumentation",
										"src": "7704:223:9",
										"text": " @dev Superfluid.callAgreement batch operation type\n Call spec:\n callAgreement(\n     ISuperAgreement(target)),\n     abi.decode(data, (bytes callData, bytes userData)\n )"
									},
									"id": 2370,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT",
									"nameLocation": "7957:40:9",
									"nodeType": "VariableDeclaration",
									"scope": 2377,
									"src": "7932:75:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2366,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7932:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_201_by_1",
											"typeString": "int_const 201"
										},
										"id": 2369,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 2367,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8000:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "323030",
											"id": 2368,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8004:3:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_200_by_1",
												"typeString": "int_const 200"
											},
											"value": "200"
										},
										"src": "8000:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_201_by_1",
											"typeString": "int_const 201"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 2371,
										"nodeType": "StructuredDocumentation",
										"src": "8013:172:9",
										"text": " @dev Superfluid.callAppAction batch operation type\n Call spec:\n callAppAction(\n     ISuperApp(target)),\n     data\n )"
									},
									"id": 2376,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION",
									"nameLocation": "8215:41:9",
									"nodeType": "VariableDeclaration",
									"scope": 2377,
									"src": "8190:76:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2372,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "8190:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_202_by_1",
											"typeString": "int_const 202"
										},
										"id": 2375,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "32",
											"id": 2373,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8259:1:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "323030",
											"id": 2374,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8263:3:9",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_200_by_1",
												"typeString": "int_const 200"
											},
											"value": "200"
										},
										"src": "8259:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_202_by_1",
											"typeString": "int_const 202"
										}
									},
									"visibility": "internal"
								}
							],
							"scope": 2479,
							"src": "5645:2624:9",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SuperfluidGovernanceConfigs",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2378,
								"nodeType": "StructuredDocumentation",
								"src": "8271:77:9",
								"text": " @title Superfluid governance configs library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 2478,
							"linearizedBaseContracts": [
								2478
							],
							"name": "SuperfluidGovernanceConfigs",
							"nameLocation": "8357:27:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2383,
									"mutability": "constant",
									"name": "SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY",
									"nameLocation": "8418:36:9",
									"nodeType": "VariableDeclaration",
									"scope": 2478,
									"src": "8392:133:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2379,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8392:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e72657761726441646472657373",
												"id": 2381,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "8475:49:9",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_9f60ae461adf056670e03ae602566409933242392cb06744f5747c9f38b05d09",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.rewardAddress\""
												},
												"value": "org.superfluid-finance.superfluid.rewardAddress"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_9f60ae461adf056670e03ae602566409933242392cb06744f5747c9f38b05d09",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.rewardAddress\""
												}
											],
											"id": 2380,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "8465:9:9",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2382,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "8465:60:9",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2388,
									"mutability": "constant",
									"name": "CFAV1_PPP_CONFIG_KEY",
									"nameLocation": "8557:20:9",
									"nodeType": "VariableDeclaration",
									"scope": 2478,
									"src": "8531:145:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2384,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8531:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e61677265656d656e74732e436f6e7374616e74466c6f7741677265656d656e742e76312e505050436f6e66696775726174696f6e",
												"id": 2386,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "8598:77:9",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_e420d96e81cb4a6b2abb2366c4f93312d4e2ae878a7d4b22e73472fdad891f78",
													"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\""
												},
												"value": "org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_e420d96e81cb4a6b2abb2366c4f93312d4e2ae878a7d4b22e73472fdad891f78",
													"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\""
												}
											],
											"id": 2385,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "8588:9:9",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2387,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "8588:88:9",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 2393,
									"mutability": "constant",
									"name": "SUPERTOKEN_MINIMUM_DEPOSIT_KEY",
									"nameLocation": "8708:30:9",
									"nodeType": "VariableDeclaration",
									"scope": 2478,
									"src": "8682:138:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2389,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8682:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e7375706572546f6b656e4d696e696d756d4465706f736974",
												"id": 2391,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "8759:60:9",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_eae305fa863b373417e615b1044222e2806cefc7788d169ce6748a443c3f6cc4",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.superTokenMinimumDeposit\""
												},
												"value": "org.superfluid-finance.superfluid.superTokenMinimumDeposit"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_eae305fa863b373417e615b1044222e2806cefc7788d169ce6748a443c3f6cc4",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.superTokenMinimumDeposit\""
												}
											],
											"id": 2390,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "8749:9:9",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2392,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "8749:71:9",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2408,
										"nodeType": "Block",
										"src": "8916:135:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e74727573746564466f72776172646572",
																	"id": 2403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8967:52:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_5e8d8c86403ce515d0afc5f813484261c20de0e66deea95df3a7de50a4365fdd",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.trustedForwarder\""
																	},
																	"value": "org.superfluid-finance.superfluid.trustedForwarder"
																},
																{
																	"id": 2404,
																	"name": "forwarder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2395,
																	"src": "9033:9:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_5e8d8c86403ce515d0afc5f813484261c20de0e66deea95df3a7de50a4365fdd",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.trustedForwarder\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2401,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8943:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2402,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "8947:6:9",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "8943:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2405,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8943:100:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2400,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "8933:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8933:111:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2399,
												"id": 2407,
												"nodeType": "Return",
												"src": "8926:118:9"
											}
										]
									},
									"id": 2409,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTrustedForwarderConfigKey",
									"nameLocation": "8836:28:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2395,
												"mutability": "mutable",
												"name": "forwarder",
												"nameLocation": "8873:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "8865:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2394,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8865:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8864:19:9"
									},
									"returnParameters": {
										"id": 2399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2398,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "8907:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2397,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8907:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8906:9:9"
									},
									"scope": 2478,
									"src": "8827:224:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2427,
										"nodeType": "Block",
										"src": "9187:178:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e61707057686974654c697374696e672e726567697374726174696f6e4b6579",
																	"id": 2421,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9238:67:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2ac2eda5c308a51ed3bd3433d0d20fe487916751b3404fa382719429ef24259a",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\""
																	},
																	"value": "org.superfluid-finance.superfluid.appWhiteListing.registrationKey"
																},
																{
																	"id": 2422,
																	"name": "deployer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2411,
																	"src": "9319:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2423,
																	"name": "registrationKey",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2413,
																	"src": "9341:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_2ac2eda5c308a51ed3bd3433d0d20fe487916751b3404fa382719429ef24259a",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 2419,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9214:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2420,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9218:6:9",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "9214:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2424,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9214:143:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2418,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9204:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9204:154:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2417,
												"id": 2426,
												"nodeType": "Return",
												"src": "9197:161:9"
											}
										]
									},
									"id": 2428,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAppRegistrationConfigKey",
									"nameLocation": "9066:27:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2411,
												"mutability": "mutable",
												"name": "deployer",
												"nameLocation": "9102:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2428,
												"src": "9094:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9094:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2413,
												"mutability": "mutable",
												"name": "registrationKey",
												"nameLocation": "9126:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 2428,
												"src": "9112:29:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2412,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9112:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9093:49:9"
									},
									"returnParameters": {
										"id": 2417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2428,
												"src": "9174:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2415,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9174:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9173:9:9"
									},
									"scope": 2478,
									"src": "9057:308:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2443,
										"nodeType": "Block",
										"src": "9456:140:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e61707057686974654c697374696e672e666163746f7279",
																	"id": 2438,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9507:59:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_3a9ec29d76a01dd4676b43ee8f5ae7a021577f823fb495dfb5627ad6bbb890b6",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.factory\""
																	},
																	"value": "org.superfluid-finance.superfluid.appWhiteListing.factory"
																},
																{
																	"id": 2439,
																	"name": "factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2430,
																	"src": "9580:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_3a9ec29d76a01dd4676b43ee8f5ae7a021577f823fb495dfb5627ad6bbb890b6",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.factory\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2436,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9483:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2437,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "9487:6:9",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "9483:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2440,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9483:105:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2435,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9473:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9473:116:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2434,
												"id": 2442,
												"nodeType": "Return",
												"src": "9466:123:9"
											}
										]
									},
									"id": 2444,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAppFactoryConfigKey",
									"nameLocation": "9380:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2430,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "9411:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2444,
												"src": "9403:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9402:17:9"
									},
									"returnParameters": {
										"id": 2434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2444,
												"src": "9443:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2432,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9443:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9442:9:9"
									},
									"scope": 2478,
									"src": "9371:225:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2476,
										"nodeType": "Block",
										"src": "9733:129:9",
										"statements": [
											{
												"expression": {
													"id": 2464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2453,
														"name": "liquidationPeriod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2449,
														"src": "9743:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2463,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2456,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2454,
																		"name": "pppConfig",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2446,
																		"src": "9764:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">>",
																	"rightExpression": {
																		"hexValue": "3332",
																		"id": 2455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9777:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_32_by_1",
																			"typeString": "int_const 32"
																		},
																		"value": "32"
																	},
																	"src": "9764:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2457,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "9763:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2460,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9788:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		},
																		"typeName": {
																			"id": 2459,
																			"name": "uint32",
																			"nodeType": "ElementaryTypeName",
																			"src": "9788:6:9",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		}
																	],
																	"id": 2458,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "9783:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2461,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9783:12:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint32",
																	"typeString": "type(uint32)"
																}
															},
															"id": 2462,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "9796:3:9",
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "9783:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "9763:36:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9743:56:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2465,
												"nodeType": "ExpressionStatement",
												"src": "9743:56:9"
											},
											{
												"expression": {
													"id": 2474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2466,
														"name": "patricianPeriod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2451,
														"src": "9809:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2473,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2467,
															"name": "pppConfig",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2446,
															"src": "9827:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2470,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9844:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		},
																		"typeName": {
																			"id": 2469,
																			"name": "uint32",
																			"nodeType": "ElementaryTypeName",
																			"src": "9844:6:9",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		}
																	],
																	"id": 2468,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "9839:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2471,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9839:12:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint32",
																	"typeString": "type(uint32)"
																}
															},
															"id": 2472,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "9852:3:9",
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "9839:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "9827:28:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9809:46:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2475,
												"nodeType": "ExpressionStatement",
												"src": "9809:46:9"
											}
										]
									},
									"id": 2477,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodePPPConfig",
									"nameLocation": "9611:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2446,
												"mutability": "mutable",
												"name": "pppConfig",
												"nameLocation": "9635:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "9627:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9627:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9626:19:9"
									},
									"returnParameters": {
										"id": 2452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2449,
												"mutability": "mutable",
												"name": "liquidationPeriod",
												"nameLocation": "9685:17:9",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "9677:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9677:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2451,
												"mutability": "mutable",
												"name": "patricianPeriod",
												"nameLocation": "9712:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "9704:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2450,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9704:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9676:52:9"
									},
									"scope": 2478,
									"src": "9602:260:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2479,
							"src": "8349:1515:9",
							"usedErrors": []
						}
					],
					"src": "32:9833:9"
				},
				"id": 9
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
					"exportedSymbols": {
						"IConstantInflowNFT": [
							2503
						],
						"IFlowNFTBase": [
							2631
						],
						"ISuperToken": [
							3254
						]
					},
					"id": 2504,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2480,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:10"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 2482,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2504,
							"sourceUnit": 3255,
							"src": "58:48:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2481,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3254,
										"src": "67:11:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
							"file": "./IFlowNFTBase.sol",
							"id": 2484,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2504,
							"sourceUnit": 2632,
							"src": "107:50:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2483,
										"name": "IFlowNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2631,
										"src": "116:12:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2485,
										"name": "IFlowNFTBase",
										"nameLocations": [
											"191:12:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2631,
										"src": "191:12:10"
									},
									"id": 2486,
									"nodeType": "InheritanceSpecifier",
									"src": "191:12:10"
								}
							],
							"canonicalName": "IConstantInflowNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2503,
							"linearizedBaseContracts": [
								2503,
								2631,
								220,
								193,
								624
							],
							"name": "IConstantInflowNFT",
							"nameLocation": "169:18:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "e81ef57a",
									"id": 2488,
									"name": "CIF_NFT_ONLY_CONSTANT_OUTFLOW",
									"nameLocation": "397:29:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2487,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "426:2:10"
									},
									"src": "391:38:10"
								},
								{
									"documentation": {
										"id": 2489,
										"nodeType": "StructuredDocumentation",
										"src": "633:333:10",
										"text": "@notice The mint function emits the \"mint\" `Transfer` event.\n @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n is to inform clients that search for events.\n @param to the flow receiver (inflow NFT receiver)\n @param newTokenId the new token id"
									},
									"functionSelector": "40c10f19",
									"id": 2496,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "980:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2491,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "993:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 2496,
												"src": "985:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2490,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "985:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2493,
												"mutability": "mutable",
												"name": "newTokenId",
												"nameLocation": "1005:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2496,
												"src": "997:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "997:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "984:32:10"
									},
									"returnParameters": {
										"id": 2495,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1025:0:10"
									},
									"scope": 2503,
									"src": "971:55:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2497,
										"nodeType": "StructuredDocumentation",
										"src": "1032:281:10",
										"text": "@notice This burn function emits the \"burn\" `Transfer` event.\n @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n is to inform clients that search for events.\n @param tokenId desired token id to burn"
									},
									"functionSelector": "42966c68",
									"id": 2502,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "1327:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2499,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1340:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2502,
												"src": "1332:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:17:10"
									},
									"returnParameters": {
										"id": 2501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1357:0:10"
									},
									"scope": 2503,
									"src": "1318:40:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2504,
							"src": "159:1201:10",
							"usedErrors": [
								2488,
								2576,
								2578,
								2580,
								2582,
								2584,
								2586,
								2588,
								2590,
								2592
							]
						}
					],
					"src": "32:1329:10"
				},
				"id": 10
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
					"exportedSymbols": {
						"IConstantOutflowNFT": [
							2557
						],
						"IFlowNFTBase": [
							2631
						],
						"ISuperfluidToken": [
							4323
						]
					},
					"id": 2558,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2505,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:11"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 2507,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2558,
							"sourceUnit": 4324,
							"src": "58:58:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2506,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4323,
										"src": "67:16:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
							"file": "./IFlowNFTBase.sol",
							"id": 2509,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2558,
							"sourceUnit": 2632,
							"src": "117:50:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2508,
										"name": "IFlowNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2631,
										"src": "126:12:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2510,
										"name": "IFlowNFTBase",
										"nameLocations": [
											"202:12:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2631,
										"src": "202:12:11"
									},
									"id": 2511,
									"nodeType": "InheritanceSpecifier",
									"src": "202:12:11"
								}
							],
							"canonicalName": "IConstantOutflowNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2557,
							"linearizedBaseContracts": [
								2557,
								2631,
								220,
								193,
								624
							],
							"name": "IConstantOutflowNFT",
							"nameLocation": "179:19:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "6de98774",
									"id": 2513,
									"name": "COF_NFT_INVALID_SUPER_TOKEN",
									"nameLocation": "409:27:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2512,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "436:2:11"
									},
									"src": "403:36:11"
								},
								{
									"errorSelector": "a07fa909",
									"id": 2515,
									"name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
									"nameLocation": "475:38:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2514,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:11"
									},
									"src": "469:47:11"
								},
								{
									"errorSelector": "43d05e51",
									"id": 2517,
									"name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
									"nameLocation": "541:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2516,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "569:2:11"
									},
									"src": "535:37:11"
								},
								{
									"errorSelector": "a495a718",
									"id": 2519,
									"name": "COF_NFT_ONLY_CONSTANT_INFLOW",
									"nameLocation": "607:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:11"
									},
									"src": "601:37:11"
								},
								{
									"errorSelector": "d367b64f",
									"id": 2521,
									"name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
									"nameLocation": "673:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2520,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "701:2:11"
									},
									"src": "667:37:11"
								},
								{
									"errorSelector": "e2480183",
									"id": 2523,
									"name": "COF_NFT_TOKEN_ALREADY_EXISTS",
									"nameLocation": "739:28:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "767:2:11"
									},
									"src": "733:37:11"
								},
								{
									"documentation": {
										"id": 2524,
										"nodeType": "StructuredDocumentation",
										"src": "985:227:11",
										"text": "@notice The onCreate function is called when a new flow is created.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "f7e3d983",
									"id": 2534,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onCreate",
									"nameLocation": "1226:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2527,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1252:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "1235:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2526,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2525,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1235:16:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "1235:16:11"
													},
													"referencedDeclaration": 4323,
													"src": "1235:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2529,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1267:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "1259:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1259:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2531,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1287:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "1279:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2530,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1279:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:66:11"
									},
									"returnParameters": {
										"id": 2533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1309:0:11"
									},
									"scope": 2557,
									"src": "1217:93:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2535,
										"nodeType": "StructuredDocumentation",
										"src": "1316:223:11",
										"text": "@notice The onUpdate function is called when a flow is updated.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "eb54a7ca",
									"id": 2545,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onUpdate",
									"nameLocation": "1553:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2538,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1579:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "1562:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2537,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2536,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1562:16:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "1562:16:11"
													},
													"referencedDeclaration": 4323,
													"src": "1562:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2540,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1594:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "1586:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2539,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1586:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2542,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1614:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "1606:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1606:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1561:66:11"
									},
									"returnParameters": {
										"id": 2544,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1636:0:11"
									},
									"scope": 2557,
									"src": "1544:93:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2546,
										"nodeType": "StructuredDocumentation",
										"src": "1643:223:11",
										"text": "@notice The onDelete function is called when a flow is deleted.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "ef1f0237",
									"id": 2556,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onDelete",
									"nameLocation": "1880:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2549,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1906:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2556,
												"src": "1889:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2548,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2547,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1889:16:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "1889:16:11"
													},
													"referencedDeclaration": 4323,
													"src": "1889:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2551,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1921:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2556,
												"src": "1913:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2550,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2553,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1941:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 2556,
												"src": "1933:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2552,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1933:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1888:66:11"
									},
									"returnParameters": {
										"id": 2555,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1963:0:11"
									},
									"scope": 2557,
									"src": "1871:93:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2558,
							"src": "169:1797:11",
							"usedErrors": [
								2513,
								2515,
								2517,
								2519,
								2521,
								2523,
								2576,
								2578,
								2580,
								2582,
								2584,
								2586,
								2588,
								2590,
								2592
							]
						}
					],
					"src": "32:1935:11"
				},
				"id": 11
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
					"exportedSymbols": {
						"IERC721Metadata": [
							220
						],
						"IFlowNFTBase": [
							2631
						],
						"ISuperToken": [
							3254
						]
					},
					"id": 2632,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2559,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 2561,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2632,
							"sourceUnit": 221,
							"src": "58:106:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2560,
										"name": "IERC721Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 220,
										"src": "71:15:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 2563,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2632,
							"sourceUnit": 3255,
							"src": "165:48:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2562,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3254,
										"src": "174:11:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2564,
										"name": "IERC721Metadata",
										"nameLocations": [
											"241:15:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "241:15:12"
									},
									"id": 2565,
									"nodeType": "InheritanceSpecifier",
									"src": "241:15:12"
								}
							],
							"canonicalName": "IFlowNFTBase",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 2631,
							"linearizedBaseContracts": [
								2631,
								220,
								193,
								624
							],
							"name": "IFlowNFTBase",
							"nameLocation": "225:12:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IFlowNFTBase.FlowNFTData",
									"id": 2574,
									"members": [
										{
											"constant": false,
											"id": 2567,
											"mutability": "mutable",
											"name": "superToken",
											"nameLocation": "628:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 2574,
											"src": "620:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2566,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "620:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2569,
											"mutability": "mutable",
											"name": "flowSender",
											"nameLocation": "656:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 2574,
											"src": "648:18:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2568,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "648:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2571,
											"mutability": "mutable",
											"name": "flowReceiver",
											"nameLocation": "684:12:12",
											"nodeType": "VariableDeclaration",
											"scope": 2574,
											"src": "676:20:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2570,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "676:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2573,
											"mutability": "mutable",
											"name": "flowStartDate",
											"nameLocation": "713:13:12",
											"nodeType": "VariableDeclaration",
											"scope": 2574,
											"src": "706:20:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 2572,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "706:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "FlowNFTData",
									"nameLocation": "598:11:12",
									"nodeType": "StructDefinition",
									"scope": 2631,
									"src": "591:142:12",
									"visibility": "public"
								},
								{
									"errorSelector": "a3352582",
									"id": 2576,
									"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "927:52:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2575,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "979:2:12"
									},
									"src": "921:61:12"
								},
								{
									"errorSelector": "d3c77329",
									"id": 2578,
									"name": "CFA_NFT_APPROVE_TO_CALLER",
									"nameLocation": "1009:25:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1034:2:12"
									},
									"src": "1003:34:12"
								},
								{
									"errorSelector": "e4790b25",
									"id": 2580,
									"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
									"nameLocation": "1091:32:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2579,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:12"
									},
									"src": "1085:41:12"
								},
								{
									"errorSelector": "eab95e3b",
									"id": 2582,
									"name": "CFA_NFT_INVALID_TOKEN_ID",
									"nameLocation": "1173:24:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2581,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1197:2:12"
									},
									"src": "1167:33:12"
								},
								{
									"errorSelector": "ebb7505b",
									"id": 2584,
									"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
									"nameLocation": "1255:32:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2583,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1287:2:12"
									},
									"src": "1249:41:12"
								},
								{
									"errorSelector": "2551d606",
									"id": 2586,
									"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "1337:53:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2585,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1390:2:12"
									},
									"src": "1331:62:12"
								},
								{
									"errorSelector": "5a26c744",
									"id": 2588,
									"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
									"nameLocation": "1419:37:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1456:2:12"
									},
									"src": "1413:46:12"
								},
								{
									"errorSelector": "aa747eca",
									"id": 2590,
									"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
									"nameLocation": "1501:31:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2589,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1532:2:12"
									},
									"src": "1495:40:12"
								},
								{
									"errorSelector": "de06d21e",
									"id": 2592,
									"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
									"nameLocation": "1583:32:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2591,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1615:2:12"
									},
									"src": "1577:41:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2593,
										"nodeType": "StructuredDocumentation",
										"src": "1835:233:12",
										"text": "@notice Informs third-party platforms that NFT metadata should be updated\n @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n @param tokenId the id of the token that should have its metadata updated"
									},
									"eventSelector": "f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7",
									"id": 2597,
									"name": "MetadataUpdate",
									"nameLocation": "2079:14:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2595,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2102:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2597,
												"src": "2094:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2594,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2094:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2093:17:12"
									},
									"src": "2073:38:12"
								},
								{
									"documentation": {
										"id": 2598,
										"nodeType": "StructuredDocumentation",
										"src": "2290:170:12",
										"text": "@notice An external function for querying flow data by `tokenId``\n @param tokenId the token id\n @return flowData the flow data associated with `tokenId`"
									},
									"functionSelector": "8d47859e",
									"id": 2606,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flowDataByTokenId",
									"nameLocation": "2474:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2600,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2509:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "2501:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2501:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2491:31:12"
									},
									"returnParameters": {
										"id": 2605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2604,
												"mutability": "mutable",
												"name": "flowData",
												"nameLocation": "2565:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "2546:27:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FlowNFTData_$2574_memory_ptr",
													"typeString": "struct IFlowNFTBase.FlowNFTData"
												},
												"typeName": {
													"id": 2603,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2602,
														"name": "FlowNFTData",
														"nameLocations": [
															"2546:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2574,
														"src": "2546:11:12"
													},
													"referencedDeclaration": 2574,
													"src": "2546:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FlowNFTData_$2574_storage_ptr",
														"typeString": "struct IFlowNFTBase.FlowNFTData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2545:29:12"
									},
									"scope": 2631,
									"src": "2465:110:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2607,
										"nodeType": "StructuredDocumentation",
										"src": "2581:345:12",
										"text": "@notice An external function for computing the deterministic tokenId\n @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n @param superToken the super token\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n @return tokenId the tokenId"
									},
									"functionSelector": "89f71d2d",
									"id": 2618,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenId",
									"nameLocation": "2940:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2609,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2968:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2618,
												"src": "2960:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2960:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2611,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "2996:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 2618,
												"src": "2988:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2610,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2988:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2613,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "3024:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 2618,
												"src": "3016:20:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2612,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2950:92:12"
									},
									"returnParameters": {
										"id": 2617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2616,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2618,
												"src": "3066:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3066:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3065:9:12"
									},
									"scope": 2631,
									"src": "2931:144:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4cd88b76",
									"id": 2625,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "3264:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2620,
												"mutability": "mutable",
												"name": "nftName",
												"nameLocation": "3298:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2625,
												"src": "3284:21:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2619,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3284:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2622,
												"mutability": "mutable",
												"name": "nftSymbol",
												"nameLocation": "3329:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 2625,
												"src": "3315:23:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2621,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3315:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3274:70:12"
									},
									"returnParameters": {
										"id": 2624,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3353:0:12"
									},
									"scope": 2631,
									"src": "3255:99:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2f388560",
									"id": 2630,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "triggerMetadataUpdate",
									"nameLocation": "3385:21:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2627,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3415:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 2630,
												"src": "3407:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2626,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3407:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3406:17:12"
									},
									"returnParameters": {
										"id": 2629,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3432:0:12"
									},
									"scope": 2631,
									"src": "3376:57:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2632,
							"src": "215:3220:12",
							"usedErrors": [
								2576,
								2578,
								2580,
								2582,
								2584,
								2586,
								2588,
								2590,
								2592
							]
						}
					],
					"src": "32:3404:12"
				},
				"id": 12
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
					"exportedSymbols": {
						"IPoolAdminNFT": [
							2634
						]
					},
					"id": 2635,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2633,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolAdminNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 2634,
							"linearizedBaseContracts": [
								2634
							],
							"name": "IPoolAdminNFT",
							"nameLocation": "68:13:13",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 2635,
							"src": "58:26:13",
							"usedErrors": []
						}
					],
					"src": "32:52:13"
				},
				"id": 13
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
					"exportedSymbols": {
						"IPoolMemberNFT": [
							2637
						]
					},
					"id": 2638,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2636,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolMemberNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 2637,
							"linearizedBaseContracts": [
								2637
							],
							"name": "IPoolMemberNFT",
							"nameLocation": "68:14:14",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 2638,
							"src": "58:27:14",
							"usedErrors": []
						}
					],
					"src": "32:53:14"
				},
				"id": 14
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							2666
						],
						"ISuperfluidToken": [
							4323
						]
					},
					"id": 2667,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2639,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:15"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 2641,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2667,
							"sourceUnit": 4324,
							"src": "59:58:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2640,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4323,
										"src": "68:16:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperAgreement",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2642,
								"nodeType": "StructuredDocumentation",
								"src": "119:65:15",
								"text": " @title Super agreement interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 2666,
							"linearizedBaseContracts": [
								2666
							],
							"name": "ISuperAgreement",
							"nameLocation": "195:15:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2643,
										"nodeType": "StructuredDocumentation",
										"src": "218:59:15",
										"text": " @dev Get the type of the agreement class"
									},
									"functionSelector": "7730599e",
									"id": 2648,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "agreementType",
									"nameLocation": "291:13:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2644,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "304:2:15"
									},
									"returnParameters": {
										"id": 2647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2646,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2648,
												"src": "330:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2645,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "330:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "329:9:15"
									},
									"scope": 2666,
									"src": "282:57:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2649,
										"nodeType": "StructuredDocumentation",
										"src": "345:425:15",
										"text": " @dev Calculate the real-time balance for the account of this agreement class\n @param account Account the state belongs to\n @param time Time used for the calculation\n @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n @return deposit Account deposit amount of this agreement\n @return owedDeposit Account owed deposit amount of this agreement"
									},
									"functionSelector": "9b2e48bc",
									"id": 2665,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "784:17:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2652,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "828:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2665,
												"src": "811:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2651,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2650,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"811:16:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "811:16:15"
													},
													"referencedDeclaration": 4323,
													"src": "811:16:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2654,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "851:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2665,
												"src": "843:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2653,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "843:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2656,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "876:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2665,
												"src": "868:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "868:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "801:85:15"
									},
									"returnParameters": {
										"id": 2664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2659,
												"mutability": "mutable",
												"name": "dynamicBalance",
												"nameLocation": "954:14:15",
												"nodeType": "VariableDeclaration",
												"scope": 2665,
												"src": "947:21:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2658,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "947:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2661,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "990:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2665,
												"src": "982:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2663,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "1019:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 2665,
												"src": "1011:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2662,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "933:107:15"
									},
									"scope": 2666,
									"src": "775:266:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2667,
							"src": "185:859:15",
							"usedErrors": []
						}
					],
					"src": "32:1013:15"
				},
				"id": 15
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
					"exportedSymbols": {
						"ISuperApp": [
							2780
						],
						"ISuperToken": [
							3254
						]
					},
					"id": 2781,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2668,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:16"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 2670,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2781,
							"sourceUnit": 3255,
							"src": "59:48:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2669,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3254,
										"src": "68:11:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperApp",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2671,
								"nodeType": "StructuredDocumentation",
								"src": "109:133:16",
								"text": " @title SuperApp interface\n @author Superfluid\n @dev Be aware of the app being jailed, when the word permitted is used."
							},
							"fullyImplemented": false,
							"id": 2780,
							"linearizedBaseContracts": [
								2780
							],
							"name": "ISuperApp",
							"nameLocation": "253:9:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2672,
										"nodeType": "StructuredDocumentation",
										"src": "270:630:16",
										"text": " @dev Callback before a new agreement is created.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param ctx The context data.\n @return cbdata A free format in memory data the app can use to pass\n          arbitary information to the after-hook callback.\n @custom:note \n - It will be invoked with `staticcall`, no state changes are permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "30d9c915",
									"id": 2688,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeAgreementCreated",
									"nameLocation": "914:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2675,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "958:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2688,
												"src": "946:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2674,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2673,
														"name": "ISuperToken",
														"nameLocations": [
															"946:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "946:11:16"
													},
													"referencedDeclaration": 3254,
													"src": "946:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2677,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "986:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2688,
												"src": "978:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "978:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2679,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "1018:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2688,
												"src": "1010:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2678,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2681,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "1054:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2688,
												"src": "1039:28:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2680,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1039:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2683,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "1092:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2688,
												"src": "1077:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2682,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1077:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "936:165:16"
									},
									"returnParameters": {
										"id": 2687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2686,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "1162:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2688,
												"src": "1149:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2685,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1149:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1148:21:16"
									},
									"scope": 2780,
									"src": "905:265:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2689,
										"nodeType": "StructuredDocumentation",
										"src": "1176:579:16",
										"text": " @dev Callback after a new agreement is created.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param cbdata The data returned from the before-hook callback.\n @param ctx The context data.\n @return newCtx The current context of the transaction.\n @custom:note \n - State changes is permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "d86ed3e5",
									"id": 2707,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "afterAgreementCreated",
									"nameLocation": "1769:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2692,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1812:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "1800:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2691,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2690,
														"name": "ISuperToken",
														"nameLocations": [
															"1800:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "1800:11:16"
													},
													"referencedDeclaration": 3254,
													"src": "1800:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2694,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "1840:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "1832:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2693,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1832:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2696,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "1872:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "1864:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2695,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1864:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2698,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "1908:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "1893:28:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2697,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1893:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2700,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "1946:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "1931:21:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2699,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1931:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2702,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "1977:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "1962:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2701,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1962:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1790:196:16"
									},
									"returnParameters": {
										"id": 2706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2705,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "2034:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "2021:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2704,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2021:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2020:21:16"
									},
									"scope": 2780,
									"src": "1760:282:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2708,
										"nodeType": "StructuredDocumentation",
										"src": "2048:630:16",
										"text": " @dev Callback before a new agreement is updated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param ctx The context data.\n @return cbdata A free format in memory data the app can use to pass\n          arbitary information to the after-hook callback.\n @custom:note \n - It will be invoked with `staticcall`, no state changes are permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "884d1f40",
									"id": 2724,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeAgreementUpdated",
									"nameLocation": "2692:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2711,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2736:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2724,
												"src": "2724:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2710,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2709,
														"name": "ISuperToken",
														"nameLocations": [
															"2724:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "2724:11:16"
													},
													"referencedDeclaration": 3254,
													"src": "2724:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2713,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "2764:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2724,
												"src": "2756:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2756:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2715,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "2796:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2724,
												"src": "2788:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2714,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2717,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "2832:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2724,
												"src": "2817:28:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2716,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2817:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2719,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "2870:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2724,
												"src": "2855:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2855:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2714:165:16"
									},
									"returnParameters": {
										"id": 2723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2722,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "2940:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2724,
												"src": "2927:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2721,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2927:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2926:21:16"
									},
									"scope": 2780,
									"src": "2683:265:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2725,
										"nodeType": "StructuredDocumentation",
										"src": "2955:566:16",
										"text": " @dev Callback after a new agreement is updated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param cbdata The data returned from the before-hook callback.\n @param ctx The context data.\n @return newCtx The current context of the transaction.\n @custom:note \n - State changes is permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "230dbd29",
									"id": 2743,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "afterAgreementUpdated",
									"nameLocation": "3535:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2728,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "3578:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "3566:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2727,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2726,
														"name": "ISuperToken",
														"nameLocations": [
															"3566:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "3566:11:16"
													},
													"referencedDeclaration": 3254,
													"src": "3566:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2730,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "3606:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "3598:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3598:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2732,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "3638:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "3630:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2731,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2734,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "3674:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "3659:28:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2733,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3659:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2736,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "3712:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "3697:21:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2735,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3697:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2738,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "3743:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "3728:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2737,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3728:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3556:196:16"
									},
									"returnParameters": {
										"id": 2742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2741,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "3800:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "3787:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2740,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3787:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3786:21:16"
									},
									"scope": 2780,
									"src": "3526:282:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2744,
										"nodeType": "StructuredDocumentation",
										"src": "3814:602:16",
										"text": " @dev Callback before a new agreement is terminated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param ctx The context data.\n @return cbdata A free format in memory data the app can use to pass arbitary information to\n         the after-hook callback.\n @custom:note \n - It will be invoked with `staticcall`, no state changes are permitted.\n - Revert is not permitted."
									},
									"functionSelector": "5f9e7d77",
									"id": 2760,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeAgreementTerminated",
									"nameLocation": "4430:25:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2756,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2747,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "4477:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2760,
												"src": "4465:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2746,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2745,
														"name": "ISuperToken",
														"nameLocations": [
															"4465:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "4465:11:16"
													},
													"referencedDeclaration": 3254,
													"src": "4465:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2749,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "4505:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2760,
												"src": "4497:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4497:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2751,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "4537:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2760,
												"src": "4529:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2750,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4529:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2753,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "4573:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2760,
												"src": "4558:28:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2752,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4558:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2755,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "4611:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2760,
												"src": "4596:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2754,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4596:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4455:165:16"
									},
									"returnParameters": {
										"id": 2759,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2758,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "4681:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2760,
												"src": "4668:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2757,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4668:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4667:21:16"
									},
									"scope": 2780,
									"src": "4421:268:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2761,
										"nodeType": "StructuredDocumentation",
										"src": "4695:552:16",
										"text": " @dev Callback after a new agreement is terminated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param cbdata The data returned from the before-hook callback.\n @param ctx The context data.\n @return newCtx The current context of the transaction.\n @custom:note \n - State changes is permitted.\n - Revert is not permitted."
									},
									"functionSelector": "53c11f99",
									"id": 2779,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "afterAgreementTerminated",
									"nameLocation": "5261:24:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2764,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "5307:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "5295:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2763,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2762,
														"name": "ISuperToken",
														"nameLocations": [
															"5295:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "5295:11:16"
													},
													"referencedDeclaration": 3254,
													"src": "5295:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2766,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "5335:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "5327:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2765,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5327:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2768,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "5367:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "5359:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2767,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5359:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2770,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "5403:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "5388:28:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2769,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5388:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2772,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "5441:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "5426:21:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2771,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5426:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2774,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "5472:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "5457:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2773,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5457:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5285:196:16"
									},
									"returnParameters": {
										"id": 2778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "5529:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2779,
												"src": "5516:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2776,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5516:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5515:21:16"
									},
									"scope": 2780,
									"src": "5252:285:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2781,
							"src": "243:5296:16",
							"usedErrors": []
						}
					],
					"src": "32:5508:16"
				},
				"id": 16
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
					"exportedSymbols": {
						"IConstantInflowNFT": [
							2503
						],
						"IConstantOutflowNFT": [
							2557
						],
						"IERC20": [
							77
						],
						"IERC777": [
							383
						],
						"IPoolAdminNFT": [
							2634
						],
						"IPoolMemberNFT": [
							2637
						],
						"ISuperToken": [
							3254
						],
						"ISuperfluid": [
							3908
						],
						"ISuperfluidToken": [
							4323
						],
						"TokenInfo": [
							4357
						]
					},
					"id": 3255,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2782,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:17"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"file": "./ISuperfluid.sol",
							"id": 2784,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3255,
							"sourceUnit": 3909,
							"src": "59:48:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2783,
										"name": "ISuperfluid",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3908,
										"src": "68:11:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 2786,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3255,
							"sourceUnit": 4324,
							"src": "108:58:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2785,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4323,
										"src": "117:16:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
							"file": "../tokens/TokenInfo.sol",
							"id": 2788,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3255,
							"sourceUnit": 4358,
							"src": "167:52:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2787,
										"name": "TokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4357,
										"src": "176:9:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"file": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"id": 2790,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3255,
							"sourceUnit": 384,
							"src": "220:75:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2789,
										"name": "IERC777",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 383,
										"src": "229:7:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2792,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3255,
							"sourceUnit": 78,
							"src": "296:72:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2791,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 77,
										"src": "305:6:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
							"file": "./IConstantOutflowNFT.sol",
							"id": 2794,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3255,
							"sourceUnit": 2558,
							"src": "369:64:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2793,
										"name": "IConstantOutflowNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2557,
										"src": "378:19:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
							"file": "./IConstantInflowNFT.sol",
							"id": 2796,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3255,
							"sourceUnit": 2504,
							"src": "434:62:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2795,
										"name": "IConstantInflowNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2503,
										"src": "443:18:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
							"file": "./IPoolAdminNFT.sol",
							"id": 2798,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3255,
							"sourceUnit": 2635,
							"src": "497:52:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2797,
										"name": "IPoolAdminNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2634,
										"src": "506:13:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
							"file": "./IPoolMemberNFT.sol",
							"id": 2800,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3255,
							"sourceUnit": 2638,
							"src": "550:54:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2799,
										"name": "IPoolMemberNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2637,
										"src": "559:14:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2802,
										"name": "ISuperfluidToken",
										"nameLocations": [
											"729:16:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 4323,
										"src": "729:16:17"
									},
									"id": 2803,
									"nodeType": "InheritanceSpecifier",
									"src": "729:16:17"
								},
								{
									"baseName": {
										"id": 2804,
										"name": "TokenInfo",
										"nameLocations": [
											"747:9:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 4357,
										"src": "747:9:17"
									},
									"id": 2805,
									"nodeType": "InheritanceSpecifier",
									"src": "747:9:17"
								},
								{
									"baseName": {
										"id": 2806,
										"name": "IERC20",
										"nameLocations": [
											"758:6:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 77,
										"src": "758:6:17"
									},
									"id": 2807,
									"nodeType": "InheritanceSpecifier",
									"src": "758:6:17"
								},
								{
									"baseName": {
										"id": 2808,
										"name": "IERC777",
										"nameLocations": [
											"766:7:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 383,
										"src": "766:7:17"
									},
									"id": 2809,
									"nodeType": "InheritanceSpecifier",
									"src": "766:7:17"
								}
							],
							"canonicalName": "ISuperToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2801,
								"nodeType": "StructuredDocumentation",
								"src": "606:97:17",
								"text": " @title Super token (Superfluid Token + ERC20 + ERC777) interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 3254,
							"linearizedBaseContracts": [
								3254,
								383,
								77,
								4357,
								4323
							],
							"name": "ISuperToken",
							"nameLocation": "714:11:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "f7f02227",
									"id": 2811,
									"name": "SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER",
									"nameLocation": "961:45:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2810,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:17"
									},
									"src": "955:54:17"
								},
								{
									"errorSelector": "fe737d05",
									"id": 2813,
									"name": "SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT",
									"nameLocation": "1040:39:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2812,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1079:2:17"
									},
									"src": "1034:48:17"
								},
								{
									"errorSelector": "e3e13698",
									"id": 2815,
									"name": "SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED",
									"nameLocation": "1119:51:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2814,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1170:2:17"
									},
									"src": "1113:60:17"
								},
								{
									"errorSelector": "f79cf656",
									"id": 2817,
									"name": "SUPER_TOKEN_NO_UNDERLYING_TOKEN",
									"nameLocation": "1198:31:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2816,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1229:2:17"
									},
									"src": "1192:40:17"
								},
								{
									"errorSelector": "7ffa6648",
									"id": 2819,
									"name": "SUPER_TOKEN_ONLY_SELF",
									"nameLocation": "1277:21:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2818,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1298:2:17"
									},
									"src": "1271:30:17"
								},
								{
									"errorSelector": "98f73704",
									"id": 2821,
									"name": "SUPER_TOKEN_ONLY_HOST",
									"nameLocation": "1356:21:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2820,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1377:2:17"
									},
									"src": "1350:30:17"
								},
								{
									"errorSelector": "d9c7ed08",
									"id": 2823,
									"name": "SUPER_TOKEN_ONLY_GOV_OWNER",
									"nameLocation": "1435:26:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1461:2:17"
									},
									"src": "1429:35:17"
								},
								{
									"errorSelector": "81638627",
									"id": 2825,
									"name": "SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS",
									"nameLocation": "1514:37:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2824,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1551:2:17"
									},
									"src": "1508:46:17"
								},
								{
									"errorSelector": "df070274",
									"id": 2827,
									"name": "SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS",
									"nameLocation": "1593:35:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2826,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:2:17"
									},
									"src": "1587:44:17"
								},
								{
									"errorSelector": "ba2ab184",
									"id": 2829,
									"name": "SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS",
									"nameLocation": "1672:34:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2828,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1706:2:17"
									},
									"src": "1666:43:17"
								},
								{
									"errorSelector": "0d243157",
									"id": 2831,
									"name": "SUPER_TOKEN_MINT_TO_ZERO_ADDRESS",
									"nameLocation": "1751:32:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2830,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1783:2:17"
									},
									"src": "1745:41:17"
								},
								{
									"errorSelector": "eecd6c9b",
									"id": 2833,
									"name": "SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS",
									"nameLocation": "1830:38:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2832,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1868:2:17"
									},
									"src": "1824:47:17"
								},
								{
									"errorSelector": "e219bd39",
									"id": 2835,
									"name": "SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS",
									"nameLocation": "1909:36:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2834,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:2:17"
									},
									"src": "1903:45:17"
								},
								{
									"errorSelector": "ef1b6ddf",
									"id": 2837,
									"name": "SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED",
									"nameLocation": "1988:37:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2836,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2025:2:17"
									},
									"src": "1982:46:17"
								},
								{
									"documentation": {
										"id": 2838,
										"nodeType": "StructuredDocumentation",
										"src": "2062:47:17",
										"text": " @dev Initialize the contract"
									},
									"functionSelector": "42fe0980",
									"id": 2850,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "2123:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2841,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2150:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 2850,
												"src": "2143:22:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2840,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2839,
														"name": "IERC20",
														"nameLocations": [
															"2143:6:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2143:6:17"
													},
													"referencedDeclaration": 77,
													"src": "2143:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2843,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2181:18:17",
												"nodeType": "VariableDeclaration",
												"scope": 2850,
												"src": "2175:24:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2842,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2175:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2845,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "2225:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2850,
												"src": "2209:17:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2844,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2209:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2847,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2252:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2850,
												"src": "2236:17:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2846,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2236:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2133:126:17"
									},
									"returnParameters": {
										"id": 2849,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2268:0:17"
									},
									"scope": 3254,
									"src": "2114:155:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "ef43d2c6",
									"id": 2856,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "CONSTANT_OUTFLOW_NFT",
									"nameLocation": "2523:20:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2543:2:17"
									},
									"returnParameters": {
										"id": 2855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2854,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2856,
												"src": "2569:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantOutflowNFT_$2557",
													"typeString": "contract IConstantOutflowNFT"
												},
												"typeName": {
													"id": 2853,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2852,
														"name": "IConstantOutflowNFT",
														"nameLocations": [
															"2569:19:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2557,
														"src": "2569:19:17"
													},
													"referencedDeclaration": 2557,
													"src": "2569:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantOutflowNFT_$2557",
														"typeString": "contract IConstantOutflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2568:21:17"
									},
									"scope": 3254,
									"src": "2514:76:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4c5c0c85",
									"id": 2862,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "CONSTANT_INFLOW_NFT",
									"nameLocation": "2657:19:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2857,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2676:2:17"
									},
									"returnParameters": {
										"id": 2861,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2860,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2862,
												"src": "2702:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantInflowNFT_$2503",
													"typeString": "contract IConstantInflowNFT"
												},
												"typeName": {
													"id": 2859,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2858,
														"name": "IConstantInflowNFT",
														"nameLocations": [
															"2702:18:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2503,
														"src": "2702:18:17"
													},
													"referencedDeclaration": 2503,
													"src": "2702:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantInflowNFT_$2503",
														"typeString": "contract IConstantInflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2701:20:17"
									},
									"scope": 3254,
									"src": "2648:74:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										269,
										4344
									],
									"documentation": {
										"id": 2863,
										"nodeType": "StructuredDocumentation",
										"src": "2913:54:17",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 2871,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2981:4:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2867,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2865,
												"name": "IERC777",
												"nameLocations": [
													"3011:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "3011:7:17"
											},
											{
												"id": 2866,
												"name": "TokenInfo",
												"nameLocations": [
													"3020:9:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 4357,
												"src": "3020:9:17"
											}
										],
										"src": "3002:28:17"
									},
									"parameters": {
										"id": 2864,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2985:2:17"
									},
									"returnParameters": {
										"id": 2870,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2869,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2871,
												"src": "3040:13:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2868,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3040:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3039:15:17"
									},
									"scope": 3254,
									"src": "2972:83:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										275,
										4350
									],
									"documentation": {
										"id": 2872,
										"nodeType": "StructuredDocumentation",
										"src": "3061:102:17",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 2880,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3177:6:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2876,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2874,
												"name": "IERC777",
												"nameLocations": [
													"3209:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "3209:7:17"
											},
											{
												"id": 2875,
												"name": "TokenInfo",
												"nameLocations": [
													"3218:9:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 4357,
												"src": "3218:9:17"
											}
										],
										"src": "3200:28:17"
									},
									"parameters": {
										"id": 2873,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3183:2:17"
									},
									"returnParameters": {
										"id": 2879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2878,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2880,
												"src": "3238:13:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2877,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3238:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3237:15:17"
									},
									"scope": 3254,
									"src": "3168:85:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										4356
									],
									"documentation": {
										"id": 2881,
										"nodeType": "StructuredDocumentation",
										"src": "3259:669:17",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n @custom:note SuperToken always uses 18 decimals.\n This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 2888,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3942:8:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2884,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2883,
												"name": "TokenInfo",
												"nameLocations": [
													"3976:9:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 4357,
												"src": "3976:9:17"
											}
										],
										"src": "3967:19:17"
									},
									"parameters": {
										"id": 2882,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3950:2:17"
									},
									"returnParameters": {
										"id": 2887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2886,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2888,
												"src": "3996:5:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2885,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3996:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3995:7:17"
									},
									"scope": 3254,
									"src": "3933:70:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										26,
										287
									],
									"documentation": {
										"id": 2889,
										"nodeType": "StructuredDocumentation",
										"src": "4190:49:17",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 2897,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "4253:11:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2893,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2891,
												"name": "IERC777",
												"nameLocations": [
													"4290:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "4290:7:17"
											},
											{
												"id": 2892,
												"name": "IERC20",
												"nameLocations": [
													"4299:6:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "4299:6:17"
											}
										],
										"src": "4281:25:17"
									},
									"parameters": {
										"id": 2890,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4264:2:17"
									},
									"returnParameters": {
										"id": 2896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2895,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2897,
												"src": "4316:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2894,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4316:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4315:9:17"
									},
									"scope": 3254,
									"src": "4244:81:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										34,
										295
									],
									"documentation": {
										"id": 2898,
										"nodeType": "StructuredDocumentation",
										"src": "4331:83:17",
										"text": " @dev Returns the amount of tokens owned by an account (`owner`)."
									},
									"functionSelector": "70a08231",
									"id": 2908,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4428:9:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2904,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2902,
												"name": "IERC777",
												"nameLocations": [
													"4478:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "4478:7:17"
											},
											{
												"id": 2903,
												"name": "IERC20",
												"nameLocations": [
													"4487:6:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "4487:6:17"
											}
										],
										"src": "4469:25:17"
									},
									"parameters": {
										"id": 2901,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2900,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4446:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2908,
												"src": "4438:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2899,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4438:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4437:17:17"
									},
									"returnParameters": {
										"id": 2907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2906,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4511:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2908,
												"src": "4503:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2905,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4503:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4502:17:17"
									},
									"scope": 3254,
									"src": "4419:101:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										44
									],
									"documentation": {
										"id": 2909,
										"nodeType": "StructuredDocumentation",
										"src": "4698:233:17",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 2920,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4945:8:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2916,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2915,
												"name": "IERC20",
												"nameLocations": [
													"5007:6:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "5007:6:17"
											}
										],
										"src": "4998:16:17"
									},
									"parameters": {
										"id": 2914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2911,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4962:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 2920,
												"src": "4954:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2910,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4954:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2913,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4981:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2920,
												"src": "4973:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4973:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4953:35:17"
									},
									"returnParameters": {
										"id": 2919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2918,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2920,
												"src": "5024:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2917,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5024:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5023:6:17"
									},
									"scope": 3254,
									"src": "4936:94:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										54
									],
									"documentation": {
										"id": 2921,
										"nodeType": "StructuredDocumentation",
										"src": "5036:288:17",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n         allowed to spend on behalf of `owner` through {transferFrom}. This is\n         zero by default.\n @notice This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 2932,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "5338:9:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2928,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2927,
												"name": "IERC20",
												"nameLocations": [
													"5398:6:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "5398:6:17"
											}
										],
										"src": "5389:16:17"
									},
									"parameters": {
										"id": 2926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2923,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5356:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2932,
												"src": "5348:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5348:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2925,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5371:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2932,
												"src": "5363:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2924,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5363:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5347:32:17"
									},
									"returnParameters": {
										"id": 2931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2930,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2932,
												"src": "5420:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2929,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5420:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5419:9:17"
									},
									"scope": 3254,
									"src": "5329:100:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										64
									],
									"documentation": {
										"id": 2933,
										"nodeType": "StructuredDocumentation",
										"src": "5435:668:17",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:note Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n @custom:emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 2944,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "6117:7:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2940,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2939,
												"name": "IERC20",
												"nameLocations": [
													"6176:6:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "6176:6:17"
											}
										],
										"src": "6167:16:17"
									},
									"parameters": {
										"id": 2938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2935,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6133:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2944,
												"src": "6125:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2934,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6125:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2937,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6150:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2944,
												"src": "6142:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6142:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6124:33:17"
									},
									"returnParameters": {
										"id": 2943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2942,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2944,
												"src": "6193:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2941,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6193:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6192:6:17"
									},
									"scope": 3254,
									"src": "6108:91:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										76
									],
									"documentation": {
										"id": 2945,
										"nodeType": "StructuredDocumentation",
										"src": "6205:336:17",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n         allowance mechanism. `amount` is then deducted from the caller's\n         allowance.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 2958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6555:12:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2954,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2953,
												"name": "IERC20",
												"nameLocations": [
													"6637:6:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "6637:6:17"
											}
										],
										"src": "6628:16:17"
									},
									"parameters": {
										"id": 2952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2947,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "6576:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "6568:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6568:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2949,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "6592:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "6584:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2948,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6584:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2951,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6611:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "6603:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2950,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6603:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6567:51:17"
									},
									"returnParameters": {
										"id": 2957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2956,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "6654:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2955,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6654:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6653:6:17"
									},
									"scope": 3254,
									"src": "6546:114:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2959,
										"nodeType": "StructuredDocumentation",
										"src": "6666:393:17",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n @custom:emits an {Approval} event indicating the updated allowance.\n @custom:requirements \n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 2968,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "7073:17:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2961,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7099:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2968,
												"src": "7091:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7091:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2963,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "7116:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2968,
												"src": "7108:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7108:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7090:37:17"
									},
									"returnParameters": {
										"id": 2967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2966,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2968,
												"src": "7146:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2965,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7146:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7145:6:17"
									},
									"scope": 3254,
									"src": "7064:88:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2969,
										"nodeType": "StructuredDocumentation",
										"src": "7158:485:17",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n @custom:emits an {Approval} event indicating the updated allowance.\n @custom:requirements \n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 2978,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "7658:17:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2971,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7684:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2978,
												"src": "7676:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2970,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7676:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2973,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "7701:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 2978,
												"src": "7693:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2972,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7693:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7675:42:17"
									},
									"returnParameters": {
										"id": 2977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2976,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2978,
												"src": "7736:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2975,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7736:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:6:17"
									},
									"scope": 3254,
									"src": "7649:93:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										281
									],
									"documentation": {
										"id": 2979,
										"nodeType": "StructuredDocumentation",
										"src": "7921:315:17",
										"text": " @dev Returns the smallest part of the token that is not divisible. This\n         means all token operations (creation, movement and destruction) must have\n         amounts that are a multiple of this number.\n @custom:note For super token contracts, this value is always 1"
									},
									"functionSelector": "556f0dc7",
									"id": 2986,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "granularity",
									"nameLocation": "8250:11:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2982,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2981,
												"name": "IERC777",
												"nameLocations": [
													"8287:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "8287:7:17"
											}
										],
										"src": "8278:17:17"
									},
									"parameters": {
										"id": 2980,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8261:2:17"
									},
									"returnParameters": {
										"id": 2985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2984,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2986,
												"src": "8305:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2983,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8305:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8304:9:17"
									},
									"scope": 3254,
									"src": "8241:73:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										305
									],
									"documentation": {
										"id": 2987,
										"nodeType": "StructuredDocumentation",
										"src": "8320:610:17",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @dev If send or receive hooks are registered for the caller and `recipient`,\n      the corresponding functions will be called with `data` and empty\n      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n @custom:emits a {Sent} event.\n @custom:requirements \n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "9bd9bbc6",
									"id": 2998,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "8944:4:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2996,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2995,
												"name": "IERC777",
												"nameLocations": [
													"9023:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "9023:7:17"
											}
										],
										"src": "9014:17:17"
									},
									"parameters": {
										"id": 2994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2989,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "8957:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 2998,
												"src": "8949:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2988,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8949:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2991,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8976:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2998,
												"src": "8968:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2990,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8968:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2993,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8999:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2998,
												"src": "8984:19:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2992,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8984:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8948:56:17"
									},
									"returnParameters": {
										"id": 2997,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9031:0:17"
									},
									"scope": 3254,
									"src": "8935:97:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										313
									],
									"documentation": {
										"id": 2999,
										"nodeType": "StructuredDocumentation",
										"src": "9038:473:17",
										"text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply and transfers the underlying token to the caller's account.\n If a send hook is registered for the caller, the corresponding function\n will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n @custom:emits a {Burned} event.\n @custom:requirements \n - the caller must have at least `amount` tokens."
									},
									"functionSelector": "fe9d9303",
									"id": 3008,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "9525:4:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3006,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3005,
												"name": "IERC777",
												"nameLocations": [
													"9585:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "9585:7:17"
											}
										],
										"src": "9576:17:17"
									},
									"parameters": {
										"id": 3004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3001,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9538:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3008,
												"src": "9530:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3000,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9530:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3003,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9561:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 3008,
												"src": "9546:19:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3002,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9546:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9529:37:17"
									},
									"returnParameters": {
										"id": 3007,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9593:0:17"
									},
									"scope": 3254,
									"src": "9516:78:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										323
									],
									"documentation": {
										"id": 3009,
										"nodeType": "StructuredDocumentation",
										"src": "9600:249:17",
										"text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
									},
									"functionSelector": "d95b6371",
									"id": 3020,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOperatorFor",
									"nameLocation": "9863:13:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3016,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3015,
												"name": "IERC777",
												"nameLocations": [
													"9934:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "9934:7:17"
											}
										],
										"src": "9925:17:17"
									},
									"parameters": {
										"id": 3014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3011,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "9885:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3020,
												"src": "9877:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3010,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9877:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3013,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "9903:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 3020,
												"src": "9895:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3012,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9895:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9876:39:17"
									},
									"returnParameters": {
										"id": 3019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3018,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3020,
												"src": "9957:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3017,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9957:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9956:6:17"
									},
									"scope": 3254,
									"src": "9854:109:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										329
									],
									"documentation": {
										"id": 3021,
										"nodeType": "StructuredDocumentation",
										"src": "9969:243:17",
										"text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n @custom:emits an {AuthorizedOperator} event.\n @custom:requirements \n - `operator` cannot be calling address."
									},
									"functionSelector": "959b8c3f",
									"id": 3028,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeOperator",
									"nameLocation": "10226:17:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3026,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3025,
												"name": "IERC777",
												"nameLocations": [
													"10280:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "10280:7:17"
											}
										],
										"src": "10271:17:17"
									},
									"parameters": {
										"id": 3024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3023,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10252:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3028,
												"src": "10244:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3022,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10244:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10243:18:17"
									},
									"returnParameters": {
										"id": 3027,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10288:0:17"
									},
									"scope": 3254,
									"src": "10217:72:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										335
									],
									"documentation": {
										"id": 3029,
										"nodeType": "StructuredDocumentation",
										"src": "10295:271:17",
										"text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n @custom:emits a {RevokedOperator} event.\n @custom:requirements \n - `operator` cannot be calling address."
									},
									"functionSelector": "fad8b32a",
									"id": 3036,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeOperator",
									"nameLocation": "10580:14:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3034,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3033,
												"name": "IERC777",
												"nameLocations": [
													"10631:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "10631:7:17"
											}
										],
										"src": "10622:17:17"
									},
									"parameters": {
										"id": 3032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3031,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10603:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3036,
												"src": "10595:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3030,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10595:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10594:18:17"
									},
									"returnParameters": {
										"id": 3035,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10639:0:17"
									},
									"scope": 3254,
									"src": "10571:69:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										342
									],
									"documentation": {
										"id": 3037,
										"nodeType": "StructuredDocumentation",
										"src": "10646:338:17",
										"text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
									},
									"functionSelector": "06e48538",
									"id": 3045,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultOperators",
									"nameLocation": "10998:16:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3040,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3039,
												"name": "IERC777",
												"nameLocations": [
													"11035:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "11035:7:17"
											}
										],
										"src": "11026:17:17"
									},
									"parameters": {
										"id": 3038,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11014:2:17"
									},
									"returnParameters": {
										"id": 3044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3043,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3045,
												"src": "11058:16:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 3041,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11058:7:17",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 3042,
													"nodeType": "ArrayTypeName",
													"src": "11058:9:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11057:18:17"
									},
									"scope": 3254,
									"src": "10989:87:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										356
									],
									"documentation": {
										"id": 3046,
										"nodeType": "StructuredDocumentation",
										"src": "11082:724:17",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `data` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n @custom:emits a {Sent} event.\n @custom:requirements \n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "62ad1b83",
									"id": 3061,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorSend",
									"nameLocation": "11820:12:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3059,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3058,
												"name": "IERC777",
												"nameLocations": [
													"11998:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "11998:7:17"
											}
										],
										"src": "11989:17:17"
									},
									"parameters": {
										"id": 3057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3048,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "11850:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3061,
												"src": "11842:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3047,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11842:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3050,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "11874:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3061,
												"src": "11866:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3049,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11866:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3052,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11901:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3061,
												"src": "11893:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11893:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3054,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "11932:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 3061,
												"src": "11917:19:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3053,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11917:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3056,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "11961:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 3061,
												"src": "11946:27:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3055,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11946:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11832:147:17"
									},
									"returnParameters": {
										"id": 3060,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12006:0:17"
									},
									"scope": 3254,
									"src": "11811:196:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										368
									],
									"documentation": {
										"id": 3062,
										"nodeType": "StructuredDocumentation",
										"src": "12013:542:17",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `data` and `operatorData`. See {IERC777Sender}.\n @custom:emits a {Burned} event.\n @custom:requirements \n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
									},
									"functionSelector": "fc673c4f",
									"id": 3075,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorBurn",
									"nameLocation": "12569:12:17",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3073,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3072,
												"name": "IERC777",
												"nameLocations": [
													"12721:7:17"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "12721:7:17"
											}
										],
										"src": "12712:17:17"
									},
									"parameters": {
										"id": 3071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3064,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "12599:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3075,
												"src": "12591:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3063,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12591:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3066,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12624:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3075,
												"src": "12616:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3065,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12616:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3068,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "12655:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 3075,
												"src": "12640:19:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3067,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12640:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3070,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "12684:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 3075,
												"src": "12669:27:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3069,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12669:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12581:121:17"
									},
									"returnParameters": {
										"id": 3074,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12729:0:17"
									},
									"scope": 3254,
									"src": "12560:170:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3076,
										"nodeType": "StructuredDocumentation",
										"src": "12938:107:17",
										"text": " @dev Mint new tokens for the account\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "c68d4283",
									"id": 3085,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfMint",
									"nameLocation": "13059:8:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3078,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13085:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "13077:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13077:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3080,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13110:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "13102:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13102:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3082,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "13139:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "13126:21:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3081,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13126:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13067:86:17"
									},
									"returnParameters": {
										"id": 3084,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13162:0:17"
									},
									"scope": 3254,
									"src": "13050:113:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3086,
										"nodeType": "StructuredDocumentation",
										"src": "13168:107:17",
										"text": " @dev Burn existing tokens for the account\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "9d876741",
									"id": 3095,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfBurn",
									"nameLocation": "13288:8:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3088,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13313:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3095,
												"src": "13305:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13305:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3090,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13337:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3095,
												"src": "13329:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13329:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3092,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "13365:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3095,
												"src": "13352:21:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3091,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13352:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13296:82:17"
									},
									"returnParameters": {
										"id": 3094,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13387:0:17"
									},
									"scope": 3254,
									"src": "13279:109:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3096,
										"nodeType": "StructuredDocumentation",
										"src": "13393:245:17",
										"text": " @dev Transfer `amount` tokens from the `sender` to `recipient`.\n If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n spend tokens of `sender`.\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "41b706be",
									"id": 3107,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfTransferFrom",
									"nameLocation": "13651:16:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3098,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "13685:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3107,
												"src": "13677:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3097,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13677:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3100,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "13709:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3107,
												"src": "13701:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3099,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13701:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3102,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "13734:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3107,
												"src": "13726:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13726:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3104,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13761:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3107,
												"src": "13753:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13753:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13667:105:17"
									},
									"returnParameters": {
										"id": 3106,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13781:0:17"
									},
									"scope": 3254,
									"src": "13642:140:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3108,
										"nodeType": "StructuredDocumentation",
										"src": "13787:145:17",
										"text": " @dev Give `spender`, `amount` allowance to spend the tokens of\n `account`.\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "66a12fb6",
									"id": 3117,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfApproveFor",
									"nameLocation": "13945:14:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3110,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13977:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3117,
												"src": "13969:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3109,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13969:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3112,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "14002:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3117,
												"src": "13994:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3111,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13994:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3114,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "14027:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3117,
												"src": "14019:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14019:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13959:79:17"
									},
									"returnParameters": {
										"id": 3116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14047:0:17"
									},
									"scope": 3254,
									"src": "13936:112:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3118,
										"nodeType": "StructuredDocumentation",
										"src": "14249:87:17",
										"text": " @dev Transfer all available balance from `msg.sender` to `recipient`"
									},
									"functionSelector": "a3a7e7f3",
									"id": 3123,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAll",
									"nameLocation": "14350:11:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3120,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "14370:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3123,
												"src": "14362:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14362:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14361:19:17"
									},
									"returnParameters": {
										"id": 3122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14389:0:17"
									},
									"scope": 3254,
									"src": "14341:49:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3124,
										"nodeType": "StructuredDocumentation",
										"src": "14579:110:17",
										"text": " @dev Return the underlying token contract\n @return tokenAddr Underlying token address"
									},
									"functionSelector": "ee719bc8",
									"id": 3129,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUnderlyingToken",
									"nameLocation": "14703:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14721:2:17"
									},
									"returnParameters": {
										"id": 3128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3127,
												"mutability": "mutable",
												"name": "tokenAddr",
												"nameLocation": "14754:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3129,
												"src": "14746:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14746:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14745:19:17"
									},
									"scope": 3254,
									"src": "14694:71:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3130,
										"nodeType": "StructuredDocumentation",
										"src": "14771:262:17",
										"text": " @dev Upgrade ERC20 to SuperToken.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @custom:note It will use `transferFrom` to get tokens. Before calling this\n function you should `approve` this contract"
									},
									"functionSelector": "45977d03",
									"id": 3135,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "upgrade",
									"nameLocation": "15047:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3132,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "15063:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3135,
												"src": "15055:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15055:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15054:16:17"
									},
									"returnParameters": {
										"id": 3134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15079:0:17"
									},
									"scope": 3254,
									"src": "15038:42:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3136,
										"nodeType": "StructuredDocumentation",
										"src": "15086:679:17",
										"text": " @dev Upgrade ERC20 to SuperToken and transfer immediately\n @param to The account to receive upgraded tokens\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @param data User data for the TokensRecipient callback\n @custom:note It will use `transferFrom` to get tokens. Before calling this\n function you should `approve` this contract\n \n @custom:warning\n - there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.\n @custom:requirements \n - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts."
									},
									"functionSelector": "5b9d09cc",
									"id": 3145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "upgradeTo",
									"nameLocation": "15779:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3138,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "15797:2:17",
												"nodeType": "VariableDeclaration",
												"scope": 3145,
												"src": "15789:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15789:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3140,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "15809:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3145,
												"src": "15801:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15801:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3142,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "15832:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 3145,
												"src": "15817:19:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3141,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15817:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15788:49:17"
									},
									"returnParameters": {
										"id": 3144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15846:0:17"
									},
									"scope": 3254,
									"src": "15770:77:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3146,
										"nodeType": "StructuredDocumentation",
										"src": "15853:166:17",
										"text": " @dev Token upgrade event\n @param account Account where tokens are upgraded to\n @param amount Amount of tokens upgraded (in 18 decimals)"
									},
									"eventSelector": "25ca84076773b0455db53621c459ddc84fe40840e4932a62706a032566f399df",
									"id": 3152,
									"name": "TokenUpgraded",
									"nameLocation": "16030:13:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3148,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "16069:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3152,
												"src": "16053:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16053:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3150,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16094:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3152,
												"src": "16086:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16086:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16043:63:17"
									},
									"src": "16024:83:17"
								},
								{
									"documentation": {
										"id": 3153,
										"nodeType": "StructuredDocumentation",
										"src": "16113:158:17",
										"text": " @dev Downgrade SuperToken to ERC20.\n @dev It will call transfer to send tokens\n @param amount Number of tokens to be downgraded"
									},
									"functionSelector": "11bcc81e",
									"id": 3158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "downgrade",
									"nameLocation": "16285:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3155,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16303:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3158,
												"src": "16295:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16295:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16294:16:17"
									},
									"returnParameters": {
										"id": 3157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16319:0:17"
									},
									"scope": 3254,
									"src": "16276:44:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3159,
										"nodeType": "StructuredDocumentation",
										"src": "16326:208:17",
										"text": " @dev Downgrade SuperToken to ERC20 and transfer immediately\n @param to The account to receive downgraded tokens\n @param amount Number of tokens to be downgraded (in 18 decimals)"
									},
									"functionSelector": "83ba2525",
									"id": 3166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "downgradeTo",
									"nameLocation": "16548:11:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3161,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16568:2:17",
												"nodeType": "VariableDeclaration",
												"scope": 3166,
												"src": "16560:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16560:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3163,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16580:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3166,
												"src": "16572:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16572:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16559:28:17"
									},
									"returnParameters": {
										"id": 3165,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16596:0:17"
									},
									"scope": 3254,
									"src": "16539:58:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3167,
										"nodeType": "StructuredDocumentation",
										"src": "16603:152:17",
										"text": " @dev Token downgrade event\n @param account Account whose tokens are downgraded\n @param amount Amount of tokens downgraded"
									},
									"eventSelector": "3bc27981aebbb57f9247dc00fde9d6cd91e4b230083fec3238fedbcba1f9ab3d",
									"id": 3173,
									"name": "TokenDowngraded",
									"nameLocation": "16766:15:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3169,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "16807:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3173,
												"src": "16791:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16791:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3171,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16832:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3173,
												"src": "16824:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16824:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16781:63:17"
									},
									"src": "16760:85:17"
								},
								{
									"documentation": {
										"id": 3174,
										"nodeType": "StructuredDocumentation",
										"src": "17034:277:17",
										"text": " @dev Perform ERC20 approve by host contract.\n @param account The account owner to be approved.\n @param spender The spender of account owner's funds.\n @param amount Number of tokens to be approved.\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "62aa5287",
									"id": 3183,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationApprove",
									"nameLocation": "17325:16:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3176,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17359:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3183,
												"src": "17351:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17351:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3178,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "17384:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3183,
												"src": "17376:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17376:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3180,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "17409:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3183,
												"src": "17401:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17401:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17341:80:17"
									},
									"returnParameters": {
										"id": 3182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17430:0:17"
									},
									"scope": 3254,
									"src": "17316:115:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4b2763b3",
									"id": 3192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationIncreaseAllowance",
									"nameLocation": "17446:26:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3185,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17490:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3192,
												"src": "17482:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17482:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3187,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "17515:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3192,
												"src": "17507:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17507:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3189,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "17540:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 3192,
												"src": "17532:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17532:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17472:84:17"
									},
									"returnParameters": {
										"id": 3191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17565:0:17"
									},
									"scope": 3254,
									"src": "17437:129:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "c780fd82",
									"id": 3201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationDecreaseAllowance",
									"nameLocation": "17581:26:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3194,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17625:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3201,
												"src": "17617:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17617:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3196,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "17650:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3201,
												"src": "17642:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17642:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3198,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "17675:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3201,
												"src": "17667:23:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17667:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17607:89:17"
									},
									"returnParameters": {
										"id": 3200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17705:0:17"
									},
									"scope": 3254,
									"src": "17572:134:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3202,
										"nodeType": "StructuredDocumentation",
										"src": "17712:343:17",
										"text": " @dev Perform ERC20 transferFrom by host contract.\n @param account The account to spend sender's funds.\n @param spender The account where the funds is sent from.\n @param recipient The recipient of the funds.\n @param amount Number of tokens to be transferred.\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "16d055d6",
									"id": 3213,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationTransferFrom",
									"nameLocation": "18069:21:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3204,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "18108:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3213,
												"src": "18100:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18100:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3206,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "18133:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3213,
												"src": "18125:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18125:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3208,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "18158:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3213,
												"src": "18150:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18150:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3210,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18185:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3213,
												"src": "18177:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18177:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18090:107:17"
									},
									"returnParameters": {
										"id": 3212,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18206:0:17"
									},
									"scope": 3254,
									"src": "18060:147:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3214,
										"nodeType": "StructuredDocumentation",
										"src": "18213:325:17",
										"text": " @dev Perform ERC777 send by host contract.\n @param spender The account where the funds is sent from.\n @param recipient The recipient of the funds.\n @param amount Number of tokens to be transferred.\n @param data Arbitrary user inputted data\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "ca0c1e7f",
									"id": 3225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationSend",
									"nameLocation": "18552:13:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3216,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "18583:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3225,
												"src": "18575:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18575:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3218,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "18608:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3225,
												"src": "18600:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18600:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3220,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18635:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3225,
												"src": "18627:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18627:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3222,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "18664:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 3225,
												"src": "18651:17:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3221,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18651:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18565:109:17"
									},
									"returnParameters": {
										"id": 3224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18683:0:17"
									},
									"scope": 3254,
									"src": "18543:141:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3226,
										"nodeType": "StructuredDocumentation",
										"src": "18690:233:17",
										"text": " @dev Upgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "ca789464",
									"id": 3233,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationUpgrade",
									"nameLocation": "18937:16:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3228,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "18962:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3233,
												"src": "18954:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18954:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3230,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18979:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3233,
												"src": "18971:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18971:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18953:33:17"
									},
									"returnParameters": {
										"id": 3232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18995:0:17"
									},
									"scope": 3254,
									"src": "18928:68:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3234,
										"nodeType": "StructuredDocumentation",
										"src": "19002:237:17",
										"text": " @dev Downgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be downgraded (in 18 decimals)\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "245887fc",
									"id": 3241,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationDowngrade",
									"nameLocation": "19253:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3236,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "19280:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3241,
												"src": "19272:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19272:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3238,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "19297:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3241,
												"src": "19289:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19289:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19271:33:17"
									},
									"returnParameters": {
										"id": 3240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19313:0:17"
									},
									"scope": 3254,
									"src": "19244:70:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3242,
										"nodeType": "StructuredDocumentation",
										"src": "19343:126:17",
										"text": " @dev Constant Outflow NFT proxy created event\n @param constantOutflowNFT constant outflow nft address"
									},
									"eventSelector": "cf554eb342edf010a94e07701ae91e99e90b769f649f03aeb1153654ddd43c01",
									"id": 3247,
									"name": "ConstantOutflowNFTCreated",
									"nameLocation": "19480:25:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3245,
												"indexed": true,
												"mutability": "mutable",
												"name": "constantOutflowNFT",
												"nameLocation": "19543:18:17",
												"nodeType": "VariableDeclaration",
												"scope": 3247,
												"src": "19515:46:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantOutflowNFT_$2557",
													"typeString": "contract IConstantOutflowNFT"
												},
												"typeName": {
													"id": 3244,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3243,
														"name": "IConstantOutflowNFT",
														"nameLocations": [
															"19515:19:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2557,
														"src": "19515:19:17"
													},
													"referencedDeclaration": 2557,
													"src": "19515:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantOutflowNFT_$2557",
														"typeString": "contract IConstantOutflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19505:62:17"
									},
									"src": "19474:94:17"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3248,
										"nodeType": "StructuredDocumentation",
										"src": "19574:123:17",
										"text": " @dev Constant Inflow NFT proxy created event\n @param constantInflowNFT constant inflow nft address"
									},
									"eventSelector": "8837af285f4d380af9227df9ebafa13d992b487fa6d7a4366bd4154576085b89",
									"id": 3253,
									"name": "ConstantInflowNFTCreated",
									"nameLocation": "19708:24:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3251,
												"indexed": true,
												"mutability": "mutable",
												"name": "constantInflowNFT",
												"nameLocation": "19769:17:17",
												"nodeType": "VariableDeclaration",
												"scope": 3253,
												"src": "19742:44:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantInflowNFT_$2503",
													"typeString": "contract IConstantInflowNFT"
												},
												"typeName": {
													"id": 3250,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3249,
														"name": "IConstantInflowNFT",
														"nameLocations": [
															"19742:18:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2503,
														"src": "19742:18:17"
													},
													"referencedDeclaration": 2503,
													"src": "19742:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantInflowNFT_$2503",
														"typeString": "contract IConstantInflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19732:60:17"
									},
									"src": "19702:91:17"
								}
							],
							"scope": 3255,
							"src": "704:19618:17",
							"usedErrors": [
								2811,
								2813,
								2815,
								2817,
								2819,
								2821,
								2823,
								2825,
								2827,
								2829,
								2831,
								2833,
								2835,
								2837,
								4044,
								4046,
								4048,
								4050,
								4052,
								4054
							]
						}
					],
					"src": "32:20291:17"
				},
				"id": 17
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
					"exportedSymbols": {
						"ERC20WithTokenInfo": [
							4335
						],
						"IERC20": [
							77
						],
						"ISuperToken": [
							3254
						],
						"ISuperTokenFactory": [
							3384
						]
					},
					"id": 3385,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3256,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:18"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 3258,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3385,
							"sourceUnit": 3255,
							"src": "59:48:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3257,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3254,
										"src": "68:11:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
							"file": "../tokens/ERC20WithTokenInfo.sol",
							"id": 3261,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3385,
							"sourceUnit": 4336,
							"src": "109:86:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3259,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 77,
										"src": "122:6:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 3260,
										"name": "ERC20WithTokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4335,
										"src": "134:18:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperTokenFactory",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3262,
								"nodeType": "StructuredDocumentation",
								"src": "197:69:18",
								"text": " @title Super token factory interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 3384,
							"linearizedBaseContracts": [
								3384
							],
							"name": "ISuperTokenFactory",
							"nameLocation": "277:18:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "91d67972",
									"id": 3264,
									"name": "SUPER_TOKEN_FACTORY_ALREADY_EXISTS",
									"nameLocation": "483:34:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3263,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "517:2:18"
									},
									"src": "477:43:18"
								},
								{
									"errorSelector": "872cac48",
									"id": 3266,
									"name": "SUPER_TOKEN_FACTORY_DOES_NOT_EXIST",
									"nameLocation": "561:34:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "595:2:18"
									},
									"src": "555:43:18"
								},
								{
									"errorSelector": "1b39b9b4",
									"id": 3268,
									"name": "SUPER_TOKEN_FACTORY_UNINITIALIZED",
									"nameLocation": "639:33:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "672:2:18"
									},
									"src": "633:42:18"
								},
								{
									"errorSelector": "478b8e83",
									"id": 3270,
									"name": "SUPER_TOKEN_FACTORY_ONLY_HOST",
									"nameLocation": "717:29:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "746:2:18"
									},
									"src": "711:38:18"
								},
								{
									"errorSelector": "c4901a43",
									"id": 3272,
									"name": "SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED",
									"nameLocation": "795:49:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "844:2:18"
									},
									"src": "789:58:18"
								},
								{
									"errorSelector": "305c9e82",
									"id": 3274,
									"name": "SUPER_TOKEN_FACTORY_ZERO_ADDRESS",
									"nameLocation": "873:32:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3273,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "905:2:18"
									},
									"src": "867:41:18"
								},
								{
									"documentation": {
										"id": 3275,
										"nodeType": "StructuredDocumentation",
										"src": "1133:60:18",
										"text": " @dev Get superfluid host contract address"
									},
									"functionSelector": "20bc4425",
									"id": 3280,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHost",
									"nameLocation": "1207:7:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3276,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1214:2:18"
									},
									"returnParameters": {
										"id": 3279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3278,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1247:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 3280,
												"src": "1239:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3277,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1239:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1238:14:18"
									},
									"scope": 3384,
									"src": "1198:55:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3281,
										"nodeType": "StructuredDocumentation",
										"src": "1259:32:18",
										"text": "@dev Initialize the contract"
									},
									"functionSelector": "8129fc1c",
									"id": 3284,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "1305:10:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1315:2:18"
									},
									"returnParameters": {
										"id": 3283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1326:0:18"
									},
									"scope": 3384,
									"src": "1296:31:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3285,
										"nodeType": "StructuredDocumentation",
										"src": "1333:63:18",
										"text": " @notice Get the canonical super token logic."
									},
									"functionSelector": "9470a5b2",
									"id": 3291,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenLogic",
									"nameLocation": "1410:18:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1428:2:18"
									},
									"returnParameters": {
										"id": 3290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3289,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1466:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 3291,
												"src": "1454:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 3288,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3287,
														"name": "ISuperToken",
														"nameLocations": [
															"1454:11:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "1454:11:18"
													},
													"referencedDeclaration": 3254,
													"src": "1454:11:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1453:24:18"
									},
									"scope": 3384,
									"src": "1401:77:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperTokenFactory.Upgradability",
									"id": 3295,
									"members": [
										{
											"id": 3292,
											"name": "NON_UPGRADABLE",
											"nameLocation": "1642:14:18",
											"nodeType": "EnumValue",
											"src": "1642:14:18"
										},
										{
											"id": 3293,
											"name": "SEMI_UPGRADABLE",
											"nameLocation": "1736:15:18",
											"nodeType": "EnumValue",
											"src": "1736:15:18"
										},
										{
											"id": 3294,
											"name": "FULL_UPGRADABLE",
											"nameLocation": "1815:15:18",
											"nodeType": "EnumValue",
											"src": "1815:15:18"
										}
									],
									"name": "Upgradability",
									"nameLocation": "1537:13:18",
									"nodeType": "EnumDefinition",
									"src": "1532:304:18"
								},
								{
									"documentation": {
										"id": 3296,
										"nodeType": "StructuredDocumentation",
										"src": "1842:398:18",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token\n @param underlyingToken Underlying ERC20 token\n @param underlyingDecimals Underlying token decimals\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @return superToken The deployed and initialized wrapper super token"
									},
									"functionSelector": "a6d0c534",
									"id": 3314,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "2254:18:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3299,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2289:15:18",
												"nodeType": "VariableDeclaration",
												"scope": 3314,
												"src": "2282:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 3298,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3297,
														"name": "IERC20",
														"nameLocations": [
															"2282:6:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2282:6:18"
													},
													"referencedDeclaration": 77,
													"src": "2282:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3301,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2320:18:18",
												"nodeType": "VariableDeclaration",
												"scope": 3314,
												"src": "2314:24:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 3300,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2314:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3304,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "2362:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3314,
												"src": "2348:27:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$3295",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 3303,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3302,
														"name": "Upgradability",
														"nameLocations": [
															"2348:13:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3295,
														"src": "2348:13:18"
													},
													"referencedDeclaration": 3295,
													"src": "2348:13:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$3295",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3306,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "2401:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 3314,
												"src": "2385:20:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3305,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2385:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3308,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "2431:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3314,
												"src": "2415:22:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3307,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2415:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2272:171:18"
									},
									"returnParameters": {
										"id": 3313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3312,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2490:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 3314,
												"src": "2478:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 3311,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3310,
														"name": "ISuperToken",
														"nameLocations": [
															"2478:11:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "2478:11:18"
													},
													"referencedDeclaration": 3254,
													"src": "2478:11:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2477:24:18"
									},
									"scope": 3384,
									"src": "2245:257:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3315,
										"nodeType": "StructuredDocumentation",
										"src": "2508:433:18",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token with extra token info\n @param underlyingToken Underlying ERC20 token\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @return superToken The deployed and initialized wrapper super token\n NOTE:\n - It assumes token provide the .decimals() function"
									},
									"functionSelector": "431f1481",
									"id": 3331,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "2955:18:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3318,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "3002:15:18",
												"nodeType": "VariableDeclaration",
												"scope": 3331,
												"src": "2983:34:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$4335",
													"typeString": "contract ERC20WithTokenInfo"
												},
												"typeName": {
													"id": 3317,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3316,
														"name": "ERC20WithTokenInfo",
														"nameLocations": [
															"2983:18:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4335,
														"src": "2983:18:18"
													},
													"referencedDeclaration": 4335,
													"src": "2983:18:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$4335",
														"typeString": "contract ERC20WithTokenInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3321,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "3041:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3331,
												"src": "3027:27:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$3295",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 3320,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3319,
														"name": "Upgradability",
														"nameLocations": [
															"3027:13:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3295,
														"src": "3027:13:18"
													},
													"referencedDeclaration": 3295,
													"src": "3027:13:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$3295",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3323,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3080:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 3331,
												"src": "3064:20:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3322,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3064:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3325,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "3110:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3331,
												"src": "3094:22:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3324,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3094:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2973:149:18"
									},
									"returnParameters": {
										"id": 3330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3329,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "3169:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 3331,
												"src": "3157:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 3328,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3327,
														"name": "ISuperToken",
														"nameLocations": [
															"3157:11:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "3157:11:18"
													},
													"referencedDeclaration": 3254,
													"src": "3157:11:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3156:24:18"
									},
									"scope": 3384,
									"src": "2946:235:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3332,
										"nodeType": "StructuredDocumentation",
										"src": "3187:318:18",
										"text": " @notice Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\n @dev salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\n @param _underlyingToken Underlying ERC20 token\n @return ISuperToken the created supertoken"
									},
									"functionSelector": "151188dc",
									"id": 3341,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createCanonicalERC20Wrapper",
									"nameLocation": "3519:27:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3335,
												"mutability": "mutable",
												"name": "_underlyingToken",
												"nameLocation": "3566:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 3341,
												"src": "3547:35:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$4335",
													"typeString": "contract ERC20WithTokenInfo"
												},
												"typeName": {
													"id": 3334,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3333,
														"name": "ERC20WithTokenInfo",
														"nameLocations": [
															"3547:18:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4335,
														"src": "3547:18:18"
													},
													"referencedDeclaration": 4335,
													"src": "3547:18:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$4335",
														"typeString": "contract ERC20WithTokenInfo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3546:37:18"
									},
									"returnParameters": {
										"id": 3340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3339,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3341,
												"src": "3618:11:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 3338,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3337,
														"name": "ISuperToken",
														"nameLocations": [
															"3618:11:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "3618:11:18"
													},
													"referencedDeclaration": 3254,
													"src": "3618:11:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3617:13:18"
									},
									"scope": 3384,
									"src": "3510:121:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3342,
										"nodeType": "StructuredDocumentation",
										"src": "3637:502:18",
										"text": " @notice Computes/Retrieves wrapper super token address given the underlying token address\n @dev We return from our canonical list if it already exists, otherwise we compute it\n @dev note that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\n @param _underlyingToken Underlying ERC20 token address\n @return superTokenAddress Super token address\n @return isDeployed whether the super token is deployed AND set in the canonical mapping"
									},
									"functionSelector": "bab74c89",
									"id": 3351,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "computeCanonicalERC20WrapperAddress",
									"nameLocation": "4153:35:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3344,
												"mutability": "mutable",
												"name": "_underlyingToken",
												"nameLocation": "4197:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 3351,
												"src": "4189:24:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4189:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:26:18"
									},
									"returnParameters": {
										"id": 3350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3347,
												"mutability": "mutable",
												"name": "superTokenAddress",
												"nameLocation": "4270:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 3351,
												"src": "4262:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3349,
												"mutability": "mutable",
												"name": "isDeployed",
												"nameLocation": "4294:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 3351,
												"src": "4289:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3348,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4289:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:44:18"
									},
									"scope": 3384,
									"src": "4144:162:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3352,
										"nodeType": "StructuredDocumentation",
										"src": "4312:314:18",
										"text": " @notice Gets the canonical ERC20 wrapper super token address given the underlying token address\n @dev We return the address if it exists and the zero address otherwise\n @param _underlyingTokenAddress Underlying ERC20 token address\n @return superTokenAddress Super token address"
									},
									"functionSelector": "eff0a89d",
									"id": 3359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getCanonicalERC20Wrapper",
									"nameLocation": "4640:24:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3354,
												"mutability": "mutable",
												"name": "_underlyingTokenAddress",
												"nameLocation": "4673:23:18",
												"nodeType": "VariableDeclaration",
												"scope": 3359,
												"src": "4665:31:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4665:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4664:33:18"
									},
									"returnParameters": {
										"id": 3358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3357,
												"mutability": "mutable",
												"name": "superTokenAddress",
												"nameLocation": "4753:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 3359,
												"src": "4745:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4745:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4744:27:18"
									},
									"scope": 3384,
									"src": "4631:141:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3360,
										"nodeType": "StructuredDocumentation",
										"src": "4778:131:18",
										"text": " @dev Creates a new custom super token\n @param customSuperTokenProxy address of the custom supertoken proxy"
									},
									"functionSelector": "d412d344",
									"id": 3365,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initializeCustomSuperToken",
									"nameLocation": "4923:26:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3362,
												"mutability": "mutable",
												"name": "customSuperTokenProxy",
												"nameLocation": "4967:21:18",
												"nodeType": "VariableDeclaration",
												"scope": 3365,
												"src": "4959:29:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3361,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4959:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4949:45:18"
									},
									"returnParameters": {
										"id": 3364,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5011:0:18"
									},
									"scope": 3384,
									"src": "4914:98:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3366,
										"nodeType": "StructuredDocumentation",
										"src": "5018:103:18",
										"text": " @dev Super token logic created event\n @param tokenLogic Token logic address"
									},
									"eventSelector": "c13fb19d60857980e565bf5dae406b8802d3c1cec50c6156b30b12b874029783",
									"id": 3371,
									"name": "SuperTokenLogicCreated",
									"nameLocation": "5132:22:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3369,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenLogic",
												"nameLocation": "5175:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 3371,
												"src": "5155:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 3368,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3367,
														"name": "ISuperToken",
														"nameLocations": [
															"5155:11:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "5155:11:18"
													},
													"referencedDeclaration": 3254,
													"src": "5155:11:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5154:32:18"
									},
									"src": "5126:61:18"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3372,
										"nodeType": "StructuredDocumentation",
										"src": "5193:106:18",
										"text": " @dev Super token created event\n @param token Newly created super token address"
									},
									"eventSelector": "b52c6d9d122e8c07769b96d7bb14e66db58ee03fdebaaa2f92547e9c7ef0e65f",
									"id": 3377,
									"name": "SuperTokenCreated",
									"nameLocation": "5310:17:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3375,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5348:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 3377,
												"src": "5328:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 3374,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3373,
														"name": "ISuperToken",
														"nameLocations": [
															"5328:11:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "5328:11:18"
													},
													"referencedDeclaration": 3254,
													"src": "5328:11:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5327:27:18"
									},
									"src": "5304:51:18"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3378,
										"nodeType": "StructuredDocumentation",
										"src": "5361:120:18",
										"text": " @dev Custom super token created event\n @param token Newly created custom super token address"
									},
									"eventSelector": "437790724a6e97b75d23117f28cdd4b1beeafc34f7a0911ef256e9334f4369a5",
									"id": 3383,
									"name": "CustomSuperTokenCreated",
									"nameLocation": "5492:23:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3381,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5536:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 3383,
												"src": "5516:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 3380,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3379,
														"name": "ISuperToken",
														"nameLocations": [
															"5516:11:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "5516:11:18"
													},
													"referencedDeclaration": 3254,
													"src": "5516:11:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5515:27:18"
									},
									"src": "5486:57:18"
								}
							],
							"scope": 3385,
							"src": "267:5279:18",
							"usedErrors": [
								3264,
								3266,
								3268,
								3270,
								3272,
								3274
							]
						}
					],
					"src": "32:5514:18"
				},
				"id": 18
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
					"exportedSymbols": {
						"BatchOperation": [
							2377
						],
						"ContextDefinitions": [
							2244
						],
						"FlowOperatorDefinitions": [
							2331
						],
						"IERC20": [
							77
						],
						"IERC777": [
							383
						],
						"ISuperAgreement": [
							2666
						],
						"ISuperApp": [
							2780
						],
						"ISuperToken": [
							3254
						],
						"ISuperTokenFactory": [
							3384
						],
						"ISuperfluid": [
							3908
						],
						"ISuperfluidGovernance": [
							4037
						],
						"ISuperfluidToken": [
							4323
						],
						"SuperAppDefinitions": [
							2168
						],
						"SuperfluidGovernanceConfigs": [
							2478
						],
						"TokenInfo": [
							4357
						]
					},
					"id": 3909,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3386,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:19"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
							"file": "./ISuperfluidGovernance.sol",
							"id": 3388,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 4038,
							"src": "59:68:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3387,
										"name": "ISuperfluidGovernance",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4037,
										"src": "68:21:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 3390,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 4324,
							"src": "128:58:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3389,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4323,
										"src": "137:16:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 3392,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 3255,
							"src": "187:48:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3391,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3254,
										"src": "196:11:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
							"file": "./ISuperTokenFactory.sol",
							"id": 3394,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 3385,
							"src": "236:62:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3393,
										"name": "ISuperTokenFactory",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3384,
										"src": "245:18:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 3396,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 2667,
							"src": "299:56:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3395,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2666,
										"src": "308:15:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
							"file": "./ISuperApp.sol",
							"id": 3398,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 2781,
							"src": "356:44:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3397,
										"name": "ISuperApp",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2780,
										"src": "365:9:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
							"file": "./Definitions.sol",
							"id": 3404,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 2479,
							"src": "401:166:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3399,
										"name": "BatchOperation",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2377,
										"src": "414:14:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 3400,
										"name": "ContextDefinitions",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2244,
										"src": "434:18:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 3401,
										"name": "FlowOperatorDefinitions",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2331,
										"src": "458:23:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 3402,
										"name": "SuperAppDefinitions",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2168,
										"src": "487:19:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 3403,
										"name": "SuperfluidGovernanceConfigs",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2478,
										"src": "512:27:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
							"file": "../tokens/TokenInfo.sol",
							"id": 3406,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 4358,
							"src": "568:52:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3405,
										"name": "TokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4357,
										"src": "577:9:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 3408,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 78,
							"src": "621:72:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3407,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 77,
										"src": "630:6:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"file": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"id": 3410,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3909,
							"sourceUnit": 384,
							"src": "694:75:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3409,
										"name": "IERC777",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 383,
										"src": "703:7:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluid",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3411,
								"nodeType": "StructuredDocumentation",
								"src": "771:345:19",
								"text": " @title Host interface\n @author Superfluid\n @notice This is the central contract of the system where super agreement, super app\n and super token features are connected.\n The Superfluid host contract is also the entry point for the protocol users,\n where batch call and meta transaction are provided for UX improvements."
							},
							"fullyImplemented": false,
							"id": 3908,
							"linearizedBaseContracts": [
								3908
							],
							"name": "ISuperfluid",
							"nameLocation": "1127:11:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "ef4295f6",
									"id": 3413,
									"name": "HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION",
									"nameLocation": "1358:37:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3412,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1395:2:19"
									},
									"src": "1352:46:19"
								},
								{
									"errorSelector": "474e7641",
									"id": 3415,
									"name": "HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE",
									"nameLocation": "1436:40:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3414,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1476:2:19"
									},
									"src": "1430:49:19"
								},
								{
									"errorSelector": "0cd0ebc2",
									"id": 3417,
									"name": "HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS",
									"nameLocation": "1514:47:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3416,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1561:2:19"
									},
									"src": "1508:56:19"
								},
								{
									"errorSelector": "473f7bd4",
									"id": 3419,
									"name": "HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS",
									"nameLocation": "1592:48:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1640:2:19"
									},
									"src": "1586:57:19"
								},
								{
									"errorSelector": "f4c802a4",
									"id": 3421,
									"name": "HOST_INVALID_CONFIG_WORD",
									"nameLocation": "1670:24:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:19"
									},
									"src": "1664:33:19"
								},
								{
									"errorSelector": "7c281a78",
									"id": 3423,
									"name": "HOST_MAX_256_AGREEMENTS",
									"nameLocation": "1748:23:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3422,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1771:2:19"
									},
									"src": "1742:32:19"
								},
								{
									"errorSelector": "14f72c9f",
									"id": 3425,
									"name": "HOST_NON_UPGRADEABLE",
									"nameLocation": "1826:20:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3424,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1846:2:19"
									},
									"src": "1820:29:19"
								},
								{
									"errorSelector": "67e9985b",
									"id": 3427,
									"name": "HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX",
									"nameLocation": "1904:36:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3426,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1940:2:19"
									},
									"src": "1898:45:19"
								},
								{
									"errorSelector": "c5d22a4e",
									"id": 3429,
									"name": "HOST_ONLY_GOVERNANCE",
									"nameLocation": "1982:20:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2002:2:19"
									},
									"src": "1976:29:19"
								},
								{
									"errorSelector": "b4770115",
									"id": 3431,
									"name": "HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE",
									"nameLocation": "2060:38:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3430,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2098:2:19"
									},
									"src": "2054:47:19"
								},
								{
									"errorSelector": "dc9ddba8",
									"id": 3433,
									"name": "HOST_AGREEMENT_ALREADY_REGISTERED",
									"nameLocation": "2138:33:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3432,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2171:2:19"
									},
									"src": "2132:42:19"
								},
								{
									"errorSelector": "1c9e9bea",
									"id": 3435,
									"name": "HOST_AGREEMENT_IS_NOT_REGISTERED",
									"nameLocation": "2216:32:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3434,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:19"
									},
									"src": "2210:41:19"
								},
								{
									"errorSelector": "d4f6b30c",
									"id": 3437,
									"name": "HOST_MUST_BE_CONTRACT",
									"nameLocation": "2294:21:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3436,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2315:2:19"
									},
									"src": "2288:30:19"
								},
								{
									"errorSelector": "619c5359",
									"id": 3439,
									"name": "HOST_ONLY_LISTED_AGREEMENT",
									"nameLocation": "2372:26:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2398:2:19"
									},
									"src": "2366:35:19"
								},
								{
									"errorSelector": "d4f5d496",
									"id": 3441,
									"name": "HOST_NEED_MORE_GAS",
									"nameLocation": "2450:18:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2468:2:19"
									},
									"src": "2444:27:19"
								},
								{
									"errorSelector": "a85ba64f",
									"id": 3445,
									"name": "APP_RULE",
									"nameLocation": "2621:8:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3443,
												"mutability": "mutable",
												"name": "_code",
												"nameLocation": "2638:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3445,
												"src": "2630:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2630:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2629:15:19"
									},
									"src": "2615:30:19"
								},
								{
									"errorSelector": "19ab84d1",
									"id": 3447,
									"name": "HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY",
									"nameLocation": "2700:50:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3446,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2750:2:19"
									},
									"src": "2694:59:19"
								},
								{
									"errorSelector": "163cbe43",
									"id": 3449,
									"name": "HOST_NOT_A_SUPER_APP",
									"nameLocation": "2778:20:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3448,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2798:2:19"
									},
									"src": "2772:29:19"
								},
								{
									"errorSelector": "5b93ebf0",
									"id": 3451,
									"name": "HOST_NO_APP_REGISTRATION_PERMISSIONS",
									"nameLocation": "2856:36:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3450,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2892:2:19"
									},
									"src": "2850:45:19"
								},
								{
									"errorSelector": "96aa315e",
									"id": 3453,
									"name": "HOST_RECEIVER_IS_NOT_SUPER_APP",
									"nameLocation": "2934:30:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2964:2:19"
									},
									"src": "2928:39:19"
								},
								{
									"errorSelector": "bacfdc40",
									"id": 3455,
									"name": "HOST_SENDER_IS_NOT_SUPER_APP",
									"nameLocation": "3012:28:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3454,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3040:2:19"
									},
									"src": "3006:37:19"
								},
								{
									"errorSelector": "44725270",
									"id": 3457,
									"name": "HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL",
									"nameLocation": "3090:38:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3128:2:19"
									},
									"src": "3084:47:19"
								},
								{
									"errorSelector": "02384b64",
									"id": 3459,
									"name": "HOST_SUPER_APP_IS_JAILED",
									"nameLocation": "3168:24:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3458,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3192:2:19"
									},
									"src": "3162:33:19"
								},
								{
									"errorSelector": "01b0a935",
									"id": 3461,
									"name": "HOST_SUPER_APP_ALREADY_REGISTERED",
									"nameLocation": "3246:33:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3460,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3279:2:19"
									},
									"src": "3240:42:19"
								},
								{
									"errorSelector": "289533c5",
									"id": 3463,
									"name": "HOST_UNAUTHORIZED_SUPER_APP_FACTORY",
									"nameLocation": "3324:35:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3359:2:19"
									},
									"src": "3318:44:19"
								},
								{
									"functionSelector": "bbe4fd50",
									"id": 3468,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNow",
									"nameLocation": "3919:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3464,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3925:2:19"
									},
									"returnParameters": {
										"id": 3467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3468,
												"src": "3951:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3465,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3951:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3950:9:19"
									},
									"scope": 3908,
									"src": "3910:50:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3469,
										"nodeType": "StructuredDocumentation",
										"src": "4145:81:19",
										"text": " @dev Get the current governance address of the Superfluid host"
									},
									"functionSelector": "289b3c0d",
									"id": 3475,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getGovernance",
									"nameLocation": "4240:13:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3470,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4253:2:19"
									},
									"returnParameters": {
										"id": 3474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3473,
												"mutability": "mutable",
												"name": "governance",
												"nameLocation": "4300:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 3475,
												"src": "4278:32:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$4037",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 3472,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3471,
														"name": "ISuperfluidGovernance",
														"nameLocations": [
															"4278:21:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4037,
														"src": "4278:21:19"
													},
													"referencedDeclaration": 4037,
													"src": "4278:21:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$4037",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4277:34:19"
									},
									"scope": 3908,
									"src": "4231:81:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3476,
										"nodeType": "StructuredDocumentation",
										"src": "4318:69:19",
										"text": " @dev Replace the current governance with a new one"
									},
									"functionSelector": "7283100c",
									"id": 3482,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "replaceGovernance",
									"nameLocation": "4401:17:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3479,
												"mutability": "mutable",
												"name": "newGov",
												"nameLocation": "4441:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3482,
												"src": "4419:28:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$4037",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 3478,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3477,
														"name": "ISuperfluidGovernance",
														"nameLocations": [
															"4419:21:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4037,
														"src": "4419:21:19"
													},
													"referencedDeclaration": 4037,
													"src": "4419:21:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$4037",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4418:30:19"
									},
									"returnParameters": {
										"id": 3481,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4457:0:19"
									},
									"scope": 3908,
									"src": "4392:66:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3483,
										"nodeType": "StructuredDocumentation",
										"src": "4463:169:19",
										"text": " @dev Governance replaced event\n @param oldGov Address of the old governance contract\n @param newGov Address of the new governance contract"
									},
									"eventSelector": "13abda02e63c790d0e2818b251282cfe5cbe0a8abd69c54bf5d2260c0907bd2e",
									"id": 3491,
									"name": "GovernanceReplaced",
									"nameLocation": "4643:18:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3486,
												"indexed": false,
												"mutability": "mutable",
												"name": "oldGov",
												"nameLocation": "4684:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3491,
												"src": "4662:28:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$4037",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 3485,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3484,
														"name": "ISuperfluidGovernance",
														"nameLocations": [
															"4662:21:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4037,
														"src": "4662:21:19"
													},
													"referencedDeclaration": 4037,
													"src": "4662:21:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$4037",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3489,
												"indexed": false,
												"mutability": "mutable",
												"name": "newGov",
												"nameLocation": "4714:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3491,
												"src": "4692:28:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$4037",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 3488,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3487,
														"name": "ISuperfluidGovernance",
														"nameLocations": [
															"4692:21:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4037,
														"src": "4692:21:19"
													},
													"referencedDeclaration": 4037,
													"src": "4692:21:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$4037",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4661:60:19"
									},
									"src": "4637:85:19"
								},
								{
									"documentation": {
										"id": 3492,
										"nodeType": "StructuredDocumentation",
										"src": "4919:188:19",
										"text": " @dev Register a new agreement class to the system\n @param agreementClassLogic Initial agreement class code\n @custom:modifiers \n - onlyGovernance"
									},
									"functionSelector": "15a024e1",
									"id": 3498,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAgreementClass",
									"nameLocation": "5121:22:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3495,
												"mutability": "mutable",
												"name": "agreementClassLogic",
												"nameLocation": "5160:19:19",
												"nodeType": "VariableDeclaration",
												"scope": 3498,
												"src": "5144:35:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 3494,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3493,
														"name": "ISuperAgreement",
														"nameLocations": [
															"5144:15:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2666,
														"src": "5144:15:19"
													},
													"referencedDeclaration": 2666,
													"src": "5144:15:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5143:37:19"
									},
									"returnParameters": {
										"id": 3497,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5189:0:19"
									},
									"scope": 3908,
									"src": "5112:78:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3499,
										"nodeType": "StructuredDocumentation",
										"src": "5195:280:19",
										"text": " @notice Agreement class registered event\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param agreementType The agreement type registered\n @param code Address of the new agreement"
									},
									"eventSelector": "878135063a6cfb3bc333e534b1fdc83f4f12221cad6705c31c0567048a8bd3d1",
									"id": 3505,
									"name": "AgreementClassRegistered",
									"nameLocation": "5486:24:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3501,
												"indexed": false,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "5519:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 3505,
												"src": "5511:21:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3500,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5511:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3503,
												"indexed": false,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "5542:4:19",
												"nodeType": "VariableDeclaration",
												"scope": 3505,
												"src": "5534:12:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3502,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5534:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5510:37:19"
									},
									"src": "5480:68:19"
								},
								{
									"documentation": {
										"id": 3506,
										"nodeType": "StructuredDocumentation",
										"src": "5554:176:19",
										"text": " @dev Update code of an agreement class\n @param agreementClassLogic New code for the agreement class\n @custom:modifiers \n  - onlyGovernance"
									},
									"functionSelector": "06cecba8",
									"id": 3512,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementClass",
									"nameLocation": "5744:20:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3509,
												"mutability": "mutable",
												"name": "agreementClassLogic",
												"nameLocation": "5781:19:19",
												"nodeType": "VariableDeclaration",
												"scope": 3512,
												"src": "5765:35:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 3508,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3507,
														"name": "ISuperAgreement",
														"nameLocations": [
															"5765:15:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2666,
														"src": "5765:15:19"
													},
													"referencedDeclaration": 2666,
													"src": "5765:15:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5764:37:19"
									},
									"returnParameters": {
										"id": 3511,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5810:0:19"
									},
									"scope": 3908,
									"src": "5735:76:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3513,
										"nodeType": "StructuredDocumentation",
										"src": "5816:274:19",
										"text": " @notice Agreement class updated event\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param agreementType The agreement type updated\n @param code Address of the new agreement"
									},
									"eventSelector": "9279aa773f2b588996032d8de89911555039f28b13a11a7c17074330bc082d9a",
									"id": 3519,
									"name": "AgreementClassUpdated",
									"nameLocation": "6101:21:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3515,
												"indexed": false,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "6131:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 3519,
												"src": "6123:21:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3514,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6123:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3517,
												"indexed": false,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "6154:4:19",
												"nodeType": "VariableDeclaration",
												"scope": 3519,
												"src": "6146:12:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3516,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6146:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6122:37:19"
									},
									"src": "6095:65:19"
								},
								{
									"documentation": {
										"id": 3520,
										"nodeType": "StructuredDocumentation",
										"src": "6166:181:19",
										"text": " @notice Check if the agreement type is whitelisted\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
									},
									"functionSelector": "e8dccb7d",
									"id": 3527,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAgreementTypeListed",
									"nameLocation": "6361:21:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3522,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "6391:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 3527,
												"src": "6383:21:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3521,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6383:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6382:23:19"
									},
									"returnParameters": {
										"id": 3526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3525,
												"mutability": "mutable",
												"name": "yes",
												"nameLocation": "6433:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3527,
												"src": "6428:8:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3524,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6428:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6427:10:19"
									},
									"scope": 3908,
									"src": "6352:86:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3528,
										"nodeType": "StructuredDocumentation",
										"src": "6444:65:19",
										"text": " @dev Check if the agreement class is whitelisted"
									},
									"functionSelector": "8ca48484",
									"id": 3536,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAgreementClassListed",
									"nameLocation": "6523:22:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3531,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6562:14:19",
												"nodeType": "VariableDeclaration",
												"scope": 3536,
												"src": "6546:30:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 3530,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3529,
														"name": "ISuperAgreement",
														"nameLocations": [
															"6546:15:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2666,
														"src": "6546:15:19"
													},
													"referencedDeclaration": 2666,
													"src": "6546:15:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6545:32:19"
									},
									"returnParameters": {
										"id": 3535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3534,
												"mutability": "mutable",
												"name": "yes",
												"nameLocation": "6605:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3536,
												"src": "6600:8:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3533,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6600:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:10:19"
									},
									"scope": 3908,
									"src": "6514:96:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3537,
										"nodeType": "StructuredDocumentation",
										"src": "6616:158:19",
										"text": " @notice Get agreement class\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
									},
									"functionSelector": "b6d200de",
									"id": 3545,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementClass",
									"nameLocation": "6788:17:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3539,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "6814:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 3545,
												"src": "6806:21:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3538,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6806:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6805:23:19"
									},
									"returnParameters": {
										"id": 3544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3543,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6867:14:19",
												"nodeType": "VariableDeclaration",
												"scope": 3545,
												"src": "6851:30:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 3542,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3541,
														"name": "ISuperAgreement",
														"nameLocations": [
															"6851:15:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2666,
														"src": "6851:15:19"
													},
													"referencedDeclaration": 2666,
													"src": "6851:15:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6850:32:19"
									},
									"scope": 3908,
									"src": "6779:104:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3546,
										"nodeType": "StructuredDocumentation",
										"src": "6889:113:19",
										"text": " @dev Map list of the agreement classes using a bitmap\n @param bitmap Agreement class bitmap"
									},
									"functionSelector": "c56a069d",
									"id": 3555,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mapAgreementClasses",
									"nameLocation": "7016:19:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3548,
												"mutability": "mutable",
												"name": "bitmap",
												"nameLocation": "7044:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3555,
												"src": "7036:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7036:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7035:16:19"
									},
									"returnParameters": {
										"id": 3554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3553,
												"mutability": "mutable",
												"name": "agreementClasses",
												"nameLocation": "7116:16:19",
												"nodeType": "VariableDeclaration",
												"scope": 3555,
												"src": "7091:41:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$2666_$dyn_memory_ptr",
													"typeString": "contract ISuperAgreement[]"
												},
												"typeName": {
													"baseType": {
														"id": 3551,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3550,
															"name": "ISuperAgreement",
															"nameLocations": [
																"7091:15:19"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2666,
															"src": "7091:15:19"
														},
														"referencedDeclaration": 2666,
														"src": "7091:15:19",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
															"typeString": "contract ISuperAgreement"
														}
													},
													"id": 3552,
													"nodeType": "ArrayTypeName",
													"src": "7091:17:19",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$2666_$dyn_storage_ptr",
														"typeString": "contract ISuperAgreement[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7090:43:19"
									},
									"scope": 3908,
									"src": "7007:127:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3556,
										"nodeType": "StructuredDocumentation",
										"src": "7140:236:19",
										"text": " @notice Create a new bitmask by adding a agreement class to it\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param bitmap Agreement class bitmap"
									},
									"functionSelector": "bced3ddc",
									"id": 3565,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addToAgreementClassesBitmap",
									"nameLocation": "7390:27:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3558,
												"mutability": "mutable",
												"name": "bitmap",
												"nameLocation": "7426:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3565,
												"src": "7418:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7418:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3560,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "7442:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 3565,
												"src": "7434:21:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3559,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7434:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7417:39:19"
									},
									"returnParameters": {
										"id": 3564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3563,
												"mutability": "mutable",
												"name": "newBitmap",
												"nameLocation": "7504:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 3565,
												"src": "7496:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7496:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7495:19:19"
									},
									"scope": 3908,
									"src": "7381:134:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3566,
										"nodeType": "StructuredDocumentation",
										"src": "7521:240:19",
										"text": " @notice Create a new bitmask by removing a agreement class from it\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param bitmap Agreement class bitmap"
									},
									"functionSelector": "a5dbbbcd",
									"id": 3575,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeFromAgreementClassesBitmap",
									"nameLocation": "7775:32:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3568,
												"mutability": "mutable",
												"name": "bitmap",
												"nameLocation": "7816:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3575,
												"src": "7808:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3567,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7808:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3570,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "7832:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 3575,
												"src": "7824:21:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3569,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7824:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7807:39:19"
									},
									"returnParameters": {
										"id": 3574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3573,
												"mutability": "mutable",
												"name": "newBitmap",
												"nameLocation": "7894:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 3575,
												"src": "7886:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3572,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7886:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7885:19:19"
									},
									"scope": 3908,
									"src": "7766:139:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3576,
										"nodeType": "StructuredDocumentation",
										"src": "8098:86:19",
										"text": " @dev Get the super token factory\n @return factory The factory"
									},
									"functionSelector": "731aed6e",
									"id": 3582,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenFactory",
									"nameLocation": "8198:20:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8218:2:19"
									},
									"returnParameters": {
										"id": 3581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3580,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "8263:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 3582,
												"src": "8244:26:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperTokenFactory_$3384",
													"typeString": "contract ISuperTokenFactory"
												},
												"typeName": {
													"id": 3579,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3578,
														"name": "ISuperTokenFactory",
														"nameLocations": [
															"8244:18:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3384,
														"src": "8244:18:19"
													},
													"referencedDeclaration": 3384,
													"src": "8244:18:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperTokenFactory_$3384",
														"typeString": "contract ISuperTokenFactory"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8243:28:19"
									},
									"scope": 3908,
									"src": "8189:83:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3583,
										"nodeType": "StructuredDocumentation",
										"src": "8278:134:19",
										"text": " @dev Get the super token factory logic (applicable to upgradable deployment)\n @return logic The factory logic"
									},
									"functionSelector": "f2e55caf",
									"id": 3588,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenFactoryLogic",
									"nameLocation": "8426:25:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3584,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8451:2:19"
									},
									"returnParameters": {
										"id": 3587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3586,
												"mutability": "mutable",
												"name": "logic",
												"nameLocation": "8485:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3588,
												"src": "8477:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8477:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8476:15:19"
									},
									"scope": 3908,
									"src": "8417:75:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3589,
										"nodeType": "StructuredDocumentation",
										"src": "8498:93:19",
										"text": " @dev Update super token factory\n @param newFactory New factory logic"
									},
									"functionSelector": "54fbc493",
									"id": 3595,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateSuperTokenFactory",
									"nameLocation": "8605:23:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3592,
												"mutability": "mutable",
												"name": "newFactory",
												"nameLocation": "8648:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 3595,
												"src": "8629:29:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperTokenFactory_$3384",
													"typeString": "contract ISuperTokenFactory"
												},
												"typeName": {
													"id": 3591,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3590,
														"name": "ISuperTokenFactory",
														"nameLocations": [
															"8629:18:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3384,
														"src": "8629:18:19"
													},
													"referencedDeclaration": 3384,
													"src": "8629:18:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperTokenFactory_$3384",
														"typeString": "contract ISuperTokenFactory"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8628:31:19"
									},
									"returnParameters": {
										"id": 3594,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8668:0:19"
									},
									"scope": 3908,
									"src": "8596:73:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3596,
										"nodeType": "StructuredDocumentation",
										"src": "8674:108:19",
										"text": " @dev SuperToken factory updated event\n @param newFactory Address of the new factory"
									},
									"eventSelector": "ce13a9895a1719ad4493b2ac1a9bfb36070566161abab408e7ecbe586da8d499",
									"id": 3601,
									"name": "SuperTokenFactoryUpdated",
									"nameLocation": "8793:24:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3599,
												"indexed": false,
												"mutability": "mutable",
												"name": "newFactory",
												"nameLocation": "8837:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 3601,
												"src": "8818:29:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperTokenFactory_$3384",
													"typeString": "contract ISuperTokenFactory"
												},
												"typeName": {
													"id": 3598,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3597,
														"name": "ISuperTokenFactory",
														"nameLocations": [
															"8818:18:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3384,
														"src": "8818:18:19"
													},
													"referencedDeclaration": 3384,
													"src": "8818:18:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperTokenFactory_$3384",
														"typeString": "contract ISuperTokenFactory"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8817:31:19"
									},
									"src": "8787:62:19"
								},
								{
									"documentation": {
										"id": 3602,
										"nodeType": "StructuredDocumentation",
										"src": "8855:147:19",
										"text": " @notice Update the super token logic to the latest\n @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours"
									},
									"functionSelector": "787afde7",
									"id": 3608,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateSuperTokenLogic",
									"nameLocation": "9016:21:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3605,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9050:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3608,
												"src": "9038:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 3604,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3603,
														"name": "ISuperToken",
														"nameLocations": [
															"9038:11:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "9038:11:19"
													},
													"referencedDeclaration": 3254,
													"src": "9038:11:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9037:19:19"
									},
									"returnParameters": {
										"id": 3607,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9065:0:19"
									},
									"scope": 3908,
									"src": "9007:59:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3609,
										"nodeType": "StructuredDocumentation",
										"src": "9071:109:19",
										"text": " @dev SuperToken logic updated event\n @param code Address of the new SuperToken logic"
									},
									"eventSelector": "840acbd291b38534819f47f875839277e502f40e1c7bfea2c5fc2c8017442cd3",
									"id": 3616,
									"name": "SuperTokenLogicUpdated",
									"nameLocation": "9191:22:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3612,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9234:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3616,
												"src": "9214:25:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$3254",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 3611,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3610,
														"name": "ISuperToken",
														"nameLocations": [
															"9214:11:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3254,
														"src": "9214:11:19"
													},
													"referencedDeclaration": 3254,
													"src": "9214:11:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$3254",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3614,
												"indexed": false,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "9249:4:19",
												"nodeType": "VariableDeclaration",
												"scope": 3616,
												"src": "9241:12:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3613,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9241:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9213:41:19"
									},
									"src": "9185:70:19"
								},
								{
									"documentation": {
										"id": 3617,
										"nodeType": "StructuredDocumentation",
										"src": "9442:383:19",
										"text": " @dev Message sender (must be a contract) declares itself as a super app.\n @custom:deprecated you should use `registerAppWithKey` or `registerAppByFactory` instead,\n because app registration is currently governance permissioned on mainnets.\n @param configWord The super app manifest configuration, flags are defined in\n `SuperAppDefinitions`"
									},
									"functionSelector": "ad3915c8",
									"id": 3622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerApp",
									"nameLocation": "9839:11:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3619,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "9859:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 3622,
												"src": "9851:18:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9851:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9850:20:19"
									},
									"returnParameters": {
										"id": 3621,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9879:0:19"
									},
									"scope": 3908,
									"src": "9830:50:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3623,
										"nodeType": "StructuredDocumentation",
										"src": "9885:84:19",
										"text": " @dev App registered event\n @param app Address of jailed app"
									},
									"eventSelector": "0d540ad8f39e07d19909687352b9fa017405d93c91a6760981fbae9cf28bfef7",
									"id": 3628,
									"name": "AppRegistered",
									"nameLocation": "9980:13:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3626,
												"indexed": true,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "10012:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3628,
												"src": "9994:21:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3625,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3624,
														"name": "ISuperApp",
														"nameLocations": [
															"9994:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "9994:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "9994:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9993:23:19"
									},
									"src": "9974:43:19"
								},
								{
									"documentation": {
										"id": 3629,
										"nodeType": "StructuredDocumentation",
										"src": "10023:655:19",
										"text": " @dev Message sender declares itself as a super app.\n @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n @param registrationKey The registration key issued by the governance, needed to register on a mainnet.\n @notice See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n On testnets or in dev environment, a placeholder (e.g. empty string) can be used.\n While the message sender must be the super app itself, the transaction sender (tx.origin)\n must be the deployer account the registration key was issued for."
									},
									"functionSelector": "bd1c448b",
									"id": 3636,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAppWithKey",
									"nameLocation": "10692:18:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3631,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "10719:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "10711:18:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3630,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10711:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3633,
												"mutability": "mutable",
												"name": "registrationKey",
												"nameLocation": "10747:15:19",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "10731:31:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3632,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "10731:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10710:53:19"
									},
									"returnParameters": {
										"id": 3635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10772:0:19"
									},
									"scope": 3908,
									"src": "10683:90:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3637,
										"nodeType": "StructuredDocumentation",
										"src": "10779:400:19",
										"text": " @dev Message sender (must be a contract) declares app as a super app\n @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n @notice On mainnet deployments, only factory contracts pre-authorized by governance can use this.\n See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide"
									},
									"functionSelector": "f3733052",
									"id": 3645,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAppByFactory",
									"nameLocation": "11193:20:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3640,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11224:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3645,
												"src": "11214:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3639,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3638,
														"name": "ISuperApp",
														"nameLocations": [
															"11214:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "11214:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "11214:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3642,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "11237:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 3645,
												"src": "11229:18:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3641,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11229:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11213:35:19"
									},
									"returnParameters": {
										"id": 3644,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11257:0:19"
									},
									"scope": 3908,
									"src": "11184:74:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3646,
										"nodeType": "StructuredDocumentation",
										"src": "11264:90:19",
										"text": " @dev Query if the app is registered\n @param app Super app address"
									},
									"functionSelector": "3ca3ad4e",
									"id": 3654,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApp",
									"nameLocation": "11368:5:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3649,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11384:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3654,
												"src": "11374:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3648,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3647,
														"name": "ISuperApp",
														"nameLocations": [
															"11374:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "11374:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "11374:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11373:15:19"
									},
									"returnParameters": {
										"id": 3653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3652,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3654,
												"src": "11411:4:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3651,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11411:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11410:6:19"
									},
									"scope": 3908,
									"src": "11359:58:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3655,
										"nodeType": "StructuredDocumentation",
										"src": "11423:83:19",
										"text": " @dev Query app callbacklevel\n @param app Super app address"
									},
									"functionSelector": "9378fa13",
									"id": 3663,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAppCallbackLevel",
									"nameLocation": "11520:19:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3658,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11550:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3663,
												"src": "11540:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3657,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3656,
														"name": "ISuperApp",
														"nameLocations": [
															"11540:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "11540:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "11540:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11539:15:19"
									},
									"returnParameters": {
										"id": 3662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3661,
												"mutability": "mutable",
												"name": "appCallbackLevel",
												"nameLocation": "11583:16:19",
												"nodeType": "VariableDeclaration",
												"scope": 3663,
												"src": "11577:22:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 3660,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "11577:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11576:24:19"
									},
									"scope": 3908,
									"src": "11511:90:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3664,
										"nodeType": "StructuredDocumentation",
										"src": "11607:93:19",
										"text": " @dev Get the manifest of the super app\n @param app Super app address"
									},
									"functionSelector": "f9f522f4",
									"id": 3676,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAppManifest",
									"nameLocation": "11714:14:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3667,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11748:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3676,
												"src": "11738:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3666,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3665,
														"name": "ISuperApp",
														"nameLocations": [
															"11738:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "11738:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "11738:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11728:29:19"
									},
									"returnParameters": {
										"id": 3675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3670,
												"mutability": "mutable",
												"name": "isSuperApp",
												"nameLocation": "11815:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 3676,
												"src": "11810:15:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3669,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11810:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3672,
												"mutability": "mutable",
												"name": "isJailed",
												"nameLocation": "11844:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3676,
												"src": "11839:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3671,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11839:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3674,
												"mutability": "mutable",
												"name": "noopMask",
												"nameLocation": "11874:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3676,
												"src": "11866:16:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11866:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11796:96:19"
									},
									"scope": 3908,
									"src": "11705:188:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3677,
										"nodeType": "StructuredDocumentation",
										"src": "11899:92:19",
										"text": " @dev Query if the app has been jailed\n @param app Super app address"
									},
									"functionSelector": "6b4f3335",
									"id": 3685,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAppJailed",
									"nameLocation": "12005:11:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3680,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "12027:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3685,
												"src": "12017:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3679,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3678,
														"name": "ISuperApp",
														"nameLocations": [
															"12017:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "12017:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "12017:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12016:15:19"
									},
									"returnParameters": {
										"id": 3684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3683,
												"mutability": "mutable",
												"name": "isJail",
												"nameLocation": "12060:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3685,
												"src": "12055:11:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3682,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12055:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12054:13:19"
									},
									"scope": 3908,
									"src": "11996:72:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3686,
										"nodeType": "StructuredDocumentation",
										"src": "12074:153:19",
										"text": " @dev Whitelist the target app for app composition for the source app (msg.sender)\n @param targetApp The target super app address"
									},
									"functionSelector": "57121e0c",
									"id": 3692,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowCompositeApp",
									"nameLocation": "12241:17:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3689,
												"mutability": "mutable",
												"name": "targetApp",
												"nameLocation": "12269:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 3692,
												"src": "12259:19:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3688,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3687,
														"name": "ISuperApp",
														"nameLocations": [
															"12259:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "12259:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "12259:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12258:21:19"
									},
									"returnParameters": {
										"id": 3691,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12288:0:19"
									},
									"scope": 3908,
									"src": "12232:57:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3693,
										"nodeType": "StructuredDocumentation",
										"src": "12295:184:19",
										"text": " @dev Query if source app is allowed to call the target app as downstream app\n @param app Super app address\n @param targetApp The target super app address"
									},
									"functionSelector": "bb84cfa1",
									"id": 3704,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isCompositeAppAllowed",
									"nameLocation": "12493:21:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3696,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "12534:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3704,
												"src": "12524:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3695,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3694,
														"name": "ISuperApp",
														"nameLocations": [
															"12524:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "12524:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "12524:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3699,
												"mutability": "mutable",
												"name": "targetApp",
												"nameLocation": "12557:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 3704,
												"src": "12547:19:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3698,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3697,
														"name": "ISuperApp",
														"nameLocations": [
															"12547:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "12547:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "12547:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12514:58:19"
									},
									"returnParameters": {
										"id": 3703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3702,
												"mutability": "mutable",
												"name": "isAppAllowed",
												"nameLocation": "12617:12:19",
												"nodeType": "VariableDeclaration",
												"scope": 3704,
												"src": "12612:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3701,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12612:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12611:19:19"
									},
									"scope": 3908,
									"src": "12484:147:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3705,
										"nodeType": "StructuredDocumentation",
										"src": "13023:393:19",
										"text": " @dev (For agreements) StaticCall the app before callback\n @param  app               The super app.\n @param  callData          The call data sending to the super app.\n @param  isTermination     Is it a termination callback?\n @param  ctx               Current ctx, it will be validated.\n @return cbdata            Data returned from the callback."
									},
									"functionSelector": "74041e02",
									"id": 3719,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppBeforeCallback",
									"nameLocation": "13430:21:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3708,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "13471:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3719,
												"src": "13461:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3707,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3706,
														"name": "ISuperApp",
														"nameLocations": [
															"13461:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "13461:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "13461:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3710,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "13499:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3719,
												"src": "13484:23:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3709,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13484:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3712,
												"mutability": "mutable",
												"name": "isTermination",
												"nameLocation": "13522:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 3719,
												"src": "13517:18:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3711,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13517:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3714,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "13560:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3719,
												"src": "13545:18:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13545:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13451:118:19"
									},
									"returnParameters": {
										"id": 3718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3717,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "13672:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3719,
												"src": "13659:19:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3716,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13659:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13658:21:19"
									},
									"scope": 3908,
									"src": "13421:259:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3720,
										"nodeType": "StructuredDocumentation",
										"src": "13686:393:19",
										"text": " @dev (For agreements) Call the app after callback\n @param  app               The super app.\n @param  callData          The call data sending to the super app.\n @param  isTermination     Is it a termination callback?\n @param  ctx               Current ctx, it will be validated.\n @return newCtx            The current context of the transaction."
									},
									"functionSelector": "1e6d0a84",
									"id": 3734,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppAfterCallback",
									"nameLocation": "14093:20:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3723,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "14133:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3734,
												"src": "14123:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3722,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3721,
														"name": "ISuperApp",
														"nameLocations": [
															"14123:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "14123:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "14123:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3725,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "14161:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3734,
												"src": "14146:23:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3724,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14146:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3727,
												"mutability": "mutable",
												"name": "isTermination",
												"nameLocation": "14184:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 3734,
												"src": "14179:18:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3726,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14179:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3729,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "14222:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3734,
												"src": "14207:18:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3728,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14207:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14113:118:19"
									},
									"returnParameters": {
										"id": 3733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3732,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "14334:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3734,
												"src": "14321:19:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3731,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14321:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14320:21:19"
									},
									"scope": 3908,
									"src": "14084:258:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3735,
										"nodeType": "StructuredDocumentation",
										"src": "14348:408:19",
										"text": " @dev (For agreements) Create a new callback stack\n @param  ctx                     The current ctx, it will be validated.\n @param  app                     The super app.\n @param  appCreditGranted        App credit granted so far.\n @param  appCreditUsed           App credit used so far.\n @return newCtx                  The current context of the transaction."
									},
									"functionSelector": "768fabb0",
									"id": 3752,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "appCallbackPush",
									"nameLocation": "14770:15:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3737,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "14810:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3752,
												"src": "14795:18:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3736,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14795:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3740,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "14833:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3752,
												"src": "14823:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3739,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3738,
														"name": "ISuperApp",
														"nameLocations": [
															"14823:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "14823:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "14823:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3742,
												"mutability": "mutable",
												"name": "appCreditGranted",
												"nameLocation": "14854:16:19",
												"nodeType": "VariableDeclaration",
												"scope": 3752,
												"src": "14846:24:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3741,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14846:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3744,
												"mutability": "mutable",
												"name": "appCreditUsed",
												"nameLocation": "14887:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 3752,
												"src": "14880:20:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3743,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "14880:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3747,
												"mutability": "mutable",
												"name": "appCreditToken",
												"nameLocation": "14927:14:19",
												"nodeType": "VariableDeclaration",
												"scope": 3752,
												"src": "14910:31:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 3746,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3745,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"14910:16:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "14910:16:19"
													},
													"referencedDeclaration": 4323,
													"src": "14910:16:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14785:162:19"
									},
									"returnParameters": {
										"id": 3751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3750,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15051:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3752,
												"src": "15038:19:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3749,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15038:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15037:21:19"
									},
									"scope": 3908,
									"src": "14761:298:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3753,
										"nodeType": "StructuredDocumentation",
										"src": "15065:554:19",
										"text": " @dev (For agreements) Pop from the current app callback stack\n @param  ctx                     The ctx that was pushed before the callback stack.\n @param  appCreditUsedDelta      App credit used by the app.\n @return newCtx                  The current context of the transaction.\n @custom:security\n - Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory.\n - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly."
									},
									"functionSelector": "989b0c3e",
									"id": 3762,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "appCallbackPop",
									"nameLocation": "15633:14:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3755,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "15672:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3762,
												"src": "15657:18:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3754,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15657:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3757,
												"mutability": "mutable",
												"name": "appCreditUsedDelta",
												"nameLocation": "15692:18:19",
												"nodeType": "VariableDeclaration",
												"scope": 3762,
												"src": "15685:25:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3756,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "15685:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15647:69:19"
									},
									"returnParameters": {
										"id": 3761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3760,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15789:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3762,
												"src": "15776:19:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3759,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15776:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15775:21:19"
									},
									"scope": 3908,
									"src": "15624:173:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3763,
										"nodeType": "StructuredDocumentation",
										"src": "15803:288:19",
										"text": " @dev (For agreements) Use app credit.\n @param  ctx                      The current ctx, it will be validated.\n @param  appCreditUsedMore        See app credit for more details.\n @return newCtx                   The current context of the transaction."
									},
									"functionSelector": "59a29141",
									"id": 3772,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ctxUseCredit",
									"nameLocation": "16105:12:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3765,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16142:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3772,
												"src": "16127:18:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3764,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16127:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3767,
												"mutability": "mutable",
												"name": "appCreditUsedMore",
												"nameLocation": "16162:17:19",
												"nodeType": "VariableDeclaration",
												"scope": 3772,
												"src": "16155:24:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3766,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "16155:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16117:68:19"
									},
									"returnParameters": {
										"id": 3771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3770,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16289:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3772,
												"src": "16276:19:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3769,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16276:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16275:21:19"
									},
									"scope": 3908,
									"src": "16096:201:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3773,
										"nodeType": "StructuredDocumentation",
										"src": "16303:244:19",
										"text": " @dev (For agreements) Jail the app.\n @param  app                     The super app.\n @param  reason                  Jail reason code.\n @return newCtx                  The current context of the transaction."
									},
									"functionSelector": "b724211e",
									"id": 3785,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "jailApp",
									"nameLocation": "16561:7:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3775,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16593:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3785,
												"src": "16578:18:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3774,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16578:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3778,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "16616:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3785,
												"src": "16606:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3777,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3776,
														"name": "ISuperApp",
														"nameLocations": [
															"16606:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "16606:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "16606:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3780,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "16637:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3785,
												"src": "16629:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3779,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16629:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16568:81:19"
									},
									"returnParameters": {
										"id": 3784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3783,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16753:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3785,
												"src": "16740:19:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3782,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16740:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16739:21:19"
									},
									"scope": 3908,
									"src": "16552:209:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3786,
										"nodeType": "StructuredDocumentation",
										"src": "16767:172:19",
										"text": " @dev Jail event for the app\n @param app Address of jailed app\n @param reason Reason the app is jailed (see Definitions.sol for the full list)"
									},
									"eventSelector": "be3aa33bd245135e4e26b223d79d14ea479a47bff09f2b03c53838af1edbb14b",
									"id": 3793,
									"name": "Jail",
									"nameLocation": "16950:4:19",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3789,
												"indexed": true,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "16973:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3793,
												"src": "16955:21:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3788,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3787,
														"name": "ISuperApp",
														"nameLocations": [
															"16955:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "16955:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "16955:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3791,
												"indexed": false,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "16986:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3793,
												"src": "16978:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16978:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16954:39:19"
									},
									"src": "16944:50:19"
								},
								{
									"documentation": {
										"id": 3794,
										"nodeType": "StructuredDocumentation",
										"src": "17555:265:19",
										"text": " @dev Call agreement function\n @param agreementClass The agreement address you are calling\n @param callData The contextual call data with placeholder ctx\n @param userData Extra user data being sent to the super app callbacks"
									},
									"functionSelector": "39255d5b",
									"id": 3806,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAgreement",
									"nameLocation": "17835:13:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3797,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "17875:14:19",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "17859:30:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 3796,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3795,
														"name": "ISuperAgreement",
														"nameLocations": [
															"17859:15:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2666,
														"src": "17859:15:19"
													},
													"referencedDeclaration": 2666,
													"src": "17859:15:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3799,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "17915:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "17900:23:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3798,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17900:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3801,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "17949:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "17934:23:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3800,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17934:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17848:116:19"
									},
									"returnParameters": {
										"id": 3805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3804,
												"mutability": "mutable",
												"name": "returnedData",
												"nameLocation": "18068:12:19",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "18055:25:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3803,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18055:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18054:27:19"
									},
									"scope": 3908,
									"src": "17826:256:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3807,
										"nodeType": "StructuredDocumentation",
										"src": "18088:268:19",
										"text": " @notice Call app action\n @dev Main use case is calling app action in a batch call via the host\n @param callData The contextual call data\n @custom:note See \"Contextless Call Proxies\" above for more about contextual call data."
									},
									"functionSelector": "1e855cf3",
									"id": 3817,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppAction",
									"nameLocation": "18370:13:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3810,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "18403:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3817,
												"src": "18393:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3809,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3808,
														"name": "ISuperApp",
														"nameLocations": [
															"18393:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "18393:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "18393:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3812,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "18431:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3817,
												"src": "18416:23:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3811,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18416:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18383:62:19"
									},
									"returnParameters": {
										"id": 3816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3815,
												"mutability": "mutable",
												"name": "returnedData",
												"nameLocation": "18575:12:19",
												"nodeType": "VariableDeclaration",
												"scope": 3817,
												"src": "18562:25:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3814,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18562:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18561:27:19"
									},
									"scope": 3908,
									"src": "18361:228:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluid.Context",
									"id": 3841,
									"members": [
										{
											"constant": false,
											"id": 3819,
											"mutability": "mutable",
											"name": "appCallbackLevel",
											"nameLocation": "19834:16:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "19828:22:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 3818,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "19828:5:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3821,
											"mutability": "mutable",
											"name": "callType",
											"nameLocation": "19890:8:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "19884:14:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 3820,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "19884:5:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3823,
											"mutability": "mutable",
											"name": "timestamp",
											"nameLocation": "19948:9:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "19940:17:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3822,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "19940:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3825,
											"mutability": "mutable",
											"name": "msgSender",
											"nameLocation": "20027:9:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "20019:17:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3824,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "20019:7:19",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3827,
											"mutability": "mutable",
											"name": "agreementSelector",
											"nameLocation": "20192:17:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "20185:24:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes4",
												"typeString": "bytes4"
											},
											"typeName": {
												"id": 3826,
												"name": "bytes4",
												"nodeType": "ElementaryTypeName",
												"src": "20185:6:19",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3829,
											"mutability": "mutable",
											"name": "userData",
											"nameLocation": "20273:8:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "20267:14:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 3828,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "20267:5:19",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3831,
											"mutability": "mutable",
											"name": "appCreditGranted",
											"nameLocation": "20375:16:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "20367:24:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3830,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "20367:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3833,
											"mutability": "mutable",
											"name": "appCreditWantedDeprecated",
											"nameLocation": "20458:25:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "20450:33:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3832,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "20450:7:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3835,
											"mutability": "mutable",
											"name": "appCreditUsed",
											"nameLocation": "21021:13:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "21014:20:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int256",
												"typeString": "int256"
											},
											"typeName": {
												"id": 3834,
												"name": "int256",
												"nodeType": "ElementaryTypeName",
												"src": "21014:6:19",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3837,
											"mutability": "mutable",
											"name": "appAddress",
											"nameLocation": "21075:10:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "21067:18:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3836,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "21067:7:19",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3840,
											"mutability": "mutable",
											"name": "appCreditToken",
											"nameLocation": "21149:14:19",
											"nodeType": "VariableDeclaration",
											"scope": 3841,
											"src": "21132:31:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
												"typeString": "contract ISuperfluidToken"
											},
											"typeName": {
												"id": 3839,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3838,
													"name": "ISuperfluidToken",
													"nameLocations": [
														"21132:16:19"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 4323,
													"src": "21132:16:19"
												},
												"referencedDeclaration": 4323,
												"src": "21132:16:19",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Context",
									"nameLocation": "19734:7:19",
									"nodeType": "StructDefinition",
									"scope": 3908,
									"src": "19727:1443:19",
									"visibility": "public"
								},
								{
									"functionSelector": "4329d293",
									"id": 3857,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAgreementWithContext",
									"nameLocation": "21185:24:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3844,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "21235:14:19",
												"nodeType": "VariableDeclaration",
												"scope": 3857,
												"src": "21219:30:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 3843,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3842,
														"name": "ISuperAgreement",
														"nameLocations": [
															"21219:15:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2666,
														"src": "21219:15:19"
													},
													"referencedDeclaration": 2666,
													"src": "21219:15:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3846,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "21274:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3857,
												"src": "21259:23:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3845,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21259:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3848,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "21307:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3857,
												"src": "21292:23:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3847,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21292:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3850,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21340:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3857,
												"src": "21325:18:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3849,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21325:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21209:140:19"
									},
									"returnParameters": {
										"id": 3856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3853,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "21470:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3857,
												"src": "21457:19:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3852,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21457:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3855,
												"mutability": "mutable",
												"name": "returnedData",
												"nameLocation": "21491:12:19",
												"nodeType": "VariableDeclaration",
												"scope": 3857,
												"src": "21478:25:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3854,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21478:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21456:48:19"
									},
									"scope": 3908,
									"src": "21176:329:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "ba48b5f8",
									"id": 3869,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppActionWithContext",
									"nameLocation": "21520:24:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3860,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "21564:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3869,
												"src": "21554:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$2780",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 3859,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3858,
														"name": "ISuperApp",
														"nameLocations": [
															"21554:9:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2780,
														"src": "21554:9:19"
													},
													"referencedDeclaration": 2780,
													"src": "21554:9:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$2780",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3862,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "21592:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3869,
												"src": "21577:23:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3861,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21577:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3864,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21625:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3869,
												"src": "21610:18:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3863,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21610:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21544:90:19"
									},
									"returnParameters": {
										"id": 3868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3867,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "21742:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3869,
												"src": "21729:19:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3866,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21729:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21728:21:19"
									},
									"scope": 3908,
									"src": "21511:239:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "3f6c923a",
									"id": 3877,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decodeCtx",
									"nameLocation": "21765:9:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3871,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21788:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3877,
												"src": "21775:16:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3870,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21775:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21774:18:19"
									},
									"returnParameters": {
										"id": 3876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3875,
												"mutability": "mutable",
												"name": "context",
												"nameLocation": "21847:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 3877,
												"src": "21832:22:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Context_$3841_memory_ptr",
													"typeString": "struct ISuperfluid.Context"
												},
												"typeName": {
													"id": 3874,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3873,
														"name": "Context",
														"nameLocations": [
															"21832:7:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3841,
														"src": "21832:7:19"
													},
													"referencedDeclaration": 3841,
													"src": "21832:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Context_$3841_storage_ptr",
														"typeString": "struct ISuperfluid.Context"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21831:24:19"
									},
									"scope": 3908,
									"src": "21756:100:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "bf428734",
									"id": 3884,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isCtxValid",
									"nameLocation": "21871:10:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3879,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21897:3:19",
												"nodeType": "VariableDeclaration",
												"scope": 3884,
												"src": "21882:18:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3878,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21882:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21881:20:19"
									},
									"returnParameters": {
										"id": 3883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3882,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3884,
												"src": "21925:4:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3881,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "21925:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21924:6:19"
									},
									"scope": 3908,
									"src": "21862:69:19",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluid.Operation",
									"id": 3891,
									"members": [
										{
											"constant": false,
											"id": 3886,
											"mutability": "mutable",
											"name": "operationType",
											"nameLocation": "22268:13:19",
											"nodeType": "VariableDeclaration",
											"scope": 3891,
											"src": "22261:20:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 3885,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "22261:6:19",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3888,
											"mutability": "mutable",
											"name": "target",
											"nameLocation": "22327:6:19",
											"nodeType": "VariableDeclaration",
											"scope": 3891,
											"src": "22319:14:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3887,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "22319:7:19",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3890,
											"mutability": "mutable",
											"name": "data",
											"nameLocation": "22391:4:19",
											"nodeType": "VariableDeclaration",
											"scope": 3891,
											"src": "22385:10:19",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 3889,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "22385:5:19",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Operation",
									"nameLocation": "22170:9:19",
									"nodeType": "StructDefinition",
									"scope": 3908,
									"src": "22163:239:19",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 3892,
										"nodeType": "StructuredDocumentation",
										"src": "22408:94:19",
										"text": " @dev Batch call function\n @param operations Array of batch operations"
									},
									"functionSelector": "6ad3ca7d",
									"id": 3899,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchCall",
									"nameLocation": "22516:9:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3896,
												"mutability": "mutable",
												"name": "operations",
												"nameLocation": "22547:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 3899,
												"src": "22526:31:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Operation_$3891_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISuperfluid.Operation[]"
												},
												"typeName": {
													"baseType": {
														"id": 3894,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3893,
															"name": "Operation",
															"nameLocations": [
																"22526:9:19"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3891,
															"src": "22526:9:19"
														},
														"referencedDeclaration": 3891,
														"src": "22526:9:19",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Operation_$3891_storage_ptr",
															"typeString": "struct ISuperfluid.Operation"
														}
													},
													"id": 3895,
													"nodeType": "ArrayTypeName",
													"src": "22526:11:19",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Operation_$3891_storage_$dyn_storage_ptr",
														"typeString": "struct ISuperfluid.Operation[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22525:33:19"
									},
									"returnParameters": {
										"id": 3898,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22567:0:19"
									},
									"scope": 3908,
									"src": "22507:61:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3900,
										"nodeType": "StructuredDocumentation",
										"src": "22574:128:19",
										"text": " @dev Batch call function for trusted forwarders (EIP-2771)\n @param operations Array of batch operations"
									},
									"functionSelector": "670e77e3",
									"id": 3907,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "forwardBatchCall",
									"nameLocation": "22716:16:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3904,
												"mutability": "mutable",
												"name": "operations",
												"nameLocation": "22754:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 3907,
												"src": "22733:31:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Operation_$3891_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISuperfluid.Operation[]"
												},
												"typeName": {
													"baseType": {
														"id": 3902,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3901,
															"name": "Operation",
															"nameLocations": [
																"22733:9:19"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3891,
															"src": "22733:9:19"
														},
														"referencedDeclaration": 3891,
														"src": "22733:9:19",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Operation_$3891_storage_ptr",
															"typeString": "struct ISuperfluid.Operation"
														}
													},
													"id": 3903,
													"nodeType": "ArrayTypeName",
													"src": "22733:11:19",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Operation_$3891_storage_$dyn_storage_ptr",
														"typeString": "struct ISuperfluid.Operation[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22732:33:19"
									},
									"returnParameters": {
										"id": 3906,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22774:0:19"
									},
									"scope": 3908,
									"src": "22707:68:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3909,
							"src": "1117:22765:19",
							"usedErrors": [
								3413,
								3415,
								3417,
								3419,
								3421,
								3423,
								3425,
								3427,
								3429,
								3431,
								3433,
								3435,
								3437,
								3439,
								3441,
								3445,
								3447,
								3449,
								3451,
								3453,
								3455,
								3457,
								3459,
								3461,
								3463
							]
						}
					],
					"src": "32:23851:19"
				},
				"id": 19
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							2666
						],
						"ISuperToken": [
							3254
						],
						"ISuperfluid": [
							3908
						],
						"ISuperfluidGovernance": [
							4037
						],
						"ISuperfluidToken": [
							4323
						]
					},
					"id": 4038,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3910,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:20"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 3912,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4038,
							"sourceUnit": 2667,
							"src": "59:56:20",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3911,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2666,
										"src": "68:15:20",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 3914,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4038,
							"sourceUnit": 3255,
							"src": "116:48:20",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3913,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3254,
										"src": "125:11:20",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 3916,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4038,
							"sourceUnit": 4324,
							"src": "165:59:20",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3915,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4323,
										"src": "174:16:20",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"file": "./ISuperfluid.sol",
							"id": 3918,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4038,
							"sourceUnit": 3909,
							"src": "225:48:20",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3917,
										"name": "ISuperfluid",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3908,
										"src": "234:11:20",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluidGovernance",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3919,
								"nodeType": "StructuredDocumentation",
								"src": "276:71:20",
								"text": " @title Superfluid governance interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 4037,
							"linearizedBaseContracts": [
								4037
							],
							"name": "ISuperfluidGovernance",
							"nameLocation": "358:21:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "27743aa6",
									"id": 3921,
									"name": "SF_GOV_ARRAYS_NOT_SAME_LENGTH",
									"nameLocation": "571:29:20",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3920,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "600:2:20"
									},
									"src": "565:38:20"
								},
								{
									"errorSelector": "e171980a",
									"id": 3923,
									"name": "SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD",
									"nameLocation": "645:46:20",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3922,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "691:2:20"
									},
									"src": "639:55:20"
								},
								{
									"errorSelector": "80dddd73",
									"id": 3925,
									"name": "SF_GOV_MUST_BE_CONTRACT",
									"nameLocation": "719:23:20",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3924,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "742:2:20"
									},
									"src": "713:32:20"
								},
								{
									"documentation": {
										"id": 3926,
										"nodeType": "StructuredDocumentation",
										"src": "788:76:20",
										"text": " @dev Replace the current governance with a new governance"
									},
									"functionSelector": "44864b25",
									"id": 3934,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "replaceGovernance",
									"nameLocation": "878:17:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3929,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "917:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 3934,
												"src": "905:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$3908",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 3928,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3927,
														"name": "ISuperfluid",
														"nameLocations": [
															"905:11:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3908,
														"src": "905:11:20"
													},
													"referencedDeclaration": 3908,
													"src": "905:11:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$3908",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3931,
												"mutability": "mutable",
												"name": "newGov",
												"nameLocation": "939:6:20",
												"nodeType": "VariableDeclaration",
												"scope": 3934,
												"src": "931:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "895:51:20"
									},
									"returnParameters": {
										"id": 3933,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "955:0:20"
									},
									"scope": 4037,
									"src": "869:87:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3935,
										"nodeType": "StructuredDocumentation",
										"src": "962:54:20",
										"text": " @dev Register a new agreement class"
									},
									"functionSelector": "cadf8f85",
									"id": 3943,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAgreementClass",
									"nameLocation": "1030:22:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3938,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1074:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 3943,
												"src": "1062:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$3908",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 3937,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3936,
														"name": "ISuperfluid",
														"nameLocations": [
															"1062:11:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3908,
														"src": "1062:11:20"
													},
													"referencedDeclaration": 3908,
													"src": "1062:11:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$3908",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3940,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "1096:14:20",
												"nodeType": "VariableDeclaration",
												"scope": 3943,
												"src": "1088:22:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1088:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1052:59:20"
									},
									"returnParameters": {
										"id": 3942,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1120:0:20"
									},
									"scope": 4037,
									"src": "1021:100:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3944,
										"nodeType": "StructuredDocumentation",
										"src": "1127:193:20",
										"text": " @dev Update logics of the contracts\n @custom:note \n - Because they might have inter-dependencies, it is good to have one single function to update them all"
									},
									"functionSelector": "427942a4",
									"id": 3957,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateContracts",
									"nameLocation": "1334:15:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3955,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3947,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1371:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 3957,
												"src": "1359:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$3908",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 3946,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3945,
														"name": "ISuperfluid",
														"nameLocations": [
															"1359:11:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3908,
														"src": "1359:11:20"
													},
													"referencedDeclaration": 3908,
													"src": "1359:11:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$3908",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3949,
												"mutability": "mutable",
												"name": "hostNewLogic",
												"nameLocation": "1393:12:20",
												"nodeType": "VariableDeclaration",
												"scope": 3957,
												"src": "1385:20:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3948,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1385:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3952,
												"mutability": "mutable",
												"name": "agreementClassNewLogics",
												"nameLocation": "1434:23:20",
												"nodeType": "VariableDeclaration",
												"scope": 3957,
												"src": "1415:42:20",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 3950,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1415:7:20",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 3951,
													"nodeType": "ArrayTypeName",
													"src": "1415:9:20",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3954,
												"mutability": "mutable",
												"name": "superTokenFactoryNewLogic",
												"nameLocation": "1475:25:20",
												"nodeType": "VariableDeclaration",
												"scope": 3957,
												"src": "1467:33:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3953,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1467:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1349:157:20"
									},
									"returnParameters": {
										"id": 3956,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1515:0:20"
									},
									"scope": 4037,
									"src": "1325:191:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3958,
										"nodeType": "StructuredDocumentation",
										"src": "1522:113:20",
										"text": " @dev Update supertoken logic contract to the latest that is managed by the super token factory"
									},
									"functionSelector": "42148deb",
									"id": 3968,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchUpdateSuperTokenLogic",
									"nameLocation": "1649:26:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3961,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1697:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 3968,
												"src": "1685:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$3908",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 3960,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3959,
														"name": "ISuperfluid",
														"nameLocations": [
															"1685:11:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3908,
														"src": "1685:11:20"
													},
													"referencedDeclaration": 3908,
													"src": "1685:11:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$3908",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3965,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "1734:6:20",
												"nodeType": "VariableDeclaration",
												"scope": 3968,
												"src": "1711:29:20",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperToken_$3254_$dyn_calldata_ptr",
													"typeString": "contract ISuperToken[]"
												},
												"typeName": {
													"baseType": {
														"id": 3963,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3962,
															"name": "ISuperToken",
															"nameLocations": [
																"1711:11:20"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3254,
															"src": "1711:11:20"
														},
														"referencedDeclaration": 3254,
														"src": "1711:11:20",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperToken_$3254",
															"typeString": "contract ISuperToken"
														}
													},
													"id": 3964,
													"nodeType": "ArrayTypeName",
													"src": "1711:13:20",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperToken_$3254_$dyn_storage_ptr",
														"typeString": "contract ISuperToken[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1675:66:20"
									},
									"returnParameters": {
										"id": 3967,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1750:0:20"
									},
									"scope": 4037,
									"src": "1640:111:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3969,
										"nodeType": "StructuredDocumentation",
										"src": "1761:58:20",
										"text": " @dev Set configuration as address value"
									},
									"functionSelector": "78707cb8",
									"id": 3982,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setConfig",
									"nameLocation": "1833:9:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3972,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1864:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 3982,
												"src": "1852:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$3908",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 3971,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3970,
														"name": "ISuperfluid",
														"nameLocations": [
															"1852:11:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3908,
														"src": "1852:11:20"
													},
													"referencedDeclaration": 3908,
													"src": "1852:11:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$3908",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3975,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1895:10:20",
												"nodeType": "VariableDeclaration",
												"scope": 3982,
												"src": "1878:27:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 3974,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3973,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"1878:16:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "1878:16:20"
													},
													"referencedDeclaration": 4323,
													"src": "1878:16:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3977,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1923:3:20",
												"nodeType": "VariableDeclaration",
												"scope": 3982,
												"src": "1915:11:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3976,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1915:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3979,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1944:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 3982,
												"src": "1936:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3978,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1936:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1842:113:20"
									},
									"returnParameters": {
										"id": 3981,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1964:0:20"
									},
									"scope": 4037,
									"src": "1824:141:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3983,
										"nodeType": "StructuredDocumentation",
										"src": "1975:58:20",
										"text": " @dev Set configuration as uint256 value"
									},
									"functionSelector": "f79a8e63",
									"id": 3996,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setConfig",
									"nameLocation": "2047:9:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3986,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2078:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 3996,
												"src": "2066:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$3908",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 3985,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3984,
														"name": "ISuperfluid",
														"nameLocations": [
															"2066:11:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3908,
														"src": "2066:11:20"
													},
													"referencedDeclaration": 3908,
													"src": "2066:11:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$3908",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3989,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2109:10:20",
												"nodeType": "VariableDeclaration",
												"scope": 3996,
												"src": "2092:27:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 3988,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3987,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2092:16:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "2092:16:20"
													},
													"referencedDeclaration": 4323,
													"src": "2092:16:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3991,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2137:3:20",
												"nodeType": "VariableDeclaration",
												"scope": 3996,
												"src": "2129:11:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3990,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2129:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3993,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2158:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 3996,
												"src": "2150:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3992,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2150:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2056:113:20"
									},
									"returnParameters": {
										"id": 3995,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2178:0:20"
									},
									"scope": 4037,
									"src": "2038:141:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3997,
										"nodeType": "StructuredDocumentation",
										"src": "2185:43:20",
										"text": " @dev Clear configuration"
									},
									"functionSelector": "640b6cc9",
									"id": 4008,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "clearConfig",
									"nameLocation": "2242:11:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4000,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2275:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2263:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$3908",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 3999,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3998,
														"name": "ISuperfluid",
														"nameLocations": [
															"2263:11:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3908,
														"src": "2263:11:20"
													},
													"referencedDeclaration": 3908,
													"src": "2263:11:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$3908",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4003,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2306:10:20",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2289:27:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 4002,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4001,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2289:16:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "2289:16:20"
													},
													"referencedDeclaration": 4323,
													"src": "2289:16:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4005,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2334:3:20",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2326:11:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4004,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2253:90:20"
									},
									"returnParameters": {
										"id": 4007,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2352:0:20"
									},
									"scope": 4037,
									"src": "2233:120:20",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4009,
										"nodeType": "StructuredDocumentation",
										"src": "2359:58:20",
										"text": " @dev Get configuration as address value"
									},
									"functionSelector": "8369a0f1",
									"id": 4022,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getConfigAsAddress",
									"nameLocation": "2431:18:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4012,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2471:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 4022,
												"src": "2459:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$3908",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 4011,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4010,
														"name": "ISuperfluid",
														"nameLocations": [
															"2459:11:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3908,
														"src": "2459:11:20"
													},
													"referencedDeclaration": 3908,
													"src": "2459:11:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$3908",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4015,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2502:10:20",
												"nodeType": "VariableDeclaration",
												"scope": 4022,
												"src": "2485:27:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 4014,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4013,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2485:16:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "2485:16:20"
													},
													"referencedDeclaration": 4323,
													"src": "2485:16:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4017,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2530:3:20",
												"nodeType": "VariableDeclaration",
												"scope": 4022,
												"src": "2522:11:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4016,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2522:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2449:85:20"
									},
									"returnParameters": {
										"id": 4021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4020,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2566:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 4022,
												"src": "2558:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4019,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2558:7:20",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2557:15:20"
									},
									"scope": 4037,
									"src": "2422:151:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4023,
										"nodeType": "StructuredDocumentation",
										"src": "2579:58:20",
										"text": " @dev Get configuration as uint256 value"
									},
									"functionSelector": "80f70cba",
									"id": 4036,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getConfigAsUint256",
									"nameLocation": "2651:18:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4026,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2691:4:20",
												"nodeType": "VariableDeclaration",
												"scope": 4036,
												"src": "2679:16:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$3908",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 4025,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4024,
														"name": "ISuperfluid",
														"nameLocations": [
															"2679:11:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3908,
														"src": "2679:11:20"
													},
													"referencedDeclaration": 3908,
													"src": "2679:11:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$3908",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4029,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2722:10:20",
												"nodeType": "VariableDeclaration",
												"scope": 4036,
												"src": "2705:27:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 4028,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4027,
														"name": "ISuperfluidToken",
														"nameLocations": [
															"2705:16:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 4323,
														"src": "2705:16:20"
													},
													"referencedDeclaration": 4323,
													"src": "2705:16:20",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4031,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2750:3:20",
												"nodeType": "VariableDeclaration",
												"scope": 4036,
												"src": "2742:11:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4030,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2742:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:85:20"
									},
									"returnParameters": {
										"id": 4035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4034,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2786:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 4036,
												"src": "2778:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4033,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2778:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2777:15:20"
									},
									"scope": 4037,
									"src": "2642:151:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 4038,
							"src": "348:2448:20",
							"usedErrors": [
								3921,
								3923,
								3925
							]
						}
					],
					"src": "32:2765:20"
				},
				"id": 20
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							2666
						],
						"ISuperfluidToken": [
							4323
						]
					},
					"id": 4324,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4039,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:21"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 4041,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4324,
							"sourceUnit": 2667,
							"src": "59:56:21",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4040,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2666,
										"src": "68:15:21",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluidToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 4042,
								"nodeType": "StructuredDocumentation",
								"src": "117:66:21",
								"text": " @title Superfluid token interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 4323,
							"linearizedBaseContracts": [
								4323
							],
							"name": "ISuperfluidToken",
							"nameLocation": "194:16:21",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "f05521f6",
									"id": 4044,
									"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
									"nameLocation": "398:33:21",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 4043,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "431:2:21"
									},
									"src": "392:42:21"
								},
								{
									"errorSelector": "dae18809",
									"id": 4046,
									"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
									"nameLocation": "460:33:21",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 4045,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "493:2:21"
									},
									"src": "454:42:21"
								},
								{
									"errorSelector": "10ecdf44",
									"id": 4048,
									"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
									"nameLocation": "522:34:21",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 4047,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "556:2:21"
									},
									"src": "516:43:21"
								},
								{
									"errorSelector": "2f4cb941",
									"id": 4050,
									"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
									"nameLocation": "584:34:21",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 4049,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "618:2:21"
									},
									"src": "578:43:21"
								},
								{
									"errorSelector": "c9ff6644",
									"id": 4052,
									"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
									"nameLocation": "646:30:21",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 4051,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "676:2:21"
									},
									"src": "640:39:21"
								},
								{
									"errorSelector": "c51efddd",
									"id": 4054,
									"name": "SF_TOKEN_ONLY_HOST",
									"nameLocation": "708:18:21",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 4053,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "726:2:21"
									},
									"src": "702:27:21"
								},
								{
									"documentation": {
										"id": 4055,
										"nodeType": "StructuredDocumentation",
										"src": "951:60:21",
										"text": " @dev Get superfluid host contract address"
									},
									"functionSelector": "20bc4425",
									"id": 4060,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHost",
									"nameLocation": "1025:7:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4056,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1032:2:21"
									},
									"returnParameters": {
										"id": 4059,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4058,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1065:4:21",
												"nodeType": "VariableDeclaration",
												"scope": 4060,
												"src": "1057:12:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4057,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1057:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1056:14:21"
									},
									"scope": 4323,
									"src": "1016:55:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluidToken.LiquidationTypeData",
									"id": 4065,
									"members": [
										{
											"constant": false,
											"id": 4062,
											"mutability": "mutable",
											"name": "version",
											"nameLocation": "1504:7:21",
											"nodeType": "VariableDeclaration",
											"scope": 4065,
											"src": "1496:15:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 4061,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1496:7:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 4064,
											"mutability": "mutable",
											"name": "liquidationType",
											"nameLocation": "1527:15:21",
											"nodeType": "VariableDeclaration",
											"scope": 4065,
											"src": "1521:21:21",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 4063,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "1521:5:21",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "LiquidationTypeData",
									"nameLocation": "1466:19:21",
									"nodeType": "StructDefinition",
									"scope": 4323,
									"src": "1459:90:21",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 4066,
										"nodeType": "StructuredDocumentation",
										"src": "1751:321:21",
										"text": " @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n @param account for the query\n @param timestamp Time of balance\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "eb3537cc",
									"id": 4079,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "2086:17:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4068,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2120:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4079,
												"src": "2112:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4067,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2112:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4070,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2144:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 4079,
												"src": "2136:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4069,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2136:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2103:56:21"
									},
									"returnParameters": {
										"id": 4078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4073,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2219:16:21",
												"nodeType": "VariableDeclaration",
												"scope": 4079,
												"src": "2212:23:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4072,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2212:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4075,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2257:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4079,
												"src": "2249:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4074,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2249:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4077,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2286:11:21",
												"nodeType": "VariableDeclaration",
												"scope": 4079,
												"src": "2278:19:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2278:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2198:100:21"
									},
									"scope": 4323,
									"src": "2077:222:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4080,
										"nodeType": "StructuredDocumentation",
										"src": "2305:339:21",
										"text": " @notice Calculate the realtime balance given the current host.getNow() value\n @dev realtimeBalanceOf with timestamp equals to block timestamp\n @param account for the query\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "2ec8eec7",
									"id": 4093,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOfNow",
									"nameLocation": "2658:20:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4082,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2695:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4093,
												"src": "2687:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4081,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2687:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:30:21"
									},
									"returnParameters": {
										"id": 4092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4085,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2768:16:21",
												"nodeType": "VariableDeclaration",
												"scope": 4093,
												"src": "2761:23:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4084,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2761:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4087,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2806:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4093,
												"src": "2798:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4089,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2835:11:21",
												"nodeType": "VariableDeclaration",
												"scope": 4093,
												"src": "2827:19:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4088,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2827:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4091,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2868:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 4093,
												"src": "2860:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2860:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:131:21"
									},
									"scope": 4323,
									"src": "2649:230:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4094,
										"nodeType": "StructuredDocumentation",
										"src": "2885:309:21",
										"text": " @notice Check if account is critical\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @param timestamp The time we'd like to check if the account is critical (should use future)\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "d9d078d6",
									"id": 4103,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCritical",
									"nameLocation": "3208:17:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4099,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4096,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3243:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4103,
												"src": "3235:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4095,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3235:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4098,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3268:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 4103,
												"src": "3260:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4097,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3260:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3225:58:21"
									},
									"returnParameters": {
										"id": 4102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4101,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3327:10:21",
												"nodeType": "VariableDeclaration",
												"scope": 4103,
												"src": "3322:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4100,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3322:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3321:17:21"
									},
									"scope": 4323,
									"src": "3199:140:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4104,
										"nodeType": "StructuredDocumentation",
										"src": "3345:239:21",
										"text": " @notice Check if account is critical now (current host.getNow())\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "79359f6f",
									"id": 4111,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCriticalNow",
									"nameLocation": "3598:20:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4106,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3636:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4111,
												"src": "3628:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3618:31:21"
									},
									"returnParameters": {
										"id": 4110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4109,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3693:10:21",
												"nodeType": "VariableDeclaration",
												"scope": 4111,
												"src": "3688:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4108,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3688:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3687:17:21"
									},
									"scope": 4323,
									"src": "3589:116:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4112,
										"nodeType": "StructuredDocumentation",
										"src": "3711:383:21",
										"text": " @notice Check if account is solvent\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @param timestamp The time we'd like to check if the account is solvent (should use future)\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "b84cdd4a",
									"id": 4121,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolvent",
									"nameLocation": "4108:16:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4114,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4142:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4121,
												"src": "4134:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4134:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4116,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "4167:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 4121,
												"src": "4159:17:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4159:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4124:58:21"
									},
									"returnParameters": {
										"id": 4120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4119,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4226:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 4121,
												"src": "4221:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4118,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4221:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4220:16:21"
									},
									"scope": 4323,
									"src": "4099:138:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4122,
										"nodeType": "StructuredDocumentation",
										"src": "4243:289:21",
										"text": " @notice Check if account is solvent now\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "bb0d196e",
									"id": 4129,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolventNow",
									"nameLocation": "4546:19:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4124,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4583:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4129,
												"src": "4575:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4575:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4565:31:21"
									},
									"returnParameters": {
										"id": 4128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4127,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4640:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 4129,
												"src": "4635:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4126,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4635:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4634:16:21"
									},
									"scope": 4323,
									"src": "4537:114:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4130,
										"nodeType": "StructuredDocumentation",
										"src": "4657:277:21",
										"text": " @notice Get a list of agreements that is active for the account\n @dev An active agreement is one that has state for the account\n @param account Account to query\n @return activeAgreements List of accounts that have non-zero states for the account"
									},
									"functionSelector": "386fa221",
									"id": 4139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccountActiveAgreements",
									"nameLocation": "4948:26:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4132,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4983:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4139,
												"src": "4975:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4975:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4974:17:21"
									},
									"returnParameters": {
										"id": 4138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4137,
												"mutability": "mutable",
												"name": "activeAgreements",
												"nameLocation": "5053:16:21",
												"nodeType": "VariableDeclaration",
												"scope": 4139,
												"src": "5028:41:21",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$2666_$dyn_memory_ptr",
													"typeString": "contract ISuperAgreement[]"
												},
												"typeName": {
													"baseType": {
														"id": 4135,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 4134,
															"name": "ISuperAgreement",
															"nameLocations": [
																"5028:15:21"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2666,
															"src": "5028:15:21"
														},
														"referencedDeclaration": 2666,
														"src": "5028:15:21",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperAgreement_$2666",
															"typeString": "contract ISuperAgreement"
														}
													},
													"id": 4136,
													"nodeType": "ArrayTypeName",
													"src": "5028:17:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$2666_$dyn_storage_ptr",
														"typeString": "contract ISuperAgreement[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5027:43:21"
									},
									"scope": 4323,
									"src": "4939:132:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4140,
										"nodeType": "StructuredDocumentation",
										"src": "5277:110:21",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "12a6a3f8",
									"id": 4148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAgreement",
									"nameLocation": "5401:15:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4142,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5434:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4148,
												"src": "5426:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4141,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5426:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4145,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5465:4:21",
												"nodeType": "VariableDeclaration",
												"scope": 4148,
												"src": "5446:23:21",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 4143,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5446:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 4144,
													"nodeType": "ArrayTypeName",
													"src": "5446:9:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5416:59:21"
									},
									"returnParameters": {
										"id": 4147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5492:0:21"
									},
									"scope": 4323,
									"src": "5392:101:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 4149,
										"nodeType": "StructuredDocumentation",
										"src": "5498:174:21",
										"text": " @dev Agreement created event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"eventSelector": "770ea40a13a4644573ed785e5c7116890709947918747febc5add46feb531e2d",
									"id": 4158,
									"name": "AgreementCreated",
									"nameLocation": "5683:16:21",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 4157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4151,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "5725:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4158,
												"src": "5709:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5709:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4153,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5757:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4158,
												"src": "5749:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4152,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5749:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4156,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5779:4:21",
												"nodeType": "VariableDeclaration",
												"scope": 4158,
												"src": "5769:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 4154,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5769:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 4155,
													"nodeType": "ArrayTypeName",
													"src": "5769:9:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5699:90:21"
									},
									"src": "5677:113:21"
								},
								{
									"documentation": {
										"id": 4159,
										"nodeType": "StructuredDocumentation",
										"src": "5796:184:21",
										"text": " @dev Get data of the agreement\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @return data Data of the agreement"
									},
									"functionSelector": "6c2d9f2f",
									"id": 4171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementData",
									"nameLocation": "5994:16:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4161,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6028:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4171,
												"src": "6020:22:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4163,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6060:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4171,
												"src": "6052:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4162,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6052:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4165,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6077:10:21",
												"nodeType": "VariableDeclaration",
												"scope": 4171,
												"src": "6072:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4164,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6072:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6010:83:21"
									},
									"returnParameters": {
										"id": 4170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4169,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6149:4:21",
												"nodeType": "VariableDeclaration",
												"scope": 4171,
												"src": "6132:21:21",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 4167,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6132:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 4168,
													"nodeType": "ArrayTypeName",
													"src": "6132:9:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6131:23:21"
									},
									"scope": 4323,
									"src": "5985:170:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4172,
										"nodeType": "StructuredDocumentation",
										"src": "6161:110:21",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "a1b2bf8b",
									"id": 4180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementData",
									"nameLocation": "6285:19:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4174,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6322:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4180,
												"src": "6314:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4173,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4177,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6353:4:21",
												"nodeType": "VariableDeclaration",
												"scope": 4180,
												"src": "6334:23:21",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 4175,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6334:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 4176,
													"nodeType": "ArrayTypeName",
													"src": "6334:9:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6304:59:21"
									},
									"returnParameters": {
										"id": 4179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6380:0:21"
									},
									"scope": 4323,
									"src": "6276:105:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 4181,
										"nodeType": "StructuredDocumentation",
										"src": "6386:174:21",
										"text": " @dev Agreement updated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"eventSelector": "0c4c547b3a4fcaa5be8353b3111472b124155bccc86de811d4a481c9e6e9faca",
									"id": 4190,
									"name": "AgreementUpdated",
									"nameLocation": "6571:16:21",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 4189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4183,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6613:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4190,
												"src": "6597:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6597:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4185,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6645:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4190,
												"src": "6637:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4184,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6637:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4188,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6667:4:21",
												"nodeType": "VariableDeclaration",
												"scope": 4190,
												"src": "6657:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 4186,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6657:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 4187,
													"nodeType": "ArrayTypeName",
													"src": "6657:9:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6587:90:21"
									},
									"src": "6565:113:21"
								},
								{
									"documentation": {
										"id": 4191,
										"nodeType": "StructuredDocumentation",
										"src": "6684:73:21",
										"text": " @dev Close the agreement\n @param id Agreement ID"
									},
									"functionSelector": "27048397",
									"id": 4198,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "terminateAgreement",
									"nameLocation": "6771:18:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4193,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6807:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4198,
												"src": "6799:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4192,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6799:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4195,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6824:10:21",
												"nodeType": "VariableDeclaration",
												"scope": 4198,
												"src": "6819:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4194,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6819:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6789:51:21"
									},
									"returnParameters": {
										"id": 4197,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6857:0:21"
									},
									"scope": 4323,
									"src": "6762:96:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 4199,
										"nodeType": "StructuredDocumentation",
										"src": "6863:143:21",
										"text": " @dev Agreement terminated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID"
									},
									"eventSelector": "71a63dc095de07aa5512ad57a7596a39516317e316981a1cd71000057be1537b",
									"id": 4205,
									"name": "AgreementTerminated",
									"nameLocation": "7017:19:21",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 4204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4201,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7062:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4205,
												"src": "7046:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4200,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7046:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4203,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "7094:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4205,
												"src": "7086:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4202,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7086:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7036:66:21"
									},
									"src": "7011:92:21"
								},
								{
									"documentation": {
										"id": 4206,
										"nodeType": "StructuredDocumentation",
										"src": "7109:199:21",
										"text": " @dev Update agreement state slot\n @param account Account to be updated\n @custom:note \n - To clear the storage out, provide zero-ed array of intended length"
									},
									"functionSelector": "090c415e",
									"id": 4216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementStateSlot",
									"nameLocation": "7322:24:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4208,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7364:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4216,
												"src": "7356:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7356:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4210,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7389:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 4216,
												"src": "7381:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7381:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4213,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "7424:8:21",
												"nodeType": "VariableDeclaration",
												"scope": 4216,
												"src": "7405:27:21",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 4211,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7405:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 4212,
													"nodeType": "ArrayTypeName",
													"src": "7405:9:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7346:92:21"
									},
									"returnParameters": {
										"id": 4215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7455:0:21"
									},
									"scope": 4323,
									"src": "7313:143:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 4217,
										"nodeType": "StructuredDocumentation",
										"src": "7461:214:21",
										"text": " @dev Agreement account state updated event\n @param agreementClass Contract address of the agreement\n @param account Account updated\n @param slotId slot id of the agreement state"
									},
									"eventSelector": "30f416fa68fca014a0f334464c64b000ba53e99b6d2afdea9d5ca756372d5985",
									"id": 4225,
									"name": "AgreementStateUpdated",
									"nameLocation": "7686:21:21",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 4224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4219,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7733:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4225,
												"src": "7717:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4218,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7717:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4221,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7773:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4225,
												"src": "7757:23:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4220,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7757:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4223,
												"indexed": false,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7798:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 4225,
												"src": "7790:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7790:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7707:103:21"
									},
									"src": "7680:131:21"
								},
								{
									"documentation": {
										"id": 4226,
										"nodeType": "StructuredDocumentation",
										"src": "7817:267:21",
										"text": " @dev Get data of the slot of the state of an agreement\n @param agreementClass Contract address of the agreement\n @param account Account to query\n @param slotId slot id of the state\n @param dataLength length of the state data"
									},
									"functionSelector": "4b61cc33",
									"id": 4240,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementStateSlot",
									"nameLocation": "8098:21:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4228,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "8137:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4240,
												"src": "8129:22:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8129:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4230,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8169:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4240,
												"src": "8161:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8161:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4232,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "8194:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 4240,
												"src": "8186:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8186:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4234,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "8215:10:21",
												"nodeType": "VariableDeclaration",
												"scope": 4240,
												"src": "8210:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4233,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8210:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8119:112:21"
									},
									"returnParameters": {
										"id": 4239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4238,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "8288:8:21",
												"nodeType": "VariableDeclaration",
												"scope": 4240,
												"src": "8271:25:21",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 4236,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "8271:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 4237,
													"nodeType": "ArrayTypeName",
													"src": "8271:9:21",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8270:27:21"
									},
									"scope": 4323,
									"src": "8089:209:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4241,
										"nodeType": "StructuredDocumentation",
										"src": "8304:320:21",
										"text": " @notice Settle balance from an account by the agreement\n @dev The agreement needs to make sure that the balance delta is balanced afterwards\n @param account Account to query.\n @param delta Amount of balance delta to be settled\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "cf97256d",
									"id": 4248,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settleBalance",
									"nameLocation": "8638:13:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4243,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8669:7:21",
												"nodeType": "VariableDeclaration",
												"scope": 4248,
												"src": "8661:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8661:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4245,
												"mutability": "mutable",
												"name": "delta",
												"nameLocation": "8693:5:21",
												"nodeType": "VariableDeclaration",
												"scope": 4248,
												"src": "8686:12:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4244,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8686:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8651:53:21"
									},
									"returnParameters": {
										"id": 4247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8721:0:21"
									},
									"scope": 4323,
									"src": "8629:93:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4249,
										"nodeType": "StructuredDocumentation",
										"src": "8728:1154:21",
										"text": " @dev Make liquidation payouts (v2)\n @param id Agreement ID\n @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n @param liquidatorAccount Address of the executor of the liquidation\n @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n @param targetAccount Account to be liquidated\n @param rewardAmount The amount the rewarded account will receive\n @param targetAccountBalanceDelta The delta amount the target account balance should change by\n @custom:note \n - If a bailout is required (bailoutAmount > 0)\n   - the actual reward (single deposit) goes to the executor,\n   - while the reward account becomes the bailout account\n   - total bailout include: bailout amount + reward amount\n   - the targetAccount will be bailed out\n - If a bailout is not required\n   - the targetAccount will pay the rewardAmount\n   - the liquidator (reward account in PIC period) will receive the rewardAmount\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "1863e809",
									"id": 4266,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "makeLiquidationPayoutsV2",
									"nameLocation": "9896:24:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4251,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "9943:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4266,
												"src": "9935:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4250,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9935:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4253,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "9968:19:21",
												"nodeType": "VariableDeclaration",
												"scope": 4266,
												"src": "9955:32:21",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 4252,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9955:5:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4255,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "10005:17:21",
												"nodeType": "VariableDeclaration",
												"scope": 4266,
												"src": "9997:25:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4254,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9997:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4257,
												"mutability": "mutable",
												"name": "useDefaultRewardAccount",
												"nameLocation": "10037:23:21",
												"nodeType": "VariableDeclaration",
												"scope": 4266,
												"src": "10032:28:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4256,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10032:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4259,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "10078:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 4266,
												"src": "10070:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10070:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4261,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "10109:12:21",
												"nodeType": "VariableDeclaration",
												"scope": 4266,
												"src": "10101:20:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10101:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4263,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "10138:25:21",
												"nodeType": "VariableDeclaration",
												"scope": 4266,
												"src": "10131:32:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4262,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "10131:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9925:244:21"
									},
									"returnParameters": {
										"id": 4265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10178:0:21"
									},
									"scope": 4323,
									"src": "9887:292:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 4267,
										"nodeType": "StructuredDocumentation",
										"src": "10184:1512:21",
										"text": " @dev Agreement liquidation event v2 (including agent account)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param liquidatorAccount Address of the executor of the liquidation\n @param targetAccount Account of the stream sender\n @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n @param rewardAmount The amount the reward recipient account balance should change by\n @param targetAccountBalanceDelta The amount the sender account balance should change by\n @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n @custom:note \n Reward account rule:\n - if the agreement is liquidated during the PIC period\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n   - the targetAccount will pay for the rewardAmount\n - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n   - the targetAccount will pay for the rewardAmount\n - if the targetAccount is insolvent\n   - the liquidatorAccount will get the rewardAmount (single deposit)\n   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n   - the targetAccount will receive the bailoutAmount"
									},
									"eventSelector": "b8381a3ce157650e06186e3e8f4dd4dc29236f2688b6eed1893d0a60d7c6386f",
									"id": 4285,
									"name": "AgreementLiquidatedV2",
									"nameLocation": "11707:21:21",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 4284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4269,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "11754:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4285,
												"src": "11738:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11738:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4271,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "11786:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4285,
												"src": "11778:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4270,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11778:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4273,
												"indexed": true,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "11814:17:21",
												"nodeType": "VariableDeclaration",
												"scope": 4285,
												"src": "11798:33:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4272,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11798:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4275,
												"indexed": true,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "11857:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 4285,
												"src": "11841:29:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4274,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11841:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4277,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmountReceiver",
												"nameLocation": "11888:20:21",
												"nodeType": "VariableDeclaration",
												"scope": 4285,
												"src": "11880:28:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11880:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4279,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "11926:12:21",
												"nodeType": "VariableDeclaration",
												"scope": 4285,
												"src": "11918:20:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11918:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4281,
												"indexed": false,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "11955:25:21",
												"nodeType": "VariableDeclaration",
												"scope": 4285,
												"src": "11948:32:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 4280,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "11948:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4283,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "11996:19:21",
												"nodeType": "VariableDeclaration",
												"scope": 4285,
												"src": "11990:25:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 4282,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11990:5:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11728:293:21"
									},
									"src": "11701:321:21"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 4286,
										"nodeType": "StructuredDocumentation",
										"src": "12834:435:21",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param rewardAccount Account that collect the reward\n @param rewardAmount Amount of liquidation reward\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"eventSelector": "8505c3d8f1f184f032cf0bc4cd80ee61c8b9d94f8907c3281bf0101a2610fe80",
									"id": 4298,
									"name": "AgreementLiquidated",
									"nameLocation": "13280:19:21",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 4297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4288,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "13325:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4298,
												"src": "13309:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13309:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4290,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "13357:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4298,
												"src": "13349:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4289,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13349:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4292,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "13385:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4298,
												"src": "13369:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13369:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4294,
												"indexed": true,
												"mutability": "mutable",
												"name": "rewardAccount",
												"nameLocation": "13425:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 4298,
												"src": "13409:29:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13409:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4296,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "13456:12:21",
												"nodeType": "VariableDeclaration",
												"scope": 4298,
												"src": "13448:20:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13448:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13299:175:21"
									},
									"src": "13274:201:21"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 4299,
										"nodeType": "StructuredDocumentation",
										"src": "13481:276:21",
										"text": " @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n @param bailoutAccount Account that bailout the penalty account\n @param bailoutAmount Amount of account bailout\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"eventSelector": "d6c9a04afc81e8c614310bbee6c9e84f5abe15b82038bf8347014ce0852e6ffd",
									"id": 4305,
									"name": "Bailout",
									"nameLocation": "13768:7:21",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 4304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4301,
												"indexed": true,
												"mutability": "mutable",
												"name": "bailoutAccount",
												"nameLocation": "13801:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4305,
												"src": "13785:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4300,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13785:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4303,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "13833:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 4305,
												"src": "13825:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13825:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13775:77:21"
									},
									"src": "13762:91:21"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 4306,
										"nodeType": "StructuredDocumentation",
										"src": "13859:1082:21",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n @param liquidatorAccount Account of the agent that performed the liquidation.\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param bondAccount Account that collect the reward or bailout accounts\n @param rewardAmount Amount of liquidation reward\n @param bailoutAmount Amount of liquidation bailouot\n @custom:deprecated Use AgreementLiquidatedV2 instead\n @custom:note \n Reward account rule:\n - if bailout is equal to 0, then\n   - the bondAccount will get the rewardAmount,\n   - the penaltyAccount will pay for the rewardAmount.\n - if bailout is larger than 0, then\n   - the liquidatorAccount will get the rewardAmouont,\n   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount."
									},
									"eventSelector": "5f22b60e58b1d6de858bc27c48d5a4653e052da99e083c1d88bb8c58e1abc8ef",
									"id": 4322,
									"name": "AgreementLiquidatedBy",
									"nameLocation": "14952:21:21",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 4321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4308,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "14991:17:21",
												"nodeType": "VariableDeclaration",
												"scope": 4322,
												"src": "14983:25:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14983:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4310,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "15034:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4322,
												"src": "15018:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15018:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4312,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "15066:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 4322,
												"src": "15058:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4311,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15058:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4314,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "15094:14:21",
												"nodeType": "VariableDeclaration",
												"scope": 4322,
												"src": "15078:30:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4313,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15078:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4316,
												"indexed": true,
												"mutability": "mutable",
												"name": "bondAccount",
												"nameLocation": "15134:11:21",
												"nodeType": "VariableDeclaration",
												"scope": 4322,
												"src": "15118:27:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15118:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4318,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "15163:12:21",
												"nodeType": "VariableDeclaration",
												"scope": 4322,
												"src": "15155:20:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15155:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4320,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "15193:13:21",
												"nodeType": "VariableDeclaration",
												"scope": 4322,
												"src": "15185:21:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15185:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14973:239:21"
									},
									"src": "14946:267:21"
								}
							],
							"scope": 4324,
							"src": "184:15031:21",
							"usedErrors": [
								4044,
								4046,
								4048,
								4050,
								4052,
								4054
							]
						}
					],
					"src": "32:15184:21"
				},
				"id": 21
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
					"exportedSymbols": {
						"ERC20WithTokenInfo": [
							4335
						],
						"IERC20": [
							77
						],
						"TokenInfo": [
							4357
						]
					},
					"id": 4336,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4325,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:22"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 4327,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4336,
							"sourceUnit": 78,
							"src": "59:72:22",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4326,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 77,
										"src": "68:6:22",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
							"file": "./TokenInfo.sol",
							"id": 4329,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4336,
							"sourceUnit": 4358,
							"src": "132:44:22",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4328,
										"name": "TokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4357,
										"src": "141:9:22",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4331,
										"name": "IERC20",
										"nameLocations": [
											"527:6:22"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 77,
										"src": "527:6:22"
									},
									"id": 4332,
									"nodeType": "InheritanceSpecifier",
									"src": "527:6:22"
								},
								{
									"baseName": {
										"id": 4333,
										"name": "TokenInfo",
										"nameLocations": [
											"535:9:22"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 4357,
										"src": "535:9:22"
									},
									"id": 4334,
									"nodeType": "InheritanceSpecifier",
									"src": "535:9:22"
								}
							],
							"canonicalName": "ERC20WithTokenInfo",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4330,
								"nodeType": "StructuredDocumentation",
								"src": "178:263:22",
								"text": " @title ERC20 token with token info interface\n @author Superfluid\n @dev Using abstract contract instead of interfaces because old solidity\n      does not support interface inheriting other interfaces\n solhint-disable-next-line no-empty-blocks"
							},
							"fullyImplemented": false,
							"id": 4335,
							"linearizedBaseContracts": [
								4335,
								4357,
								77
							],
							"name": "ERC20WithTokenInfo",
							"nameLocation": "505:18:22",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 4336,
							"src": "487:60:22",
							"usedErrors": []
						}
					],
					"src": "32:516:22"
				},
				"id": 22
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
					"exportedSymbols": {
						"TokenInfo": [
							4357
						]
					},
					"id": 4358,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4337,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:23"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TokenInfo",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 4338,
								"nodeType": "StructuredDocumentation",
								"src": "59:188:23",
								"text": " @title ERC20 token info interface\n @author Superfluid\n @dev ERC20 standard interface does not specify these functions, but\n      often the token implementations have them."
							},
							"fullyImplemented": false,
							"id": 4357,
							"linearizedBaseContracts": [
								4357
							],
							"name": "TokenInfo",
							"nameLocation": "258:9:23",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 4339,
										"nodeType": "StructuredDocumentation",
										"src": "274:54:23",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 4344,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "342:4:23",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "346:2:23"
									},
									"returnParameters": {
										"id": 4343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4342,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4344,
												"src": "372:13:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 4341,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "372:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "371:15:23"
									},
									"scope": 4357,
									"src": "333:54:23",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4345,
										"nodeType": "StructuredDocumentation",
										"src": "393:102:23",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 4350,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "509:6:23",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4346,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "515:2:23"
									},
									"returnParameters": {
										"id": 4349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4348,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4350,
												"src": "541:13:23",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 4347,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "541:6:23",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "540:15:23"
									},
									"scope": 4357,
									"src": "500:56:23",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 4351,
										"nodeType": "StructuredDocumentation",
										"src": "562:612:23",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 4356,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "1188:8:23",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1196:2:23"
									},
									"returnParameters": {
										"id": 4355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4354,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4356,
												"src": "1222:5:23",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 4353,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1222:5:23",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:7:23"
									},
									"scope": 4357,
									"src": "1179:50:23",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 4358,
							"src": "248:983:23",
							"usedErrors": []
						}
					],
					"src": "32:1200:23"
				},
				"id": 23
			},
			"premiere/IRegistry.sol": {
				"ast": {
					"absolutePath": "premiere/IRegistry.sol",
					"exportedSymbols": {
						"IRegistry": [
							4386
						]
					},
					"id": 4387,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4359,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "39:24:24"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 4386,
							"linearizedBaseContracts": [
								4386
							],
							"name": "IRegistry",
							"nameLocation": "75:9:24",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "33310a89c32d8cc00057ad6ef6274d2f8fe22389a992cf89983e09fc84f6cfff",
									"id": 4367,
									"name": "AccountCreated",
									"nameLocation": "97:14:24",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 4366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4361,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "129:7:24",
												"nodeType": "VariableDeclaration",
												"scope": 4367,
												"src": "121:15:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "121:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4363,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenContract",
												"nameLocation": "162:13:24",
												"nodeType": "VariableDeclaration",
												"scope": 4367,
												"src": "146:29:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "146:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4365,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "201:7:24",
												"nodeType": "VariableDeclaration",
												"scope": 4367,
												"src": "185:23:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4364,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "185:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "111:103:24"
									},
									"src": "91:124:24"
								},
								{
									"functionSelector": "5fbfb9cf",
									"id": 4376,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAccount",
									"nameLocation": "230:13:24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4369,
												"mutability": "mutable",
												"name": "tokenContract",
												"nameLocation": "252:13:24",
												"nodeType": "VariableDeclaration",
												"scope": 4376,
												"src": "244:21:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "244:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4371,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "275:7:24",
												"nodeType": "VariableDeclaration",
												"scope": 4376,
												"src": "267:15:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "267:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "243:40:24"
									},
									"returnParameters": {
										"id": 4375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4376,
												"src": "318:7:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "318:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "317:9:24"
									},
									"scope": 4386,
									"src": "221:106:24",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "192df655",
									"id": 4385,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "account",
									"nameLocation": "342:7:24",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4378,
												"mutability": "mutable",
												"name": "tokenContract",
												"nameLocation": "358:13:24",
												"nodeType": "VariableDeclaration",
												"scope": 4385,
												"src": "350:21:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "350:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4380,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "381:7:24",
												"nodeType": "VariableDeclaration",
												"scope": 4385,
												"src": "373:15:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "373:7:24",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "349:40:24"
									},
									"returnParameters": {
										"id": 4384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4383,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4385,
												"src": "437:7:24",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4382,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "437:7:24",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "436:9:24"
									},
									"scope": 4386,
									"src": "333:113:24",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 4387,
							"src": "65:383:24",
							"usedErrors": []
						}
					],
					"src": "39:409:24"
				},
				"id": 24
			},
			"premiere/Premiere.sol": {
				"ast": {
					"absolutePath": "premiere/Premiere.sol",
					"exportedSymbols": {
						"IConstantFlowAgreementV1": [
							2005
						],
						"IERC721": [
							193
						],
						"IRegistry": [
							4386
						],
						"ISuperfluidToken": [
							4323
						],
						"Math": [
							1490
						],
						"Premiere": [
							4689
						],
						"SignedMath": [
							1595
						],
						"Strings": [
							612
						]
					},
					"id": 4690,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4388,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:25"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
							"file": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
							"id": 4390,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4690,
							"sourceUnit": 2006,
							"src": "57:141:25",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4389,
										"name": "IConstantFlowAgreementV1",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2005,
										"src": "65:24:25",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"file": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"id": 4392,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4690,
							"sourceUnit": 3909,
							"src": "199:120:25",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4391,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4323,
										"src": "207:16:25",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 4394,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4690,
							"sourceUnit": 194,
							"src": "320:73:25",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4393,
										"name": "IERC721",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 193,
										"src": "328:7:25",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "premiere/IRegistry.sol",
							"file": "./IRegistry.sol",
							"id": 4396,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4690,
							"sourceUnit": 4387,
							"src": "394:42:25",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4395,
										"name": "IRegistry",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 4386,
										"src": "402:9:25",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "@openzeppelin/contracts/utils/Strings.sol",
							"id": 4397,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4690,
							"sourceUnit": 613,
							"src": "437:51:25",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Premiere",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 4689,
							"linearizedBaseContracts": [
								4689
							],
							"name": "Premiere",
							"nameLocation": "976:8:25",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 4400,
									"mutability": "mutable",
									"name": "_cfaAddress",
									"nameLocation": "1007:11:25",
									"nodeType": "VariableDeclaration",
									"scope": 4689,
									"src": "991:72:25",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 4398,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "991:7:25",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307834396535363545643162646331374633643232306637324446303835374332364641383346383733",
										"id": 4399,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1021:42:25",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 4403,
									"mutability": "mutable",
									"name": "_superTokenAddress",
									"nameLocation": "1085:18:25",
									"nodeType": "VariableDeclaration",
									"scope": 4689,
									"src": "1069:79:25",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 4401,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1069:7:25",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307835443842344332353534616542376538364633383742346436633030416333333439394564303166",
										"id": 4402,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1106:42:25",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 4406,
									"mutability": "mutable",
									"name": "_lensHubAddress",
									"nameLocation": "1170:15:25",
									"nodeType": "VariableDeclaration",
									"scope": 4689,
									"src": "1154:76:25",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 4404,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1154:7:25",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307836304165383635656534433732356364303433353362354141623336343535336635366365463832",
										"id": 4405,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1188:42:25",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x60Ae865ee4C725cd04353b5AAb364553f56ceF82"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 4409,
									"mutability": "mutable",
									"name": "_tbaRegistry",
									"nameLocation": "1252:12:25",
									"nodeType": "VariableDeclaration",
									"scope": 4689,
									"src": "1236:73:25",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 4407,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1236:7:25",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307830323130316466423737464445303236343134383237466463363034646441463232344630393231",
										"id": 4408,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1267:42:25",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0x02101dfB77FDE026414827Fdc604ddAF224F0921"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 4412,
									"mutability": "mutable",
									"name": "_minFlowRate",
									"nameLocation": "1330:12:25",
									"nodeType": "VariableDeclaration",
									"scope": 4689,
									"src": "1315:44:25",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 4410,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1315:6:25",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "373631303335303037363130",
										"id": 4411,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1345:14:25",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_7355bd3a68c5cb72a5fb123c8bf44c7eabde9b554f84db952880ab0f07d92973",
											"typeString": "literal_string \"761035007610\""
										},
										"value": "761035007610"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 4415,
									"mutability": "mutable",
									"name": "_maxTimestamp",
									"nameLocation": "1380:13:25",
									"nodeType": "VariableDeclaration",
									"scope": 4689,
									"src": "1365:33:25",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 4413,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1365:6:25",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "",
										"id": 4414,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1396:2:25",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
											"typeString": "literal_string \"\""
										},
										"value": ""
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 4511,
										"nodeType": "Block",
										"src": "1625:733:25",
										"statements": [
											{
												"expression": {
													"id": 4432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4430,
														"name": "subscribed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4428,
														"src": "1635:10:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 4431,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1648:5:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1635:18:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4433,
												"nodeType": "ExpressionStatement",
												"src": "1635:18:25"
											},
											{
												"assignments": [
													4436
												],
												"declarations": [
													{
														"constant": false,
														"id": 4436,
														"mutability": "mutable",
														"name": "_lensHub",
														"nameLocation": "1672:8:25",
														"nodeType": "VariableDeclaration",
														"scope": 4511,
														"src": "1664:16:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$193",
															"typeString": "contract IERC721"
														},
														"typeName": {
															"id": 4435,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 4434,
																"name": "IERC721",
																"nameLocations": [
																	"1664:7:25"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 193,
																"src": "1664:7:25"
															},
															"referencedDeclaration": 193,
															"src": "1664:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$193",
																"typeString": "contract IERC721"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4440,
												"initialValue": {
													"arguments": [
														{
															"id": 4438,
															"name": "_lensHubAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4406,
															"src": "1691:15:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 4437,
														"name": "IERC721",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "1683:7:25",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC721_$193_$",
															"typeString": "type(contract IERC721)"
														}
													},
													"id": 4439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1683:24:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721_$193",
														"typeString": "contract IERC721"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1664:43:25"
											},
											{
												"assignments": [
													4443
												],
												"declarations": [
													{
														"constant": false,
														"id": 4443,
														"mutability": "mutable",
														"name": "_cfa",
														"nameLocation": "1742:4:25",
														"nodeType": "VariableDeclaration",
														"scope": 4511,
														"src": "1717:29:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$2005",
															"typeString": "contract IConstantFlowAgreementV1"
														},
														"typeName": {
															"id": 4442,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 4441,
																"name": "IConstantFlowAgreementV1",
																"nameLocations": [
																	"1717:24:25"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2005,
																"src": "1717:24:25"
															},
															"referencedDeclaration": 2005,
															"src": "1717:24:25",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$2005",
																"typeString": "contract IConstantFlowAgreementV1"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4447,
												"initialValue": {
													"arguments": [
														{
															"id": 4445,
															"name": "_cfaAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4400,
															"src": "1787:11:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 4444,
														"name": "IConstantFlowAgreementV1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2005,
														"src": "1749:24:25",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IConstantFlowAgreementV1_$2005_$",
															"typeString": "type(contract IConstantFlowAgreementV1)"
														}
													},
													"id": 4446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1749:59:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$2005",
														"typeString": "contract IConstantFlowAgreementV1"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1717:91:25"
											},
											{
												"assignments": [
													4449,
													4451,
													null,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 4449,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "1827:9:25",
														"nodeType": "VariableDeclaration",
														"scope": 4511,
														"src": "1819:17:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4448,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1819:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 4451,
														"mutability": "mutable",
														"name": "flowRate",
														"nameLocation": "1844:8:25",
														"nodeType": "VariableDeclaration",
														"scope": 4511,
														"src": "1838:14:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int96",
															"typeString": "int96"
														},
														"typeName": {
															"id": 4450,
															"name": "int96",
															"nodeType": "ElementaryTypeName",
															"src": "1838:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_int96",
																"typeString": "int96"
															}
														},
														"visibility": "internal"
													},
													null,
													null
												],
												"id": 4460,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 4455,
																	"name": "_superTokenAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4403,
																	"src": "1903:18:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 4454,
																"name": "ISuperfluidToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4323,
																"src": "1886:16:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISuperfluidToken_$4323_$",
																	"typeString": "type(contract ISuperfluidToken)"
																}
															},
															"id": 4456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1886:36:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
																"typeString": "contract ISuperfluidToken"
															}
														},
														{
															"id": 4457,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4417,
															"src": "1936:6:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4458,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4419,
															"src": "1956:8:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_ISuperfluidToken_$4323",
																"typeString": "contract ISuperfluidToken"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 4452,
															"name": "_cfa",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4443,
															"src": "1860:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$2005",
																"typeString": "contract IConstantFlowAgreementV1"
															}
														},
														"id": 4453,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1865:7:25",
														"memberName": "getFlow",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1890,
														"src": "1860:12:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_contract$_ISuperfluidToken_$4323_$_t_address_$_t_address_$returns$_t_uint256_$_t_int96_$_t_uint256_$_t_uint256_$",
															"typeString": "function (contract ISuperfluidToken,address,address) view external returns (uint256,int96,uint256,uint256)"
														}
													},
													"id": 4459,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1860:114:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_int96_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,int96,uint256,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1818:156:25"
											},
											{
												"assignments": [
													4462
												],
												"declarations": [
													{
														"constant": false,
														"id": 4462,
														"mutability": "mutable",
														"name": "_owner",
														"nameLocation": "1992:6:25",
														"nodeType": "VariableDeclaration",
														"scope": 4511,
														"src": "1984:14:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 4461,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1984:7:25",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4472,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 4468,
																			"name": "profileId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4421,
																			"src": "2032:9:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 4467,
																		"name": "parseInt",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4562,
																			4688
																		],
																		"referencedDeclaration": 4562,
																		"src": "2023:8:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
																			"typeString": "function (string memory) pure returns (uint256)"
																		}
																	},
																	"id": 4469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2023:19:25",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 4466,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2018:4:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 4465,
																	"name": "uint",
																	"nodeType": "ElementaryTypeName",
																	"src": "2018:4:25",
																	"typeDescriptions": {}
																}
															},
															"id": 4470,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2018:25:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 4463,
															"name": "_lensHub",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4436,
															"src": "2001:8:25",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$193",
																"typeString": "contract IERC721"
															}
														},
														"id": 4464,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2010:7:25",
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 126,
														"src": "2001:16:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view external returns (address)"
														}
													},
													"id": 4471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2001:43:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1984:60:25"
											},
											{
												"assignments": [
													4474
												],
												"declarations": [
													{
														"constant": false,
														"id": 4474,
														"mutability": "mutable",
														"name": "_flowRate",
														"nameLocation": "2062:9:25",
														"nodeType": "VariableDeclaration",
														"scope": 4511,
														"src": "2055:16:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 4473,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "2055:6:25",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4481,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 4478,
																	"name": "minFlowRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4423,
																	"src": "2087:11:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 4477,
																"name": "parseInt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4562,
																	4688
																],
																"referencedDeclaration": 4562,
																"src": "2078:8:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
																	"typeString": "function (string memory) pure returns (uint256)"
																}
															},
															"id": 4479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2078:21:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 4476,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2074:3:25",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_int256_$",
															"typeString": "type(int256)"
														},
														"typeName": {
															"id": 4475,
															"name": "int",
															"nodeType": "ElementaryTypeName",
															"src": "2074:3:25",
															"typeDescriptions": {}
														}
													},
													"id": 4480,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2074:26:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2055:45:25"
											},
											{
												"assignments": [
													4483
												],
												"declarations": [
													{
														"constant": false,
														"id": 4483,
														"mutability": "mutable",
														"name": "_timestamp",
														"nameLocation": "2118:10:25",
														"nodeType": "VariableDeclaration",
														"scope": 4511,
														"src": "2110:18:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4482,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2110:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4487,
												"initialValue": {
													"arguments": [
														{
															"id": 4485,
															"name": "maxTimestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4425,
															"src": "2140:12:25",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 4484,
														"name": "parseInt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4562,
															4688
														],
														"referencedDeclaration": 4562,
														"src": "2131:8:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (string memory) pure returns (uint256)"
														}
													},
													"id": 4486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2131:22:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2110:43:25"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 4504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 4499,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	},
																	"id": 4490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 4488,
																		"name": "flowRate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4451,
																		"src": "2182:8:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int96",
																			"typeString": "int96"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 4489,
																		"name": "_flowRate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4474,
																		"src": "2194:9:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"src": "2182:21:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 4497,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 4493,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 4491,
																					"name": "_timestamp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4483,
																					"src": "2224:10:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"hexValue": "30",
																					"id": 4492,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2238:1:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				},
																				"src": "2224:15:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 4496,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 4494,
																					"name": "timestamp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4449,
																					"src": "2243:9:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 4495,
																					"name": "_timestamp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4483,
																					"src": "2255:10:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "2243:22:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "2224:41:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 4498,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2223:43:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "2182:84:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 4500,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2181:86:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 4503,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 4501,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4417,
															"src": "2283:6:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 4502,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4462,
															"src": "2293:6:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2283:16:25",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2181:118:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4510,
												"nodeType": "IfStatement",
												"src": "2164:188:25",
												"trueBody": {
													"id": 4509,
													"nodeType": "Block",
													"src": "2310:42:25",
													"statements": [
														{
															"expression": {
																"id": 4507,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4505,
																	"name": "subscribed",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4428,
																	"src": "2324:10:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 4506,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2337:4:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "2324:17:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 4508,
															"nodeType": "ExpressionStatement",
															"src": "2324:17:25"
														}
													]
												}
											}
										]
									},
									"functionSelector": "bb79f587",
									"id": 4512,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isSubscribed",
									"nameLocation": "1414:12:25",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4417,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1444:6:25",
												"nodeType": "VariableDeclaration",
												"scope": 4512,
												"src": "1436:14:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1436:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4419,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1468:8:25",
												"nodeType": "VariableDeclaration",
												"scope": 4512,
												"src": "1460:16:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1460:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4421,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "1500:9:25",
												"nodeType": "VariableDeclaration",
												"scope": 4512,
												"src": "1486:23:25",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 4420,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1486:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4423,
												"mutability": "mutable",
												"name": "minFlowRate",
												"nameLocation": "1533:11:25",
												"nodeType": "VariableDeclaration",
												"scope": 4512,
												"src": "1519:25:25",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 4422,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1519:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4425,
												"mutability": "mutable",
												"name": "maxTimestamp",
												"nameLocation": "1568:12:25",
												"nodeType": "VariableDeclaration",
												"scope": 4512,
												"src": "1554:26:25",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 4424,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1554:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1426:160:25"
									},
									"returnParameters": {
										"id": 4429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4428,
												"mutability": "mutable",
												"name": "subscribed",
												"nameLocation": "1613:10:25",
												"nodeType": "VariableDeclaration",
												"scope": 4512,
												"src": "1608:15:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4427,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1608:4:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1607:17:25"
									},
									"scope": 4689,
									"src": "1405:953:25",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4548,
										"nodeType": "Block",
										"src": "2444:250:25",
										"statements": [
											{
												"assignments": [
													4522
												],
												"declarations": [
													{
														"constant": false,
														"id": 4522,
														"mutability": "mutable",
														"name": "_tba",
														"nameLocation": "2462:4:25",
														"nodeType": "VariableDeclaration",
														"scope": 4548,
														"src": "2454:12:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 4521,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2454:7:25",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4530,
												"initialValue": {
													"arguments": [
														{
															"id": 4527,
															"name": "_lensHubAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4406,
															"src": "2501:15:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4528,
															"name": "_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4516,
															"src": "2518:3:25",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 4524,
																	"name": "_tbaRegistry",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4409,
																	"src": "2479:12:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 4523,
																"name": "IRegistry",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4386,
																"src": "2469:9:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IRegistry_$4386_$",
																	"typeString": "type(contract IRegistry)"
																}
															},
															"id": 4525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2469:23:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IRegistry_$4386",
																"typeString": "contract IRegistry"
															}
														},
														"id": 4526,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2493:7:25",
														"memberName": "account",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 4385,
														"src": "2469:31:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$returns$_t_address_$",
															"typeString": "function (address,uint256) view external returns (address)"
														}
													},
													"id": 4529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2469:53:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2454:68:25"
											},
											{
												"condition": {
													"arguments": [
														{
															"id": 4532,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4514,
															"src": "2549:6:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4533,
															"name": "_tba",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4522,
															"src": "2557:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 4536,
																	"name": "_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4516,
																	"src": "2580:3:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 4534,
																	"name": "Strings",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 612,
																	"src": "2563:7:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Strings_$612_$",
																		"typeString": "type(library Strings)"
																	}
																},
																"id": 4535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2571:8:25",
																"memberName": "toString",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 442,
																"src": "2563:16:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 4537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2563:21:25",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 4538,
															"name": "_minFlowRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4412,
															"src": "2586:12:25",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														},
														{
															"id": 4539,
															"name": "_maxTimestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4415,
															"src": "2600:13:25",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															},
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"id": 4531,
														"name": "isSubscribed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4512,
														"src": "2536:12:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (address,address,string memory,string memory,string memory) view returns (bool)"
														}
													},
													"id": 4540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2536:78:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 4546,
													"nodeType": "Block",
													"src": "2655:33:25",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 4544,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2676:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 4520,
															"id": 4545,
															"nodeType": "Return",
															"src": "2669:8:25"
														}
													]
												},
												"id": 4547,
												"nodeType": "IfStatement",
												"src": "2532:156:25",
												"trueBody": {
													"id": 4543,
													"nodeType": "Block",
													"src": "2616:33:25",
													"statements": [
														{
															"expression": {
																"hexValue": "31",
																"id": 4541,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2637:1:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"functionReturnParameters": 4520,
															"id": 4542,
															"nodeType": "Return",
															"src": "2630:8:25"
														}
													]
												}
											}
										]
									},
									"functionSelector": "00fdd58e",
									"id": 4549,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2373:9:25",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4514,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "2391:6:25",
												"nodeType": "VariableDeclaration",
												"scope": 4549,
												"src": "2383:14:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2383:7:25",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4516,
												"mutability": "mutable",
												"name": "_id",
												"nameLocation": "2407:3:25",
												"nodeType": "VariableDeclaration",
												"scope": 4549,
												"src": "2399:11:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4515,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2399:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2382:29:25"
									},
									"returnParameters": {
										"id": 4520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4519,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4549,
												"src": "2435:7:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4518,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2435:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2434:9:25"
									},
									"scope": 4689,
									"src": "2364:330:25",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 4561,
										"nodeType": "Block",
										"src": "2793:39:25",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 4557,
															"name": "_a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4551,
															"src": "2819:2:25",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"hexValue": "30",
															"id": 4558,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2823:1:25",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 4556,
														"name": "parseInt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4562,
															4688
														],
														"referencedDeclaration": 4688,
														"src": "2810:8:25",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (string memory,uint256) pure returns (uint256)"
														}
													},
													"id": 4559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2810:15:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4555,
												"id": 4560,
												"nodeType": "Return",
												"src": "2803:22:25"
											}
										]
									},
									"id": 4562,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "parseInt",
									"nameLocation": "2709:8:25",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4551,
												"mutability": "mutable",
												"name": "_a",
												"nameLocation": "2741:2:25",
												"nodeType": "VariableDeclaration",
												"scope": 4562,
												"src": "2727:16:25",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 4550,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2727:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2717:32:25"
									},
									"returnParameters": {
										"id": 4555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4554,
												"mutability": "mutable",
												"name": "_parsedInt",
												"nameLocation": "2781:10:25",
												"nodeType": "VariableDeclaration",
												"scope": 4562,
												"src": "2773:18:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4553,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2773:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2772:20:25"
									},
									"scope": 4689,
									"src": "2700:132:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4687,
										"nodeType": "Block",
										"src": "2948:762:25",
										"statements": [
											{
												"assignments": [
													4572
												],
												"declarations": [
													{
														"constant": false,
														"id": 4572,
														"mutability": "mutable",
														"name": "bresult",
														"nameLocation": "2971:7:25",
														"nodeType": "VariableDeclaration",
														"scope": 4687,
														"src": "2958:20:25",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 4571,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2958:5:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4577,
												"initialValue": {
													"arguments": [
														{
															"id": 4575,
															"name": "_a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4564,
															"src": "2987:2:25",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 4574,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2981:5:25",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 4573,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2981:5:25",
															"typeDescriptions": {}
														}
													},
													"id": 4576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2981:9:25",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2958:32:25"
											},
											{
												"assignments": [
													4579
												],
												"declarations": [
													{
														"constant": false,
														"id": 4579,
														"mutability": "mutable",
														"name": "mint",
														"nameLocation": "3005:4:25",
														"nodeType": "VariableDeclaration",
														"scope": 4687,
														"src": "3000:9:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4578,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3000:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4581,
												"initialValue": {
													"hexValue": "30",
													"id": 4580,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3012:1:25",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3000:13:25"
											},
											{
												"assignments": [
													4583
												],
												"declarations": [
													{
														"constant": false,
														"id": 4583,
														"mutability": "mutable",
														"name": "decimals",
														"nameLocation": "3028:8:25",
														"nodeType": "VariableDeclaration",
														"scope": 4687,
														"src": "3023:13:25",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 4582,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3023:4:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4585,
												"initialValue": {
													"hexValue": "66616c7365",
													"id": 4584,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3039:5:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3023:21:25"
											},
											{
												"body": {
													"id": 4672,
													"nodeType": "Block",
													"src": "3096:525:25",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 4621,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4607,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"baseExpression": {
																									"id": 4601,
																									"name": "bresult",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4572,
																									"src": "3143:7:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bytes_memory_ptr",
																										"typeString": "bytes memory"
																									}
																								},
																								"id": 4603,
																								"indexExpression": {
																									"id": 4602,
																									"name": "i",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4587,
																									"src": "3151:1:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3143:10:25",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							],
																							"id": 4600,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3137:5:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint8_$",
																								"typeString": "type(uint8)"
																							},
																							"typeName": {
																								"id": 4599,
																								"name": "uint8",
																								"nodeType": "ElementaryTypeName",
																								"src": "3137:5:25",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4604,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3137:17:25",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					],
																					"id": 4598,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "3132:4:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 4597,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "3132:4:25",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 4605,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3132:23:25",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">=",
																			"rightExpression": {
																				"hexValue": "3438",
																				"id": 4606,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3159:2:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_48_by_1",
																					"typeString": "int_const 48"
																				},
																				"value": "48"
																			},
																			"src": "3132:29:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 4608,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3131:31:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 4619,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"baseExpression": {
																									"id": 4613,
																									"name": "bresult",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4572,
																									"src": "3194:7:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bytes_memory_ptr",
																										"typeString": "bytes memory"
																									}
																								},
																								"id": 4615,
																								"indexExpression": {
																									"id": 4614,
																									"name": "i",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4587,
																									"src": "3202:1:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3194:10:25",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							],
																							"id": 4612,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3188:5:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint8_$",
																								"typeString": "type(uint8)"
																							},
																							"typeName": {
																								"id": 4611,
																								"name": "uint8",
																								"nodeType": "ElementaryTypeName",
																								"src": "3188:5:25",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 4616,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3188:17:25",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					],
																					"id": 4610,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "3183:4:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 4609,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "3183:4:25",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 4617,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3183:23:25",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"hexValue": "3537",
																				"id": 4618,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3210:2:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_57_by_1",
																					"typeString": "int_const 57"
																				},
																				"value": "57"
																			},
																			"src": "3183:29:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 4620,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3182:31:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "3131:82:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4664,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"baseExpression": {
																							"id": 4658,
																							"name": "bresult",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4572,
																							"src": "3543:7:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 4660,
																						"indexExpression": {
																							"id": 4659,
																							"name": "i",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4587,
																							"src": "3551:1:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "3543:10:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes1",
																							"typeString": "bytes1"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes1",
																							"typeString": "bytes1"
																						}
																					],
																					"id": 4657,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "3537:5:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 4656,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "3537:5:25",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 4661,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3537:17:25",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			],
																			"id": 4655,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3532:4:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 4654,
																				"name": "uint",
																				"nodeType": "ElementaryTypeName",
																				"src": "3532:4:25",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 4662,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3532:23:25",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "3436",
																		"id": 4663,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3559:2:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_46_by_1",
																			"typeString": "int_const 46"
																		},
																		"value": "46"
																	},
																	"src": "3532:29:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 4670,
																"nodeType": "IfStatement",
																"src": "3528:83:25",
																"trueBody": {
																	"id": 4669,
																	"nodeType": "Block",
																	"src": "3563:48:25",
																	"statements": [
																		{
																			"expression": {
																				"id": 4667,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 4665,
																					"name": "decimals",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4583,
																					"src": "3581:8:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"hexValue": "74727565",
																					"id": 4666,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3592:4:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				"src": "3581:15:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 4668,
																			"nodeType": "ExpressionStatement",
																			"src": "3581:15:25"
																		}
																	]
																}
															},
															"id": 4671,
															"nodeType": "IfStatement",
															"src": "3110:501:25",
															"trueBody": {
																"id": 4653,
																"nodeType": "Block",
																"src": "3228:294:25",
																"statements": [
																	{
																		"condition": {
																			"id": 4622,
																			"name": "decimals",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4583,
																			"src": "3250:8:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 4634,
																		"nodeType": "IfStatement",
																		"src": "3246:180:25",
																		"trueBody": {
																			"id": 4633,
																			"nodeType": "Block",
																			"src": "3260:166:25",
																			"statements": [
																				{
																					"condition": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 4625,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 4623,
																							"name": "_b",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4566,
																							"src": "3286:2:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "==",
																						"rightExpression": {
																							"hexValue": "30",
																							"id": 4624,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3292:1:25",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_0_by_1",
																								"typeString": "int_const 0"
																							},
																							"value": "0"
																						},
																						"src": "3286:7:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"falseBody": {
																						"id": 4631,
																						"nodeType": "Block",
																						"src": "3355:53:25",
																						"statements": [
																							{
																								"expression": {
																									"id": 4629,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "UnaryOperation",
																									"operator": "--",
																									"prefix": false,
																									"src": "3381:4:25",
																									"subExpression": {
																										"id": 4628,
																										"name": "_b",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4566,
																										"src": "3381:2:25",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"id": 4630,
																								"nodeType": "ExpressionStatement",
																								"src": "3381:4:25"
																							}
																						]
																					},
																					"id": 4632,
																					"nodeType": "IfStatement",
																					"src": "3282:126:25",
																					"trueBody": {
																						"id": 4627,
																						"nodeType": "Block",
																						"src": "3295:54:25",
																						"statements": [
																							{
																								"id": 4626,
																								"nodeType": "Break",
																								"src": "3321:5:25"
																							}
																						]
																					}
																				}
																			]
																		}
																	},
																	{
																		"expression": {
																			"id": 4637,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 4635,
																				"name": "mint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4579,
																				"src": "3443:4:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "*=",
																			"rightHandSide": {
																				"hexValue": "3130",
																				"id": 4636,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3451:2:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"src": "3443:10:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 4638,
																		"nodeType": "ExpressionStatement",
																		"src": "3443:10:25"
																	},
																	{
																		"expression": {
																			"id": 4651,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 4639,
																				"name": "mint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4579,
																				"src": "3471:4:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 4650,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"baseExpression": {
																										"id": 4644,
																										"name": "bresult",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4572,
																										"src": "3490:7:25",
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes_memory_ptr",
																											"typeString": "bytes memory"
																										}
																									},
																									"id": 4646,
																									"indexExpression": {
																										"id": 4645,
																										"name": "i",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4587,
																										"src": "3498:1:25",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "3490:10:25",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bytes1",
																										"typeString": "bytes1"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_bytes1",
																										"typeString": "bytes1"
																									}
																								],
																								"id": 4643,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "3484:5:25",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint8_$",
																									"typeString": "type(uint8)"
																								},
																								"typeName": {
																									"id": 4642,
																									"name": "uint8",
																									"nodeType": "ElementaryTypeName",
																									"src": "3484:5:25",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 4647,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "3484:17:25",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						],
																						"id": 4641,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3479:4:25",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 4640,
																							"name": "uint",
																							"nodeType": "ElementaryTypeName",
																							"src": "3479:4:25",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 4648,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3479:23:25",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"hexValue": "3438",
																					"id": 4649,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3505:2:25",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_48_by_1",
																						"typeString": "int_const 48"
																					},
																					"value": "48"
																				},
																				"src": "3479:28:25",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3471:36:25",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 4652,
																		"nodeType": "ExpressionStatement",
																		"src": "3471:36:25"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4593,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4590,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4587,
														"src": "3071:1:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 4591,
															"name": "bresult",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4572,
															"src": "3075:7:25",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 4592,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3083:6:25",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3075:14:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3071:18:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4673,
												"initializationExpression": {
													"assignments": [
														4587
													],
													"declarations": [
														{
															"constant": false,
															"id": 4587,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "3064:1:25",
															"nodeType": "VariableDeclaration",
															"scope": 4673,
															"src": "3059:6:25",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 4586,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "3059:4:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 4589,
													"initialValue": {
														"hexValue": "30",
														"id": 4588,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3068:1:25",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3059:10:25"
												},
												"loopExpression": {
													"expression": {
														"id": 4595,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "3091:3:25",
														"subExpression": {
															"id": 4594,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4587,
															"src": "3091:1:25",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4596,
													"nodeType": "ExpressionStatement",
													"src": "3091:3:25"
												},
												"nodeType": "ForStatement",
												"src": "3054:567:25"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4674,
														"name": "_b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4566,
														"src": "3634:2:25",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 4675,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3639:1:25",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3634:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4684,
												"nodeType": "IfStatement",
												"src": "3630:53:25",
												"trueBody": {
													"id": 4683,
													"nodeType": "Block",
													"src": "3642:41:25",
													"statements": [
														{
															"expression": {
																"id": 4681,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 4677,
																	"name": "mint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4579,
																	"src": "3656:4:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "*=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 4680,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 4678,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3664:2:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"id": 4679,
																		"name": "_b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4566,
																		"src": "3670:2:25",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3664:8:25",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3656:16:25",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 4682,
															"nodeType": "ExpressionStatement",
															"src": "3656:16:25"
														}
													]
												}
											},
											{
												"expression": {
													"id": 4685,
													"name": "mint",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4579,
													"src": "3699:4:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4570,
												"id": 4686,
												"nodeType": "Return",
												"src": "3692:11:25"
											}
										]
									},
									"id": 4688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "parseInt",
									"nameLocation": "2847:8:25",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4564,
												"mutability": "mutable",
												"name": "_a",
												"nameLocation": "2879:2:25",
												"nodeType": "VariableDeclaration",
												"scope": 4688,
												"src": "2865:16:25",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 4563,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2865:6:25",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4566,
												"mutability": "mutable",
												"name": "_b",
												"nameLocation": "2896:2:25",
												"nodeType": "VariableDeclaration",
												"scope": 4688,
												"src": "2891:7:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4565,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2891:4:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2855:49:25"
									},
									"returnParameters": {
										"id": 4570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4569,
												"mutability": "mutable",
												"name": "_parsedInt",
												"nameLocation": "2936:10:25",
												"nodeType": "VariableDeclaration",
												"scope": 4688,
												"src": "2928:18:25",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4568,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2928:7:25",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2927:20:25"
									},
									"scope": 4689,
									"src": "2838:872:25",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 4690,
							"src": "967:2745:25",
							"usedErrors": []
						}
					],
					"src": "32:3681:25"
				},
				"id": 25
			}
		}
	}
}