{
	"id": "cde640f4be4b8f304ee3b85f50b23cbd",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.10",
	"solcLongVersion": "0.8.10+commit.fc410830",
	"input": {
		"language": "Solidity",
		"sources": {
			"mosaic/Test.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport { IConstantFlowAgreementV1 } from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\nimport { ILensHub } from \"@aave/lens-protocol/contracts/interfaces/ILensHub.sol\";\n\ncontract Test {\n    function test() public view {\n    }\n}"
			},
			"@aave/lens-protocol/contracts/interfaces/ILensHub.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.10;\n\nimport {DataTypes} from '../libraries/DataTypes.sol';\n\n/**\n * @title ILensHub\n * @author Lens Protocol\n *\n * @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\n * You'll find all the events and external functions, as well as the reasoning behind them here.\n */\ninterface ILensHub {\n    /**\n     * @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\n     * the LensNFTBase contract.\n     *\n     * @param name The name to set for the hub NFT.\n     * @param symbol The symbol to set for the hub NFT.\n     * @param newGovernance The governance address to set.\n     */\n    function initialize(\n        string calldata name,\n        string calldata symbol,\n        address newGovernance\n    ) external;\n\n    /**\n     * @notice Sets the privileged governance role. This function can only be called by the current governance\n     * address.\n     *\n     * @param newGovernance The new governance address to set.\n     */\n    function setGovernance(address newGovernance) external;\n\n    /**\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\n     * can only be called by the governance address.\n     *\n     * @param newEmergencyAdmin The new emergency admin address to set.\n     */\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\n\n    /**\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\n     * can only be called by the governance address or the emergency admin address.\n     *\n     * Note that this reverts if the emergency admin calls it if:\n     *      1. The emergency admin is attempting to unpause.\n     *      2. The emergency admin is calling while the protocol is already paused.\n     *\n     * @param newState The state to set, as a member of the ProtocolState enum.\n     */\n    function setState(DataTypes.ProtocolState newState) external;\n\n    /**\n     * @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\n     * governance address.\n     *\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\n     * @param whitelist Whether or not the profile creator should be whitelisted.\n     */\n    function whitelistProfileCreator(address profileCreator, bool whitelist) external;\n\n    /**\n     * @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\n     * governance address.\n     *\n     * @param followModule The follow module contract address to add or remove from the whitelist.\n     * @param whitelist Whether or not the follow module should be whitelisted.\n     */\n    function whitelistFollowModule(address followModule, bool whitelist) external;\n\n    /**\n     * @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\n     * governance address.\n     *\n     * @param referenceModule The reference module contract to add or remove from the whitelist.\n     * @param whitelist Whether or not the reference module should be whitelisted.\n     */\n    function whitelistReferenceModule(address referenceModule, bool whitelist) external;\n\n    /**\n     * @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\n     * governance address.\n     *\n     * @param collectModule The collect module contract address to add or remove from the whitelist.\n     * @param whitelist Whether or not the collect module should be whitelisted.\n     */\n    function whitelistCollectModule(address collectModule, bool whitelist) external;\n\n    /**\n     * @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\n     * function must be called by a whitelisted profile creator.\n     *\n     * @param vars A CreateProfileData struct containing the following params:\n     *      to: The address receiving the profile.\n     *      handle: The handle to set for the profile, must be unique and non-empty.\n     *      imageURI: The URI to set for the profile image.\n     *      followModule: The follow module to use, can be the zero address.\n     *      followModuleInitData: The follow module initialization data, if any.\n     */\n    function createProfile(DataTypes.CreateProfileData calldata vars) external returns (uint256);\n\n    /**\n     * @notice Sets the mapping between wallet and its main profile identity.\n     *\n     * @param profileId The token ID of the profile to set as the main profile identity.\n     */\n    function setDefaultProfile(uint256 profileId) external;\n\n    /**\n     * @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\n     *\n     * @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setDefaultProfileWithSig(DataTypes.SetDefaultProfileWithSigData calldata vars)\n        external;\n\n    /**\n     * @notice Sets a profile's follow module, must be called by the profile owner.\n     *\n     * @param profileId The token ID of the profile to set the follow module for.\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\n     */\n    function setFollowModule(\n        uint256 profileId,\n        address followModule,\n        bytes calldata followModuleInitData\n    ) external;\n\n    /**\n     * @notice Sets a profile's follow module via signature with the specified parameters.\n     *\n     * @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setFollowModuleWithSig(DataTypes.SetFollowModuleWithSigData calldata vars) external;\n\n    /**\n     * @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\n     *\n     * @param profileId The token ID of the profile of the profile to set the dispatcher for.\n     * @param dispatcher The dispatcher address to set for the given profile ID.\n     */\n    function setDispatcher(uint256 profileId, address dispatcher) external;\n\n    /**\n     * @notice Sets a profile's dispatcher via signature with the specified parameters.\n     *\n     * @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setDispatcherWithSig(DataTypes.SetDispatcherWithSigData calldata vars) external;\n\n    /**\n     * @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\n     *\n     * @param profileId The token ID of the profile of the profile to set the URI for.\n     * @param imageURI The URI to set for the given profile.\n     */\n    function setProfileImageURI(uint256 profileId, string calldata imageURI) external;\n\n    /**\n     * @notice Sets a profile's URI via signature with the specified parameters.\n     *\n     * @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setProfileImageURIWithSig(DataTypes.SetProfileImageURIWithSigData calldata vars)\n        external;\n\n    /**\n     * @notice Sets a followNFT URI for a given profile's follow NFT.\n     *\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\n     * @param followNFTURI The follow NFT URI to set.\n     */\n    function setFollowNFTURI(uint256 profileId, string calldata followNFTURI) external;\n\n    /**\n     * @notice Sets a followNFT URI via signature with the specified parameters.\n     *\n     * @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\n     */\n    function setFollowNFTURIWithSig(DataTypes.SetFollowNFTURIWithSigData calldata vars) external;\n\n    /**\n     * @notice Publishes a post to a given profile, must be called by the profile owner.\n     *\n     * @param vars A PostData struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the post's publication ID.\n     */\n    function post(DataTypes.PostData calldata vars) external returns (uint256);\n\n    /**\n     * @notice Publishes a post to a given profile via signature with the specified parameters.\n     *\n     * @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\n     *\n     * @return uint256 An integer representing the post's publication ID.\n     */\n    function postWithSig(DataTypes.PostWithSigData calldata vars) external returns (uint256);\n\n    /**\n     * @notice Publishes a comment to a given profile, must be called by the profile owner.\n     *\n     * @param vars A CommentData struct containing the needed parameters.\n     *\n     * @return uint256 An integer representing the comment's publication ID.\n     */\n    function comment(DataTypes.CommentData calldata vars) external returns (uint256);\n\n    /**\n     * @notice Publishes a comment to a given profile via signature with the specified parameters.\n     *\n     * @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\n     *\n     * @return uint256 An integer representing the comment's publication ID.\n     */\n    function commentWithSig(DataTypes.CommentWithSigData calldata vars) external returns (uint256);\n\n    /**\n     * @notice Publishes a mirror to a given profile, must be called by the profile owner.\n     *\n     * @param vars A MirrorData struct containing the necessary parameters.\n     *\n     * @return uint256 An integer representing the mirror's publication ID.\n     */\n    function mirror(DataTypes.MirrorData calldata vars) external returns (uint256);\n\n    /**\n     * @notice Publishes a mirror to a given profile via signature with the specified parameters.\n     *\n     * @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\n     *\n     * @return uint256 An integer representing the mirror's publication ID.\n     */\n    function mirrorWithSig(DataTypes.MirrorWithSigData calldata vars) external returns (uint256);\n\n    /**\n     * @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\n     *\n     * NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\n     *\n     * @param profileIds The token ID array of the profiles to follow.\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\n     *\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\n     */\n    function follow(uint256[] calldata profileIds, bytes[] calldata datas)\n        external\n        returns (uint256[] memory);\n\n    /**\n     * @notice Follows a given profile via signature with the specified parameters.\n     *\n     * @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\n     * and an EIP712Signature struct.\n     *\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\n     */\n    function followWithSig(DataTypes.FollowWithSigData calldata vars)\n        external\n        returns (uint256[] memory);\n\n    /**\n     * @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\n     *\n     * @param profileId The token ID of the profile that published the publication to collect.\n     * @param pubId The publication to collect's publication ID.\n     * @param data The arbitrary data to pass to the collect module if needed.\n     *\n     * @return uint256 An integer representing the minted token ID.\n     */\n    function collect(\n        uint256 profileId,\n        uint256 pubId,\n        bytes calldata data\n    ) external returns (uint256);\n\n    /**\n     * @notice Collects a given publication via signature with the specified parameters.\n     *\n     * @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\n     * an EIP712Signature struct.\n     *\n     * @return uint256 An integer representing the minted token ID.\n     */\n    function collectWithSig(DataTypes.CollectWithSigData calldata vars) external returns (uint256);\n\n    /**\n     * @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\n     * followNFT transfers.\n     *\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\n     * @param followNFTId The followNFT being transferred's token ID.\n     * @param from The address the followNFT is being transferred from.\n     * @param to The address the followNFT is being transferred to.\n     */\n    function emitFollowNFTTransferEvent(\n        uint256 profileId,\n        uint256 followNFTId,\n        address from,\n        address to\n    ) external;\n\n    /**\n     * @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\n     * collectNFT transfers.\n     *\n     * @param profileId The token ID of the profile associated with the collect NFT being transferred.\n     * @param pubId The publication ID associated with the collect NFT being transferred.\n     * @param collectNFTId The collectNFT being transferred's token ID.\n     * @param from The address the collectNFT is being transferred from.\n     * @param to The address the collectNFT is being transferred to.\n     */\n    function emitCollectNFTTransferEvent(\n        uint256 profileId,\n        uint256 pubId,\n        uint256 collectNFTId,\n        address from,\n        address to\n    ) external;\n\n    /// ************************\n    /// *****VIEW FUNCTIONS*****\n    /// ************************\n\n    /**\n     * @notice Returns whether or not a profile creator is whitelisted.\n     *\n     * @param profileCreator The address of the profile creator to check.\n     *\n     * @return bool True if the profile creator is whitelisted, false otherwise.\n     */\n    function isProfileCreatorWhitelisted(address profileCreator) external view returns (bool);\n\n    /**\n     * @notice Returns default profile for a given wallet address\n     *\n     * @param wallet The address to find the default mapping\n     *\n     * @return uint256 The default profile id, which will be 0 if not mapped.\n     */\n    function defaultProfile(address wallet) external view returns (uint256);\n\n    /**\n     * @notice Returns whether or not a follow module is whitelisted.\n     *\n     * @param followModule The address of the follow module to check.\n     *\n     * @return bool True if the the follow module is whitelisted, false otherwise.\n     */\n    function isFollowModuleWhitelisted(address followModule) external view returns (bool);\n\n    /**\n     * @notice Returns whether or not a reference module is whitelisted.\n     *\n     * @param referenceModule The address of the reference module to check.\n     *\n     * @return bool True if the the reference module is whitelisted, false otherwise.\n     */\n    function isReferenceModuleWhitelisted(address referenceModule) external view returns (bool);\n\n    /**\n     * @notice Returns whether or not a collect module is whitelisted.\n     *\n     * @param collectModule The address of the collect module to check.\n     *\n     * @return bool True if the the collect module is whitelisted, false otherwise.\n     */\n    function isCollectModuleWhitelisted(address collectModule) external view returns (bool);\n\n    /**\n     * @notice Returns the currently configured governance address.\n     *\n     * @return address The address of the currently configured governance.\n     */\n    function getGovernance() external view returns (address);\n\n    /**\n     * @notice Returns the dispatcher associated with a profile.\n     *\n     * @param profileId The token ID of the profile to query the dispatcher for.\n     *\n     * @return address The dispatcher address associated with the profile.\n     */\n    function getDispatcher(uint256 profileId) external view returns (address);\n\n    /**\n     * @notice Returns the publication count for a given profile.\n     *\n     * @param profileId The token ID of the profile to query.\n     *\n     * @return uint256 The number of publications associated with the queried profile.\n     */\n    function getPubCount(uint256 profileId) external view returns (uint256);\n\n    /**\n     * @notice Returns the followNFT associated with a given profile, if any.\n     *\n     * @param profileId The token ID of the profile to query the followNFT for.\n     *\n     * @return address The followNFT associated with the given profile.\n     */\n    function getFollowNFT(uint256 profileId) external view returns (address);\n\n    /**\n     * @notice Returns the followNFT URI associated with a given profile.\n     *\n     * @param profileId The token ID of the profile to query the followNFT URI for.\n     *\n     * @return string The followNFT URI associated with the given profile.\n     */\n    function getFollowNFTURI(uint256 profileId) external view returns (string memory);\n\n    /**\n     * @notice Returns the collectNFT associated with a given publication, if any.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return address The address of the collectNFT associated with the queried publication.\n     */\n    function getCollectNFT(uint256 profileId, uint256 pubId) external view returns (address);\n\n    /**\n     * @notice Returns the follow module associated witha  given profile, if any.\n     *\n     * @param profileId The token ID of the profile to query the follow module for.\n     *\n     * @return address The address of the follow module associated with the given profile.\n     */\n    function getFollowModule(uint256 profileId) external view returns (address);\n\n    /**\n     * @notice Returns the collect module associated with a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return address The address of the collect module associated with the queried publication.\n     */\n    function getCollectModule(uint256 profileId, uint256 pubId) external view returns (address);\n\n    /**\n     * @notice Returns the reference module associated witha  given profile, if any.\n     *\n     * @param profileId The token ID of the profile that published the publication to querythe reference module for.\n     * @param pubId The publication ID of the publication to query the reference module for.\n     *\n     * @return address The address of the reference module associated with the given profile.\n     */\n    function getReferenceModule(uint256 profileId, uint256 pubId) external view returns (address);\n\n    /**\n     * @notice Returns the handle associated with a profile.\n     *\n     * @param profileId The token ID of the profile to query the handle for.\n     *\n     * @return string The handle associated with the profile.\n     */\n    function getHandle(uint256 profileId) external view returns (string memory);\n\n    /**\n     * @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query the pointer for.\n     * @param pubId The publication ID of the publication to query the pointer for.\n     *\n     * @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\n     * publication ID of the publication the current publication is pointing to.\n     */\n    function getPubPointer(uint256 profileId, uint256 pubId)\n        external\n        view\n        returns (uint256, uint256);\n\n    /**\n     * @notice Returns the URI associated with a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return string The URI associated with a given publication.\n     */\n    function getContentURI(uint256 profileId, uint256 pubId) external view returns (string memory);\n\n    /**\n     * @notice Returns the profile token ID according to a given handle.\n     *\n     * @param handle The handle to resolve the profile token ID with.\n     *\n     * @return uint256 The profile ID the passed handle points to.\n     */\n    function getProfileIdByHandle(string calldata handle) external view returns (uint256);\n\n    /**\n     * @notice Returns the full profile struct associated with a given profile token ID.\n     *\n     * @param profileId The token ID of the profile to query.\n     *\n     * @return ProfileStruct The profile struct of the given profile.\n     */\n    function getProfile(uint256 profileId) external view returns (DataTypes.ProfileStruct memory);\n\n    /**\n     * @notice Returns the full publication struct for a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return PublicationStruct The publication struct associated with the queried publication.\n     */\n    function getPub(uint256 profileId, uint256 pubId)\n        external\n        view\n        returns (DataTypes.PublicationStruct memory);\n\n    /**\n     * @notice Returns the publication type associated with a given publication.\n     *\n     * @param profileId The token ID of the profile that published the publication to query.\n     * @param pubId The publication ID of the publication to query.\n     *\n     * @return PubType The publication type, as a member of an enum (either \"post,\" \"comment\" or \"mirror\").\n     */\n    function getPubType(uint256 profileId, uint256 pubId) external view returns (DataTypes.PubType);\n\n    /**\n     * @notice Returns the follow NFT implementation address.\n     *\n     * @return address The follow NFT implementation address.\n     */\n    function getFollowNFTImpl() external view returns (address);\n\n    /**\n     * @notice Returns the collect NFT implementation address.\n     *\n     * @return address The collect NFT implementation address.\n     */\n    function getCollectNFTImpl() external view returns (address);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n/**\n * @title Constant Flow Agreement interface\n * @author Superfluid\n */\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error CFA_ACL_NO_SENDER_CREATE();               // 0x4b993136\n    error CFA_ACL_NO_SENDER_UPDATE();               // 0xedfa0d3b\n    error CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS(); // 0xa3eab6ac\n    error CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS(); // 0xac434b5f\n    error CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS(); // 0xe30f1bff\n    error CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED();   // 0xa0645c1f\n    error CFA_ACL_UNCLEAN_PERMISSIONS();            // 0x7939d66c\n    error CFA_ACL_NO_SENDER_FLOW_OPERATOR();        // 0xb0ed394d\n    error CFA_ACL_NO_NEGATIVE_ALLOWANCE();          // 0x86e0377d\n    error CFA_FLOW_ALREADY_EXISTS();                // 0x801b6863\n    error CFA_FLOW_DOES_NOT_EXIST();                // 0x5a32bf24\n    error CFA_INSUFFICIENT_BALANCE();               // 0xea76c9b3\n    error CFA_ZERO_ADDRESS_SENDER();                // 0x1ce9b067\n    error CFA_ZERO_ADDRESS_RECEIVER();              // 0x78e02b2a\n    error CFA_HOOK_OUT_OF_GAS();                    // 0x9f76430b\n    error CFA_DEPOSIT_TOO_BIG();                    // 0x752c2b9c\n    error CFA_FLOW_RATE_TOO_BIG();                  // 0x0c9c55c1\n    error CFA_NON_CRITICAL_SENDER();                // 0xce11b5d1\n    error CFA_INVALID_FLOW_RATE();                  // 0x91acad16\n    error CFA_NO_SELF_FLOW();                       // 0xa47338ef\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    /**\n     * @notice Get the maximum flow rate allowed with the deposit\n     * @dev The deposit is clipped and rounded down\n     * @param deposit Deposit amount used for creating the flow\n     * @return flowRate The maximum flow rate\n     */\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Get the deposit required for creating the flow\n     * @dev Calculates the deposit based on the liquidationPeriod and flowRate\n     * @param flowRate Flow rate to be tested\n     * @return deposit The deposit amount based on flowRate and liquidationPeriod\n     * @custom:note \n     * - if calculated deposit (flowRate * liquidationPeriod) is less\n     *   than the minimum deposit, we use the minimum deposit otherwise\n     *   we use the calculated deposit\n     */\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view virtual\n        returns (uint256 deposit);\n\n    /**\n     * @dev Returns whether it is the patrician period based on host.getNow()\n     * @param account The account we are interested in\n     * @return isCurrentlyPatricianPeriod Whether it is currently the patrician period dictated by governance\n     * @return timestamp The value of host.getNow()\n     */\n    function isPatricianPeriodNow(\n        ISuperfluidToken token,\n        address account)\n        external view virtual\n        returns (bool isCurrentlyPatricianPeriod, uint256 timestamp);\n\n    /**\n     * @dev Returns whether it is the patrician period based on timestamp\n     * @param account The account we are interested in\n     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n     * @return bool Whether it is currently the patrician period dictated by governance\n     */\n    function isPatricianPeriod(\n        ISuperfluidToken token,\n        address account,\n        uint256 timestamp\n    )\n        public view virtual\n        returns (bool);\n\n    /**\n     * @dev msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param permissions A bitmask representation of the granted permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function updateFlowOperatorPermissions(\n        ISuperfluidToken token,\n        address flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance,\n        bytes calldata ctx\n    ) \n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\n     * @dev if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param addedFlowRateAllowance The flow rate allowance delta\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @return newCtx The new context bytes\n     */\n    function increaseFlowRateAllowance(\n        ISuperfluidToken token,\n        address flowOperator,\n        int96 addedFlowRateAllowance,\n        bytes calldata ctx\n    ) external virtual returns(bytes memory newCtx);\n\n    /**\n     * @dev msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`\n     * @dev if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param subtractedFlowRateAllowance The flow rate allowance delta\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @return newCtx The new context bytes\n     */\n    function decreaseFlowRateAllowance(\n        ISuperfluidToken token,\n        address flowOperator,\n        int96 subtractedFlowRateAllowance,\n        bytes calldata ctx\n    ) external virtual returns(bytes memory newCtx);\n\n    /**\n     * @dev msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function authorizeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n     /**\n     * @notice msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\n     * @dev `permissions` and `flowRateAllowance` will both be set to 0\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function revokeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\n     * @param token Super token address\n     * @param sender The permission granter address\n     * @param flowOperator The permission grantee address\n     * @return flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorData(\n       ISuperfluidToken token,\n       address sender,\n       address flowOperator\n    )\n        public view virtual\n        returns (\n            bytes32 flowOperatorId,\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Get flow operator using flowOperatorId\n     * @param token Super token address\n     * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorDataByID(\n       ISuperfluidToken token,\n       bytes32 flowOperatorId\n    )\n        external view virtual\n        returns (\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Create a flow betwen ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementCreated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - A deposit is taken as safety margin for the solvency agents\n     * - A extra gas fee may be taken to pay for solvency agent liquidations\n     */\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Create a flow between sender and receiver\n    * @dev A flow created by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function createFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Update the flow rate between ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementUpdated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Only the flow sender may update the flow rate\n     * - Even if the flow rate is zero, the flow is not deleted\n     * from the system\n     * - Deposit amount will be adjusted accordingly\n     * - No new gas fee is charged\n     */\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Update a flow between sender and receiver\n    * @dev A flow updated by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function updateFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev Get the flow data between `sender` and `receiver` of `token`\n     * @param token Super token address\n     * @param sender Flow receiver\n     * @param receiver Flow sender\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The amount of deposit the flow\n     * @return owedDeposit The amount of owed deposit of the flow\n     */\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @notice Get flow data using agreementId\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param agreementId The agreement ID\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The deposit amount of the flow\n     * @return owedDeposit The owed deposit amount of the flow\n     */\n    function getFlowByID(\n       ISuperfluidToken token,\n       bytes32 agreementId\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get the aggregated flow info of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return timestamp Timestamp of when a flow was last updated for account\n     * @return flowRate The net flow rate of token for account\n     * @return deposit The sum of all deposits for account's flows\n     * @return owedDeposit The sum of all owed deposits for account's flows\n     */\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @dev Get the net flow rate of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return flowRate Net flow rate\n     */\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     *\n     * @custom:callbacks \n     * - AgreementTerminated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Both flow sender and receiver may delete the flow\n     * - If Sender account is insolvent or in critical state, a solvency agent may\n     *   also terminate the agreement\n     * - Gas fee may be returned to the sender\n     */\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev A flow deleted by an approved flow operator (see above for details on callbacks)\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     */\n    function deleteFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n     \n    /**\n     * @dev Flow operator updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param flowOperator Flow operator address\n     * @param permissions Octo bitmask representation of permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    event FlowOperatorUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance\n    );\n\n    /**\n     * @dev Flow updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param receiver Flow recipient address\n     * @param flowRate Flow rate in amount per second for this flow\n     * @param totalSenderFlowRate Total flow rate in amount per second for the sender\n     * @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n     * @param userData The user provided data\n     *\n     */\n    event FlowUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed receiver,\n        int96 flowRate,\n        int256 totalSenderFlowRate,\n        int256 totalReceiverFlowRate,\n        bytes userData\n    );\n\n    /**\n     * @dev Flow updated extension event\n     * @param flowOperator Flow operator address - the Context.msgSender\n     * @param deposit The deposit amount for the stream\n     */\n    event FlowUpdatedExtension(\n        address indexed flowOperator,\n        uint256 deposit\n    );\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n/**\n * @title Superfluid token interface\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_TOKEN_AGREEMENT_ALREADY_EXISTS();  // 0xf05521f6\n    error SF_TOKEN_AGREEMENT_DOES_NOT_EXIST();  // 0xdae18809\n    error SF_TOKEN_BURN_INSUFFICIENT_BALANCE(); // 0x10ecdf44\n    error SF_TOKEN_MOVE_INSUFFICIENT_BALANCE(); // 0x2f4cb941\n    error SF_TOKEN_ONLY_LISTED_AGREEMENT();     // 0xc9ff6644\n    error SF_TOKEN_ONLY_HOST();                 // 0xc51efddd\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\n     *\n     * @custom:note \n     * - version: 1\n     * - liquidationType key:\n     *    - 0 = reward account receives reward (PIC period)\n     *    - 1 = liquidator account receives reward (Pleb period)\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\n     */\n    struct LiquidationTypeData {\n        uint256 version;\n        uint8 liquidationType;\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @notice Calculate the realtime balance given the current host.getNow() value\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\n     * @param account for the query\n     * @return availableBalance Real-time balance\n     * @return deposit Account deposit\n     * @return owedDeposit Account owed Deposit\n     */\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @notice Check if account is critical\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @notice Check if account is critical now (current host.getNow())\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @notice Check if account is solvent\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @notice Check if account is solvent now\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @notice Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement created event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement updated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n    /**\n     * @dev Agreement terminated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * @custom:note \n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of an agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @notice Settle balance from an account by the agreement\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Make liquidation payouts (v2)\n     * @param id Agreement ID\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n     * @param targetAccount Account to be liquidated\n     * @param rewardAmount The amount the rewarded account will receive\n     * @param targetAccountBalanceDelta The delta amount the target account balance should change by\n     *\n     * @custom:note \n     * - If a bailout is required (bailoutAmount > 0)\n     *   - the actual reward (single deposit) goes to the executor,\n     *   - while the reward account becomes the bailout account\n     *   - total bailout include: bailout amount + reward amount\n     *   - the targetAccount will be bailed out\n     * - If a bailout is not required\n     *   - the targetAccount will pay the rewardAmount\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function makeLiquidationPayoutsV2\n    (\n        bytes32 id,\n        bytes memory liquidationTypeData,\n        address liquidatorAccount,\n        bool useDefaultRewardAccount,\n        address targetAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta\n    ) external;\n    /**\n     * @dev Agreement liquidation event v2 (including agent account)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param targetAccount Account of the stream sender\n     * @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n     * @param rewardAmount The amount the reward recipient account balance should change by\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if the agreement is liquidated during the PIC period\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the targetAccount is insolvent\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\n     *   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n     *   - the targetAccount will receive the bailoutAmount\n     */\n    event AgreementLiquidatedV2(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed liquidatorAccount,\n        address indexed targetAccount,\n        address rewardAmountReceiver,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta,\n        bytes liquidationTypeData\n    );\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n    /**************************************************************************\n     * DEPRECATED\n     *************************************************************************/\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param bondAccount Account that collect the reward or bailout accounts\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of liquidation bailouot\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if bailout is equal to 0, then\n     *   - the bondAccount will get the rewardAmount,\n     *   - the penaltyAccount will pay for the rewardAmount.\n     * - if bailout is larger than 0, then\n     *   - the liquidatorAccount will get the rewardAmouont,\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\n     */\n    event AgreementLiquidatedBy(\n        address liquidatorAccount,\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed bondAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    );\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Super agreement interface\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Get the type of the agreement class\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class\n     * @param account Account the state belongs to\n     * @param time Time used for the calculation\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n     * @return deposit Account deposit amount of this agreement\n     * @return owedDeposit Account owed deposit amount of this agreement\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
			},
			"@aave/lens-protocol/contracts/libraries/DataTypes.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.10;\n\n/**\n * @title DataTypes\n * @author Lens Protocol\n *\n * @notice A standard library of data types used throughout the Lens Protocol.\n */\nlibrary DataTypes {\n    /**\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\n     *\n     * @param Unpaused The fully unpaused state.\n     * @param PublishingPaused The state where only publication creation functions are paused.\n     * @param Paused The fully paused state.\n     */\n    enum ProtocolState {\n        Unpaused,\n        PublishingPaused,\n        Paused\n    }\n\n    /**\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\n     *\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\n     * @param Nonexistent An indicator showing the queried publication does not exist.\n     */\n    enum PubType {\n        Post,\n        Comment,\n        Mirror,\n        Nonexistent\n    }\n\n    /**\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\n     *\n     * @param v The signature's recovery parameter.\n     * @param r The signature's r parameter.\n     * @param s The signature's s parameter\n     * @param deadline The signature's deadline\n     */\n    struct EIP712Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 deadline;\n    }\n\n    /**\n     * @notice A struct containing profile data.\n     *\n     * @param pubCount The number of publications made to this profile.\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\n     * @param handle The profile's associated handle.\n     * @param imageURI The URI to be used for the profile's image.\n     * @param followNFTURI The URI to be used for the follow NFT.\n     */\n    struct ProfileStruct {\n        uint256 pubCount;\n        address followModule;\n        address followNFT;\n        string handle;\n        string imageURI;\n        string followNFTURI;\n    }\n\n    /**\n     * @notice A struct containing data associated with each new publication.\n     *\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\n     * @param contentURI The URI associated with this publication.\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\n     */\n    struct PublicationStruct {\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        string contentURI;\n        address referenceModule;\n        address collectModule;\n        address collectNFT;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `createProfile()` function.\n     *\n     * @param to The address receiving the profile.\n     * @param handle The handle to set for the profile, must be unique and non-empty.\n     * @param imageURI The URI to set for the profile image.\n     * @param followModule The follow module to use, can be the zero address.\n     * @param followModuleInitData The follow module initialization data, if any.\n     * @param followNFTURI The URI to use for the follow NFT.\n     */\n    struct CreateProfileData {\n        address to;\n        string handle;\n        string imageURI;\n        address followModule;\n        bytes followModuleInitData;\n        string followNFTURI;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\n     *\n     * @param wallet The address of the wallet setting the default profile.\n     * @param profileId The token ID of the profile which will be set as default, or zero.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetDefaultProfileWithSigData {\n        address wallet;\n        uint256 profileId;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to change the followModule for.\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetFollowModuleWithSigData {\n        uint256 profileId;\n        address followModule;\n        bytes followModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to set the dispatcher for.\n     * @param dispatcher The dispatcher address to set for the profile.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetDispatcherWithSigData {\n        uint256 profileId;\n        address dispatcher;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to set the URI for.\n     * @param imageURI The URI to set for the given profile image.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct SetProfileImageURIWithSigData {\n        uint256 profileId;\n        string imageURI;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\n     * @param followNFTURI The follow NFT URI to set.\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\n     */\n    struct SetFollowNFTURIWithSigData {\n        uint256 profileId;\n        string followNFTURI;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `post()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param collectModule The collect module to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct PostData {\n        uint256 profileId;\n        string contentURI;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\n     * the regular `post()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param collectModule The collectModule to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct PostWithSigData {\n        uint256 profileId;\n        string contentURI;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `comment()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param profileIdPointed The profile token ID to point the comment to.\n     * @param pubIdPointed The publication ID to point the comment to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param collectModule The collect module to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct CommentData {\n        uint256 profileId;\n        string contentURI;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\n     * the regular `comment()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param contentURI The URI to set for this new publication.\n     * @param profileIdPointed The profile token ID to point the comment to.\n     * @param pubIdPointed The publication ID to point the comment to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param collectModule The collectModule to set for this new publication.\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct CommentWithSigData {\n        uint256 profileId;\n        string contentURI;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address collectModule;\n        bytes collectModuleInitData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `mirror()` function.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param profileIdPointed The profile token ID to point the mirror to.\n     * @param pubIdPointed The publication ID to point the mirror to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     */\n    struct MirrorData {\n        uint256 profileId;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\n     * the regular `mirror()` function, with an added EIP712Signature.\n     *\n     * @param profileId The token ID of the profile to publish to.\n     * @param profileIdPointed The profile token ID to point the mirror to.\n     * @param pubIdPointed The publication ID to point the mirror to.\n     * @param referenceModuleData The data passed to the reference module.\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\n     */\n    struct MirrorWithSigData {\n        uint256 profileId;\n        uint256 profileIdPointed;\n        uint256 pubIdPointed;\n        bytes referenceModuleData;\n        address referenceModule;\n        bytes referenceModuleInitData;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\n     *\n     * @param follower The follower which is the message signer.\n     * @param profileIds The array of token IDs of the profiles to follow.\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\n     * @param sig The EIP712Signature struct containing the follower's signature.\n     */\n    struct FollowWithSigData {\n        address follower;\n        uint256[] profileIds;\n        bytes[] datas;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\n     *\n     * @param collector The collector which is the message signer.\n     * @param profileId The token ID of the profile that published the publication to collect.\n     * @param pubId The publication to collect's publication ID.\n     * @param data The arbitrary data to pass to the collectModule if needed.\n     * @param sig The EIP712Signature struct containing the collector's signature.\n     */\n    struct CollectWithSigData {\n        address collector;\n        uint256 profileId;\n        uint256 pubId;\n        bytes data;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\n     *\n     * @param profileId The profile ID for which to set the metadata.\n     * @param metadata The metadata string to set for the profile and user.\n     * @param sig The EIP712Signature struct containing the user's signature.\n     */\n    struct SetProfileMetadataWithSigData {\n        uint256 profileId;\n        string metadata;\n        EIP712Signature sig;\n    }\n\n    /**\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\n     *\n     * @param follower The follower which is the message signer.\n     * @param profileIds The token ID array of the profiles.\n     * @param enables The array of booleans to enable/disable follows.\n     * @param sig The EIP712Signature struct containing the follower's signature.\n     */\n    struct ToggleFollowWithSigData {\n        address follower;\n        uint256[] profileIds;\n        bool[] enables;\n        EIP712Signature sig;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@aave/lens-protocol/contracts/interfaces/ILensHub.sol": {
				"ILensHub": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pubId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "collect",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "collector",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "pubId",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.CollectWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "collectWithSig",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "contentURI",
											"type": "string"
										},
										{
											"internalType": "uint256",
											"name": "profileIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "pubIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleData",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "collectModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "collectModuleInitData",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "referenceModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleInitData",
											"type": "bytes"
										}
									],
									"internalType": "struct DataTypes.CommentData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "comment",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "contentURI",
											"type": "string"
										},
										{
											"internalType": "uint256",
											"name": "profileIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "pubIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleData",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "collectModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "collectModuleInitData",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "referenceModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleInitData",
											"type": "bytes"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.CommentWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "commentWithSig",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "string",
											"name": "handle",
											"type": "string"
										},
										{
											"internalType": "string",
											"name": "imageURI",
											"type": "string"
										},
										{
											"internalType": "address",
											"name": "followModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "followModuleInitData",
											"type": "bytes"
										},
										{
											"internalType": "string",
											"name": "followNFTURI",
											"type": "string"
										}
									],
									"internalType": "struct DataTypes.CreateProfileData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "createProfile",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "wallet",
									"type": "address"
								}
							],
							"name": "defaultProfile",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pubId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "collectNFTId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "emitCollectNFTTransferEvent",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "followNFTId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "emitFollowNFTTransferEvent",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "profileIds",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes[]",
									"name": "datas",
									"type": "bytes[]"
								}
							],
							"name": "follow",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "follower",
											"type": "address"
										},
										{
											"internalType": "uint256[]",
											"name": "profileIds",
											"type": "uint256[]"
										},
										{
											"internalType": "bytes[]",
											"name": "datas",
											"type": "bytes[]"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.FollowWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "followWithSig",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pubId",
									"type": "uint256"
								}
							],
							"name": "getCollectModule",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pubId",
									"type": "uint256"
								}
							],
							"name": "getCollectNFT",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getCollectNFTImpl",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pubId",
									"type": "uint256"
								}
							],
							"name": "getContentURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								}
							],
							"name": "getDispatcher",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								}
							],
							"name": "getFollowModule",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								}
							],
							"name": "getFollowNFT",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getFollowNFTImpl",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								}
							],
							"name": "getFollowNFTURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getGovernance",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								}
							],
							"name": "getHandle",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								}
							],
							"name": "getProfile",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "pubCount",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "followModule",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "followNFT",
											"type": "address"
										},
										{
											"internalType": "string",
											"name": "handle",
											"type": "string"
										},
										{
											"internalType": "string",
											"name": "imageURI",
											"type": "string"
										},
										{
											"internalType": "string",
											"name": "followNFTURI",
											"type": "string"
										}
									],
									"internalType": "struct DataTypes.ProfileStruct",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "handle",
									"type": "string"
								}
							],
							"name": "getProfileIdByHandle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pubId",
									"type": "uint256"
								}
							],
							"name": "getPub",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "pubIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "contentURI",
											"type": "string"
										},
										{
											"internalType": "address",
											"name": "referenceModule",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "collectModule",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "collectNFT",
											"type": "address"
										}
									],
									"internalType": "struct DataTypes.PublicationStruct",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								}
							],
							"name": "getPubCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pubId",
									"type": "uint256"
								}
							],
							"name": "getPubPointer",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pubId",
									"type": "uint256"
								}
							],
							"name": "getPubType",
							"outputs": [
								{
									"internalType": "enum DataTypes.PubType",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pubId",
									"type": "uint256"
								}
							],
							"name": "getReferenceModule",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "newGovernance",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "collectModule",
									"type": "address"
								}
							],
							"name": "isCollectModuleWhitelisted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "followModule",
									"type": "address"
								}
							],
							"name": "isFollowModuleWhitelisted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "profileCreator",
									"type": "address"
								}
							],
							"name": "isProfileCreatorWhitelisted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "referenceModule",
									"type": "address"
								}
							],
							"name": "isReferenceModuleWhitelisted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "profileIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "pubIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleData",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "referenceModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleInitData",
											"type": "bytes"
										}
									],
									"internalType": "struct DataTypes.MirrorData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "mirror",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "profileIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "pubIdPointed",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleData",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "referenceModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleInitData",
											"type": "bytes"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.MirrorWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "mirrorWithSig",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "contentURI",
											"type": "string"
										},
										{
											"internalType": "address",
											"name": "collectModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "collectModuleInitData",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "referenceModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleInitData",
											"type": "bytes"
										}
									],
									"internalType": "struct DataTypes.PostData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "post",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "contentURI",
											"type": "string"
										},
										{
											"internalType": "address",
											"name": "collectModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "collectModuleInitData",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "referenceModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "referenceModuleInitData",
											"type": "bytes"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.PostWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "postWithSig",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								}
							],
							"name": "setDefaultProfile",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "wallet",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.SetDefaultProfileWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "setDefaultProfileWithSig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "dispatcher",
									"type": "address"
								}
							],
							"name": "setDispatcher",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "dispatcher",
											"type": "address"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.SetDispatcherWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "setDispatcherWithSig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newEmergencyAdmin",
									"type": "address"
								}
							],
							"name": "setEmergencyAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "followModule",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "followModuleInitData",
									"type": "bytes"
								}
							],
							"name": "setFollowModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "followModule",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "followModuleInitData",
											"type": "bytes"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.SetFollowModuleWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "setFollowModuleWithSig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "followNFTURI",
									"type": "string"
								}
							],
							"name": "setFollowNFTURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "followNFTURI",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.SetFollowNFTURIWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "setFollowNFTURIWithSig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newGovernance",
									"type": "address"
								}
							],
							"name": "setGovernance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "profileId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "imageURI",
									"type": "string"
								}
							],
							"name": "setProfileImageURI",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "profileId",
											"type": "uint256"
										},
										{
											"internalType": "string",
											"name": "imageURI",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "uint8",
													"name": "v",
													"type": "uint8"
												},
												{
													"internalType": "bytes32",
													"name": "r",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "s",
													"type": "bytes32"
												},
												{
													"internalType": "uint256",
													"name": "deadline",
													"type": "uint256"
												}
											],
											"internalType": "struct DataTypes.EIP712Signature",
											"name": "sig",
											"type": "tuple"
										}
									],
									"internalType": "struct DataTypes.SetProfileImageURIWithSigData",
									"name": "vars",
									"type": "tuple"
								}
							],
							"name": "setProfileImageURIWithSig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "enum DataTypes.ProtocolState",
									"name": "newState",
									"type": "uint8"
								}
							],
							"name": "setState",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "collectModule",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "whitelist",
									"type": "bool"
								}
							],
							"name": "whitelistCollectModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "followModule",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "whitelist",
									"type": "bool"
								}
							],
							"name": "whitelistFollowModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "profileCreator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "whitelist",
									"type": "bool"
								}
							],
							"name": "whitelistProfileCreator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "referenceModule",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "whitelist",
									"type": "bool"
								}
							],
							"name": "whitelistReferenceModule",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Lens Protocol",
						"kind": "dev",
						"methods": {
							"collect(uint256,uint256,bytes)": {
								"params": {
									"data": "The arbitrary data to pass to the collect module if needed.",
									"profileId": "The token ID of the profile that published the publication to collect.",
									"pubId": "The publication to collect's publication ID."
								},
								"returns": {
									"_0": "uint256 An integer representing the minted token ID."
								}
							},
							"collectWithSig((address,uint256,uint256,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A CollectWithSigData struct containing the regular parameters as well as the collector's address and an EIP712Signature struct."
								},
								"returns": {
									"_0": "uint256 An integer representing the minted token ID."
								}
							},
							"comment((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes))": {
								"params": {
									"vars": "A CommentData struct containing the needed parameters."
								},
								"returns": {
									"_0": "uint256 An integer representing the comment's publication ID."
								}
							},
							"commentWithSig((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct."
								},
								"returns": {
									"_0": "uint256 An integer representing the comment's publication ID."
								}
							},
							"createProfile((address,string,string,address,bytes,string))": {
								"params": {
									"vars": "A CreateProfileData struct containing the following params:      to: The address receiving the profile.      handle: The handle to set for the profile, must be unique and non-empty.      imageURI: The URI to set for the profile image.      followModule: The follow module to use, can be the zero address.      followModuleInitData: The follow module initialization data, if any."
								}
							},
							"defaultProfile(address)": {
								"params": {
									"wallet": "The address to find the default mapping"
								},
								"returns": {
									"_0": "uint256 The default profile id, which will be 0 if not mapped."
								}
							},
							"emitCollectNFTTransferEvent(uint256,uint256,uint256,address,address)": {
								"details": "Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track collectNFT transfers.",
								"params": {
									"collectNFTId": "The collectNFT being transferred's token ID.",
									"from": "The address the collectNFT is being transferred from.",
									"profileId": "The token ID of the profile associated with the collect NFT being transferred.",
									"pubId": "The publication ID associated with the collect NFT being transferred.",
									"to": "The address the collectNFT is being transferred to."
								}
							},
							"emitFollowNFTTransferEvent(uint256,uint256,address,address)": {
								"details": "Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track followNFT transfers.",
								"params": {
									"followNFTId": "The followNFT being transferred's token ID.",
									"from": "The address the followNFT is being transferred from.",
									"profileId": "The token ID of the profile associated with the followNFT being transferred.",
									"to": "The address the followNFT is being transferred to."
								}
							},
							"follow(uint256[],bytes[])": {
								"params": {
									"datas": "The arbitrary data array to pass to the follow module for each profile if needed.",
									"profileIds": "The token ID array of the profiles to follow."
								},
								"returns": {
									"_0": "uint256[] An array of integers representing the minted follow NFTs token IDs."
								}
							},
							"followWithSig((address,uint256[],bytes[],(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A FollowWithSigData struct containing the regular parameters as well as the signing follower's address and an EIP712Signature struct."
								},
								"returns": {
									"_0": "uint256[] An array of integers representing the minted follow NFTs token IDs."
								}
							},
							"getCollectModule(uint256,uint256)": {
								"params": {
									"profileId": "The token ID of the profile that published the publication to query.",
									"pubId": "The publication ID of the publication to query."
								},
								"returns": {
									"_0": "address The address of the collect module associated with the queried publication."
								}
							},
							"getCollectNFT(uint256,uint256)": {
								"params": {
									"profileId": "The token ID of the profile that published the publication to query.",
									"pubId": "The publication ID of the publication to query."
								},
								"returns": {
									"_0": "address The address of the collectNFT associated with the queried publication."
								}
							},
							"getCollectNFTImpl()": {
								"returns": {
									"_0": "address The collect NFT implementation address."
								}
							},
							"getContentURI(uint256,uint256)": {
								"params": {
									"profileId": "The token ID of the profile that published the publication to query.",
									"pubId": "The publication ID of the publication to query."
								},
								"returns": {
									"_0": "string The URI associated with a given publication."
								}
							},
							"getDispatcher(uint256)": {
								"params": {
									"profileId": "The token ID of the profile to query the dispatcher for."
								},
								"returns": {
									"_0": "address The dispatcher address associated with the profile."
								}
							},
							"getFollowModule(uint256)": {
								"params": {
									"profileId": "The token ID of the profile to query the follow module for."
								},
								"returns": {
									"_0": "address The address of the follow module associated with the given profile."
								}
							},
							"getFollowNFT(uint256)": {
								"params": {
									"profileId": "The token ID of the profile to query the followNFT for."
								},
								"returns": {
									"_0": "address The followNFT associated with the given profile."
								}
							},
							"getFollowNFTImpl()": {
								"returns": {
									"_0": "address The follow NFT implementation address."
								}
							},
							"getFollowNFTURI(uint256)": {
								"params": {
									"profileId": "The token ID of the profile to query the followNFT URI for."
								},
								"returns": {
									"_0": "string The followNFT URI associated with the given profile."
								}
							},
							"getGovernance()": {
								"returns": {
									"_0": "address The address of the currently configured governance."
								}
							},
							"getHandle(uint256)": {
								"params": {
									"profileId": "The token ID of the profile to query the handle for."
								},
								"returns": {
									"_0": "string The handle associated with the profile."
								}
							},
							"getProfile(uint256)": {
								"params": {
									"profileId": "The token ID of the profile to query."
								},
								"returns": {
									"_0": "ProfileStruct The profile struct of the given profile."
								}
							},
							"getProfileIdByHandle(string)": {
								"params": {
									"handle": "The handle to resolve the profile token ID with."
								},
								"returns": {
									"_0": "uint256 The profile ID the passed handle points to."
								}
							},
							"getPub(uint256,uint256)": {
								"params": {
									"profileId": "The token ID of the profile that published the publication to query.",
									"pubId": "The publication ID of the publication to query."
								},
								"returns": {
									"_0": "PublicationStruct The publication struct associated with the queried publication."
								}
							},
							"getPubCount(uint256)": {
								"params": {
									"profileId": "The token ID of the profile to query."
								},
								"returns": {
									"_0": "uint256 The number of publications associated with the queried profile."
								}
							},
							"getPubPointer(uint256,uint256)": {
								"params": {
									"profileId": "The token ID of the profile that published the publication to query the pointer for.",
									"pubId": "The publication ID of the publication to query the pointer for."
								},
								"returns": {
									"_0": "tuple First, the profile ID of the profile the current publication is pointing to, second, the publication ID of the publication the current publication is pointing to."
								}
							},
							"getPubType(uint256,uint256)": {
								"params": {
									"profileId": "The token ID of the profile that published the publication to query.",
									"pubId": "The publication ID of the publication to query."
								},
								"returns": {
									"_0": "PubType The publication type, as a member of an enum (either \"post,\" \"comment\" or \"mirror\")."
								}
							},
							"getReferenceModule(uint256,uint256)": {
								"params": {
									"profileId": "The token ID of the profile that published the publication to querythe reference module for.",
									"pubId": "The publication ID of the publication to query the reference module for."
								},
								"returns": {
									"_0": "address The address of the reference module associated with the given profile."
								}
							},
							"initialize(string,string,address)": {
								"params": {
									"name": "The name to set for the hub NFT.",
									"newGovernance": "The governance address to set.",
									"symbol": "The symbol to set for the hub NFT."
								}
							},
							"isCollectModuleWhitelisted(address)": {
								"params": {
									"collectModule": "The address of the collect module to check."
								},
								"returns": {
									"_0": "bool True if the the collect module is whitelisted, false otherwise."
								}
							},
							"isFollowModuleWhitelisted(address)": {
								"params": {
									"followModule": "The address of the follow module to check."
								},
								"returns": {
									"_0": "bool True if the the follow module is whitelisted, false otherwise."
								}
							},
							"isProfileCreatorWhitelisted(address)": {
								"params": {
									"profileCreator": "The address of the profile creator to check."
								},
								"returns": {
									"_0": "bool True if the profile creator is whitelisted, false otherwise."
								}
							},
							"isReferenceModuleWhitelisted(address)": {
								"params": {
									"referenceModule": "The address of the reference module to check."
								},
								"returns": {
									"_0": "bool True if the the reference module is whitelisted, false otherwise."
								}
							},
							"mirror((uint256,uint256,uint256,bytes,address,bytes))": {
								"params": {
									"vars": "A MirrorData struct containing the necessary parameters."
								},
								"returns": {
									"_0": "uint256 An integer representing the mirror's publication ID."
								}
							},
							"mirrorWithSig((uint256,uint256,uint256,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct."
								},
								"returns": {
									"_0": "uint256 An integer representing the mirror's publication ID."
								}
							},
							"post((uint256,string,address,bytes,address,bytes))": {
								"params": {
									"vars": "A PostData struct containing the needed parameters."
								},
								"returns": {
									"_0": "uint256 An integer representing the post's publication ID."
								}
							},
							"postWithSig((uint256,string,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A PostWithSigData struct containing the regular parameters and an EIP712Signature struct."
								},
								"returns": {
									"_0": "uint256 An integer representing the post's publication ID."
								}
							},
							"setDefaultProfile(uint256)": {
								"params": {
									"profileId": "The token ID of the profile to set as the main profile identity."
								}
							},
							"setDefaultProfileWithSig((address,uint256,(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct."
								}
							},
							"setDispatcher(uint256,address)": {
								"params": {
									"dispatcher": "The dispatcher address to set for the given profile ID.",
									"profileId": "The token ID of the profile of the profile to set the dispatcher for."
								}
							},
							"setDispatcherWithSig((uint256,address,(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct."
								}
							},
							"setEmergencyAdmin(address)": {
								"params": {
									"newEmergencyAdmin": "The new emergency admin address to set."
								}
							},
							"setFollowModule(uint256,address,bytes)": {
								"params": {
									"followModule": "The follow module to set for the given profile, must be whitelisted.",
									"followModuleInitData": "The data to be passed to the follow module for initialization.",
									"profileId": "The token ID of the profile to set the follow module for."
								}
							},
							"setFollowModuleWithSig((uint256,address,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct."
								}
							},
							"setFollowNFTURI(uint256,string)": {
								"params": {
									"followNFTURI": "The follow NFT URI to set.",
									"profileId": "The token ID of the profile for which to set the followNFT URI."
								}
							},
							"setFollowNFTURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct."
								}
							},
							"setGovernance(address)": {
								"params": {
									"newGovernance": "The new governance address to set."
								}
							},
							"setProfileImageURI(uint256,string)": {
								"params": {
									"imageURI": "The URI to set for the given profile.",
									"profileId": "The token ID of the profile of the profile to set the URI for."
								}
							},
							"setProfileImageURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))": {
								"params": {
									"vars": "A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct."
								}
							},
							"setState(uint8)": {
								"params": {
									"newState": "The state to set, as a member of the ProtocolState enum."
								}
							},
							"whitelistCollectModule(address,bool)": {
								"params": {
									"collectModule": "The collect module contract address to add or remove from the whitelist.",
									"whitelist": "Whether or not the collect module should be whitelisted."
								}
							},
							"whitelistFollowModule(address,bool)": {
								"params": {
									"followModule": "The follow module contract address to add or remove from the whitelist.",
									"whitelist": "Whether or not the follow module should be whitelisted."
								}
							},
							"whitelistProfileCreator(address,bool)": {
								"params": {
									"profileCreator": "The profile creator address to add or remove from the whitelist.",
									"whitelist": "Whether or not the profile creator should be whitelisted."
								}
							},
							"whitelistReferenceModule(address,bool)": {
								"params": {
									"referenceModule": "The reference module contract to add or remove from the whitelist.",
									"whitelist": "Whether or not the reference module should be whitelisted."
								}
							}
						},
						"title": "ILensHub",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"collect(uint256,uint256,bytes)": "84114ad4",
							"collectWithSig((address,uint256,uint256,bytes,(uint8,bytes32,bytes32,uint256)))": "b48951e4",
							"comment((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes))": "b6f32d2b",
							"commentWithSig((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))": "7a375716",
							"createProfile((address,string,string,address,bytes,string))": "ffea138e",
							"defaultProfile(address)": "92254a62",
							"emitCollectNFTTransferEvent(uint256,uint256,uint256,address,address)": "86e2947b",
							"emitFollowNFTTransferEvent(uint256,uint256,address,address)": "bdfdd4bc",
							"follow(uint256[],bytes[])": "fb78ae6c",
							"followWithSig((address,uint256[],bytes[],(uint8,bytes32,bytes32,uint256)))": "8e4fd6a9",
							"getCollectModule(uint256,uint256)": "57ff49f6",
							"getCollectNFT(uint256,uint256)": "52aaef55",
							"getCollectNFTImpl()": "77349a5f",
							"getContentURI(uint256,uint256)": "b5a31496",
							"getDispatcher(uint256)": "540528b9",
							"getFollowModule(uint256)": "d923d20c",
							"getFollowNFT(uint256)": "a9ec6563",
							"getFollowNFTImpl()": "3502ac4b",
							"getFollowNFTURI(uint256)": "374c9473",
							"getGovernance()": "289b3c0d",
							"getHandle(uint256)": "ec81d194",
							"getProfile(uint256)": "f08f4f64",
							"getProfileIdByHandle(string)": "20fa728a",
							"getPub(uint256,uint256)": "c736c990",
							"getPubCount(uint256)": "3a15ff07",
							"getPubPointer(uint256,uint256)": "5ca3eebf",
							"getPubType(uint256,uint256)": "31fff07c",
							"getReferenceModule(uint256,uint256)": "b7984c05",
							"initialize(string,string,address)": "077f224a",
							"isCollectModuleWhitelisted(address)": "ad3e72bf",
							"isFollowModuleWhitelisted(address)": "1cbb2620",
							"isProfileCreatorWhitelisted(address)": "af05dd22",
							"isReferenceModuleWhitelisted(address)": "8e204fb4",
							"mirror((uint256,uint256,uint256,bytes,address,bytes))": "2faeed81",
							"mirrorWithSig((uint256,uint256,uint256,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))": "df457c34",
							"post((uint256,string,address,bytes,address,bytes))": "963ff141",
							"postWithSig((uint256,string,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))": "3b508132",
							"setDefaultProfile(uint256)": "f1b2f8bc",
							"setDefaultProfileWithSig((address,uint256,(uint8,bytes32,bytes32,uint256)))": "dc217253",
							"setDispatcher(uint256,address)": "bfd24f47",
							"setDispatcherWithSig((uint256,address,(uint8,bytes32,bytes32,uint256)))": "bfbf0b4b",
							"setEmergencyAdmin(address)": "35da3394",
							"setFollowModule(uint256,address,bytes)": "6dea40b3",
							"setFollowModuleWithSig((uint256,address,bytes,(uint8,bytes32,bytes32,uint256)))": "3b28b89f",
							"setFollowNFTURI(uint256,string)": "c6b5d06c",
							"setFollowNFTURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))": "bd12d3f0",
							"setGovernance(address)": "ab033ea9",
							"setProfileImageURI(uint256,string)": "054871b8",
							"setProfileImageURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))": "9b84a14c",
							"setState(uint8)": "56de96db",
							"whitelistCollectModule(address,bool)": "31dcebe3",
							"whitelistFollowModule(address,bool)": "a6d8e1e4",
							"whitelistProfileCreator(address,bool)": "20905506",
							"whitelistReferenceModule(address,bool)": "4187e4c5"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.CollectWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"collectWithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"profileIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"collectModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"collectModuleInitData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleInitData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.CommentData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"comment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"profileIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"collectModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"collectModuleInitData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleInitData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.CommentWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"commentWithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"followModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"followModuleInitData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"followNFTURI\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.CreateProfileData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"createProfile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"defaultProfile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectNFTId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitCollectNFTTransferEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"followNFTId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emitFollowNFTTransferEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"profileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"follow\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"follower\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"profileIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.FollowWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"followWithSig\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getCollectModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getCollectNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollectNFTImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getContentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"getDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"getFollowModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"getFollowNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFollowNFTImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"getFollowNFTURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"getHandle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"getProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"followModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"followNFT\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"followNFTURI\",\"type\":\"string\"}],\"internalType\":\"struct DataTypes.ProfileStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"handle\",\"type\":\"string\"}],\"name\":\"getProfileIdByHandle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getPub\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectNFT\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.PublicationStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"getPubCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getPubPointer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getPubType\",\"outputs\":[{\"internalType\":\"enum DataTypes.PubType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"}],\"name\":\"getReferenceModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectModule\",\"type\":\"address\"}],\"name\":\"isCollectModuleWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"followModule\",\"type\":\"address\"}],\"name\":\"isFollowModuleWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profileCreator\",\"type\":\"address\"}],\"name\":\"isProfileCreatorWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"}],\"name\":\"isReferenceModuleWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profileIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleInitData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.MirrorData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"mirror\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profileIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubIdPointed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleInitData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.MirrorWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"mirrorWithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"collectModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"collectModuleInitData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleInitData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.PostData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"post\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"collectModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"collectModuleInitData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"referenceModuleInitData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.PostWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"postWithSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"setDefaultProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.SetDefaultProfileWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"setDefaultProfileWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"}],\"name\":\"setDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dispatcher\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.SetDispatcherWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"setDispatcherWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEmergencyAdmin\",\"type\":\"address\"}],\"name\":\"setEmergencyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"followModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"followModuleInitData\",\"type\":\"bytes\"}],\"name\":\"setFollowModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"followModule\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"followModuleInitData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.SetFollowModuleWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"setFollowModuleWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"followNFTURI\",\"type\":\"string\"}],\"name\":\"setFollowNFTURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"followNFTURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.SetFollowNFTURIWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"setFollowNFTURIWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"}],\"name\":\"setProfileImageURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.EIP712Signature\",\"name\":\"sig\",\"type\":\"tuple\"}],\"internalType\":\"struct DataTypes.SetProfileImageURIWithSigData\",\"name\":\"vars\",\"type\":\"tuple\"}],\"name\":\"setProfileImageURIWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ProtocolState\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"whitelistCollectModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"followModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"whitelistFollowModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profileCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"whitelistProfileCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referenceModule\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"whitelistReferenceModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lens Protocol\",\"kind\":\"dev\",\"methods\":{\"collect(uint256,uint256,bytes)\":{\"params\":{\"data\":\"The arbitrary data to pass to the collect module if needed.\",\"profileId\":\"The token ID of the profile that published the publication to collect.\",\"pubId\":\"The publication to collect's publication ID.\"},\"returns\":{\"_0\":\"uint256 An integer representing the minted token ID.\"}},\"collectWithSig((address,uint256,uint256,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A CollectWithSigData struct containing the regular parameters as well as the collector's address and an EIP712Signature struct.\"},\"returns\":{\"_0\":\"uint256 An integer representing the minted token ID.\"}},\"comment((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes))\":{\"params\":{\"vars\":\"A CommentData struct containing the needed parameters.\"},\"returns\":{\"_0\":\"uint256 An integer representing the comment's publication ID.\"}},\"commentWithSig((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\"},\"returns\":{\"_0\":\"uint256 An integer representing the comment's publication ID.\"}},\"createProfile((address,string,string,address,bytes,string))\":{\"params\":{\"vars\":\"A CreateProfileData struct containing the following params:      to: The address receiving the profile.      handle: The handle to set for the profile, must be unique and non-empty.      imageURI: The URI to set for the profile image.      followModule: The follow module to use, can be the zero address.      followModuleInitData: The follow module initialization data, if any.\"}},\"defaultProfile(address)\":{\"params\":{\"wallet\":\"The address to find the default mapping\"},\"returns\":{\"_0\":\"uint256 The default profile id, which will be 0 if not mapped.\"}},\"emitCollectNFTTransferEvent(uint256,uint256,uint256,address,address)\":{\"details\":\"Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track collectNFT transfers.\",\"params\":{\"collectNFTId\":\"The collectNFT being transferred's token ID.\",\"from\":\"The address the collectNFT is being transferred from.\",\"profileId\":\"The token ID of the profile associated with the collect NFT being transferred.\",\"pubId\":\"The publication ID associated with the collect NFT being transferred.\",\"to\":\"The address the collectNFT is being transferred to.\"}},\"emitFollowNFTTransferEvent(uint256,uint256,address,address)\":{\"details\":\"Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track followNFT transfers.\",\"params\":{\"followNFTId\":\"The followNFT being transferred's token ID.\",\"from\":\"The address the followNFT is being transferred from.\",\"profileId\":\"The token ID of the profile associated with the followNFT being transferred.\",\"to\":\"The address the followNFT is being transferred to.\"}},\"follow(uint256[],bytes[])\":{\"params\":{\"datas\":\"The arbitrary data array to pass to the follow module for each profile if needed.\",\"profileIds\":\"The token ID array of the profiles to follow.\"},\"returns\":{\"_0\":\"uint256[] An array of integers representing the minted follow NFTs token IDs.\"}},\"followWithSig((address,uint256[],bytes[],(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A FollowWithSigData struct containing the regular parameters as well as the signing follower's address and an EIP712Signature struct.\"},\"returns\":{\"_0\":\"uint256[] An array of integers representing the minted follow NFTs token IDs.\"}},\"getCollectModule(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile that published the publication to query.\",\"pubId\":\"The publication ID of the publication to query.\"},\"returns\":{\"_0\":\"address The address of the collect module associated with the queried publication.\"}},\"getCollectNFT(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile that published the publication to query.\",\"pubId\":\"The publication ID of the publication to query.\"},\"returns\":{\"_0\":\"address The address of the collectNFT associated with the queried publication.\"}},\"getCollectNFTImpl()\":{\"returns\":{\"_0\":\"address The collect NFT implementation address.\"}},\"getContentURI(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile that published the publication to query.\",\"pubId\":\"The publication ID of the publication to query.\"},\"returns\":{\"_0\":\"string The URI associated with a given publication.\"}},\"getDispatcher(uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile to query the dispatcher for.\"},\"returns\":{\"_0\":\"address The dispatcher address associated with the profile.\"}},\"getFollowModule(uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile to query the follow module for.\"},\"returns\":{\"_0\":\"address The address of the follow module associated with the given profile.\"}},\"getFollowNFT(uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile to query the followNFT for.\"},\"returns\":{\"_0\":\"address The followNFT associated with the given profile.\"}},\"getFollowNFTImpl()\":{\"returns\":{\"_0\":\"address The follow NFT implementation address.\"}},\"getFollowNFTURI(uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile to query the followNFT URI for.\"},\"returns\":{\"_0\":\"string The followNFT URI associated with the given profile.\"}},\"getGovernance()\":{\"returns\":{\"_0\":\"address The address of the currently configured governance.\"}},\"getHandle(uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile to query the handle for.\"},\"returns\":{\"_0\":\"string The handle associated with the profile.\"}},\"getProfile(uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile to query.\"},\"returns\":{\"_0\":\"ProfileStruct The profile struct of the given profile.\"}},\"getProfileIdByHandle(string)\":{\"params\":{\"handle\":\"The handle to resolve the profile token ID with.\"},\"returns\":{\"_0\":\"uint256 The profile ID the passed handle points to.\"}},\"getPub(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile that published the publication to query.\",\"pubId\":\"The publication ID of the publication to query.\"},\"returns\":{\"_0\":\"PublicationStruct The publication struct associated with the queried publication.\"}},\"getPubCount(uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile to query.\"},\"returns\":{\"_0\":\"uint256 The number of publications associated with the queried profile.\"}},\"getPubPointer(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile that published the publication to query the pointer for.\",\"pubId\":\"The publication ID of the publication to query the pointer for.\"},\"returns\":{\"_0\":\"tuple First, the profile ID of the profile the current publication is pointing to, second, the publication ID of the publication the current publication is pointing to.\"}},\"getPubType(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile that published the publication to query.\",\"pubId\":\"The publication ID of the publication to query.\"},\"returns\":{\"_0\":\"PubType The publication type, as a member of an enum (either \\\"post,\\\" \\\"comment\\\" or \\\"mirror\\\").\"}},\"getReferenceModule(uint256,uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile that published the publication to querythe reference module for.\",\"pubId\":\"The publication ID of the publication to query the reference module for.\"},\"returns\":{\"_0\":\"address The address of the reference module associated with the given profile.\"}},\"initialize(string,string,address)\":{\"params\":{\"name\":\"The name to set for the hub NFT.\",\"newGovernance\":\"The governance address to set.\",\"symbol\":\"The symbol to set for the hub NFT.\"}},\"isCollectModuleWhitelisted(address)\":{\"params\":{\"collectModule\":\"The address of the collect module to check.\"},\"returns\":{\"_0\":\"bool True if the the collect module is whitelisted, false otherwise.\"}},\"isFollowModuleWhitelisted(address)\":{\"params\":{\"followModule\":\"The address of the follow module to check.\"},\"returns\":{\"_0\":\"bool True if the the follow module is whitelisted, false otherwise.\"}},\"isProfileCreatorWhitelisted(address)\":{\"params\":{\"profileCreator\":\"The address of the profile creator to check.\"},\"returns\":{\"_0\":\"bool True if the profile creator is whitelisted, false otherwise.\"}},\"isReferenceModuleWhitelisted(address)\":{\"params\":{\"referenceModule\":\"The address of the reference module to check.\"},\"returns\":{\"_0\":\"bool True if the the reference module is whitelisted, false otherwise.\"}},\"mirror((uint256,uint256,uint256,bytes,address,bytes))\":{\"params\":{\"vars\":\"A MirrorData struct containing the necessary parameters.\"},\"returns\":{\"_0\":\"uint256 An integer representing the mirror's publication ID.\"}},\"mirrorWithSig((uint256,uint256,uint256,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\"},\"returns\":{\"_0\":\"uint256 An integer representing the mirror's publication ID.\"}},\"post((uint256,string,address,bytes,address,bytes))\":{\"params\":{\"vars\":\"A PostData struct containing the needed parameters.\"},\"returns\":{\"_0\":\"uint256 An integer representing the post's publication ID.\"}},\"postWithSig((uint256,string,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\"},\"returns\":{\"_0\":\"uint256 An integer representing the post's publication ID.\"}},\"setDefaultProfile(uint256)\":{\"params\":{\"profileId\":\"The token ID of the profile to set as the main profile identity.\"}},\"setDefaultProfileWithSig((address,uint256,(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\"}},\"setDispatcher(uint256,address)\":{\"params\":{\"dispatcher\":\"The dispatcher address to set for the given profile ID.\",\"profileId\":\"The token ID of the profile of the profile to set the dispatcher for.\"}},\"setDispatcherWithSig((uint256,address,(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\"}},\"setEmergencyAdmin(address)\":{\"params\":{\"newEmergencyAdmin\":\"The new emergency admin address to set.\"}},\"setFollowModule(uint256,address,bytes)\":{\"params\":{\"followModule\":\"The follow module to set for the given profile, must be whitelisted.\",\"followModuleInitData\":\"The data to be passed to the follow module for initialization.\",\"profileId\":\"The token ID of the profile to set the follow module for.\"}},\"setFollowModuleWithSig((uint256,address,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\"}},\"setFollowNFTURI(uint256,string)\":{\"params\":{\"followNFTURI\":\"The follow NFT URI to set.\",\"profileId\":\"The token ID of the profile for which to set the followNFT URI.\"}},\"setFollowNFTURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\"}},\"setGovernance(address)\":{\"params\":{\"newGovernance\":\"The new governance address to set.\"}},\"setProfileImageURI(uint256,string)\":{\"params\":{\"imageURI\":\"The URI to set for the given profile.\",\"profileId\":\"The token ID of the profile of the profile to set the URI for.\"}},\"setProfileImageURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))\":{\"params\":{\"vars\":\"A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\"}},\"setState(uint8)\":{\"params\":{\"newState\":\"The state to set, as a member of the ProtocolState enum.\"}},\"whitelistCollectModule(address,bool)\":{\"params\":{\"collectModule\":\"The collect module contract address to add or remove from the whitelist.\",\"whitelist\":\"Whether or not the collect module should be whitelisted.\"}},\"whitelistFollowModule(address,bool)\":{\"params\":{\"followModule\":\"The follow module contract address to add or remove from the whitelist.\",\"whitelist\":\"Whether or not the follow module should be whitelisted.\"}},\"whitelistProfileCreator(address,bool)\":{\"params\":{\"profileCreator\":\"The profile creator address to add or remove from the whitelist.\",\"whitelist\":\"Whether or not the profile creator should be whitelisted.\"}},\"whitelistReferenceModule(address,bool)\":{\"params\":{\"referenceModule\":\"The reference module contract to add or remove from the whitelist.\",\"whitelist\":\"Whether or not the reference module should be whitelisted.\"}}},\"title\":\"ILensHub\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collect(uint256,uint256,bytes)\":{\"notice\":\"Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\"},\"collectWithSig((address,uint256,uint256,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Collects a given publication via signature with the specified parameters.\"},\"comment((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes))\":{\"notice\":\"Publishes a comment to a given profile, must be called by the profile owner.\"},\"commentWithSig((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Publishes a comment to a given profile via signature with the specified parameters.\"},\"createProfile((address,string,string,address,bytes,string))\":{\"notice\":\"Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This function must be called by a whitelisted profile creator.\"},\"defaultProfile(address)\":{\"notice\":\"Returns default profile for a given wallet address\"},\"follow(uint256[],bytes[])\":{\"notice\":\"Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller. NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\"},\"followWithSig((address,uint256[],bytes[],(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Follows a given profile via signature with the specified parameters.\"},\"getCollectModule(uint256,uint256)\":{\"notice\":\"Returns the collect module associated with a given publication.\"},\"getCollectNFT(uint256,uint256)\":{\"notice\":\"Returns the collectNFT associated with a given publication, if any.\"},\"getCollectNFTImpl()\":{\"notice\":\"Returns the collect NFT implementation address.\"},\"getContentURI(uint256,uint256)\":{\"notice\":\"Returns the URI associated with a given publication.\"},\"getDispatcher(uint256)\":{\"notice\":\"Returns the dispatcher associated with a profile.\"},\"getFollowModule(uint256)\":{\"notice\":\"Returns the follow module associated witha  given profile, if any.\"},\"getFollowNFT(uint256)\":{\"notice\":\"Returns the followNFT associated with a given profile, if any.\"},\"getFollowNFTImpl()\":{\"notice\":\"Returns the follow NFT implementation address.\"},\"getFollowNFTURI(uint256)\":{\"notice\":\"Returns the followNFT URI associated with a given profile.\"},\"getGovernance()\":{\"notice\":\"Returns the currently configured governance address.\"},\"getHandle(uint256)\":{\"notice\":\"Returns the handle associated with a profile.\"},\"getProfile(uint256)\":{\"notice\":\"Returns the full profile struct associated with a given profile token ID.\"},\"getProfileIdByHandle(string)\":{\"notice\":\"Returns the profile token ID according to a given handle.\"},\"getPub(uint256,uint256)\":{\"notice\":\"Returns the full publication struct for a given publication.\"},\"getPubCount(uint256)\":{\"notice\":\"Returns the publication count for a given profile.\"},\"getPubPointer(uint256,uint256)\":{\"notice\":\"Returns the publication pointer (profileId & pubId) associated with a given publication.\"},\"getPubType(uint256,uint256)\":{\"notice\":\"Returns the publication type associated with a given publication.\"},\"getReferenceModule(uint256,uint256)\":{\"notice\":\"Returns the reference module associated witha  given profile, if any.\"},\"initialize(string,string,address)\":{\"notice\":\"Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in the LensNFTBase contract.\"},\"isCollectModuleWhitelisted(address)\":{\"notice\":\"Returns whether or not a collect module is whitelisted.\"},\"isFollowModuleWhitelisted(address)\":{\"notice\":\"Returns whether or not a follow module is whitelisted.\"},\"isProfileCreatorWhitelisted(address)\":{\"notice\":\"Returns whether or not a profile creator is whitelisted.\"},\"isReferenceModuleWhitelisted(address)\":{\"notice\":\"Returns whether or not a reference module is whitelisted.\"},\"mirror((uint256,uint256,uint256,bytes,address,bytes))\":{\"notice\":\"Publishes a mirror to a given profile, must be called by the profile owner.\"},\"mirrorWithSig((uint256,uint256,uint256,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Publishes a mirror to a given profile via signature with the specified parameters.\"},\"post((uint256,string,address,bytes,address,bytes))\":{\"notice\":\"Publishes a post to a given profile, must be called by the profile owner.\"},\"postWithSig((uint256,string,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Publishes a post to a given profile via signature with the specified parameters.\"},\"setDefaultProfile(uint256)\":{\"notice\":\"Sets the mapping between wallet and its main profile identity.\"},\"setDefaultProfileWithSig((address,uint256,(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\"},\"setDispatcher(uint256,address)\":{\"notice\":\"Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\"},\"setDispatcherWithSig((uint256,address,(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Sets a profile's dispatcher via signature with the specified parameters.\"},\"setEmergencyAdmin(address)\":{\"notice\":\"Sets the emergency admin, which is a permissioned role able to set the protocol state. This function can only be called by the governance address.\"},\"setFollowModule(uint256,address,bytes)\":{\"notice\":\"Sets a profile's follow module, must be called by the profile owner.\"},\"setFollowModuleWithSig((uint256,address,bytes,(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Sets a profile's follow module via signature with the specified parameters.\"},\"setFollowNFTURI(uint256,string)\":{\"notice\":\"Sets a followNFT URI for a given profile's follow NFT.\"},\"setFollowNFTURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Sets a followNFT URI via signature with the specified parameters.\"},\"setGovernance(address)\":{\"notice\":\"Sets the privileged governance role. This function can only be called by the current governance address.\"},\"setProfileImageURI(uint256,string)\":{\"notice\":\"Sets a profile's URI, which is reflected in the `tokenURI()` function.\"},\"setProfileImageURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))\":{\"notice\":\"Sets a profile's URI via signature with the specified parameters.\"},\"setState(uint8)\":{\"notice\":\"Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function can only be called by the governance address or the emergency admin address. Note that this reverts if the emergency admin calls it if:      1. The emergency admin is attempting to unpause.      2. The emergency admin is calling while the protocol is already paused.\"},\"whitelistCollectModule(address,bool)\":{\"notice\":\"Adds or removes a collect module from the whitelist. This function can only be called by the current governance address.\"},\"whitelistFollowModule(address,bool)\":{\"notice\":\"Adds or removes a follow module from the whitelist. This function can only be called by the current governance address.\"},\"whitelistProfileCreator(address,bool)\":{\"notice\":\"Adds or removes a profile creator from the whitelist. This function can only be called by the current governance address.\"},\"whitelistReferenceModule(address,bool)\":{\"notice\":\"Adds or removes a reference module from the whitelist. This function can only be called by the current governance address.\"}},\"notice\":\"This is the interface for the LensHub contract, the main entry point for the Lens Protocol. You'll find all the events and external functions, as well as the reasoning behind them here.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/lens-protocol/contracts/interfaces/ILensHub.sol\":\"ILensHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/lens-protocol/contracts/interfaces/ILensHub.sol\":{\"keccak256\":\"0x789b8bad742032bb7d9f5499aec3f6f899f5265e26aa4b38cadaef5d9fcb0ec3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad9f5434eff3128db6a51209b803375d630fac04df6c282ff2623045b23f34d0\",\"dweb:/ipfs/QmSzGyRhvL8vWfVfDC6PgEzdcEf6NaBUt9y2tmVcYyzmvZ\"]},\"@aave/lens-protocol/contracts/libraries/DataTypes.sol\":{\"keccak256\":\"0xe45a4de8ccf54234021dd34333ab17dcf813ceeadd9d4146214a96a1984f14c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0dab1e8626383281aa6543e5930f1a458227039ce3d180c5f01f58244e88637d\",\"dweb:/ipfs/QmQigfKvGGBrE1rJ6oiGh2zAcsMXAZuYRQzjEsjHtCYrue\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"collect(uint256,uint256,bytes)": {
								"notice": "Collects a given publication, executing collect module logic and minting a collectNFT to the caller."
							},
							"collectWithSig((address,uint256,uint256,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Collects a given publication via signature with the specified parameters."
							},
							"comment((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes))": {
								"notice": "Publishes a comment to a given profile, must be called by the profile owner."
							},
							"commentWithSig((uint256,string,uint256,uint256,bytes,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Publishes a comment to a given profile via signature with the specified parameters."
							},
							"createProfile((address,string,string,address,bytes,string))": {
								"notice": "Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This function must be called by a whitelisted profile creator."
							},
							"defaultProfile(address)": {
								"notice": "Returns default profile for a given wallet address"
							},
							"follow(uint256[],bytes[])": {
								"notice": "Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller. NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set."
							},
							"followWithSig((address,uint256[],bytes[],(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Follows a given profile via signature with the specified parameters."
							},
							"getCollectModule(uint256,uint256)": {
								"notice": "Returns the collect module associated with a given publication."
							},
							"getCollectNFT(uint256,uint256)": {
								"notice": "Returns the collectNFT associated with a given publication, if any."
							},
							"getCollectNFTImpl()": {
								"notice": "Returns the collect NFT implementation address."
							},
							"getContentURI(uint256,uint256)": {
								"notice": "Returns the URI associated with a given publication."
							},
							"getDispatcher(uint256)": {
								"notice": "Returns the dispatcher associated with a profile."
							},
							"getFollowModule(uint256)": {
								"notice": "Returns the follow module associated witha  given profile, if any."
							},
							"getFollowNFT(uint256)": {
								"notice": "Returns the followNFT associated with a given profile, if any."
							},
							"getFollowNFTImpl()": {
								"notice": "Returns the follow NFT implementation address."
							},
							"getFollowNFTURI(uint256)": {
								"notice": "Returns the followNFT URI associated with a given profile."
							},
							"getGovernance()": {
								"notice": "Returns the currently configured governance address."
							},
							"getHandle(uint256)": {
								"notice": "Returns the handle associated with a profile."
							},
							"getProfile(uint256)": {
								"notice": "Returns the full profile struct associated with a given profile token ID."
							},
							"getProfileIdByHandle(string)": {
								"notice": "Returns the profile token ID according to a given handle."
							},
							"getPub(uint256,uint256)": {
								"notice": "Returns the full publication struct for a given publication."
							},
							"getPubCount(uint256)": {
								"notice": "Returns the publication count for a given profile."
							},
							"getPubPointer(uint256,uint256)": {
								"notice": "Returns the publication pointer (profileId & pubId) associated with a given publication."
							},
							"getPubType(uint256,uint256)": {
								"notice": "Returns the publication type associated with a given publication."
							},
							"getReferenceModule(uint256,uint256)": {
								"notice": "Returns the reference module associated witha  given profile, if any."
							},
							"initialize(string,string,address)": {
								"notice": "Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in the LensNFTBase contract."
							},
							"isCollectModuleWhitelisted(address)": {
								"notice": "Returns whether or not a collect module is whitelisted."
							},
							"isFollowModuleWhitelisted(address)": {
								"notice": "Returns whether or not a follow module is whitelisted."
							},
							"isProfileCreatorWhitelisted(address)": {
								"notice": "Returns whether or not a profile creator is whitelisted."
							},
							"isReferenceModuleWhitelisted(address)": {
								"notice": "Returns whether or not a reference module is whitelisted."
							},
							"mirror((uint256,uint256,uint256,bytes,address,bytes))": {
								"notice": "Publishes a mirror to a given profile, must be called by the profile owner."
							},
							"mirrorWithSig((uint256,uint256,uint256,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Publishes a mirror to a given profile via signature with the specified parameters."
							},
							"post((uint256,string,address,bytes,address,bytes))": {
								"notice": "Publishes a post to a given profile, must be called by the profile owner."
							},
							"postWithSig((uint256,string,address,bytes,address,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Publishes a post to a given profile via signature with the specified parameters."
							},
							"setDefaultProfile(uint256)": {
								"notice": "Sets the mapping between wallet and its main profile identity."
							},
							"setDefaultProfileWithSig((address,uint256,(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Sets the mapping between wallet and its main profile identity via signature with the specified parameters."
							},
							"setDispatcher(uint256,address)": {
								"notice": "Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile."
							},
							"setDispatcherWithSig((uint256,address,(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Sets a profile's dispatcher via signature with the specified parameters."
							},
							"setEmergencyAdmin(address)": {
								"notice": "Sets the emergency admin, which is a permissioned role able to set the protocol state. This function can only be called by the governance address."
							},
							"setFollowModule(uint256,address,bytes)": {
								"notice": "Sets a profile's follow module, must be called by the profile owner."
							},
							"setFollowModuleWithSig((uint256,address,bytes,(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Sets a profile's follow module via signature with the specified parameters."
							},
							"setFollowNFTURI(uint256,string)": {
								"notice": "Sets a followNFT URI for a given profile's follow NFT."
							},
							"setFollowNFTURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Sets a followNFT URI via signature with the specified parameters."
							},
							"setGovernance(address)": {
								"notice": "Sets the privileged governance role. This function can only be called by the current governance address."
							},
							"setProfileImageURI(uint256,string)": {
								"notice": "Sets a profile's URI, which is reflected in the `tokenURI()` function."
							},
							"setProfileImageURIWithSig((uint256,string,(uint8,bytes32,bytes32,uint256)))": {
								"notice": "Sets a profile's URI via signature with the specified parameters."
							},
							"setState(uint8)": {
								"notice": "Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function can only be called by the governance address or the emergency admin address. Note that this reverts if the emergency admin calls it if:      1. The emergency admin is attempting to unpause.      2. The emergency admin is calling while the protocol is already paused."
							},
							"whitelistCollectModule(address,bool)": {
								"notice": "Adds or removes a collect module from the whitelist. This function can only be called by the current governance address."
							},
							"whitelistFollowModule(address,bool)": {
								"notice": "Adds or removes a follow module from the whitelist. This function can only be called by the current governance address."
							},
							"whitelistProfileCreator(address,bool)": {
								"notice": "Adds or removes a profile creator from the whitelist. This function can only be called by the current governance address."
							},
							"whitelistReferenceModule(address,bool)": {
								"notice": "Adds or removes a reference module from the whitelist. This function can only be called by the current governance address."
							}
						},
						"notice": "This is the interface for the LensHub contract, the main entry point for the Lens Protocol. You'll find all the events and external functions, as well as the reasoning behind them here.",
						"version": 1
					}
				}
			},
			"@aave/lens-protocol/contracts/libraries/DataTypes.sol": {
				"DataTypes": {
					"abi": [],
					"devdoc": {
						"author": "Lens Protocol",
						"kind": "dev",
						"methods": {},
						"title": "DataTypes",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@aave/lens-protocol/contracts/libraries/DataTypes.sol\":193:16253  library DataTypes {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@aave/lens-protocol/contracts/libraries/DataTypes.sol\":193:16253  library DataTypes {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122053a6288b3ab11e4b3604458d93573f0edf24d9df37f2025c9d1a48bb368c652764736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122053a6288b3ab11e4b3604458d93573f0edf24d9df37f2025c9d1a48bb368c652764736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xA6 0x28 DUP12 GASPRICE 0xB1 0x1E 0x4B CALLDATASIZE DIV GASLIMIT DUP14 SWAP4 JUMPI EXTCODEHASH 0xE 0xDF 0x24 0xD9 0xDF CALLDATACOPY CALLCODE MUL 0x5C SWAP14 BYTE BASEFEE 0xBB CALLDATASIZE DUP13 PUSH6 0x2764736F6C63 NUMBER STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "193:16060:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122053a6288b3ab11e4b3604458d93573f0edf24d9df37f2025c9d1a48bb368c652764736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE8 0xA6 0x28 DUP12 GASPRICE 0xB1 0x1E 0x4B CALLDATASIZE DIV GASLIMIT DUP14 SWAP4 JUMPI EXTCODEHASH 0xE 0xDF 0x24 0xD9 0xDF CALLDATACOPY CALLCODE MUL 0x5C SWAP14 BYTE BASEFEE 0xBB CALLDATASIZE DUP13 PUSH6 0x2764736F6C63 NUMBER STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "193:16060:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 193,
									"end": 16253,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122053a6288b3ab11e4b3604458d93573f0edf24d9df37f2025c9d1a48bb368c652764736f6c634300080a0033",
									".code": [
										{
											"begin": 193,
											"end": 16253,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 193,
											"end": 16253,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 193,
											"end": 16253,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 193,
											"end": 16253,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 193,
											"end": 16253,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 193,
											"end": 16253,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 193,
											"end": 16253,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 193,
											"end": 16253,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 193,
											"end": 16253,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Lens Protocol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DataTypes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A standard library of data types used throughout the Lens Protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aave/lens-protocol/contracts/libraries/DataTypes.sol\":\"DataTypes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/lens-protocol/contracts/libraries/DataTypes.sol\":{\"keccak256\":\"0xe45a4de8ccf54234021dd34333ab17dcf813ceeadd9d4146214a96a1984f14c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0dab1e8626383281aa6543e5930f1a458227039ce3d180c5f01f58244e88637d\",\"dweb:/ipfs/QmQigfKvGGBrE1rJ6oiGh2zAcsMXAZuYRQzjEsjHtCYrue\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "A standard library of data types used throughout the Lens Protocol.",
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"IConstantFlowAgreementV1": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_NEGATIVE_ALLOWANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_CREATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_FLOW_OPERATOR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_UPDATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_UNCLEAN_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_DEPOSIT_TOO_BIG",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_RATE_TOO_BIG",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_HOOK_OUT_OF_GAS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_INVALID_FLOW_RATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NON_CRITICAL_SENDER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NO_SELF_FLOW",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ZERO_ADDRESS_RECEIVER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ZERO_ADDRESS_SENDER",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"name": "FlowOperatorUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "totalSenderFlowRate",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "totalReceiverFlowRate",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "FlowUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"name": "FlowUpdatedExtension",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "agreementType",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "authorizeFlowOperatorWithFullControl",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "createFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "createFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "subtractedFlowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "decreaseFlowRateAllowance",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "deleteFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "deleteFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountFlowInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"name": "getDepositRequiredForFlowRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "getFlow",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								}
							],
							"name": "getFlowByID",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								}
							],
							"name": "getFlowOperatorData",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "flowOperatorId",
									"type": "bytes32"
								},
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "flowOperatorId",
									"type": "bytes32"
								}
							],
							"name": "getFlowOperatorDataByID",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"name": "getMaximumFlowRateFromDeposit",
							"outputs": [
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getNetFlow",
							"outputs": [
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "addedFlowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "increaseFlowRateAllowance",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isPatricianPeriod",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isPatricianPeriodNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCurrentlyPatricianPeriod",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "dynamicBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "revokeFlowOperatorWithFullControl",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlowOperatorPermissions",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"FlowOperatorUpdated(address,address,address,uint8,int96)": {
								"details": "Flow operator updated event",
								"params": {
									"flowOperator": "Flow operator address",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "Octo bitmask representation of permissions",
									"sender": "Flow sender address",
									"token": "Super token address"
								}
							},
							"FlowUpdated(address,address,address,int96,int256,int256,bytes)": {
								"details": "Flow updated event",
								"params": {
									"flowRate": "Flow rate in amount per second for this flow",
									"receiver": "Flow recipient address",
									"sender": "Flow sender address",
									"token": "Super token address",
									"totalReceiverFlowRate": "Total flow rate in amount per second for the receiver",
									"totalSenderFlowRate": "Total flow rate in amount per second for the sender",
									"userData": "The user provided data"
								}
							},
							"FlowUpdatedExtension(address,uint256)": {
								"details": "Flow updated extension event",
								"params": {
									"deposit": "The deposit amount for the stream",
									"flowOperator": "Flow operator address - the Context.msgSender"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"agreementType()": {
								"details": "ISuperAgreement.agreementType implementation"
							},
							"authorizeFlowOperatorWithFullControl(address,address,bytes)": {
								"details": "msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								}
							},
							"createFlow(address,address,int96,bytes)": {
								"custom:callbacks": " - AgreementCreated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - A deposit is taken as safety margin for the solvency agents - A extra gas fee may be taken to pay for solvency agent liquidations",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"createFlowByOperator(address,address,address,int96,bytes)": {
								"details": "A flow created by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"sender": "Flow sender address (has granted permissions)",
									"token": "Super token address"
								}
							},
							"decreaseFlowRateAllowance(address,address,int96,bytes)": {
								"details": "msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"subtractedFlowRateAllowance": "The flow rate allowance delta",
									"token": "Super token address"
								},
								"returns": {
									"newCtx": "The new context bytes"
								}
							},
							"deleteFlow(address,address,address,bytes)": {
								"custom:callbacks": " - AgreementTerminated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - Both flow sender and receiver may delete the flow - If Sender account is insolvent or in critical state, a solvency agent may   also terminate the agreement - Gas fee may be returned to the sender",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"deleteFlowByOperator(address,address,address,bytes)": {
								"details": "A flow deleted by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"getAccountFlowInfo(address,address)": {
								"details": "Get the aggregated flow info of the account",
								"params": {
									"account": "Account for the query",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The sum of all deposits for account's flows",
									"flowRate": "The net flow rate of token for account",
									"owedDeposit": "The sum of all owed deposits for account's flows",
									"timestamp": "Timestamp of when a flow was last updated for account"
								}
							},
							"getDepositRequiredForFlowRate(address,int96)": {
								"custom:note": " - if calculated deposit (flowRate * liquidationPeriod) is less   than the minimum deposit, we use the minimum deposit otherwise   we use the calculated deposit",
								"details": "Calculates the deposit based on the liquidationPeriod and flowRate",
								"params": {
									"flowRate": "Flow rate to be tested"
								},
								"returns": {
									"deposit": "The deposit amount based on flowRate and liquidationPeriod"
								}
							},
							"getFlow(address,address,address)": {
								"details": "Get the flow data between `sender` and `receiver` of `token`",
								"params": {
									"receiver": "Flow sender",
									"sender": "Flow receiver",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The amount of deposit the flow",
									"flowRate": "The flow rate",
									"owedDeposit": "The amount of owed deposit of the flow",
									"timestamp": "Timestamp of when the flow is updated"
								}
							},
							"getFlowByID(address,bytes32)": {
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"agreementId": "The agreement ID",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The deposit amount of the flow",
									"flowRate": "The flow rate",
									"owedDeposit": "The owed deposit amount of the flow",
									"timestamp": "Timestamp of when the flow is updated"
								}
							},
							"getFlowOperatorData(address,address,address)": {
								"params": {
									"flowOperator": "The permission grantee address",
									"sender": "The permission granter address",
									"token": "Super token address"
								},
								"returns": {
									"flowOperatorId": "The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions"
								}
							},
							"getFlowOperatorDataByID(address,bytes32)": {
								"params": {
									"flowOperatorId": "The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator",
									"token": "Super token address"
								},
								"returns": {
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions"
								}
							},
							"getMaximumFlowRateFromDeposit(address,uint256)": {
								"details": "The deposit is clipped and rounded down",
								"params": {
									"deposit": "Deposit amount used for creating the flow"
								},
								"returns": {
									"flowRate": "The maximum flow rate"
								}
							},
							"getNetFlow(address,address)": {
								"details": "Get the net flow rate of the account",
								"params": {
									"account": "Account for the query",
									"token": "Super token address"
								},
								"returns": {
									"flowRate": "Net flow rate"
								}
							},
							"increaseFlowRateAllowance(address,address,int96,bytes)": {
								"details": "if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE",
								"params": {
									"addedFlowRateAllowance": "The flow rate allowance delta",
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								},
								"returns": {
									"newCtx": "The new context bytes"
								}
							},
							"isPatricianPeriod(address,address,uint256)": {
								"details": "Returns whether it is the patrician period based on timestamp",
								"params": {
									"account": "The account we are interested in",
									"timestamp": "The timestamp we are interested in observing the result of isPatricianPeriod"
								},
								"returns": {
									"_0": "bool Whether it is currently the patrician period dictated by governance"
								}
							},
							"isPatricianPeriodNow(address,address)": {
								"details": "Returns whether it is the patrician period based on host.getNow()",
								"params": {
									"account": "The account we are interested in"
								},
								"returns": {
									"isCurrentlyPatricianPeriod": "Whether it is currently the patrician period dictated by governance",
									"timestamp": "The value of host.getNow()"
								}
							},
							"realtimeBalanceOf(address,address,uint256)": {
								"details": "Calculate the real-time balance for the account of this agreement class",
								"params": {
									"account": "Account the state belongs to",
									"time": "Time used for the calculation"
								},
								"returns": {
									"deposit": "Account deposit amount of this agreement",
									"dynamicBalance": "Dynamic balance portion of real-time balance of this agreement",
									"owedDeposit": "Account owed deposit amount of this agreement"
								}
							},
							"revokeFlowOperatorWithFullControl(address,address,bytes)": {
								"details": "`permissions` and `flowRateAllowance` will both be set to 0",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								}
							},
							"updateFlow(address,address,int96,bytes)": {
								"custom:callbacks": " - AgreementUpdated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - Only the flow sender may update the flow rate - Even if the flow rate is zero, the flow is not deleted from the system - Deposit amount will be adjusted accordingly - No new gas fee is charged",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"updateFlowByOperator(address,address,address,int96,bytes)": {
								"details": "A flow updated by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"sender": "Flow sender address (has granted permissions)",
									"token": "Super token address"
								}
							},
							"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)": {
								"details": "msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions",
									"token": "Super token address"
								}
							}
						},
						"title": "Constant Flow Agreement interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"agreementType()": "7730599e",
							"authorizeFlowOperatorWithFullControl(address,address,bytes)": "54b770e3",
							"createFlow(address,address,int96,bytes)": "62fc305e",
							"createFlowByOperator(address,address,address,int96,bytes)": "94229ecb",
							"decreaseFlowRateAllowance(address,address,int96,bytes)": "5f51fb23",
							"deleteFlow(address,address,address,bytes)": "b4b333c6",
							"deleteFlowByOperator(address,address,address,bytes)": "4c8b181f",
							"getAccountFlowInfo(address,address)": "0f1ac495",
							"getDepositRequiredForFlowRate(address,int96)": "8d997f6e",
							"getFlow(address,address,address)": "e6a1e888",
							"getFlowByID(address,bytes32)": "aabd2668",
							"getFlowOperatorData(address,address,address)": "00422bbe",
							"getFlowOperatorDataByID(address,bytes32)": "09d256ef",
							"getMaximumFlowRateFromDeposit(address,uint256)": "0602f7db",
							"getNetFlow(address,address)": "e8e7e2d1",
							"increaseFlowRateAllowance(address,address,int96,bytes)": "ac5f5d00",
							"isPatricianPeriod(address,address,uint256)": "4b839e0b",
							"isPatricianPeriodNow(address,address)": "4fe9c291",
							"realtimeBalanceOf(address,address,uint256)": "9b2e48bc",
							"revokeFlowOperatorWithFullControl(address,address,bytes)": "062e56ec",
							"updateFlow(address,address,int96,bytes)": "50209a62",
							"updateFlowByOperator(address,address,address,int96,bytes)": "354b9590",
							"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)": "811b3d40"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_CREATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_FLOW_OPERATOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_UPDATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_UNCLEAN_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_DEPOSIT_TOO_BIG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_RATE_TOO_BIG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_HOOK_OUT_OF_GAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_INVALID_FLOW_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NON_CRITICAL_SENDER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NO_SELF_FLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ZERO_ADDRESS_RECEIVER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ZERO_ADDRESS_SENDER\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"name\":\"FlowOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalSenderFlowRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalReceiverFlowRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"FlowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"FlowUpdatedExtension\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agreementType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"authorizeFlowOperatorWithFullControl\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"createFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"createFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"subtractedFlowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"decreaseFlowRateAllowance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"deleteFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"deleteFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountFlowInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"name\":\"getDepositRequiredForFlowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getFlow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getFlowByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"}],\"name\":\"getFlowOperatorData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"flowOperatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"flowOperatorId\",\"type\":\"bytes32\"}],\"name\":\"getFlowOperatorDataByID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getMaximumFlowRateFromDeposit\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNetFlow\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"addedFlowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"increaseFlowRateAllowance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isPatricianPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPatricianPeriodNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCurrentlyPatricianPeriod\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"dynamicBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"revokeFlowOperatorWithFullControl\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlowOperatorPermissions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"FlowOperatorUpdated(address,address,address,uint8,int96)\":{\"details\":\"Flow operator updated event\",\"params\":{\"flowOperator\":\"Flow operator address\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"Octo bitmask representation of permissions\",\"sender\":\"Flow sender address\",\"token\":\"Super token address\"}},\"FlowUpdated(address,address,address,int96,int256,int256,bytes)\":{\"details\":\"Flow updated event\",\"params\":{\"flowRate\":\"Flow rate in amount per second for this flow\",\"receiver\":\"Flow recipient address\",\"sender\":\"Flow sender address\",\"token\":\"Super token address\",\"totalReceiverFlowRate\":\"Total flow rate in amount per second for the receiver\",\"totalSenderFlowRate\":\"Total flow rate in amount per second for the sender\",\"userData\":\"The user provided data\"}},\"FlowUpdatedExtension(address,uint256)\":{\"details\":\"Flow updated extension event\",\"params\":{\"deposit\":\"The deposit amount for the stream\",\"flowOperator\":\"Flow operator address - the Context.msgSender\"}}},\"kind\":\"dev\",\"methods\":{\"agreementType()\":{\"details\":\"ISuperAgreement.agreementType implementation\"},\"authorizeFlowOperatorWithFullControl(address,address,bytes)\":{\"details\":\"msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"}},\"createFlow(address,address,int96,bytes)\":{\"custom:callbacks\":\" - AgreementCreated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - A deposit is taken as safety margin for the solvency agents - A extra gas fee may be taken to pay for solvency agent liquidations\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"createFlowByOperator(address,address,address,int96,bytes)\":{\"details\":\"A flow created by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"sender\":\"Flow sender address (has granted permissions)\",\"token\":\"Super token address\"}},\"decreaseFlowRateAllowance(address,address,int96,bytes)\":{\"details\":\"msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"subtractedFlowRateAllowance\":\"The flow rate allowance delta\",\"token\":\"Super token address\"},\"returns\":{\"newCtx\":\"The new context bytes\"}},\"deleteFlow(address,address,address,bytes)\":{\"custom:callbacks\":\" - AgreementTerminated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - Both flow sender and receiver may delete the flow - If Sender account is insolvent or in critical state, a solvency agent may   also terminate the agreement - Gas fee may be returned to the sender\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"deleteFlowByOperator(address,address,address,bytes)\":{\"details\":\"A flow deleted by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"getAccountFlowInfo(address,address)\":{\"details\":\"Get the aggregated flow info of the account\",\"params\":{\"account\":\"Account for the query\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The sum of all deposits for account's flows\",\"flowRate\":\"The net flow rate of token for account\",\"owedDeposit\":\"The sum of all owed deposits for account's flows\",\"timestamp\":\"Timestamp of when a flow was last updated for account\"}},\"getDepositRequiredForFlowRate(address,int96)\":{\"custom:note\":\" - if calculated deposit (flowRate * liquidationPeriod) is less   than the minimum deposit, we use the minimum deposit otherwise   we use the calculated deposit\",\"details\":\"Calculates the deposit based on the liquidationPeriod and flowRate\",\"params\":{\"flowRate\":\"Flow rate to be tested\"},\"returns\":{\"deposit\":\"The deposit amount based on flowRate and liquidationPeriod\"}},\"getFlow(address,address,address)\":{\"details\":\"Get the flow data between `sender` and `receiver` of `token`\",\"params\":{\"receiver\":\"Flow sender\",\"sender\":\"Flow receiver\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The amount of deposit the flow\",\"flowRate\":\"The flow rate\",\"owedDeposit\":\"The amount of owed deposit of the flow\",\"timestamp\":\"Timestamp of when the flow is updated\"}},\"getFlowByID(address,bytes32)\":{\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"agreementId\":\"The agreement ID\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The deposit amount of the flow\",\"flowRate\":\"The flow rate\",\"owedDeposit\":\"The owed deposit amount of the flow\",\"timestamp\":\"Timestamp of when the flow is updated\"}},\"getFlowOperatorData(address,address,address)\":{\"params\":{\"flowOperator\":\"The permission grantee address\",\"sender\":\"The permission granter address\",\"token\":\"Super token address\"},\"returns\":{\"flowOperatorId\":\"The keccak256 hash of encoded string \\\"flowOperator\\\", sender and flowOperator\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\"}},\"getFlowOperatorDataByID(address,bytes32)\":{\"params\":{\"flowOperatorId\":\"The keccak256 hash of encoded string \\\"flowOperator\\\", sender and flowOperator\",\"token\":\"Super token address\"},\"returns\":{\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\"}},\"getMaximumFlowRateFromDeposit(address,uint256)\":{\"details\":\"The deposit is clipped and rounded down\",\"params\":{\"deposit\":\"Deposit amount used for creating the flow\"},\"returns\":{\"flowRate\":\"The maximum flow rate\"}},\"getNetFlow(address,address)\":{\"details\":\"Get the net flow rate of the account\",\"params\":{\"account\":\"Account for the query\",\"token\":\"Super token address\"},\"returns\":{\"flowRate\":\"Net flow rate\"}},\"increaseFlowRateAllowance(address,address,int96,bytes)\":{\"details\":\"if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"params\":{\"addedFlowRateAllowance\":\"The flow rate allowance delta\",\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"},\"returns\":{\"newCtx\":\"The new context bytes\"}},\"isPatricianPeriod(address,address,uint256)\":{\"details\":\"Returns whether it is the patrician period based on timestamp\",\"params\":{\"account\":\"The account we are interested in\",\"timestamp\":\"The timestamp we are interested in observing the result of isPatricianPeriod\"},\"returns\":{\"_0\":\"bool Whether it is currently the patrician period dictated by governance\"}},\"isPatricianPeriodNow(address,address)\":{\"details\":\"Returns whether it is the patrician period based on host.getNow()\",\"params\":{\"account\":\"The account we are interested in\"},\"returns\":{\"isCurrentlyPatricianPeriod\":\"Whether it is currently the patrician period dictated by governance\",\"timestamp\":\"The value of host.getNow()\"}},\"realtimeBalanceOf(address,address,uint256)\":{\"details\":\"Calculate the real-time balance for the account of this agreement class\",\"params\":{\"account\":\"Account the state belongs to\",\"time\":\"Time used for the calculation\"},\"returns\":{\"deposit\":\"Account deposit amount of this agreement\",\"dynamicBalance\":\"Dynamic balance portion of real-time balance of this agreement\",\"owedDeposit\":\"Account owed deposit amount of this agreement\"}},\"revokeFlowOperatorWithFullControl(address,address,bytes)\":{\"details\":\"`permissions` and `flowRateAllowance` will both be set to 0\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"}},\"updateFlow(address,address,int96,bytes)\":{\"custom:callbacks\":\" - AgreementUpdated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - Only the flow sender may update the flow rate - Even if the flow rate is zero, the flow is not deleted from the system - Deposit amount will be adjusted accordingly - No new gas fee is charged\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"updateFlowByOperator(address,address,address,int96,bytes)\":{\"details\":\"A flow updated by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"sender\":\"Flow sender address (has granted permissions)\",\"token\":\"Super token address\"}},\"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)\":{\"details\":\"msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\",\"token\":\"Super token address\"}}},\"title\":\"Constant Flow Agreement interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createFlow(address,address,int96,bytes)\":{\"notice\":\"Create a flow betwen ctx.msgSender and receiver\"},\"createFlowByOperator(address,address,address,int96,bytes)\":{\"notice\":\"Create a flow between sender and receiver\"},\"deleteFlow(address,address,address,bytes)\":{\"notice\":\"Delete the flow between sender and receiver\"},\"deleteFlowByOperator(address,address,address,bytes)\":{\"notice\":\"Delete the flow between sender and receiver\"},\"getDepositRequiredForFlowRate(address,int96)\":{\"notice\":\"Get the deposit required for creating the flow\"},\"getFlowByID(address,bytes32)\":{\"notice\":\"Get flow data using agreementId\"},\"getFlowOperatorData(address,address,address)\":{\"notice\":\"Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\"},\"getFlowOperatorDataByID(address,bytes32)\":{\"notice\":\"Get flow operator using flowOperatorId\"},\"getMaximumFlowRateFromDeposit(address,uint256)\":{\"notice\":\"Get the maximum flow rate allowed with the deposit\"},\"increaseFlowRateAllowance(address,address,int96,bytes)\":{\"notice\":\"msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\"},\"revokeFlowOperatorWithFullControl(address,address,bytes)\":{\"notice\":\"msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\"},\"updateFlow(address,address,int96,bytes)\":{\"notice\":\"Update the flow rate between ctx.msgSender and receiver\"},\"updateFlowByOperator(address,address,address,int96,bytes)\":{\"notice\":\"Update a flow between sender and receiver\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":\"IConstantFlowAgreementV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0x8a191d6f5dcdfd97e8fbbe17382fa96f51dbaddea6ed704206e7cbda5d12cc65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5bed573cf54d2406d0e7566ab6cd37c31025c6fab3b5b8d8ef9b79b1cab098fd\",\"dweb:/ipfs/QmegphCXp9qTAvefUYyW8eGdaGQMLJ4JrEXELU7WhisRcS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createFlow(address,address,int96,bytes)": {
								"notice": "Create a flow betwen ctx.msgSender and receiver"
							},
							"createFlowByOperator(address,address,address,int96,bytes)": {
								"notice": "Create a flow between sender and receiver"
							},
							"deleteFlow(address,address,address,bytes)": {
								"notice": "Delete the flow between sender and receiver"
							},
							"deleteFlowByOperator(address,address,address,bytes)": {
								"notice": "Delete the flow between sender and receiver"
							},
							"getDepositRequiredForFlowRate(address,int96)": {
								"notice": "Get the deposit required for creating the flow"
							},
							"getFlowByID(address,bytes32)": {
								"notice": "Get flow data using agreementId"
							},
							"getFlowOperatorData(address,address,address)": {
								"notice": "Get the permissions of a flow operator between `sender` and `flowOperator` for `token`"
							},
							"getFlowOperatorDataByID(address,bytes32)": {
								"notice": "Get flow operator using flowOperatorId"
							},
							"getMaximumFlowRateFromDeposit(address,uint256)": {
								"notice": "Get the maximum flow rate allowed with the deposit"
							},
							"increaseFlowRateAllowance(address,address,int96,bytes)": {
								"notice": "msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`"
							},
							"revokeFlowOperatorWithFullControl(address,address,bytes)": {
								"notice": "msgSender from `ctx` revokes `flowOperator` create/update/delete permissions"
							},
							"updateFlow(address,address,int96,bytes)": {
								"notice": "Update the flow rate between ctx.msgSender and receiver"
							},
							"updateFlowByOperator(address,address,address,int96,bytes)": {
								"notice": "Update a flow between sender and receiver"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ISuperAgreement": {
					"abi": [
						{
							"inputs": [],
							"name": "agreementType",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "dynamicBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {
							"agreementType()": {
								"details": "Get the type of the agreement class"
							},
							"realtimeBalanceOf(address,address,uint256)": {
								"details": "Calculate the real-time balance for the account of this agreement class",
								"params": {
									"account": "Account the state belongs to",
									"time": "Time used for the calculation"
								},
								"returns": {
									"deposit": "Account deposit amount of this agreement",
									"dynamicBalance": "Dynamic balance portion of real-time balance of this agreement",
									"owedDeposit": "Account owed deposit amount of this agreement"
								}
							}
						},
						"title": "Super agreement interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"agreementType()": "7730599e",
							"realtimeBalanceOf(address,address,uint256)": "9b2e48bc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"agreementType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"dynamicBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{\"agreementType()\":{\"details\":\"Get the type of the agreement class\"},\"realtimeBalanceOf(address,address,uint256)\":{\"details\":\"Calculate the real-time balance for the account of this agreement class\",\"params\":{\"account\":\"Account the state belongs to\",\"time\":\"Time used for the calculation\"},\"returns\":{\"deposit\":\"Account deposit amount of this agreement\",\"dynamicBalance\":\"Dynamic balance portion of real-time balance of this agreement\",\"owedDeposit\":\"Account owed deposit amount of this agreement\"}}},\"title\":\"Super agreement interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":\"ISuperAgreement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ISuperfluidToken": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "rewardAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidatedBy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "rewardAmountReceiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								}
							],
							"name": "AgreementLiquidatedV2",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								}
							],
							"name": "AgreementStateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "AgreementTerminated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "bailoutAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "Bailout",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "createAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountActiveAgreements",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "activeAgreements",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementData",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementStateSlot",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountCritical",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountCriticalNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountSolvent",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountSolventNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "useDefaultRewardAccount",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								}
							],
							"name": "makeLiquidationPayoutsV2",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "realtimeBalanceOfNow",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "settleBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "terminateAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementStateSlot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementCreated(address,bytes32,bytes32[])": {
								"details": "Agreement created event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"AgreementLiquidated(address,bytes32,address,address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAccount": "Account that collect the reward",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"custom:note": " Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"bailoutAmount": "Amount of liquidation bailouot",
									"bondAccount": "Account that collect the reward or bailout accounts",
									"id": "Agreement ID",
									"liquidatorAccount": "Account of the agent that performed the liquidation.",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": {
								"custom:note": " Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount",
								"details": "Agreement liquidation event v2 (including agent account)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"liquidationTypeData": "The encoded liquidation type data including the version (how to decode)",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the reward recipient account balance should change by",
									"rewardAmountReceiver": "Account that collects the reward or bails out insolvent accounts",
									"targetAccount": "Account of the stream sender",
									"targetAccountBalanceDelta": "The amount the sender account balance should change by"
								}
							},
							"AgreementStateUpdated(address,address,uint256)": {
								"details": "Agreement account state updated event",
								"params": {
									"account": "Account updated",
									"agreementClass": "Contract address of the agreement",
									"slotId": "slot id of the agreement state"
								}
							},
							"AgreementTerminated(address,bytes32)": {
								"details": "Agreement terminated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								}
							},
							"AgreementUpdated(address,bytes32,bytes32[])": {
								"details": "Agreement updated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"Bailout(address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"bailoutAccount": "Account that bailout the penalty account",
									"bailoutAmount": "Amount of account bailout"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createAgreement(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"getAccountActiveAgreements(address)": {
								"details": "An active agreement is one that has state for the account",
								"params": {
									"account": "Account to query"
								},
								"returns": {
									"activeAgreements": "List of accounts that have non-zero states for the account"
								}
							},
							"getAgreementData(address,bytes32,uint256)": {
								"details": "Get data of the agreement",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								},
								"returns": {
									"data": "Data of the agreement"
								}
							},
							"getAgreementStateSlot(address,address,uint256,uint256)": {
								"details": "Get data of the slot of the state of an agreement",
								"params": {
									"account": "Account to query",
									"agreementClass": "Contract address of the agreement",
									"dataLength": "length of the state data",
									"slotId": "slot id of the state"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"isAccountCritical(address,uint256)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is critical (should use future)"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountCriticalNow(address)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountSolvent(address,uint256)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is solvent (should use future)"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isAccountSolventNow(address)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"custom:note": " - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount",
								"details": "Make liquidation payouts (v2)",
								"params": {
									"id": "Agreement ID",
									"liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the rewarded account will receive",
									"targetAccount": "Account to be liquidated",
									"targetAccountBalanceDelta": "The delta amount the target account balance should change by",
									"useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
								}
							},
							"realtimeBalanceOf(address,uint256)": {
								"details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
								"params": {
									"account": "for the query",
									"timestamp": "Time of balance"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"realtimeBalanceOfNow(address)": {
								"details": "realtimeBalanceOf with timestamp equals to block timestamp",
								"params": {
									"account": "for the query"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"settleBalance(address,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"details": "The agreement needs to make sure that the balance delta is balanced afterwards",
								"params": {
									"account": "Account to query.",
									"delta": "Amount of balance delta to be settled"
								}
							},
							"terminateAgreement(bytes32,uint256)": {
								"details": "Close the agreement",
								"params": {
									"id": "Agreement ID"
								}
							},
							"updateAgreementData(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"updateAgreementStateSlot(address,uint256,bytes32[])": {
								"custom:note": " - To clear the storage out, provide zero-ed array of intended length",
								"details": "Update agreement state slot",
								"params": {
									"account": "Account to be updated"
								}
							}
						},
						"title": "Superfluid token interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAgreement(bytes32,bytes32[])": "12a6a3f8",
							"getAccountActiveAgreements(address)": "386fa221",
							"getAgreementData(address,bytes32,uint256)": "6c2d9f2f",
							"getAgreementStateSlot(address,address,uint256,uint256)": "4b61cc33",
							"getHost()": "20bc4425",
							"isAccountCritical(address,uint256)": "d9d078d6",
							"isAccountCriticalNow(address)": "79359f6f",
							"isAccountSolvent(address,uint256)": "b84cdd4a",
							"isAccountSolventNow(address)": "bb0d196e",
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": "1863e809",
							"realtimeBalanceOf(address,uint256)": "eb3537cc",
							"realtimeBalanceOfNow(address)": "2ec8eec7",
							"settleBalance(address,int256)": "cf97256d",
							"terminateAgreement(bytes32,uint256)": "27048397",
							"updateAgreementData(bytes32,bytes32[])": "a1b2bf8b",
							"updateAgreementStateSlot(address,uint256,bytes32[])": "090c415e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_BURN_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_MOVE_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"}],\"name\":\"AgreementLiquidatedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bailoutAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"Bailout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"activeAgreements\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountCriticalNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountSolventNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDefaultRewardAccount\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"}],\"name\":\"makeLiquidationPayoutsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementCreated(address,bytes32,bytes32[])\":{\"details\":\"Agreement created event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"AgreementLiquidated(address,bytes32,address,address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAccount\":\"Account that collect the reward\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"custom:note\":\" Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"bailoutAmount\":\"Amount of liquidation bailouot\",\"bondAccount\":\"Account that collect the reward or bailout accounts\",\"id\":\"Agreement ID\",\"liquidatorAccount\":\"Account of the agent that performed the liquidation.\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)\":{\"custom:note\":\" Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount\",\"details\":\"Agreement liquidation event v2 (including agent account)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"liquidationTypeData\":\"The encoded liquidation type data including the version (how to decode)\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the reward recipient account balance should change by\",\"rewardAmountReceiver\":\"Account that collects the reward or bails out insolvent accounts\",\"targetAccount\":\"Account of the stream sender\",\"targetAccountBalanceDelta\":\"The amount the sender account balance should change by\"}},\"AgreementStateUpdated(address,address,uint256)\":{\"details\":\"Agreement account state updated event\",\"params\":{\"account\":\"Account updated\",\"agreementClass\":\"Contract address of the agreement\",\"slotId\":\"slot id of the agreement state\"}},\"AgreementTerminated(address,bytes32)\":{\"details\":\"Agreement terminated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"}},\"AgreementUpdated(address,bytes32,bytes32[])\":{\"details\":\"Agreement updated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"Bailout(address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"bailoutAccount\":\"Account that bailout the penalty account\",\"bailoutAmount\":\"Amount of account bailout\"}}},\"kind\":\"dev\",\"methods\":{\"createAgreement(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"getAccountActiveAgreements(address)\":{\"details\":\"An active agreement is one that has state for the account\",\"params\":{\"account\":\"Account to query\"},\"returns\":{\"activeAgreements\":\"List of accounts that have non-zero states for the account\"}},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"Get data of the agreement\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"},\"returns\":{\"data\":\"Data of the agreement\"}},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"Get data of the slot of the state of an agreement\",\"params\":{\"account\":\"Account to query\",\"agreementClass\":\"Contract address of the agreement\",\"dataLength\":\"length of the state data\",\"slotId\":\"slot id of the state\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"isAccountCritical(address,uint256)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is critical (should use future)\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountCriticalNow(address)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountSolvent(address,uint256)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is solvent (should use future)\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isAccountSolventNow(address)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"custom:note\":\" - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount\",\"details\":\"Make liquidation payouts (v2)\",\"params\":{\"id\":\"Agreement ID\",\"liquidationTypeData\":\"Data regarding the version of the liquidation schema and the type\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the rewarded account will receive\",\"targetAccount\":\"Account to be liquidated\",\"targetAccountBalanceDelta\":\"The delta amount the target account balance should change by\",\"useDefaultRewardAccount\":\"Whether or not the default reward account receives the rewardAmount\"}},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"Calculate the real balance of a user, taking in consideration all agreements of the account\",\"params\":{\"account\":\"for the query\",\"timestamp\":\"Time of balance\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block timestamp\",\"params\":{\"account\":\"for the query\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"settleBalance(address,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"details\":\"The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"Close the agreement\",\"params\":{\"id\":\"Agreement ID\"}},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"custom:note\":\" - To clear the storage out, provide zero-ed array of intended length\",\"details\":\"Update agreement state slot\",\"params\":{\"account\":\"Account to be updated\"}}},\"title\":\"Superfluid token interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAccountActiveAgreements(address)\":{\"notice\":\"Get a list of agreements that is active for the account\"},\"isAccountCritical(address,uint256)\":{\"notice\":\"Check if account is critical\"},\"isAccountCriticalNow(address)\":{\"notice\":\"Check if account is critical now (current host.getNow())\"},\"isAccountSolvent(address,uint256)\":{\"notice\":\"Check if account is solvent\"},\"isAccountSolventNow(address)\":{\"notice\":\"Check if account is solvent now\"},\"realtimeBalanceOfNow(address)\":{\"notice\":\"Calculate the realtime balance given the current host.getNow() value\"},\"settleBalance(address,int256)\":{\"notice\":\"Settle balance from an account by the agreement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":\"ISuperfluidToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getAccountActiveAgreements(address)": {
								"notice": "Get a list of agreements that is active for the account"
							},
							"isAccountCritical(address,uint256)": {
								"notice": "Check if account is critical"
							},
							"isAccountCriticalNow(address)": {
								"notice": "Check if account is critical now (current host.getNow())"
							},
							"isAccountSolvent(address,uint256)": {
								"notice": "Check if account is solvent"
							},
							"isAccountSolventNow(address)": {
								"notice": "Check if account is solvent now"
							},
							"realtimeBalanceOfNow(address)": {
								"notice": "Calculate the realtime balance given the current host.getNow() value"
							},
							"settleBalance(address,int256)": {
								"notice": "Settle balance from an account by the agreement"
							}
						},
						"version": 1
					}
				}
			},
			"mosaic/Test.sol": {
				"Test": {
					"abi": [
						{
							"inputs": [],
							"name": "test",
							"outputs": [],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"mosaic/Test.sol\":284:341  contract Test {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"mosaic/Test.sol\":284:341  contract Test {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xf8a8fd6d\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"mosaic/Test.sol\":304:339  function test() public view {... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n      jump\t// out\n\n    auxdata: 0xa26469706673582212205aaad04d76578682b40799ce6c146702c7f4fa3bc647af604c2b961cff977b2e64736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50606d80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f8a8fd6d14602d575b600080fd5b60336035565b005b56fea26469706673582212205aaad04d76578682b40799ce6c146702c7f4fa3bc647af604c2b961cff977b2e64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6D DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF8A8FD6D EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS 0xAA 0xD0 0x4D PUSH23 0x578682B40799CE6C146702C7F4FA3BC647AF604C2B961C SELFDESTRUCT SWAP8 PUSH28 0x2E64736F6C634300080A003300000000000000000000000000000000 ",
							"sourceMap": "284:57:5:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@test_1452": {
									"entryPoint": 53,
									"id": 1452,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063f8a8fd6d14602d575b600080fd5b60336035565b005b56fea26469706673582212205aaad04d76578682b40799ce6c146702c7f4fa3bc647af604c2b961cff977b2e64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF8A8FD6D EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS 0xAA 0xD0 0x4D PUSH23 0x578682B40799CE6C146702C7F4FA3BC647AF604C2B961C SELFDESTRUCT SWAP8 PUSH28 0x2E64736F6C634300080A003300000000000000000000000000000000 ",
							"sourceMap": "284:57:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;304:35;;;:::i;:::-;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "21800",
								"executionCost": "75",
								"totalCost": "21875"
							},
							"external": {
								"test()": "122"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 284,
									"end": 341,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 284,
									"end": 341,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 284,
									"end": 341,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 284,
									"end": 341,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 284,
									"end": 341,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 284,
									"end": 341,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 284,
									"end": 341,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 284,
									"end": 341,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 284,
									"end": 341,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 284,
									"end": 341,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 284,
									"end": 341,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205aaad04d76578682b40799ce6c146702c7f4fa3bc647af604c2b961cff977b2e64736f6c634300080a0033",
									".code": [
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH",
											"source": 5,
											"value": "F8A8FD6D"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 284,
											"end": 341,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 284,
											"end": 341,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 304,
											"end": 339,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 304,
											"end": 339,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 304,
											"end": 339,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 304,
											"end": 339,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 304,
											"end": 339,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 304,
											"end": 339,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 304,
											"end": 339,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 304,
											"end": 339,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 304,
											"end": 339,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 304,
											"end": 339,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 304,
											"end": 339,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"test()": "f8a8fd6d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"mosaic/Test.sol\":\"Test\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/lens-protocol/contracts/interfaces/ILensHub.sol\":{\"keccak256\":\"0x789b8bad742032bb7d9f5499aec3f6f899f5265e26aa4b38cadaef5d9fcb0ec3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad9f5434eff3128db6a51209b803375d630fac04df6c282ff2623045b23f34d0\",\"dweb:/ipfs/QmSzGyRhvL8vWfVfDC6PgEzdcEf6NaBUt9y2tmVcYyzmvZ\"]},\"@aave/lens-protocol/contracts/libraries/DataTypes.sol\":{\"keccak256\":\"0xe45a4de8ccf54234021dd34333ab17dcf813ceeadd9d4146214a96a1984f14c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0dab1e8626383281aa6543e5930f1a458227039ce3d180c5f01f58244e88637d\",\"dweb:/ipfs/QmQigfKvGGBrE1rJ6oiGh2zAcsMXAZuYRQzjEsjHtCYrue\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0x8a191d6f5dcdfd97e8fbbe17382fa96f51dbaddea6ed704206e7cbda5d12cc65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5bed573cf54d2406d0e7566ab6cd37c31025c6fab3b5b8d8ef9b79b1cab098fd\",\"dweb:/ipfs/QmegphCXp9qTAvefUYyW8eGdaGQMLJ4JrEXELU7WhisRcS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"mosaic/Test.sol\":{\"keccak256\":\"0xeeea0577822957ea2977efbe0527f3884db7576bf20105c7ddceef37c76af57c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e58723c3bdcbc77faac1f788deacee8161c28c259e9ca4a3003ec5e4e0c50af\",\"dweb:/ipfs/QmfD79MwiB216W1M8ab47AasTzRDeB9orTiGR3KxJjHXpN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@aave/lens-protocol/contracts/interfaces/ILensHub.sol": {
				"ast": {
					"absolutePath": "@aave/lens-protocol/contracts/interfaces/ILensHub.sol",
					"exportedSymbols": {
						"DataTypes": [
							717
						],
						"ILensHub": [
							471
						]
					},
					"id": 472,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".10"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"absolutePath": "@aave/lens-protocol/contracts/libraries/DataTypes.sol",
							"file": "../libraries/DataTypes.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 472,
							"sourceUnit": 718,
							"src": "58:53:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "DataTypes",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "66:9:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ILensHub",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "113:254:0",
								"text": " @title ILensHub\n @author Lens Protocol\n @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\n You'll find all the events and external functions, as well as the reasoning behind them here."
							},
							"fullyImplemented": false,
							"id": 471,
							"linearizedBaseContracts": [
								471
							],
							"name": "ILensHub",
							"nameLocation": "378:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 5,
										"nodeType": "StructuredDocumentation",
										"src": "393:335:0",
										"text": " @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\n the LensNFTBase contract.\n @param name The name to set for the hub NFT.\n @param symbol The symbol to set for the hub NFT.\n @param newGovernance The governance address to set."
									},
									"functionSelector": "077f224a",
									"id": 14,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "742:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "778:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "762:20:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 6,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "762:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "808:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "792:22:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 8,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "792:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "newGovernance",
												"nameLocation": "832:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "824:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "824:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:99:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "860:0:0"
									},
									"scope": 471,
									"src": "733:128:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "867:208:0",
										"text": " @notice Sets the privileged governance role. This function can only be called by the current governance\n address.\n @param newGovernance The new governance address to set."
									},
									"functionSelector": "ab033ea9",
									"id": 20,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setGovernance",
									"nameLocation": "1089:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "newGovernance",
												"nameLocation": "1111:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1103:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1103:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1102:23:0"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1134:0:0"
									},
									"scope": 471,
									"src": "1080:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1141:259:0",
										"text": " @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\n can only be called by the governance address.\n @param newEmergencyAdmin The new emergency admin address to set."
									},
									"functionSelector": "35da3394",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setEmergencyAdmin",
									"nameLocation": "1414:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "newEmergencyAdmin",
												"nameLocation": "1440:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "1432:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1431:27:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1467:0:0"
									},
									"scope": 471,
									"src": "1405:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "1474:520:0",
										"text": " @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\n can only be called by the governance address or the emergency admin address.\n Note that this reverts if the emergency admin calls it if:\n      1. The emergency admin is attempting to unpause.\n      2. The emergency admin is calling while the protocol is already paused.\n @param newState The state to set, as a member of the ProtocolState enum."
									},
									"functionSelector": "56de96db",
									"id": 33,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setState",
									"nameLocation": "2008:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "newState",
												"nameLocation": "2041:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 33,
												"src": "2017:32:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_ProtocolState_$478",
													"typeString": "enum DataTypes.ProtocolState"
												},
												"typeName": {
													"id": 29,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 28,
														"name": "DataTypes.ProtocolState",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 478,
														"src": "2017:23:0"
													},
													"referencedDeclaration": 478,
													"src": "2017:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_ProtocolState_$478",
														"typeString": "enum DataTypes.ProtocolState"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2016:34:0"
									},
									"returnParameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2059:0:0"
									},
									"scope": 471,
									"src": "1999:61:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 34,
										"nodeType": "StructuredDocumentation",
										"src": "2066:338:0",
										"text": " @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\n governance address.\n @param profileCreator The profile creator address to add or remove from the whitelist.\n @param whitelist Whether or not the profile creator should be whitelisted."
									},
									"functionSelector": "20905506",
									"id": 41,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "whitelistProfileCreator",
									"nameLocation": "2418:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "profileCreator",
												"nameLocation": "2450:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "2442:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 35,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2442:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "whitelist",
												"nameLocation": "2471:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "2466:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 37,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2466:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2441:40:0"
									},
									"returnParameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2490:0:0"
									},
									"scope": 471,
									"src": "2409:82:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 42,
										"nodeType": "StructuredDocumentation",
										"src": "2497:339:0",
										"text": " @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\n governance address.\n @param followModule The follow module contract address to add or remove from the whitelist.\n @param whitelist Whether or not the follow module should be whitelisted."
									},
									"functionSelector": "a6d8e1e4",
									"id": 49,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "whitelistFollowModule",
									"nameLocation": "2850:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "followModule",
												"nameLocation": "2880:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "2872:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2872:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "whitelist",
												"nameLocation": "2899:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "2894:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 45,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2894:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2871:38:0"
									},
									"returnParameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2918:0:0"
									},
									"scope": 471,
									"src": "2841:78:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 50,
										"nodeType": "StructuredDocumentation",
										"src": "2925:343:0",
										"text": " @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\n governance address.\n @param referenceModule The reference module contract to add or remove from the whitelist.\n @param whitelist Whether or not the reference module should be whitelisted."
									},
									"functionSelector": "4187e4c5",
									"id": 57,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "whitelistReferenceModule",
									"nameLocation": "3282:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "referenceModule",
												"nameLocation": "3315:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "3307:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 51,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3307:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 54,
												"mutability": "mutable",
												"name": "whitelist",
												"nameLocation": "3337:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "3332:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 53,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3332:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3306:41:0"
									},
									"returnParameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3356:0:0"
									},
									"scope": 471,
									"src": "3273:84:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 58,
										"nodeType": "StructuredDocumentation",
										"src": "3363:343:0",
										"text": " @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\n governance address.\n @param collectModule The collect module contract address to add or remove from the whitelist.\n @param whitelist Whether or not the collect module should be whitelisted."
									},
									"functionSelector": "31dcebe3",
									"id": 65,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "whitelistCollectModule",
									"nameLocation": "3720:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "collectModule",
												"nameLocation": "3751:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "3743:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 59,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3743:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "whitelist",
												"nameLocation": "3771:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "3766:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3766:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3742:39:0"
									},
									"returnParameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3790:0:0"
									},
									"scope": 471,
									"src": "3711:80:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 66,
										"nodeType": "StructuredDocumentation",
										"src": "3797:631:0",
										"text": " @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\n function must be called by a whitelisted profile creator.\n @param vars A CreateProfileData struct containing the following params:\n      to: The address receiving the profile.\n      handle: The handle to set for the profile, must be unique and non-empty.\n      imageURI: The URI to set for the profile image.\n      followModule: The follow module to use, can be the zero address.\n      followModuleInitData: The follow module initialization data, if any."
									},
									"functionSelector": "ffea138e",
									"id": 74,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createProfile",
									"nameLocation": "4442:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "4493:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "4456:41:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CreateProfileData_$531_calldata_ptr",
													"typeString": "struct DataTypes.CreateProfileData"
												},
												"typeName": {
													"id": 68,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 67,
														"name": "DataTypes.CreateProfileData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 531,
														"src": "4456:27:0"
													},
													"referencedDeclaration": 531,
													"src": "4456:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CreateProfileData_$531_storage_ptr",
														"typeString": "struct DataTypes.CreateProfileData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4455:43:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 74,
												"src": "4517:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 71,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4517:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4516:9:0"
									},
									"scope": 471,
									"src": "4433:93:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "4532:185:0",
										"text": " @notice Sets the mapping between wallet and its main profile identity.\n @param profileId The token ID of the profile to set as the main profile identity."
									},
									"functionSelector": "f1b2f8bc",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setDefaultProfile",
									"nameLocation": "4731:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "4757:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4749:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4749:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4748:19:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4776:0:0"
									},
									"scope": 471,
									"src": "4722:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "4783:262:0",
										"text": " @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\n @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct."
									},
									"functionSelector": "dc217253",
									"id": 87,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setDefaultProfileWithSig",
									"nameLocation": "5059:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "5132:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "5084:52:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SetDefaultProfileWithSigData_$539_calldata_ptr",
													"typeString": "struct DataTypes.SetDefaultProfileWithSigData"
												},
												"typeName": {
													"id": 83,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 82,
														"name": "DataTypes.SetDefaultProfileWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 539,
														"src": "5084:38:0"
													},
													"referencedDeclaration": 539,
													"src": "5084:38:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SetDefaultProfileWithSigData_$539_storage_ptr",
														"typeString": "struct DataTypes.SetDefaultProfileWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5083:54:0"
									},
									"returnParameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5154:0:0"
									},
									"scope": 471,
									"src": "5050:105:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 88,
										"nodeType": "StructuredDocumentation",
										"src": "5161:378:0",
										"text": " @notice Sets a profile's follow module, must be called by the profile owner.\n @param profileId The token ID of the profile to set the follow module for.\n @param followModule The follow module to set for the given profile, must be whitelisted.\n @param followModuleInitData The data to be passed to the follow module for initialization."
									},
									"functionSelector": "6dea40b3",
									"id": 97,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFollowModule",
									"nameLocation": "5553:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "5586:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "5578:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 89,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5578:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "followModule",
												"nameLocation": "5613:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "5605:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 91,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5605:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "followModuleInitData",
												"nameLocation": "5650:20:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "5635:35:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 93,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5635:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5568:108:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5685:0:0"
									},
									"scope": 471,
									"src": "5544:142:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 98,
										"nodeType": "StructuredDocumentation",
										"src": "5692:229:0",
										"text": " @notice Sets a profile's follow module via signature with the specified parameters.\n @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct."
									},
									"functionSelector": "3b28b89f",
									"id": 104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFollowModuleWithSig",
									"nameLocation": "5935:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "6004:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "5958:50:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SetFollowModuleWithSigData_$549_calldata_ptr",
													"typeString": "struct DataTypes.SetFollowModuleWithSigData"
												},
												"typeName": {
													"id": 100,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 99,
														"name": "DataTypes.SetFollowModuleWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 549,
														"src": "5958:36:0"
													},
													"referencedDeclaration": 549,
													"src": "5958:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SetFollowModuleWithSigData_$549_storage_ptr",
														"typeString": "struct DataTypes.SetFollowModuleWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5957:52:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6018:0:0"
									},
									"scope": 471,
									"src": "5926:93:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "6025:295:0",
										"text": " @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\n @param profileId The token ID of the profile of the profile to set the dispatcher for.\n @param dispatcher The dispatcher address to set for the given profile ID."
									},
									"functionSelector": "bfd24f47",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setDispatcher",
									"nameLocation": "6334:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "6356:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "6348:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6348:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "dispatcher",
												"nameLocation": "6375:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "6367:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6367:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6347:39:0"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6395:0:0"
									},
									"scope": 471,
									"src": "6325:71:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 113,
										"nodeType": "StructuredDocumentation",
										"src": "6402:224:0",
										"text": " @notice Sets a profile's dispatcher via signature with the specified parameters.\n @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct."
									},
									"functionSelector": "bfbf0b4b",
									"id": 119,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setDispatcherWithSig",
									"nameLocation": "6640:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "6705:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "6661:48:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SetDispatcherWithSigData_$557_calldata_ptr",
													"typeString": "struct DataTypes.SetDispatcherWithSigData"
												},
												"typeName": {
													"id": 115,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 114,
														"name": "DataTypes.SetDispatcherWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 557,
														"src": "6661:34:0"
													},
													"referencedDeclaration": 557,
													"src": "6661:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SetDispatcherWithSigData_$557_storage_ptr",
														"typeString": "struct DataTypes.SetDispatcherWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6660:50:0"
									},
									"returnParameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6719:0:0"
									},
									"scope": 471,
									"src": "6631:89:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "6726:252:0",
										"text": " @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\n @param profileId The token ID of the profile of the profile to set the URI for.\n @param imageURI The URI to set for the given profile."
									},
									"functionSelector": "054871b8",
									"id": 127,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setProfileImageURI",
									"nameLocation": "6992:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "7019:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "7011:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7011:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "imageURI",
												"nameLocation": "7046:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "7030:24:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 123,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7030:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7010:45:0"
									},
									"returnParameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7064:0:0"
									},
									"scope": 471,
									"src": "6983:82:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "7071:222:0",
										"text": " @notice Sets a profile's URI via signature with the specified parameters.\n @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct."
									},
									"functionSelector": "9b84a14c",
									"id": 134,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setProfileImageURIWithSig",
									"nameLocation": "7307:25:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "7382:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "7333:53:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SetProfileImageURIWithSigData_$565_calldata_ptr",
													"typeString": "struct DataTypes.SetProfileImageURIWithSigData"
												},
												"typeName": {
													"id": 130,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 129,
														"name": "DataTypes.SetProfileImageURIWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 565,
														"src": "7333:39:0"
													},
													"referencedDeclaration": 565,
													"src": "7333:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SetProfileImageURIWithSigData_$565_storage_ptr",
														"typeString": "struct DataTypes.SetProfileImageURIWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7332:55:0"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7404:0:0"
									},
									"scope": 471,
									"src": "7298:107:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "7411:230:0",
										"text": " @notice Sets a followNFT URI for a given profile's follow NFT.\n @param profileId The token ID of the profile for which to set the followNFT URI.\n @param followNFTURI The follow NFT URI to set."
									},
									"functionSelector": "c6b5d06c",
									"id": 142,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFollowNFTURI",
									"nameLocation": "7655:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "7679:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "7671:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7671:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "followNFTURI",
												"nameLocation": "7706:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "7690:28:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 138,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7690:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7670:49:0"
									},
									"returnParameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7728:0:0"
									},
									"scope": 471,
									"src": "7646:83:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 143,
										"nodeType": "StructuredDocumentation",
										"src": "7735:219:0",
										"text": " @notice Sets a followNFT URI via signature with the specified parameters.\n @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct."
									},
									"functionSelector": "bd12d3f0",
									"id": 149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setFollowNFTURIWithSig",
									"nameLocation": "7968:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "8037:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "7991:50:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SetFollowNFTURIWithSigData_$573_calldata_ptr",
													"typeString": "struct DataTypes.SetFollowNFTURIWithSigData"
												},
												"typeName": {
													"id": 145,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 144,
														"name": "DataTypes.SetFollowNFTURIWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 573,
														"src": "7991:36:0"
													},
													"referencedDeclaration": 573,
													"src": "7991:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SetFollowNFTURIWithSigData_$573_storage_ptr",
														"typeString": "struct DataTypes.SetFollowNFTURIWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7990:52:0"
									},
									"returnParameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8051:0:0"
									},
									"scope": 471,
									"src": "7959:93:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "8058:259:0",
										"text": " @notice Publishes a post to a given profile, must be called by the profile owner.\n @param vars A PostData struct containing the needed parameters.\n @return uint256 An integer representing the post's publication ID."
									},
									"functionSelector": "963ff141",
									"id": 158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "post",
									"nameLocation": "8331:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "8364:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "8336:32:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PostData_$586_calldata_ptr",
													"typeString": "struct DataTypes.PostData"
												},
												"typeName": {
													"id": 152,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 151,
														"name": "DataTypes.PostData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 586,
														"src": "8336:18:0"
													},
													"referencedDeclaration": 586,
													"src": "8336:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PostData_$586_storage_ptr",
														"typeString": "struct DataTypes.PostData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8335:34:0"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "8388:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8388:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8387:9:0"
									},
									"scope": 471,
									"src": "8322:75:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "8403:304:0",
										"text": " @notice Publishes a post to a given profile via signature with the specified parameters.\n @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\n @return uint256 An integer representing the post's publication ID."
									},
									"functionSelector": "3b508132",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "postWithSig",
									"nameLocation": "8721:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "8768:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "8733:39:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PostWithSigData_$602_calldata_ptr",
													"typeString": "struct DataTypes.PostWithSigData"
												},
												"typeName": {
													"id": 161,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 160,
														"name": "DataTypes.PostWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 602,
														"src": "8733:25:0"
													},
													"referencedDeclaration": 602,
													"src": "8733:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PostWithSigData_$602_storage_ptr",
														"typeString": "struct DataTypes.PostWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8732:41:0"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "8792:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8792:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8791:9:0"
									},
									"scope": 471,
									"src": "8712:89:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "8807:268:0",
										"text": " @notice Publishes a comment to a given profile, must be called by the profile owner.\n @param vars A CommentData struct containing the needed parameters.\n @return uint256 An integer representing the comment's publication ID."
									},
									"functionSelector": "b6f32d2b",
									"id": 176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "comment",
									"nameLocation": "9089:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "9128:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "9097:35:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CommentData_$621_calldata_ptr",
													"typeString": "struct DataTypes.CommentData"
												},
												"typeName": {
													"id": 170,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 169,
														"name": "DataTypes.CommentData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 621,
														"src": "9097:21:0"
													},
													"referencedDeclaration": 621,
													"src": "9097:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CommentData_$621_storage_ptr",
														"typeString": "struct DataTypes.CommentData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9096:37:0"
									},
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "9152:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9152:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9151:9:0"
									},
									"scope": 471,
									"src": "9080:81:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "9167:313:0",
										"text": " @notice Publishes a comment to a given profile via signature with the specified parameters.\n @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\n @return uint256 An integer representing the comment's publication ID."
									},
									"functionSelector": "7a375716",
									"id": 185,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "commentWithSig",
									"nameLocation": "9494:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "9547:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "9509:42:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CommentWithSigData_$643_calldata_ptr",
													"typeString": "struct DataTypes.CommentWithSigData"
												},
												"typeName": {
													"id": 179,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 178,
														"name": "DataTypes.CommentWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 643,
														"src": "9509:28:0"
													},
													"referencedDeclaration": 643,
													"src": "9509:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CommentWithSigData_$643_storage_ptr",
														"typeString": "struct DataTypes.CommentWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9508:44:0"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "9571:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9571:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9570:9:0"
									},
									"scope": 471,
									"src": "9485:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 186,
										"nodeType": "StructuredDocumentation",
										"src": "9586:268:0",
										"text": " @notice Publishes a mirror to a given profile, must be called by the profile owner.\n @param vars A MirrorData struct containing the necessary parameters.\n @return uint256 An integer representing the mirror's publication ID."
									},
									"functionSelector": "2faeed81",
									"id": 194,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mirror",
									"nameLocation": "9868:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "9905:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "9875:34:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MirrorData_$656_calldata_ptr",
													"typeString": "struct DataTypes.MirrorData"
												},
												"typeName": {
													"id": 188,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 187,
														"name": "DataTypes.MirrorData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 656,
														"src": "9875:20:0"
													},
													"referencedDeclaration": 656,
													"src": "9875:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MirrorData_$656_storage_ptr",
														"typeString": "struct DataTypes.MirrorData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9874:36:0"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "9929:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9929:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9928:9:0"
									},
									"scope": 471,
									"src": "9859:79:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "9944:310:0",
										"text": " @notice Publishes a mirror to a given profile via signature with the specified parameters.\n @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\n @return uint256 An integer representing the mirror's publication ID."
									},
									"functionSelector": "df457c34",
									"id": 203,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mirrorWithSig",
									"nameLocation": "10268:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "10319:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "10282:41:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_MirrorWithSigData_$672_calldata_ptr",
													"typeString": "struct DataTypes.MirrorWithSigData"
												},
												"typeName": {
													"id": 197,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 196,
														"name": "DataTypes.MirrorWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 672,
														"src": "10282:27:0"
													},
													"referencedDeclaration": 672,
													"src": "10282:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_MirrorWithSigData_$672_storage_ptr",
														"typeString": "struct DataTypes.MirrorWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10281:43:0"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "10343:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:9:0"
									},
									"scope": 471,
									"src": "10259:93:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "10358:575:0",
										"text": " @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\n NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\n @param profileIds The token ID array of the profiles to follow.\n @param datas The arbitrary data array to pass to the follow module for each profile if needed.\n @return uint256[] An array of integers representing the minted follow NFTs token IDs."
									},
									"functionSelector": "fb78ae6c",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "follow",
									"nameLocation": "10947:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "profileIds",
												"nameLocation": "10973:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "10954:29:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 205,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "10954:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 206,
													"nodeType": "ArrayTypeName",
													"src": "10954:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "datas",
												"nameLocation": "11002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "10985:22:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 208,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "10985:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 209,
													"nodeType": "ArrayTypeName",
													"src": "10985:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10953:55:0"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "11043:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 212,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "11043:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 213,
													"nodeType": "ArrayTypeName",
													"src": "11043:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11042:18:0"
									},
									"scope": 471,
									"src": "10938:123:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "11067:362:0",
										"text": " @notice Follows a given profile via signature with the specified parameters.\n @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\n and an EIP712Signature struct.\n @return uint256[] An array of integers representing the minted follow NFTs token IDs."
									},
									"functionSelector": "8e4fd6a9",
									"id": 226,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "followWithSig",
									"nameLocation": "11443:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "11494:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "11457:41:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FollowWithSigData_$684_calldata_ptr",
													"typeString": "struct DataTypes.FollowWithSigData"
												},
												"typeName": {
													"id": 219,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 218,
														"name": "DataTypes.FollowWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 684,
														"src": "11457:27:0"
													},
													"referencedDeclaration": 684,
													"src": "11457:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FollowWithSigData_$684_storage_ptr",
														"typeString": "struct DataTypes.FollowWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11456:43:0"
									},
									"returnParameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "11534:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 222,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "11534:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 223,
													"nodeType": "ArrayTypeName",
													"src": "11534:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11533:18:0"
									},
									"scope": 471,
									"src": "11434:118:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "11558:448:0",
										"text": " @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\n @param profileId The token ID of the profile that published the publication to collect.\n @param pubId The publication to collect's publication ID.\n @param data The arbitrary data to pass to the collect module if needed.\n @return uint256 An integer representing the minted token ID."
									},
									"functionSelector": "84114ad4",
									"id": 238,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collect",
									"nameLocation": "12020:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "12045:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "12037:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12037:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "pubId",
												"nameLocation": "12072:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "12064:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 230,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12064:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "12102:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "12087:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 232,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12087:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12027:85:0"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "12131:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12131:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12130:9:0"
									},
									"scope": 471,
									"src": "12011:129:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "12146:336:0",
										"text": " @notice Collects a given publication via signature with the specified parameters.\n @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\n an EIP712Signature struct.\n @return uint256 An integer representing the minted token ID."
									},
									"functionSelector": "b48951e4",
									"id": 247,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectWithSig",
									"nameLocation": "12496:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "vars",
												"nameLocation": "12549:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "12511:42:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectWithSigData_$696_calldata_ptr",
													"typeString": "struct DataTypes.CollectWithSigData"
												},
												"typeName": {
													"id": 241,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 240,
														"name": "DataTypes.CollectWithSigData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 696,
														"src": "12511:28:0"
													},
													"referencedDeclaration": 696,
													"src": "12511:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectWithSigData_$696_storage_ptr",
														"typeString": "struct DataTypes.CollectWithSigData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12510:44:0"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "12573:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12573:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12572:9:0"
									},
									"scope": 471,
									"src": "12487:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 248,
										"nodeType": "StructuredDocumentation",
										"src": "12588:480:0",
										"text": " @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\n followNFT transfers.\n @param profileId The token ID of the profile associated with the followNFT being transferred.\n @param followNFTId The followNFT being transferred's token ID.\n @param from The address the followNFT is being transferred from.\n @param to The address the followNFT is being transferred to."
									},
									"functionSelector": "bdfdd4bc",
									"id": 259,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "emitFollowNFTTransferEvent",
									"nameLocation": "13082:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "13126:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "13118:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 249,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13118:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "followNFTId",
												"nameLocation": "13153:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "13145:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13145:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13182:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "13174:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13174:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13204:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "13196:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13196:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13108:104:0"
									},
									"returnParameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13221:0:0"
									},
									"scope": 471,
									"src": "13073:149:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "13228:578:0",
										"text": " @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\n collectNFT transfers.\n @param profileId The token ID of the profile associated with the collect NFT being transferred.\n @param pubId The publication ID associated with the collect NFT being transferred.\n @param collectNFTId The collectNFT being transferred's token ID.\n @param from The address the collectNFT is being transferred from.\n @param to The address the collectNFT is being transferred to."
									},
									"functionSelector": "86e2947b",
									"id": 273,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "emitCollectNFTTransferEvent",
									"nameLocation": "13820:27:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "13865:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "13857:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13857:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "pubId",
												"nameLocation": "13892:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "13884:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 263,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13884:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "collectNFTId",
												"nameLocation": "13915:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "13907:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13907:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13945:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "13937:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 267,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13937:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13967:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "13959:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 269,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13959:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13847:128:0"
									},
									"returnParameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13984:0:0"
									},
									"scope": 471,
									"src": "13811:174:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 274,
										"nodeType": "StructuredDocumentation",
										"src": "14091:252:0",
										"text": " @notice Returns whether or not a profile creator is whitelisted.\n @param profileCreator The address of the profile creator to check.\n @return bool True if the profile creator is whitelisted, false otherwise."
									},
									"functionSelector": "af05dd22",
									"id": 281,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isProfileCreatorWhitelisted",
									"nameLocation": "14357:27:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "profileCreator",
												"nameLocation": "14393:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "14385:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14385:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14384:24:0"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "14432:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 278,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14432:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14431:6:0"
									},
									"scope": 471,
									"src": "14348:90:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "14444:230:0",
										"text": " @notice Returns default profile for a given wallet address\n @param wallet The address to find the default mapping\n @return uint256 The default profile id, which will be 0 if not mapped."
									},
									"functionSelector": "92254a62",
									"id": 289,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultProfile",
									"nameLocation": "14688:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "wallet",
												"nameLocation": "14711:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "14703:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14703:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14702:16:0"
									},
									"returnParameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "14742:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14742:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14741:9:0"
									},
									"scope": 471,
									"src": "14679:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 290,
										"nodeType": "StructuredDocumentation",
										"src": "14757:248:0",
										"text": " @notice Returns whether or not a follow module is whitelisted.\n @param followModule The address of the follow module to check.\n @return bool True if the the follow module is whitelisted, false otherwise."
									},
									"functionSelector": "1cbb2620",
									"id": 297,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isFollowModuleWhitelisted",
									"nameLocation": "15019:25:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "followModule",
												"nameLocation": "15053:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "15045:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15045:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15044:22:0"
									},
									"returnParameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "15090:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 294,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15090:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15089:6:0"
									},
									"scope": 471,
									"src": "15010:86:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 298,
										"nodeType": "StructuredDocumentation",
										"src": "15102:260:0",
										"text": " @notice Returns whether or not a reference module is whitelisted.\n @param referenceModule The address of the reference module to check.\n @return bool True if the the reference module is whitelisted, false otherwise."
									},
									"functionSelector": "8e204fb4",
									"id": 305,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isReferenceModuleWhitelisted",
									"nameLocation": "15376:28:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "referenceModule",
												"nameLocation": "15413:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "15405:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 299,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15405:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15404:25:0"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "15453:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 302,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15453:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15452:6:0"
									},
									"scope": 471,
									"src": "15367:92:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "15465:252:0",
										"text": " @notice Returns whether or not a collect module is whitelisted.\n @param collectModule The address of the collect module to check.\n @return bool True if the the collect module is whitelisted, false otherwise."
									},
									"functionSelector": "ad3e72bf",
									"id": 313,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isCollectModuleWhitelisted",
									"nameLocation": "15731:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "collectModule",
												"nameLocation": "15766:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "15758:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15758:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15757:23:0"
									},
									"returnParameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "15804:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 310,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15804:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15803:6:0"
									},
									"scope": 471,
									"src": "15722:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "15816:161:0",
										"text": " @notice Returns the currently configured governance address.\n @return address The address of the currently configured governance."
									},
									"functionSelector": "289b3c0d",
									"id": 319,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getGovernance",
									"nameLocation": "15991:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16004:2:0"
									},
									"returnParameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "16030:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16030:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16029:9:0"
									},
									"scope": 471,
									"src": "15982:57:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "16045:246:0",
										"text": " @notice Returns the dispatcher associated with a profile.\n @param profileId The token ID of the profile to query the dispatcher for.\n @return address The dispatcher address associated with the profile."
									},
									"functionSelector": "540528b9",
									"id": 327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDispatcher",
									"nameLocation": "16305:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "16327:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "16319:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16319:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16318:19:0"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "16361:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 324,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16361:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16360:9:0"
									},
									"scope": 471,
									"src": "16296:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "16376:240:0",
										"text": " @notice Returns the publication count for a given profile.\n @param profileId The token ID of the profile to query.\n @return uint256 The number of publications associated with the queried profile."
									},
									"functionSelector": "3a15ff07",
									"id": 335,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPubCount",
									"nameLocation": "16630:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "16650:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "16642:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16642:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16641:19:0"
									},
									"returnParameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "16684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 332,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16684:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16683:9:0"
									},
									"scope": 471,
									"src": "16621:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "16699:255:0",
										"text": " @notice Returns the followNFT associated with a given profile, if any.\n @param profileId The token ID of the profile to query the followNFT for.\n @return address The followNFT associated with the given profile."
									},
									"functionSelector": "a9ec6563",
									"id": 343,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFollowNFT",
									"nameLocation": "16968:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 338,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "16989:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 343,
												"src": "16981:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 337,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16981:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16980:19:0"
									},
									"returnParameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 343,
												"src": "17023:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17023:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17022:9:0"
									},
									"scope": 471,
									"src": "16959:73:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 344,
										"nodeType": "StructuredDocumentation",
										"src": "17038:258:0",
										"text": " @notice Returns the followNFT URI associated with a given profile.\n @param profileId The token ID of the profile to query the followNFT URI for.\n @return string The followNFT URI associated with the given profile."
									},
									"functionSelector": "374c9473",
									"id": 351,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFollowNFTURI",
									"nameLocation": "17310:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "17334:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "17326:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17326:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17325:19:0"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "17368:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "17368:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17367:15:0"
									},
									"scope": 471,
									"src": "17301:82:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 352,
										"nodeType": "StructuredDocumentation",
										"src": "17389:363:0",
										"text": " @notice Returns the collectNFT associated with a given publication, if any.\n @param profileId The token ID of the profile that published the publication to query.\n @param pubId The publication ID of the publication to query.\n @return address The address of the collectNFT associated with the queried publication."
									},
									"functionSelector": "52aaef55",
									"id": 361,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getCollectNFT",
									"nameLocation": "17766:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "17788:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "17780:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17780:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "pubId",
												"nameLocation": "17807:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "17799:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17799:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17779:34:0"
									},
									"returnParameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "17837:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17837:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17836:9:0"
									},
									"scope": 471,
									"src": "17757:89:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 362,
										"nodeType": "StructuredDocumentation",
										"src": "17852:282:0",
										"text": " @notice Returns the follow module associated witha  given profile, if any.\n @param profileId The token ID of the profile to query the follow module for.\n @return address The address of the follow module associated with the given profile."
									},
									"functionSelector": "d923d20c",
									"id": 369,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFollowModule",
									"nameLocation": "18148:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "18172:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "18164:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 363,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18164:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18163:19:0"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "18206:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 366,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18206:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18205:9:0"
									},
									"scope": 471,
									"src": "18139:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "18221:363:0",
										"text": " @notice Returns the collect module associated with a given publication.\n @param profileId The token ID of the profile that published the publication to query.\n @param pubId The publication ID of the publication to query.\n @return address The address of the collect module associated with the queried publication."
									},
									"functionSelector": "57ff49f6",
									"id": 379,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getCollectModule",
									"nameLocation": "18598:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "18623:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "18615:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18615:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "pubId",
												"nameLocation": "18642:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "18634:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18634:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18614:34:0"
									},
									"returnParameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "18672:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18672:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18671:9:0"
									},
									"scope": 471,
									"src": "18589:92:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 380,
										"nodeType": "StructuredDocumentation",
										"src": "18687:414:0",
										"text": " @notice Returns the reference module associated witha  given profile, if any.\n @param profileId The token ID of the profile that published the publication to querythe reference module for.\n @param pubId The publication ID of the publication to query the reference module for.\n @return address The address of the reference module associated with the given profile."
									},
									"functionSelector": "b7984c05",
									"id": 389,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getReferenceModule",
									"nameLocation": "19115:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "19142:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "19134:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19134:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "pubId",
												"nameLocation": "19161:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "19153:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 383,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19153:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19133:34:0"
									},
									"returnParameters": {
										"id": 388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "19191:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19191:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19190:9:0"
									},
									"scope": 471,
									"src": "19106:94:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 390,
										"nodeType": "StructuredDocumentation",
										"src": "19206:225:0",
										"text": " @notice Returns the handle associated with a profile.\n @param profileId The token ID of the profile to query the handle for.\n @return string The handle associated with the profile."
									},
									"functionSelector": "ec81d194",
									"id": 397,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHandle",
									"nameLocation": "19445:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "19463:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "19455:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19455:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19454:19:0"
									},
									"returnParameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "19497:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 394,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "19497:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19496:15:0"
									},
									"scope": 471,
									"src": "19436:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "19518:513:0",
										"text": " @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\n @param profileId The token ID of the profile that published the publication to query the pointer for.\n @param pubId The publication ID of the publication to query the pointer for.\n @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\n publication ID of the publication the current publication is pointing to."
									},
									"functionSelector": "5ca3eebf",
									"id": 409,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPubPointer",
									"nameLocation": "20045:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "20067:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "20059:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20059:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "pubId",
												"nameLocation": "20086:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "20078:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 401,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20078:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20058:34:0"
									},
									"returnParameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "20140:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 404,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20140:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "20149:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20149:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20139:18:0"
									},
									"scope": 471,
									"src": "20036:122:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "20164:321:0",
										"text": " @notice Returns the URI associated with a given publication.\n @param profileId The token ID of the profile that published the publication to query.\n @param pubId The publication ID of the publication to query.\n @return string The URI associated with a given publication."
									},
									"functionSelector": "b5a31496",
									"id": 419,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getContentURI",
									"nameLocation": "20499:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "20521:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "20513:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 411,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20513:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "pubId",
												"nameLocation": "20540:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "20532:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 413,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20532:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20512:34:0"
									},
									"returnParameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 419,
												"src": "20570:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 416,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "20570:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20569:15:0"
									},
									"scope": 471,
									"src": "20490:95:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 420,
										"nodeType": "StructuredDocumentation",
										"src": "20591:235:0",
										"text": " @notice Returns the profile token ID according to a given handle.\n @param handle The handle to resolve the profile token ID with.\n @return uint256 The profile ID the passed handle points to."
									},
									"functionSelector": "20fa728a",
									"id": 427,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getProfileIdByHandle",
									"nameLocation": "20840:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "handle",
												"nameLocation": "20877:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "20861:22:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 421,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "20861:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20860:24:0"
									},
									"returnParameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "20908:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20908:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20907:9:0"
									},
									"scope": 471,
									"src": "20831:86:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "20923:246:0",
										"text": " @notice Returns the full profile struct associated with a given profile token ID.\n @param profileId The token ID of the profile to query.\n @return ProfileStruct The profile struct of the given profile."
									},
									"functionSelector": "f08f4f64",
									"id": 436,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getProfile",
									"nameLocation": "21183:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "21202:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "21194:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21194:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21193:19:0"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "21236:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ProfileStruct_$505_memory_ptr",
													"typeString": "struct DataTypes.ProfileStruct"
												},
												"typeName": {
													"id": 433,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 432,
														"name": "DataTypes.ProfileStruct",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 505,
														"src": "21236:23:0"
													},
													"referencedDeclaration": 505,
													"src": "21236:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ProfileStruct_$505_storage_ptr",
														"typeString": "struct DataTypes.ProfileStruct"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21235:32:0"
									},
									"scope": 471,
									"src": "21174:94:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "21274:359:0",
										"text": " @notice Returns the full publication struct for a given publication.\n @param profileId The token ID of the profile that published the publication to query.\n @param pubId The publication ID of the publication to query.\n @return PublicationStruct The publication struct associated with the queried publication."
									},
									"functionSelector": "c736c990",
									"id": 447,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPub",
									"nameLocation": "21647:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "21662:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "21654:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21654:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "pubId",
												"nameLocation": "21681:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "21673:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21673:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21653:34:0"
									},
									"returnParameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "21735:34:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PublicationStruct_$518_memory_ptr",
													"typeString": "struct DataTypes.PublicationStruct"
												},
												"typeName": {
													"id": 444,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 443,
														"name": "DataTypes.PublicationStruct",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 518,
														"src": "21735:27:0"
													},
													"referencedDeclaration": 518,
													"src": "21735:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PublicationStruct_$518_storage_ptr",
														"typeString": "struct DataTypes.PublicationStruct"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21734:36:0"
									},
									"scope": 471,
									"src": "21638:133:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 448,
										"nodeType": "StructuredDocumentation",
										"src": "21777:375:0",
										"text": " @notice Returns the publication type associated with a given publication.\n @param profileId The token ID of the profile that published the publication to query.\n @param pubId The publication ID of the publication to query.\n @return PubType The publication type, as a member of an enum (either \"post,\" \"comment\" or \"mirror\")."
									},
									"functionSelector": "31fff07c",
									"id": 458,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPubType",
									"nameLocation": "22166:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "22185:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "22177:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22177:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "pubId",
												"nameLocation": "22204:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "22196:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 451,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22196:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22176:34:0"
									},
									"returnParameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "22234:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PubType_$483",
													"typeString": "enum DataTypes.PubType"
												},
												"typeName": {
													"id": 455,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 454,
														"name": "DataTypes.PubType",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 483,
														"src": "22234:17:0"
													},
													"referencedDeclaration": 483,
													"src": "22234:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PubType_$483",
														"typeString": "enum DataTypes.PubType"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22233:19:0"
									},
									"scope": 471,
									"src": "22157:96:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "22259:142:0",
										"text": " @notice Returns the follow NFT implementation address.\n @return address The follow NFT implementation address."
									},
									"functionSelector": "3502ac4b",
									"id": 464,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFollowNFTImpl",
									"nameLocation": "22415:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22431:2:0"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "22457:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "22457:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22456:9:0"
									},
									"scope": 471,
									"src": "22406:60:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "22472:144:0",
										"text": " @notice Returns the collect NFT implementation address.\n @return address The collect NFT implementation address."
									},
									"functionSelector": "77349a5f",
									"id": 470,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getCollectNFTImpl",
									"nameLocation": "22630:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22647:2:0"
									},
									"returnParameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "22673:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "22673:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22672:9:0"
									},
									"scope": 471,
									"src": "22621:61:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 472,
							"src": "368:22316:0",
							"usedErrors": []
						}
					],
					"src": "33:22652:0"
				},
				"id": 0
			},
			"@aave/lens-protocol/contracts/libraries/DataTypes.sol": {
				"ast": {
					"absolutePath": "@aave/lens-protocol/contracts/libraries/DataTypes.sol",
					"exportedSymbols": {
						"DataTypes": [
							717
						]
					},
					"id": 718,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 473,
							"literals": [
								"solidity",
								"0.8",
								".10"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "DataTypes",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 474,
								"nodeType": "StructuredDocumentation",
								"src": "58:134:1",
								"text": " @title DataTypes\n @author Lens Protocol\n @notice A standard library of data types used throughout the Lens Protocol."
							},
							"fullyImplemented": true,
							"id": 717,
							"linearizedBaseContracts": [
								717
							],
							"name": "DataTypes",
							"nameLocation": "201:9:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "DataTypes.ProtocolState",
									"id": 478,
									"members": [
										{
											"id": 475,
											"name": "Unpaused",
											"nameLocation": "563:8:1",
											"nodeType": "EnumValue",
											"src": "563:8:1"
										},
										{
											"id": 476,
											"name": "PublishingPaused",
											"nameLocation": "581:16:1",
											"nodeType": "EnumValue",
											"src": "581:16:1"
										},
										{
											"id": 477,
											"name": "Paused",
											"nameLocation": "607:6:1",
											"nodeType": "EnumValue",
											"src": "607:6:1"
										}
									],
									"name": "ProtocolState",
									"nameLocation": "539:13:1",
									"nodeType": "EnumDefinition",
									"src": "534:85:1"
								},
								{
									"canonicalName": "DataTypes.PubType",
									"id": 483,
									"members": [
										{
											"id": 479,
											"name": "Post",
											"nameLocation": "1188:4:1",
											"nodeType": "EnumValue",
											"src": "1188:4:1"
										},
										{
											"id": 480,
											"name": "Comment",
											"nameLocation": "1202:7:1",
											"nodeType": "EnumValue",
											"src": "1202:7:1"
										},
										{
											"id": 481,
											"name": "Mirror",
											"nameLocation": "1219:6:1",
											"nodeType": "EnumValue",
											"src": "1219:6:1"
										},
										{
											"id": 482,
											"name": "Nonexistent",
											"nameLocation": "1235:11:1",
											"nodeType": "EnumValue",
											"src": "1235:11:1"
										}
									],
									"name": "PubType",
									"nameLocation": "1170:7:1",
									"nodeType": "EnumDefinition",
									"src": "1165:87:1"
								},
								{
									"canonicalName": "DataTypes.EIP712Signature",
									"id": 492,
									"members": [
										{
											"constant": false,
											"id": 485,
											"mutability": "mutable",
											"name": "v",
											"nameLocation": "1618:1:1",
											"nodeType": "VariableDeclaration",
											"scope": 492,
											"src": "1612:7:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 484,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "1612:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 487,
											"mutability": "mutable",
											"name": "r",
											"nameLocation": "1637:1:1",
											"nodeType": "VariableDeclaration",
											"scope": 492,
											"src": "1629:9:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 486,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1629:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 489,
											"mutability": "mutable",
											"name": "s",
											"nameLocation": "1656:1:1",
											"nodeType": "VariableDeclaration",
											"scope": 492,
											"src": "1648:9:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 488,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1648:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 491,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1675:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 492,
											"src": "1667:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 490,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1667:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "EIP712Signature",
									"nameLocation": "1586:15:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "1579:111:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.ProfileStruct",
									"id": 505,
									"members": [
										{
											"constant": false,
											"id": 494,
											"mutability": "mutable",
											"name": "pubCount",
											"nameLocation": "2270:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 505,
											"src": "2262:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 493,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2262:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 496,
											"mutability": "mutable",
											"name": "followModule",
											"nameLocation": "2296:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 505,
											"src": "2288:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 495,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2288:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 498,
											"mutability": "mutable",
											"name": "followNFT",
											"nameLocation": "2326:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 505,
											"src": "2318:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 497,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2318:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 500,
											"mutability": "mutable",
											"name": "handle",
											"nameLocation": "2352:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 505,
											"src": "2345:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 499,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "2345:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 502,
											"mutability": "mutable",
											"name": "imageURI",
											"nameLocation": "2375:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 505,
											"src": "2368:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 501,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "2368:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 504,
											"mutability": "mutable",
											"name": "followNFTURI",
											"nameLocation": "2400:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 505,
											"src": "2393:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 503,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "2393:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ProfileStruct",
									"nameLocation": "2238:13:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "2231:188:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.PublicationStruct",
									"id": 518,
									"members": [
										{
											"constant": false,
											"id": 507,
											"mutability": "mutable",
											"name": "profileIdPointed",
											"nameLocation": "3180:16:1",
											"nodeType": "VariableDeclaration",
											"scope": 518,
											"src": "3172:24:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 506,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "3172:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 509,
											"mutability": "mutable",
											"name": "pubIdPointed",
											"nameLocation": "3214:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 518,
											"src": "3206:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 508,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "3206:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 511,
											"mutability": "mutable",
											"name": "contentURI",
											"nameLocation": "3243:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 518,
											"src": "3236:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 510,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "3236:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 513,
											"mutability": "mutable",
											"name": "referenceModule",
											"nameLocation": "3271:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 518,
											"src": "3263:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 512,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3263:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 515,
											"mutability": "mutable",
											"name": "collectModule",
											"nameLocation": "3304:13:1",
											"nodeType": "VariableDeclaration",
											"scope": 518,
											"src": "3296:21:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 514,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3296:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 517,
											"mutability": "mutable",
											"name": "collectNFT",
											"nameLocation": "3335:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 518,
											"src": "3327:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 516,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3327:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PublicationStruct",
									"nameLocation": "3144:17:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "3137:215:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.CreateProfileData",
									"id": 531,
									"members": [
										{
											"constant": false,
											"id": 520,
											"mutability": "mutable",
											"name": "to",
											"nameLocation": "3940:2:1",
											"nodeType": "VariableDeclaration",
											"scope": 531,
											"src": "3932:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 519,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3932:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 522,
											"mutability": "mutable",
											"name": "handle",
											"nameLocation": "3959:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 531,
											"src": "3952:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 521,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "3952:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 524,
											"mutability": "mutable",
											"name": "imageURI",
											"nameLocation": "3982:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 531,
											"src": "3975:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 523,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "3975:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 526,
											"mutability": "mutable",
											"name": "followModule",
											"nameLocation": "4008:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 531,
											"src": "4000:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 525,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4000:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 528,
											"mutability": "mutable",
											"name": "followModuleInitData",
											"nameLocation": "4036:20:1",
											"nodeType": "VariableDeclaration",
											"scope": 531,
											"src": "4030:26:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 527,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "4030:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 530,
											"mutability": "mutable",
											"name": "followNFTURI",
											"nameLocation": "4073:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 531,
											"src": "4066:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 529,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "4066:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CreateProfileData",
									"nameLocation": "3904:17:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "3897:195:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.SetDefaultProfileWithSigData",
									"id": 539,
									"members": [
										{
											"constant": false,
											"id": 533,
											"mutability": "mutable",
											"name": "wallet",
											"nameLocation": "4644:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 539,
											"src": "4636:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 532,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "4636:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 535,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "4668:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 539,
											"src": "4660:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 534,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "4660:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 538,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "4703:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 539,
											"src": "4687:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 537,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 536,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "4687:15:1"
												},
												"referencedDeclaration": 492,
												"src": "4687:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SetDefaultProfileWithSigData",
									"nameLocation": "4597:28:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "4590:123:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.SetFollowModuleWithSigData",
									"id": 549,
									"members": [
										{
											"constant": false,
											"id": 541,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "5368:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 549,
											"src": "5360:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 540,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5360:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 543,
											"mutability": "mutable",
											"name": "followModule",
											"nameLocation": "5395:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 549,
											"src": "5387:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 542,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "5387:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 545,
											"mutability": "mutable",
											"name": "followModuleInitData",
											"nameLocation": "5423:20:1",
											"nodeType": "VariableDeclaration",
											"scope": 549,
											"src": "5417:26:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 544,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "5417:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 548,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "5469:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 549,
											"src": "5453:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 547,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 546,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "5453:15:1"
												},
												"referencedDeclaration": 492,
												"src": "5453:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SetFollowModuleWithSigData",
									"nameLocation": "5323:26:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "5316:163:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.SetDispatcherWithSigData",
									"id": 557,
									"members": [
										{
											"constant": false,
											"id": 551,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "6003:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 557,
											"src": "5995:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 550,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "5995:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 553,
											"mutability": "mutable",
											"name": "dispatcher",
											"nameLocation": "6030:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 557,
											"src": "6022:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 552,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "6022:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 556,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "6066:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 557,
											"src": "6050:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 555,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 554,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "6050:15:1"
												},
												"referencedDeclaration": 492,
												"src": "6050:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SetDispatcherWithSigData",
									"nameLocation": "5960:24:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "5953:123:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.SetProfileImageURIWithSigData",
									"id": 565,
									"members": [
										{
											"constant": false,
											"id": 559,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "6603:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 565,
											"src": "6595:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 558,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "6595:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 561,
											"mutability": "mutable",
											"name": "imageURI",
											"nameLocation": "6629:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 565,
											"src": "6622:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 560,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "6622:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 564,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "6663:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 565,
											"src": "6647:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 563,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 562,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "6647:15:1"
												},
												"referencedDeclaration": 492,
												"src": "6647:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SetProfileImageURIWithSigData",
									"nameLocation": "6555:29:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "6548:125:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.SetFollowNFTURIWithSigData",
									"id": 573,
									"members": [
										{
											"constant": false,
											"id": 567,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "7217:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 573,
											"src": "7209:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 566,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7209:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 569,
											"mutability": "mutable",
											"name": "followNFTURI",
											"nameLocation": "7243:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 573,
											"src": "7236:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 568,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "7236:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 572,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "7281:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 573,
											"src": "7265:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 571,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 570,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "7265:15:1"
												},
												"referencedDeclaration": 492,
												"src": "7265:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SetFollowNFTURIWithSigData",
									"nameLocation": "7172:26:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "7165:126:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.PostData",
									"id": 586,
									"members": [
										{
											"constant": false,
											"id": 575,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "7956:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 586,
											"src": "7948:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 574,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "7948:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 577,
											"mutability": "mutable",
											"name": "contentURI",
											"nameLocation": "7982:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 586,
											"src": "7975:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 576,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "7975:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 579,
											"mutability": "mutable",
											"name": "collectModule",
											"nameLocation": "8010:13:1",
											"nodeType": "VariableDeclaration",
											"scope": 586,
											"src": "8002:21:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 578,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "8002:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 581,
											"mutability": "mutable",
											"name": "collectModuleInitData",
											"nameLocation": "8039:21:1",
											"nodeType": "VariableDeclaration",
											"scope": 586,
											"src": "8033:27:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 580,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "8033:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 583,
											"mutability": "mutable",
											"name": "referenceModule",
											"nameLocation": "8078:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 586,
											"src": "8070:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 582,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "8070:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 585,
											"mutability": "mutable",
											"name": "referenceModuleInitData",
											"nameLocation": "8109:23:1",
											"nodeType": "VariableDeclaration",
											"scope": 586,
											"src": "8103:29:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 584,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "8103:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PostData",
									"nameLocation": "7929:8:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "7922:217:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.PostWithSigData",
									"id": 602,
									"members": [
										{
											"constant": false,
											"id": 588,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "8999:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 602,
											"src": "8991:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 587,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "8991:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 590,
											"mutability": "mutable",
											"name": "contentURI",
											"nameLocation": "9025:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 602,
											"src": "9018:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 589,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "9018:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 592,
											"mutability": "mutable",
											"name": "collectModule",
											"nameLocation": "9053:13:1",
											"nodeType": "VariableDeclaration",
											"scope": 602,
											"src": "9045:21:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 591,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "9045:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 594,
											"mutability": "mutable",
											"name": "collectModuleInitData",
											"nameLocation": "9082:21:1",
											"nodeType": "VariableDeclaration",
											"scope": 602,
											"src": "9076:27:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 593,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "9076:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 596,
											"mutability": "mutable",
											"name": "referenceModule",
											"nameLocation": "9121:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 602,
											"src": "9113:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 595,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "9113:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 598,
											"mutability": "mutable",
											"name": "referenceModuleInitData",
											"nameLocation": "9152:23:1",
											"nodeType": "VariableDeclaration",
											"scope": 602,
											"src": "9146:29:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 597,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "9146:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 601,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "9201:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 602,
											"src": "9185:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 600,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 599,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "9185:15:1"
												},
												"referencedDeclaration": 492,
												"src": "9185:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PostWithSigData",
									"nameLocation": "8965:15:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "8958:253:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.CommentData",
									"id": 621,
									"members": [
										{
											"constant": false,
											"id": 604,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "10105:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 621,
											"src": "10097:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 603,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "10097:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 606,
											"mutability": "mutable",
											"name": "contentURI",
											"nameLocation": "10131:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 621,
											"src": "10124:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 605,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "10124:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 608,
											"mutability": "mutable",
											"name": "profileIdPointed",
											"nameLocation": "10159:16:1",
											"nodeType": "VariableDeclaration",
											"scope": 621,
											"src": "10151:24:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 607,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "10151:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 610,
											"mutability": "mutable",
											"name": "pubIdPointed",
											"nameLocation": "10193:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 621,
											"src": "10185:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 609,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "10185:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 612,
											"mutability": "mutable",
											"name": "referenceModuleData",
											"nameLocation": "10221:19:1",
											"nodeType": "VariableDeclaration",
											"scope": 621,
											"src": "10215:25:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 611,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "10215:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 614,
											"mutability": "mutable",
											"name": "collectModule",
											"nameLocation": "10258:13:1",
											"nodeType": "VariableDeclaration",
											"scope": 621,
											"src": "10250:21:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 613,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "10250:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 616,
											"mutability": "mutable",
											"name": "collectModuleInitData",
											"nameLocation": "10287:21:1",
											"nodeType": "VariableDeclaration",
											"scope": 621,
											"src": "10281:27:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 615,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "10281:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 618,
											"mutability": "mutable",
											"name": "referenceModule",
											"nameLocation": "10326:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 621,
											"src": "10318:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 617,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "10318:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 620,
											"mutability": "mutable",
											"name": "referenceModuleInitData",
											"nameLocation": "10357:23:1",
											"nodeType": "VariableDeclaration",
											"scope": 621,
											"src": "10351:29:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 619,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "10351:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CommentData",
									"nameLocation": "10075:11:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "10068:319:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.CommentWithSigData",
									"id": 643,
									"members": [
										{
											"constant": false,
											"id": 623,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "11479:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11471:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 622,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "11471:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 625,
											"mutability": "mutable",
											"name": "contentURI",
											"nameLocation": "11505:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11498:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 624,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "11498:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 627,
											"mutability": "mutable",
											"name": "profileIdPointed",
											"nameLocation": "11533:16:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11525:24:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 626,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "11525:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 629,
											"mutability": "mutable",
											"name": "pubIdPointed",
											"nameLocation": "11567:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11559:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 628,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "11559:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 631,
											"mutability": "mutable",
											"name": "referenceModuleData",
											"nameLocation": "11595:19:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11589:25:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 630,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "11589:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 633,
											"mutability": "mutable",
											"name": "collectModule",
											"nameLocation": "11632:13:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11624:21:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 632,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "11624:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 635,
											"mutability": "mutable",
											"name": "collectModuleInitData",
											"nameLocation": "11661:21:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11655:27:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 634,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "11655:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 637,
											"mutability": "mutable",
											"name": "referenceModule",
											"nameLocation": "11700:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11692:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 636,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "11692:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 639,
											"mutability": "mutable",
											"name": "referenceModuleInitData",
											"nameLocation": "11731:23:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11725:29:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 638,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "11725:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 642,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "11780:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 643,
											"src": "11764:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 641,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 640,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "11764:15:1"
												},
												"referencedDeclaration": 492,
												"src": "11764:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CommentWithSigData",
									"nameLocation": "11442:18:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "11435:355:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.MirrorData",
									"id": 656,
									"members": [
										{
											"constant": false,
											"id": 645,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "12441:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "12433:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 644,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "12433:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 647,
											"mutability": "mutable",
											"name": "profileIdPointed",
											"nameLocation": "12468:16:1",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "12460:24:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 646,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "12460:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 649,
											"mutability": "mutable",
											"name": "pubIdPointed",
											"nameLocation": "12502:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "12494:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 648,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "12494:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 651,
											"mutability": "mutable",
											"name": "referenceModuleData",
											"nameLocation": "12530:19:1",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "12524:25:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 650,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "12524:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 653,
											"mutability": "mutable",
											"name": "referenceModule",
											"nameLocation": "12567:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "12559:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 652,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "12559:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 655,
											"mutability": "mutable",
											"name": "referenceModuleInitData",
											"nameLocation": "12598:23:1",
											"nodeType": "VariableDeclaration",
											"scope": 656,
											"src": "12592:29:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 654,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "12592:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MirrorData",
									"nameLocation": "12412:10:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "12405:223:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.MirrorWithSigData",
									"id": 672,
									"members": [
										{
											"constant": false,
											"id": 658,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "13478:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 672,
											"src": "13470:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 657,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "13470:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 660,
											"mutability": "mutable",
											"name": "profileIdPointed",
											"nameLocation": "13505:16:1",
											"nodeType": "VariableDeclaration",
											"scope": 672,
											"src": "13497:24:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 659,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "13497:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 662,
											"mutability": "mutable",
											"name": "pubIdPointed",
											"nameLocation": "13539:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 672,
											"src": "13531:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 661,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "13531:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 664,
											"mutability": "mutable",
											"name": "referenceModuleData",
											"nameLocation": "13567:19:1",
											"nodeType": "VariableDeclaration",
											"scope": 672,
											"src": "13561:25:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 663,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "13561:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 666,
											"mutability": "mutable",
											"name": "referenceModule",
											"nameLocation": "13604:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 672,
											"src": "13596:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 665,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "13596:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 668,
											"mutability": "mutable",
											"name": "referenceModuleInitData",
											"nameLocation": "13635:23:1",
											"nodeType": "VariableDeclaration",
											"scope": 672,
											"src": "13629:29:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 667,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "13629:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 671,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "13684:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 672,
											"src": "13668:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 670,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 669,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "13668:15:1"
												},
												"referencedDeclaration": 492,
												"src": "13668:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "MirrorWithSigData",
									"nameLocation": "13442:17:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "13435:259:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.FollowWithSigData",
									"id": 684,
									"members": [
										{
											"constant": false,
											"id": 674,
											"mutability": "mutable",
											"name": "follower",
											"nameLocation": "14305:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 684,
											"src": "14297:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 673,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "14297:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 677,
											"mutability": "mutable",
											"name": "profileIds",
											"nameLocation": "14333:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 684,
											"src": "14323:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											},
											"typeName": {
												"baseType": {
													"id": 675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14323:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 676,
												"nodeType": "ArrayTypeName",
												"src": "14323:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 680,
											"mutability": "mutable",
											"name": "datas",
											"nameLocation": "14361:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 684,
											"src": "14353:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
												"typeString": "bytes[]"
											},
											"typeName": {
												"baseType": {
													"id": 678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14353:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"id": 679,
												"nodeType": "ArrayTypeName",
												"src": "14353:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
													"typeString": "bytes[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 683,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "14392:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 684,
											"src": "14376:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 682,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 681,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "14376:15:1"
												},
												"referencedDeclaration": 492,
												"src": "14376:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "FollowWithSigData",
									"nameLocation": "14269:17:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "14262:140:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.CollectWithSigData",
									"id": 696,
									"members": [
										{
											"constant": false,
											"id": 686,
											"mutability": "mutable",
											"name": "collector",
											"nameLocation": "15095:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 696,
											"src": "15087:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 685,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "15087:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 688,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "15122:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 696,
											"src": "15114:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 687,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "15114:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 690,
											"mutability": "mutable",
											"name": "pubId",
											"nameLocation": "15149:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 696,
											"src": "15141:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 689,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "15141:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 692,
											"mutability": "mutable",
											"name": "data",
											"nameLocation": "15170:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 696,
											"src": "15164:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 691,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "15164:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 695,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "15200:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 696,
											"src": "15184:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 694,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 693,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "15184:15:1"
												},
												"referencedDeclaration": 492,
												"src": "15184:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "CollectWithSigData",
									"nameLocation": "15058:18:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "15051:159:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.SetProfileMetadataWithSigData",
									"id": 704,
									"members": [
										{
											"constant": false,
											"id": 698,
											"mutability": "mutable",
											"name": "profileId",
											"nameLocation": "15625:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 704,
											"src": "15617:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 697,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "15617:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 700,
											"mutability": "mutable",
											"name": "metadata",
											"nameLocation": "15651:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 704,
											"src": "15644:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 699,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "15644:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 703,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "15685:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 704,
											"src": "15669:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 702,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 701,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "15669:15:1"
												},
												"referencedDeclaration": 492,
												"src": "15669:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SetProfileMetadataWithSigData",
									"nameLocation": "15577:29:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "15570:125:1",
									"visibility": "public"
								},
								{
									"canonicalName": "DataTypes.ToggleFollowWithSigData",
									"id": 716,
									"members": [
										{
											"constant": false,
											"id": 706,
											"mutability": "mutable",
											"name": "follower",
											"nameLocation": "16153:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 716,
											"src": "16145:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 705,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "16145:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 709,
											"mutability": "mutable",
											"name": "profileIds",
											"nameLocation": "16181:10:1",
											"nodeType": "VariableDeclaration",
											"scope": 716,
											"src": "16171:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											},
											"typeName": {
												"baseType": {
													"id": 707,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16171:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 708,
												"nodeType": "ArrayTypeName",
												"src": "16171:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 712,
											"mutability": "mutable",
											"name": "enables",
											"nameLocation": "16208:7:1",
											"nodeType": "VariableDeclaration",
											"scope": 716,
											"src": "16201:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
												"typeString": "bool[]"
											},
											"typeName": {
												"baseType": {
													"id": 710,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16201:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 711,
												"nodeType": "ArrayTypeName",
												"src": "16201:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
													"typeString": "bool[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 715,
											"mutability": "mutable",
											"name": "sig",
											"nameLocation": "16241:3:1",
											"nodeType": "VariableDeclaration",
											"scope": 716,
											"src": "16225:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
												"typeString": "struct DataTypes.EIP712Signature"
											},
											"typeName": {
												"id": 714,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 713,
													"name": "EIP712Signature",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 492,
													"src": "16225:15:1"
												},
												"referencedDeclaration": 492,
												"src": "16225:15:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EIP712Signature_$492_storage_ptr",
													"typeString": "struct DataTypes.EIP712Signature"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ToggleFollowWithSigData",
									"nameLocation": "16111:23:1",
									"nodeType": "StructDefinition",
									"scope": 717,
									"src": "16104:147:1",
									"visibility": "public"
								}
							],
							"scope": 718,
							"src": "193:16060:1",
							"usedErrors": []
						}
					],
					"src": "33:16221:1"
				},
				"id": 1
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
					"exportedSymbols": {
						"IConstantFlowAgreementV1": [
							1127
						],
						"ISuperAgreement": [
							1156
						],
						"ISuperfluidToken": [
							1442
						]
					},
					"id": 1128,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 719,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:2"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "../superfluid/ISuperAgreement.sol",
							"id": 721,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1128,
							"sourceUnit": 1157,
							"src": "59:68:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 720,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:15:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "../superfluid/ISuperfluidToken.sol",
							"id": 723,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1128,
							"sourceUnit": 1443,
							"src": "128:70:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 722,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "137:16:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 725,
										"name": "ISuperAgreement",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1156,
										"src": "320:15:2"
									},
									"id": 726,
									"nodeType": "InheritanceSpecifier",
									"src": "320:15:2"
								}
							],
							"canonicalName": "IConstantFlowAgreementV1",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 724,
								"nodeType": "StructuredDocumentation",
								"src": "200:73:2",
								"text": " @title Constant Flow Agreement interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 1127,
							"linearizedBaseContracts": [
								1127,
								1156
							],
							"name": "IConstantFlowAgreementV1",
							"nameLocation": "292:24:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 728,
									"name": "CFA_ACL_NO_SENDER_CREATE",
									"nameLocation": "523:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "547:2:2"
									},
									"src": "517:33:2"
								},
								{
									"id": 730,
									"name": "CFA_ACL_NO_SENDER_UPDATE",
									"nameLocation": "589:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 729,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "613:2:2"
									},
									"src": "583:33:2"
								},
								{
									"id": 732,
									"name": "CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS",
									"nameLocation": "655:38:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "693:2:2"
									},
									"src": "649:47:2"
								},
								{
									"id": 734,
									"name": "CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS",
									"nameLocation": "721:38:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:2"
									},
									"src": "715:47:2"
								},
								{
									"id": 736,
									"name": "CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS",
									"nameLocation": "787:38:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "825:2:2"
									},
									"src": "781:47:2"
								},
								{
									"id": 738,
									"name": "CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED",
									"nameLocation": "853:36:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "889:2:2"
									},
									"src": "847:45:2"
								},
								{
									"id": 740,
									"name": "CFA_ACL_UNCLEAN_PERMISSIONS",
									"nameLocation": "919:27:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "946:2:2"
									},
									"src": "913:36:2"
								},
								{
									"id": 742,
									"name": "CFA_ACL_NO_SENDER_FLOW_OPERATOR",
									"nameLocation": "985:31:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1016:2:2"
									},
									"src": "979:40:2"
								},
								{
									"id": 744,
									"name": "CFA_ACL_NO_NEGATIVE_ALLOWANCE",
									"nameLocation": "1051:29:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1080:2:2"
									},
									"src": "1045:38:2"
								},
								{
									"id": 746,
									"name": "CFA_FLOW_ALREADY_EXISTS",
									"nameLocation": "1117:23:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1140:2:2"
									},
									"src": "1111:32:2"
								},
								{
									"id": 748,
									"name": "CFA_FLOW_DOES_NOT_EXIST",
									"nameLocation": "1183:23:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1206:2:2"
									},
									"src": "1177:32:2"
								},
								{
									"id": 750,
									"name": "CFA_INSUFFICIENT_BALANCE",
									"nameLocation": "1249:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1273:2:2"
									},
									"src": "1243:33:2"
								},
								{
									"id": 752,
									"name": "CFA_ZERO_ADDRESS_SENDER",
									"nameLocation": "1315:23:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:2"
									},
									"src": "1309:32:2"
								},
								{
									"id": 754,
									"name": "CFA_ZERO_ADDRESS_RECEIVER",
									"nameLocation": "1381:25:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1406:2:2"
									},
									"src": "1375:34:2"
								},
								{
									"id": 756,
									"name": "CFA_HOOK_OUT_OF_GAS",
									"nameLocation": "1447:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1466:2:2"
									},
									"src": "1441:28:2"
								},
								{
									"id": 758,
									"name": "CFA_DEPOSIT_TOO_BIG",
									"nameLocation": "1513:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1532:2:2"
									},
									"src": "1507:28:2"
								},
								{
									"id": 760,
									"name": "CFA_FLOW_RATE_TOO_BIG",
									"nameLocation": "1579:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1600:2:2"
									},
									"src": "1573:30:2"
								},
								{
									"id": 762,
									"name": "CFA_NON_CRITICAL_SENDER",
									"nameLocation": "1645:23:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1668:2:2"
									},
									"src": "1639:32:2"
								},
								{
									"id": 764,
									"name": "CFA_INVALID_FLOW_RATE",
									"nameLocation": "1711:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 763,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1732:2:2"
									},
									"src": "1705:30:2"
								},
								{
									"id": 766,
									"name": "CFA_NO_SELF_FLOW",
									"nameLocation": "1777:16:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:2"
									},
									"src": "1771:25:2"
								},
								{
									"baseFunctions": [
										1138
									],
									"body": {
										"id": 777,
										"nodeType": "Block",
										"src": "1962:95:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e61677265656d656e74732e436f6e7374616e74466c6f7741677265656d656e742e7631",
															"id": 774,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1989:60:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3",
																"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\""
															},
															"value": "org.superfluid-finance.agreements.ConstantFlowAgreement.v1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_a9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3",
																"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\""
															}
														],
														"id": 773,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "1979:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1979:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 772,
												"id": 776,
												"nodeType": "Return",
												"src": "1972:78:2"
											}
										]
									},
									"documentation": {
										"id": 767,
										"nodeType": "StructuredDocumentation",
										"src": "1838:53:2",
										"text": "@dev ISuperAgreement.agreementType implementation"
									},
									"functionSelector": "7730599e",
									"id": 778,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "agreementType",
									"nameLocation": "1905:13:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 769,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1930:8:2"
									},
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1918:2:2"
									},
									"returnParameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "1953:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 770,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1953:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1952:9:2"
									},
									"scope": 1127,
									"src": "1896:161:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 779,
										"nodeType": "StructuredDocumentation",
										"src": "2063:239:2",
										"text": " @notice Get the maximum flow rate allowed with the deposit\n @dev The deposit is clipped and rounded down\n @param deposit Deposit amount used for creating the flow\n @return flowRate The maximum flow rate"
									},
									"functionSelector": "0602f7db",
									"id": 789,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getMaximumFlowRateFromDeposit",
									"nameLocation": "2316:29:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2372:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "2355:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 781,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 780,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "2355:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "2355:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2395:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "2387:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2387:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:58:2"
									},
									"returnParameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "2457:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 789,
												"src": "2451:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 786,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "2451:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2450:16:2"
									},
									"scope": 1127,
									"src": "2307:160:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 790,
										"nodeType": "StructuredDocumentation",
										"src": "2473:482:2",
										"text": " @notice Get the deposit required for creating the flow\n @dev Calculates the deposit based on the liquidationPeriod and flowRate\n @param flowRate Flow rate to be tested\n @return deposit The deposit amount based on flowRate and liquidationPeriod\n @custom:note \n - if calculated deposit (flowRate * liquidationPeriod) is less\n   than the minimum deposit, we use the minimum deposit otherwise\n   we use the calculated deposit"
									},
									"functionSelector": "8d997f6e",
									"id": 800,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDepositRequiredForFlowRate",
									"nameLocation": "2969:29:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3025:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "3008:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 792,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 791,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "3008:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "3008:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "3046:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "3040:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 794,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "3040:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2998:57:2"
									},
									"returnParameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 798,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "3111:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "3103:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 797,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3102:17:2"
									},
									"scope": 1127,
									"src": "2960:160:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 801,
										"nodeType": "StructuredDocumentation",
										"src": "3126:306:2",
										"text": " @dev Returns whether it is the patrician period based on host.getNow()\n @param account The account we are interested in\n @return isCurrentlyPatricianPeriod Whether it is currently the patrician period dictated by governance\n @return timestamp The value of host.getNow()"
									},
									"functionSelector": "4fe9c291",
									"id": 813,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPatricianPeriodNow",
									"nameLocation": "3446:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3493:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3476:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 803,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 802,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "3476:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "3476:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3516:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3508:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 805,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3508:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3466:58:2"
									},
									"returnParameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 809,
												"mutability": "mutable",
												"name": "isCurrentlyPatricianPeriod",
												"nameLocation": "3577:26:2",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3572:31:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 808,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3572:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3613:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3605:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3605:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3571:52:2"
									},
									"scope": 1127,
									"src": "3437:187:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 814,
										"nodeType": "StructuredDocumentation",
										"src": "3630:329:2",
										"text": " @dev Returns whether it is the patrician period based on timestamp\n @param account The account we are interested in\n @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n @return bool Whether it is currently the patrician period dictated by governance"
									},
									"functionSelector": "4b839e0b",
									"id": 826,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPatricianPeriod",
									"nameLocation": "3973:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4017:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "4000:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 816,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 815,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "4000:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "4000:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4040:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "4032:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 818,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4032:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 821,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "4065:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "4057:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 820,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4057:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3990:90:2"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "4126:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 823,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4126:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4125:6:2"
									},
									"scope": 1127,
									"src": "3964:168:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "4138:464:2",
										"text": " @dev msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\n @param token Super token address\n @param flowOperator The permission grantee address\n @param permissions A bitmask representation of the granted permissions\n @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "811b3d40",
									"id": 843,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlowOperatorPermissions",
									"nameLocation": "4616:29:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 839,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4672:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "4655:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 829,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 828,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "4655:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "4655:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "4695:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "4687:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 831,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4687:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "4723:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "4717:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 833,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4717:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "4750:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "4744:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 835,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "4744:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 838,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "4792:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "4777:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 837,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4777:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4645:156:2"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "4857:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "4844:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 840,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4844:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4843:21:2"
									},
									"scope": 1127,
									"src": "4607:258:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 844,
										"nodeType": "StructuredDocumentation",
										"src": "4871:508:2",
										"text": " @notice msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\n @dev if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n @param token Super token address\n @param flowOperator The permission grantee address\n @param addedFlowRateAllowance The flow rate allowance delta\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @return newCtx The new context bytes"
									},
									"functionSelector": "ac5f5d00",
									"id": 858,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseFlowRateAllowance",
									"nameLocation": "5393:25:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5445:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "5428:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 846,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 845,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "5428:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "5428:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "5468:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "5460:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5460:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "addedFlowRateAllowance",
												"nameLocation": "5496:22:2",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "5490:28:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 850,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "5490:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "5543:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "5528:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 852,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5528:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5418:134:2"
									},
									"returnParameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "5591:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "5578:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 855,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5578:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5577:21:2"
									},
									"scope": 1127,
									"src": "5384:215:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 859,
										"nodeType": "StructuredDocumentation",
										"src": "5605:520:2",
										"text": " @dev msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`\n @dev if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n @param token Super token address\n @param flowOperator The permission grantee address\n @param subtractedFlowRateAllowance The flow rate allowance delta\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @return newCtx The new context bytes"
									},
									"functionSelector": "5f51fb23",
									"id": 873,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseFlowRateAllowance",
									"nameLocation": "6139:25:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6191:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 873,
												"src": "6174:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 861,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 860,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "6174:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "6174:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "6214:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 873,
												"src": "6206:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 863,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 866,
												"mutability": "mutable",
												"name": "subtractedFlowRateAllowance",
												"nameLocation": "6242:27:2",
												"nodeType": "VariableDeclaration",
												"scope": 873,
												"src": "6236:33:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 865,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "6236:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "6294:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 873,
												"src": "6279:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 867,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6279:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6164:139:2"
									},
									"returnParameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "6342:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 873,
												"src": "6329:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 870,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6329:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6328:21:2"
									},
									"scope": 1127,
									"src": "6130:220:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 874,
										"nodeType": "StructuredDocumentation",
										"src": "6356:295:2",
										"text": " @dev msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\n @param token Super token address\n @param flowOperator The permission grantee address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "54b770e3",
									"id": 886,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeFlowOperatorWithFullControl",
									"nameLocation": "6665:36:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6728:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "6711:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 876,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 875,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "6711:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "6711:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "6751:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "6743:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 878,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6743:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "6788:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "6773:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 880,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6773:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6701:96:2"
									},
									"returnParameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "6852:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "6839:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 883,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6839:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6838:21:2"
									},
									"scope": 1127,
									"src": "6656:204:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "6867:346:2",
										"text": " @notice msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\n @dev `permissions` and `flowRateAllowance` will both be set to 0\n @param token Super token address\n @param flowOperator The permission grantee address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "062e56ec",
									"id": 899,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeFlowOperatorWithFullControl",
									"nameLocation": "7227:33:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7287:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "7270:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 889,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 888,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "7270:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "7270:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "7310:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "7302:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7302:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "7347:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "7332:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 893,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7332:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7260:96:2"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "7411:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 899,
												"src": "7398:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 896,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7398:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7397:21:2"
									},
									"scope": 1127,
									"src": "7218:201:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 900,
										"nodeType": "StructuredDocumentation",
										"src": "7425:553:2",
										"text": " @notice Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\n @param token Super token address\n @param sender The permission granter address\n @param flowOperator The permission grantee address\n @return flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n @return permissions A bitmask representation of the granted permissions\n @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"functionSelector": "00422bbe",
									"id": 916,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowOperatorData",
									"nameLocation": "7992:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8037:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "8020:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 902,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 901,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "8020:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "8020:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "8059:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "8051:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 904,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8051:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "8082:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "8074:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 906,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8074:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8011:89:2"
									},
									"returnParameters": {
										"id": 915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "flowOperatorId",
												"nameLocation": "8167:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "8159:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 909,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8159:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "8201:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "8195:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 911,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8195:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "8232:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "8226:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 913,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "8226:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8145:114:2"
									},
									"scope": 1127,
									"src": "7983:277:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 917,
										"nodeType": "StructuredDocumentation",
										"src": "8266:394:2",
										"text": " @notice Get flow operator using flowOperatorId\n @param token Super token address\n @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n @return permissions A bitmask representation of the granted permissions\n @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"functionSelector": "09d256ef",
									"id": 929,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowOperatorDataByID",
									"nameLocation": "8674:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 920,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8723:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 929,
												"src": "8706:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 919,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 918,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "8706:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "8706:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "flowOperatorId",
												"nameLocation": "8745:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 929,
												"src": "8737:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 921,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8737:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8697:68:2"
									},
									"returnParameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "8832:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 929,
												"src": "8826:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 924,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8826:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "8863:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 929,
												"src": "8857:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 926,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "8857:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8812:78:2"
									},
									"scope": 1127,
									"src": "8665:226:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 930,
										"nodeType": "StructuredDocumentation",
										"src": "8897:741:2",
										"text": " @notice Create a flow betwen ctx.msgSender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @custom:callbacks \n - AgreementCreated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - A deposit is taken as safety margin for the solvency agents\n - A extra gas fee may be taken to pay for solvency agent liquidations"
									},
									"functionSelector": "62fc305e",
									"id": 944,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createFlow",
									"nameLocation": "9652:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9689:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "9672:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 932,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 931,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "9672:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "9672:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9712:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "9704:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 934,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9704:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "9736:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "9730:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 936,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "9730:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "9769:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "9754:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 938,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9754:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9662:116:2"
									},
									"returnParameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "9833:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "9820:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 941,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9820:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9819:21:2"
									},
									"scope": 1127,
									"src": "9643:198:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 945,
										"nodeType": "StructuredDocumentation",
										"src": "9847:436:2",
										"text": " @notice Create a flow between sender and receiver\n @dev A flow created by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param sender Flow sender address (has granted permissions)\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "94229ecb",
									"id": 961,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createFlowByOperator",
									"nameLocation": "10297:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "10344:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "10327:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 947,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 946,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "10327:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "10327:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "10367:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "10359:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 949,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10359:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 952,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "10391:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "10383:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 951,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10383:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "10415:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "10409:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 953,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "10409:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "10448:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "10433:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 955,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10433:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10317:140:2"
									},
									"returnParameters": {
										"id": 960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "10512:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "10499:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 958,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10499:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10498:21:2"
									},
									"scope": 1127,
									"src": "10288:232:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 962,
										"nodeType": "StructuredDocumentation",
										"src": "10526:833:2",
										"text": " @notice Update the flow rate between ctx.msgSender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @custom:callbacks \n - AgreementUpdated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - Only the flow sender may update the flow rate\n - Even if the flow rate is zero, the flow is not deleted\n from the system\n - Deposit amount will be adjusted accordingly\n - No new gas fee is charged"
									},
									"functionSelector": "50209a62",
									"id": 976,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlow",
									"nameLocation": "11373:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "11410:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "11393:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 964,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 963,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "11393:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "11393:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "11433:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "11425:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 966,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11425:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 969,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "11457:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "11451:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 968,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "11451:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "11490:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "11475:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 970,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11475:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11383:116:2"
									},
									"returnParameters": {
										"id": 975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 974,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "11554:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "11541:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 973,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11541:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11540:21:2"
									},
									"scope": 1127,
									"src": "11364:198:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 977,
										"nodeType": "StructuredDocumentation",
										"src": "11568:436:2",
										"text": " @notice Update a flow between sender and receiver\n @dev A flow updated by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param sender Flow sender address (has granted permissions)\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "354b9590",
									"id": 993,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlowByOperator",
									"nameLocation": "12018:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "12065:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "12048:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 979,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 978,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "12048:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "12048:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "12088:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "12080:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 981,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12080:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12112:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "12104:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 983,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12104:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "12136:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "12130:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 985,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "12130:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "12169:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "12154:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 987,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12154:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12038:140:2"
									},
									"returnParameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "12233:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "12220:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 990,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12220:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12219:21:2"
									},
									"scope": 1127,
									"src": "12009:232:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 994,
										"nodeType": "StructuredDocumentation",
										"src": "12247:415:2",
										"text": " @dev Get the flow data between `sender` and `receiver` of `token`\n @param token Super token address\n @param sender Flow receiver\n @param receiver Flow sender\n @return timestamp Timestamp of when the flow is updated\n @return flowRate The flow rate\n @return deposit The amount of deposit the flow\n @return owedDeposit The amount of owed deposit of the flow"
									},
									"functionSelector": "e6a1e888",
									"id": 1012,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlow",
									"nameLocation": "12676:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "12710:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "12693:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 996,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 995,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "12693:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "12693:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "12733:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "12725:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 998,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12725:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12757:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "12749:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12749:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12683:88:2"
									},
									"returnParameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "12840:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "12832:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12832:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "12869:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "12863:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1005,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "12863:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "12899:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "12891:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1007,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12891:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "12928:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "12920:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12920:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12818:131:2"
									},
									"scope": 1127,
									"src": "12667:283:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1013,
										"nodeType": "StructuredDocumentation",
										"src": "12956:445:2",
										"text": " @notice Get flow data using agreementId\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param agreementId The agreement ID\n @return timestamp Timestamp of when the flow is updated\n @return flowRate The flow rate\n @return deposit The deposit amount of the flow\n @return owedDeposit The owed deposit amount of the flow"
									},
									"functionSelector": "aabd2668",
									"id": 1029,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowByID",
									"nameLocation": "13415:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "13452:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "13435:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1015,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1014,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "13435:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "13435:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "13474:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "13466:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1017,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13466:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13426:65:2"
									},
									"returnParameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "13560:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "13552:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1020,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13552:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "13589:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "13583:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1022,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "13583:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1025,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "13619:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "13611:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13611:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "13648:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "13640:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13640:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13538:131:2"
									},
									"scope": 1127,
									"src": "13406:264:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1030,
										"nodeType": "StructuredDocumentation",
										"src": "13676:436:2",
										"text": " @dev Get the aggregated flow info of the account\n @param token Super token address\n @param account Account for the query\n @return timestamp Timestamp of when a flow was last updated for account\n @return flowRate The net flow rate of token for account\n @return deposit The sum of all deposits for account's flows\n @return owedDeposit The sum of all owed deposits for account's flows"
									},
									"functionSelector": "0f1ac495",
									"id": 1046,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccountFlowInfo",
									"nameLocation": "14126:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14171:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "14154:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1032,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1031,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "14154:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "14154:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14194:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "14186:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14186:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14144:63:2"
									},
									"returnParameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "14276:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "14268:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1037,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14268:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "14305:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "14299:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1039,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "14299:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "14335:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "14327:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1041,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14327:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "14364:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "14356:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1043,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14356:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14254:122:2"
									},
									"scope": 1127,
									"src": "14117:260:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1047,
										"nodeType": "StructuredDocumentation",
										"src": "14383:182:2",
										"text": " @dev Get the net flow rate of the account\n @param token Super token address\n @param account Account for the query\n @return flowRate Net flow rate"
									},
									"functionSelector": "e8e7e2d1",
									"id": 1057,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNetFlow",
									"nameLocation": "14579:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1053,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14616:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "14599:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1049,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1048,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "14599:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "14599:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14639:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "14631:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1051,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14631:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14589:63:2"
									},
									"returnParameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "14706:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "14700:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1054,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "14700:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14699:16:2"
									},
									"scope": 1127,
									"src": "14570:146:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1058,
										"nodeType": "StructuredDocumentation",
										"src": "14722:763:2",
										"text": " @notice Delete the flow between sender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @param receiver Flow receiver address\n @custom:callbacks \n - AgreementTerminated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - Both flow sender and receiver may delete the flow\n - If Sender account is insolvent or in critical state, a solvency agent may\n   also terminate the agreement\n - Gas fee may be returned to the sender"
									},
									"functionSelector": "b4b333c6",
									"id": 1072,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteFlow",
									"nameLocation": "15499:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1068,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "15536:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "15519:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1060,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1059,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "15519:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "15519:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1063,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "15559:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "15551:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1062,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15551:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "15583:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "15575:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1064,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15575:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "15616:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "15601:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1066,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15601:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15509:116:2"
									},
									"returnParameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15680:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "15667:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1069,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15667:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15666:21:2"
									},
									"scope": 1127,
									"src": "15490:198:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1073,
										"nodeType": "StructuredDocumentation",
										"src": "15694:321:2",
										"text": " @notice Delete the flow between sender and receiver\n @dev A flow deleted by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @param receiver Flow receiver address"
									},
									"functionSelector": "4c8b181f",
									"id": 1087,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteFlowByOperator",
									"nameLocation": "16029:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16076:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "16059:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1075,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1074,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "16059:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "16059:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "16099:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "16091:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16091:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "16123:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "16115:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1079,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16115:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1082,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16156:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "16141:18:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1081,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16141:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16049:116:2"
									},
									"returnParameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16220:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "16207:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1084,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16207:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16206:21:2"
									},
									"scope": 1127,
									"src": "16020:208:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1088,
										"nodeType": "StructuredDocumentation",
										"src": "16239:353:2",
										"text": " @dev Flow operator updated event\n @param token Super token address\n @param sender Flow sender address\n @param flowOperator Flow operator address\n @param permissions Octo bitmask representation of permissions\n @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"id": 1101,
									"name": "FlowOperatorUpdated",
									"nameLocation": "16603:19:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1091,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16657:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "16632:30:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1090,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1089,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "16632:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "16632:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1093,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "16688:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "16672:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1092,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16672:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1095,
												"indexed": true,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "16720:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "16704:28:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1094,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16704:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1097,
												"indexed": false,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "16748:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "16742:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1096,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "16742:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1099,
												"indexed": false,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "16775:17:2",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "16769:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1098,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "16769:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16622:176:2"
									},
									"src": "16597:202:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1102,
										"nodeType": "StructuredDocumentation",
										"src": "16805:466:2",
										"text": " @dev Flow updated event\n @param token Super token address\n @param sender Flow sender address\n @param receiver Flow recipient address\n @param flowRate Flow rate in amount per second for this flow\n @param totalSenderFlowRate Total flow rate in amount per second for the sender\n @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n @param userData The user provided data"
									},
									"id": 1119,
									"name": "FlowUpdated",
									"nameLocation": "17282:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "17328:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "17303:30:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1104,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1103,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "17303:16:2"
													},
													"referencedDeclaration": 1442,
													"src": "17303:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1107,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "17359:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "17343:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17343:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1109,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "17391:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "17375:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17375:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1111,
												"indexed": false,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "17415:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "17409:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 1110,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "17409:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1113,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalSenderFlowRate",
												"nameLocation": "17440:19:2",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "17433:26:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1112,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "17433:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1115,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalReceiverFlowRate",
												"nameLocation": "17476:21:2",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "17469:28:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1114,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "17469:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1117,
												"indexed": false,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "17513:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "17507:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1116,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17507:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17293:234:2"
									},
									"src": "17276:252:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1120,
										"nodeType": "StructuredDocumentation",
										"src": "17534:181:2",
										"text": " @dev Flow updated extension event\n @param flowOperator Flow operator address - the Context.msgSender\n @param deposit The deposit amount for the stream"
									},
									"id": 1126,
									"name": "FlowUpdatedExtension",
									"nameLocation": "17726:20:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1122,
												"indexed": true,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "17772:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "17756:28:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1121,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17756:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1124,
												"indexed": false,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "17802:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1126,
												"src": "17794:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17794:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17746:69:2"
									},
									"src": "17720:96:2"
								}
							],
							"scope": 1128,
							"src": "274:17544:2",
							"usedErrors": [
								728,
								730,
								732,
								734,
								736,
								738,
								740,
								742,
								744,
								746,
								748,
								750,
								752,
								754,
								756,
								758,
								760,
								762,
								764,
								766
							]
						}
					],
					"src": "32:17787:2"
				},
				"id": 2
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							1156
						],
						"ISuperfluidToken": [
							1442
						]
					},
					"id": 1157,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1129,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:3"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 1131,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1157,
							"sourceUnit": 1443,
							"src": "59:58:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1130,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:16:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperAgreement",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1132,
								"nodeType": "StructuredDocumentation",
								"src": "119:65:3",
								"text": " @title Super agreement interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 1156,
							"linearizedBaseContracts": [
								1156
							],
							"name": "ISuperAgreement",
							"nameLocation": "195:15:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1133,
										"nodeType": "StructuredDocumentation",
										"src": "218:59:3",
										"text": " @dev Get the type of the agreement class"
									},
									"functionSelector": "7730599e",
									"id": 1138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "agreementType",
									"nameLocation": "291:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "304:2:3"
									},
									"returnParameters": {
										"id": 1137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1136,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1138,
												"src": "330:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1135,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "330:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "329:9:3"
									},
									"scope": 1156,
									"src": "282:57:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1139,
										"nodeType": "StructuredDocumentation",
										"src": "345:425:3",
										"text": " @dev Calculate the real-time balance for the account of this agreement class\n @param account Account the state belongs to\n @param time Time used for the calculation\n @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n @return deposit Account deposit amount of this agreement\n @return owedDeposit Account owed deposit amount of this agreement"
									},
									"functionSelector": "9b2e48bc",
									"id": 1155,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "784:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "828:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "811:22:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1141,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1140,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "811:16:3"
													},
													"referencedDeclaration": 1442,
													"src": "811:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$1442",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "851:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "843:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "843:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "876:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "868:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "868:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "801:85:3"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "dynamicBalance",
												"nameLocation": "954:14:3",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "947:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1148,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "947:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "990:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "982:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "1019:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "1011:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "933:107:3"
									},
									"scope": 1156,
									"src": "775:266:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1157,
							"src": "185:859:3",
							"usedErrors": []
						}
					],
					"src": "32:1013:3"
				},
				"id": 3
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							1156
						],
						"ISuperfluidToken": [
							1442
						]
					},
					"id": 1443,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1158,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:4"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 1160,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1443,
							"sourceUnit": 1157,
							"src": "59:56:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1159,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:15:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluidToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1161,
								"nodeType": "StructuredDocumentation",
								"src": "117:66:4",
								"text": " @title Superfluid token interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 1442,
							"linearizedBaseContracts": [
								1442
							],
							"name": "ISuperfluidToken",
							"nameLocation": "194:16:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1163,
									"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
									"nameLocation": "398:33:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "431:2:4"
									},
									"src": "392:42:4"
								},
								{
									"id": 1165,
									"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
									"nameLocation": "460:33:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1164,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "493:2:4"
									},
									"src": "454:42:4"
								},
								{
									"id": 1167,
									"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
									"nameLocation": "522:34:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "556:2:4"
									},
									"src": "516:43:4"
								},
								{
									"id": 1169,
									"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
									"nameLocation": "584:34:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1168,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "618:2:4"
									},
									"src": "578:43:4"
								},
								{
									"id": 1171,
									"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
									"nameLocation": "646:30:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1170,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "676:2:4"
									},
									"src": "640:39:4"
								},
								{
									"id": 1173,
									"name": "SF_TOKEN_ONLY_HOST",
									"nameLocation": "708:18:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "726:2:4"
									},
									"src": "702:27:4"
								},
								{
									"documentation": {
										"id": 1174,
										"nodeType": "StructuredDocumentation",
										"src": "951:60:4",
										"text": " @dev Get superfluid host contract address"
									},
									"functionSelector": "20bc4425",
									"id": 1179,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHost",
									"nameLocation": "1025:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1032:2:4"
									},
									"returnParameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1065:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1179,
												"src": "1057:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1057:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1056:14:4"
									},
									"scope": 1442,
									"src": "1016:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluidToken.LiquidationTypeData",
									"id": 1184,
									"members": [
										{
											"constant": false,
											"id": 1181,
											"mutability": "mutable",
											"name": "version",
											"nameLocation": "1504:7:4",
											"nodeType": "VariableDeclaration",
											"scope": 1184,
											"src": "1496:15:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1180,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1496:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1183,
											"mutability": "mutable",
											"name": "liquidationType",
											"nameLocation": "1527:15:4",
											"nodeType": "VariableDeclaration",
											"scope": 1184,
											"src": "1521:21:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 1182,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "1521:5:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "LiquidationTypeData",
									"nameLocation": "1466:19:4",
									"nodeType": "StructDefinition",
									"scope": 1442,
									"src": "1459:90:4",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1185,
										"nodeType": "StructuredDocumentation",
										"src": "1751:321:4",
										"text": " @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n @param account for the query\n @param timestamp Time of balance\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "eb3537cc",
									"id": 1198,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "2086:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1187,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2120:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "2112:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2112:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2144:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "2136:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2136:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2103:56:4"
									},
									"returnParameters": {
										"id": 1197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1192,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2219:16:4",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "2212:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1191,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2212:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1194,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2257:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "2249:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1193,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2249:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2286:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "2278:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2278:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2198:100:4"
									},
									"scope": 1442,
									"src": "2077:222:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1199,
										"nodeType": "StructuredDocumentation",
										"src": "2305:339:4",
										"text": " @notice Calculate the realtime balance given the current host.getNow() value\n @dev realtimeBalanceOf with timestamp equals to block timestamp\n @param account for the query\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "2ec8eec7",
									"id": 1212,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOfNow",
									"nameLocation": "2658:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2695:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "2687:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1200,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2687:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:30:4"
									},
									"returnParameters": {
										"id": 1211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1204,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2768:16:4",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "2761:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1203,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2761:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2806:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "2798:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2835:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "2827:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2827:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1210,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2868:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1212,
												"src": "2860:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2860:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:131:4"
									},
									"scope": 1442,
									"src": "2649:230:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1213,
										"nodeType": "StructuredDocumentation",
										"src": "2885:309:4",
										"text": " @notice Check if account is critical\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @param timestamp The time we'd like to check if the account is critical (should use future)\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "d9d078d6",
									"id": 1222,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCritical",
									"nameLocation": "3208:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1215,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3243:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1222,
												"src": "3235:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3235:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1217,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3268:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1222,
												"src": "3260:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3260:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3225:58:4"
									},
									"returnParameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3327:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1222,
												"src": "3322:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1219,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3322:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3321:17:4"
									},
									"scope": 1442,
									"src": "3199:140:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1223,
										"nodeType": "StructuredDocumentation",
										"src": "3345:239:4",
										"text": " @notice Check if account is critical now (current host.getNow())\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "79359f6f",
									"id": 1230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCriticalNow",
									"nameLocation": "3598:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3636:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1230,
												"src": "3628:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3618:31:4"
									},
									"returnParameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3693:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1230,
												"src": "3688:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1227,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3688:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3687:17:4"
									},
									"scope": 1442,
									"src": "3589:116:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1231,
										"nodeType": "StructuredDocumentation",
										"src": "3711:383:4",
										"text": " @notice Check if account is solvent\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @param timestamp The time we'd like to check if the account is solvent (should use future)\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "b84cdd4a",
									"id": 1240,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolvent",
									"nameLocation": "4108:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4142:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "4134:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4134:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "4167:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "4159:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4159:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4124:58:4"
									},
									"returnParameters": {
										"id": 1239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4226:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1240,
												"src": "4221:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1237,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4221:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4220:16:4"
									},
									"scope": 1442,
									"src": "4099:138:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1241,
										"nodeType": "StructuredDocumentation",
										"src": "4243:289:4",
										"text": " @notice Check if account is solvent now\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "bb0d196e",
									"id": 1248,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolventNow",
									"nameLocation": "4546:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4583:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1248,
												"src": "4575:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4575:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4565:31:4"
									},
									"returnParameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4640:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1248,
												"src": "4635:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1245,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4635:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4634:16:4"
									},
									"scope": 1442,
									"src": "4537:114:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1249,
										"nodeType": "StructuredDocumentation",
										"src": "4657:277:4",
										"text": " @notice Get a list of agreements that is active for the account\n @dev An active agreement is one that has state for the account\n @param account Account to query\n @return activeAgreements List of accounts that have non-zero states for the account"
									},
									"functionSelector": "386fa221",
									"id": 1258,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccountActiveAgreements",
									"nameLocation": "4948:26:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4983:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1258,
												"src": "4975:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4975:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4974:17:4"
									},
									"returnParameters": {
										"id": 1257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1256,
												"mutability": "mutable",
												"name": "activeAgreements",
												"nameLocation": "5053:16:4",
												"nodeType": "VariableDeclaration",
												"scope": 1258,
												"src": "5028:41:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1156_$dyn_memory_ptr",
													"typeString": "contract ISuperAgreement[]"
												},
												"typeName": {
													"baseType": {
														"id": 1254,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1253,
															"name": "ISuperAgreement",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1156,
															"src": "5028:15:4"
														},
														"referencedDeclaration": 1156,
														"src": "5028:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperAgreement_$1156",
															"typeString": "contract ISuperAgreement"
														}
													},
													"id": 1255,
													"nodeType": "ArrayTypeName",
													"src": "5028:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1156_$dyn_storage_ptr",
														"typeString": "contract ISuperAgreement[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5027:43:4"
									},
									"scope": 1442,
									"src": "4939:132:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1259,
										"nodeType": "StructuredDocumentation",
										"src": "5277:110:4",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "12a6a3f8",
									"id": 1267,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAgreement",
									"nameLocation": "5401:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1261,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5434:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "5426:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1260,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5426:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5465:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "5446:23:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1262,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5446:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1263,
													"nodeType": "ArrayTypeName",
													"src": "5446:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5416:59:4"
									},
									"returnParameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5492:0:4"
									},
									"scope": 1442,
									"src": "5392:101:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1268,
										"nodeType": "StructuredDocumentation",
										"src": "5498:174:4",
										"text": " @dev Agreement created event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"id": 1277,
									"name": "AgreementCreated",
									"nameLocation": "5683:16:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1270,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "5725:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "5709:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1269,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1272,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5757:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "5749:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1271,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5749:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1275,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5779:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "5769:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1273,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5769:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1274,
													"nodeType": "ArrayTypeName",
													"src": "5769:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5699:90:4"
									},
									"src": "5677:113:4"
								},
								{
									"documentation": {
										"id": 1278,
										"nodeType": "StructuredDocumentation",
										"src": "5796:184:4",
										"text": " @dev Get data of the agreement\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @return data Data of the agreement"
									},
									"functionSelector": "6c2d9f2f",
									"id": 1290,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementData",
									"nameLocation": "5994:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6028:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "6020:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1279,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6060:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "6052:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1281,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6052:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6077:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "6072:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1283,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6072:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6010:83:4"
									},
									"returnParameters": {
										"id": 1289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6149:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "6132:21:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1286,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6132:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1287,
													"nodeType": "ArrayTypeName",
													"src": "6132:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6131:23:4"
									},
									"scope": 1442,
									"src": "5985:170:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1291,
										"nodeType": "StructuredDocumentation",
										"src": "6161:110:4",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "a1b2bf8b",
									"id": 1299,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementData",
									"nameLocation": "6285:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6322:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1299,
												"src": "6314:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1292,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1296,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6353:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1299,
												"src": "6334:23:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1294,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6334:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1295,
													"nodeType": "ArrayTypeName",
													"src": "6334:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6304:59:4"
									},
									"returnParameters": {
										"id": 1298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6380:0:4"
									},
									"scope": 1442,
									"src": "6276:105:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1300,
										"nodeType": "StructuredDocumentation",
										"src": "6386:174:4",
										"text": " @dev Agreement updated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"id": 1309,
									"name": "AgreementUpdated",
									"nameLocation": "6571:16:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6613:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1309,
												"src": "6597:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6597:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1304,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6645:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1309,
												"src": "6637:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1303,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6637:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1307,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6667:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1309,
												"src": "6657:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1305,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6657:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1306,
													"nodeType": "ArrayTypeName",
													"src": "6657:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6587:90:4"
									},
									"src": "6565:113:4"
								},
								{
									"documentation": {
										"id": 1310,
										"nodeType": "StructuredDocumentation",
										"src": "6684:73:4",
										"text": " @dev Close the agreement\n @param id Agreement ID"
									},
									"functionSelector": "27048397",
									"id": 1317,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "terminateAgreement",
									"nameLocation": "6771:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6807:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1317,
												"src": "6799:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1311,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6799:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1314,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6824:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1317,
												"src": "6819:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1313,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6819:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6789:51:4"
									},
									"returnParameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6857:0:4"
									},
									"scope": 1442,
									"src": "6762:96:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1318,
										"nodeType": "StructuredDocumentation",
										"src": "6863:143:4",
										"text": " @dev Agreement terminated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID"
									},
									"id": 1324,
									"name": "AgreementTerminated",
									"nameLocation": "7017:19:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1320,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7062:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "7046:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7046:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1322,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "7094:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "7086:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1321,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7086:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7036:66:4"
									},
									"src": "7011:92:4"
								},
								{
									"documentation": {
										"id": 1325,
										"nodeType": "StructuredDocumentation",
										"src": "7109:199:4",
										"text": " @dev Update agreement state slot\n @param account Account to be updated\n @custom:note \n - To clear the storage out, provide zero-ed array of intended length"
									},
									"functionSelector": "090c415e",
									"id": 1335,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementStateSlot",
									"nameLocation": "7322:24:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7364:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1335,
												"src": "7356:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1326,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7356:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7389:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1335,
												"src": "7381:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1328,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7381:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "7424:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1335,
												"src": "7405:27:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1330,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7405:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1331,
													"nodeType": "ArrayTypeName",
													"src": "7405:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7346:92:4"
									},
									"returnParameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7455:0:4"
									},
									"scope": 1442,
									"src": "7313:143:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1336,
										"nodeType": "StructuredDocumentation",
										"src": "7461:214:4",
										"text": " @dev Agreement account state updated event\n @param agreementClass Contract address of the agreement\n @param account Account updated\n @param slotId slot id of the agreement state"
									},
									"id": 1344,
									"name": "AgreementStateUpdated",
									"nameLocation": "7686:21:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1338,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7733:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "7717:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1337,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7717:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1340,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7773:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "7757:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7757:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1342,
												"indexed": false,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7798:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "7790:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7790:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7707:103:4"
									},
									"src": "7680:131:4"
								},
								{
									"documentation": {
										"id": 1345,
										"nodeType": "StructuredDocumentation",
										"src": "7817:267:4",
										"text": " @dev Get data of the slot of the state of an agreement\n @param agreementClass Contract address of the agreement\n @param account Account to query\n @param slotId slot id of the state\n @param dataLength length of the state data"
									},
									"functionSelector": "4b61cc33",
									"id": 1359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementStateSlot",
									"nameLocation": "8098:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1347,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "8137:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "8129:22:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8129:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8169:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "8161:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8161:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "8194:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "8186:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1350,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8186:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "8215:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "8210:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1352,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8210:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8119:112:4"
									},
									"returnParameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "8288:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "8271:25:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1355,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "8271:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1356,
													"nodeType": "ArrayTypeName",
													"src": "8271:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8270:27:4"
									},
									"scope": 1442,
									"src": "8089:209:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1360,
										"nodeType": "StructuredDocumentation",
										"src": "8304:320:4",
										"text": " @notice Settle balance from an account by the agreement\n @dev The agreement needs to make sure that the balance delta is balanced afterwards\n @param account Account to query.\n @param delta Amount of balance delta to be settled\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "cf97256d",
									"id": 1367,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settleBalance",
									"nameLocation": "8638:13:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1362,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8669:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "8661:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1361,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8661:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "delta",
												"nameLocation": "8693:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1367,
												"src": "8686:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1363,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8686:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8651:53:4"
									},
									"returnParameters": {
										"id": 1366,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8721:0:4"
									},
									"scope": 1442,
									"src": "8629:93:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1368,
										"nodeType": "StructuredDocumentation",
										"src": "8728:1154:4",
										"text": " @dev Make liquidation payouts (v2)\n @param id Agreement ID\n @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n @param liquidatorAccount Address of the executor of the liquidation\n @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n @param targetAccount Account to be liquidated\n @param rewardAmount The amount the rewarded account will receive\n @param targetAccountBalanceDelta The delta amount the target account balance should change by\n @custom:note \n - If a bailout is required (bailoutAmount > 0)\n   - the actual reward (single deposit) goes to the executor,\n   - while the reward account becomes the bailout account\n   - total bailout include: bailout amount + reward amount\n   - the targetAccount will be bailed out\n - If a bailout is not required\n   - the targetAccount will pay the rewardAmount\n   - the liquidator (reward account in PIC period) will receive the rewardAmount\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "1863e809",
									"id": 1385,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "makeLiquidationPayoutsV2",
									"nameLocation": "9896:24:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "9943:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "9935:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1369,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9935:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "9968:19:4",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "9955:32:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1371,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9955:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "10005:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "9997:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9997:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "useDefaultRewardAccount",
												"nameLocation": "10037:23:4",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "10032:28:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1375,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10032:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "10078:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "10070:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10070:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "10109:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "10101:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10101:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1382,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "10138:25:4",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "10131:32:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1381,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "10131:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9925:244:4"
									},
									"returnParameters": {
										"id": 1384,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10178:0:4"
									},
									"scope": 1442,
									"src": "9887:292:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1386,
										"nodeType": "StructuredDocumentation",
										"src": "10184:1512:4",
										"text": " @dev Agreement liquidation event v2 (including agent account)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param liquidatorAccount Address of the executor of the liquidation\n @param targetAccount Account of the stream sender\n @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n @param rewardAmount The amount the reward recipient account balance should change by\n @param targetAccountBalanceDelta The amount the sender account balance should change by\n @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n @custom:note \n Reward account rule:\n - if the agreement is liquidated during the PIC period\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n   - the targetAccount will pay for the rewardAmount\n - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n   - the targetAccount will pay for the rewardAmount\n - if the targetAccount is insolvent\n   - the liquidatorAccount will get the rewardAmount (single deposit)\n   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n   - the targetAccount will receive the bailoutAmount"
									},
									"id": 1404,
									"name": "AgreementLiquidatedV2",
									"nameLocation": "11707:21:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1388,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "11754:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "11738:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11738:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1390,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "11786:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "11778:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1389,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11778:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1392,
												"indexed": true,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "11814:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "11798:33:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1391,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11798:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1394,
												"indexed": true,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "11857:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "11841:29:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11841:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1396,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmountReceiver",
												"nameLocation": "11888:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "11880:28:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11880:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1398,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "11926:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "11918:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11918:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1400,
												"indexed": false,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "11955:25:4",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "11948:32:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1399,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "11948:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1402,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "11996:19:4",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "11990:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1401,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11990:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11728:293:4"
									},
									"src": "11701:321:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1405,
										"nodeType": "StructuredDocumentation",
										"src": "12834:435:4",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param rewardAccount Account that collect the reward\n @param rewardAmount Amount of liquidation reward\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"id": 1417,
									"name": "AgreementLiquidated",
									"nameLocation": "13280:19:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1407,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "13325:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1417,
												"src": "13309:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1406,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13309:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1409,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "13357:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1417,
												"src": "13349:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1408,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13349:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1411,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "13385:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1417,
												"src": "13369:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13369:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1413,
												"indexed": true,
												"mutability": "mutable",
												"name": "rewardAccount",
												"nameLocation": "13425:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 1417,
												"src": "13409:29:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13409:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1415,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "13456:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1417,
												"src": "13448:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13448:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13299:175:4"
									},
									"src": "13274:201:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1418,
										"nodeType": "StructuredDocumentation",
										"src": "13481:276:4",
										"text": " @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n @param bailoutAccount Account that bailout the penalty account\n @param bailoutAmount Amount of account bailout\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"id": 1424,
									"name": "Bailout",
									"nameLocation": "13768:7:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1420,
												"indexed": true,
												"mutability": "mutable",
												"name": "bailoutAccount",
												"nameLocation": "13801:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1424,
												"src": "13785:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1419,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13785:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1422,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "13833:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 1424,
												"src": "13825:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1421,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13825:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13775:77:4"
									},
									"src": "13762:91:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1425,
										"nodeType": "StructuredDocumentation",
										"src": "13859:1082:4",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n @param liquidatorAccount Account of the agent that performed the liquidation.\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param bondAccount Account that collect the reward or bailout accounts\n @param rewardAmount Amount of liquidation reward\n @param bailoutAmount Amount of liquidation bailouot\n @custom:deprecated Use AgreementLiquidatedV2 instead\n @custom:note \n Reward account rule:\n - if bailout is equal to 0, then\n   - the bondAccount will get the rewardAmount,\n   - the penaltyAccount will pay for the rewardAmount.\n - if bailout is larger than 0, then\n   - the liquidatorAccount will get the rewardAmouont,\n   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount."
									},
									"id": 1441,
									"name": "AgreementLiquidatedBy",
									"nameLocation": "14952:21:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1427,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "14991:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "14983:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14983:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1429,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "15034:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "15018:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15018:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1431,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "15066:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "15058:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1430,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15058:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1433,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "15094:14:4",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "15078:30:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1432,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15078:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1435,
												"indexed": true,
												"mutability": "mutable",
												"name": "bondAccount",
												"nameLocation": "15134:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "15118:27:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15118:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1437,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "15163:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "15155:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1436,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15155:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1439,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "15193:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 1441,
												"src": "15185:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15185:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14973:239:4"
									},
									"src": "14946:267:4"
								}
							],
							"scope": 1443,
							"src": "184:15031:4",
							"usedErrors": [
								1163,
								1165,
								1167,
								1169,
								1171,
								1173
							]
						}
					],
					"src": "32:15184:4"
				},
				"id": 4
			},
			"mosaic/Test.sol": {
				"ast": {
					"absolutePath": "mosaic/Test.sol",
					"exportedSymbols": {
						"IConstantFlowAgreementV1": [
							1127
						],
						"ILensHub": [
							471
						],
						"Test": [
							1453
						]
					},
					"id": 1454,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1444,
							"literals": [
								"solidity",
								"0.8",
								".10"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:5"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
							"file": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
							"id": 1446,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1454,
							"sourceUnit": 1128,
							"src": "57:143:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1445,
										"name": "IConstantFlowAgreementV1",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "66:24:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@aave/lens-protocol/contracts/interfaces/ILensHub.sol",
							"file": "@aave/lens-protocol/contracts/interfaces/ILensHub.sol",
							"id": 1448,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1454,
							"sourceUnit": 472,
							"src": "201:81:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1447,
										"name": "ILensHub",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "210:8:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Test",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1453,
							"linearizedBaseContracts": [
								1453
							],
							"name": "Test",
							"nameLocation": "293:4:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1451,
										"nodeType": "Block",
										"src": "332:7:5",
										"statements": []
									},
									"functionSelector": "f8a8fd6d",
									"id": 1452,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "test",
									"nameLocation": "313:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "317:2:5"
									},
									"returnParameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "332:0:5"
									},
									"scope": 1453,
									"src": "304:35:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1454,
							"src": "284:57:5",
							"usedErrors": []
						}
					],
					"src": "32:309:5"
				},
				"id": 5
			}
		}
	}
}