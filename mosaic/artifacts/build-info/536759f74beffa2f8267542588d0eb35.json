{
	"id": "536759f74beffa2f8267542588d0eb35",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.10",
	"solcLongVersion": "0.8.10+commit.fc410830",
	"input": {
		"language": "Solidity",
		"sources": {
			"mosaic/Mosaic.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { IConstantFlowAgreementV1 } from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\nimport { ISuperfluidToken } from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\nimport { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n// Superfluid CFA\n// Polygon: 0x6EeE6060f715257b970700bc2656De21dEdF074C\n// Mumbai: 0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873\n\n// SuperToken (fDAIx / DAIx)\n// Polygon: 0x1305F6B6Df9Dc47159D12Eb7aC2804d4A33173c2\n// Mumbai: 0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f\n\n// LensHub\n// Polygon: 0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d\n// Mumbai: 0x60Ae865ee4C725cd04353b5AAb364553f56ceF82\n\ncontract Mosaic {\n    function isSubscribed(address sender, address receiver, string memory profileId) public view returns (bool subscribed) {\n        subscribed = false;\n\n        IERC721 _lensHub = IERC721(0x60Ae865ee4C725cd04353b5AAb364553f56ceF82);\n        IConstantFlowAgreementV1 _cfa = IConstantFlowAgreementV1(0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873);\n        (, int96 flowRate, ,) = _cfa.getFlow(ISuperfluidToken(0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f), sender, receiver);\n        address _owner = _lensHub.ownerOf(parseInt(profileId));\n\n        if (flowRate > 1 || sender == _owner) {\n            subscribed = true;\n        }\n    }\n\n    function parseInt(string memory _a) internal pure returns (uint256 _parsedInt) {\n        return parseInt(_a, 0);\n    }\n\n    function parseInt(string memory _a, uint _b) internal pure returns (uint256 _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i < bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\n                if (decimals) {\n                   if (_b == 0) {\n                       break;\n                   } else {\n                       _b--;\n                   }\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                decimals = true;\n            }\n        }\n        if (_b > 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluidGovernance } from \"./ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperTokenFactory } from \"./ISuperTokenFactory.sol\";\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperApp } from \"./ISuperApp.sol\";\nimport {\n    BatchOperation,\n    ContextDefinitions,\n    FlowOperatorDefinitions,\n    SuperAppDefinitions,\n    SuperfluidGovernanceConfigs\n} from \"./Definitions.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\n\n/**\n * @title Host interface\n * @author Superfluid\n * @notice This is the central contract of the system where super agreement, super app\n * and super token features are connected.\n *\n * The Superfluid host contract is also the entry point for the protocol users,\n * where batch call and meta transaction are provided for UX improvements.\n *\n */\ninterface ISuperfluid {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    // Superfluid Custom Errors\n    error HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION();              // 0xef4295f6\n    error HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE();           // 0x474e7641\n    error HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS();    // 0x0cd0ebc2\n    error HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS();   // 0x473f7bd4\n    error HOST_INVALID_CONFIG_WORD();                           // 0xf4c802a4\n    error HOST_MAX_256_AGREEMENTS();                            // 0x7c281a78\n    error HOST_NON_UPGRADEABLE();                               // 0x14f72c9f\n    error HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX();               // 0x67e9985b\n    error HOST_ONLY_GOVERNANCE();                               // 0xc5d22a4e\n    error HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE();             // 0xb4770115\n    error HOST_AGREEMENT_ALREADY_REGISTERED();                  // 0xdc9ddba8\n    error HOST_AGREEMENT_IS_NOT_REGISTERED();                   // 0x1c9e9bea\n    error HOST_MUST_BE_CONTRACT();                              // 0xd4f6b30c\n    error HOST_ONLY_LISTED_AGREEMENT();                         // 0x619c5359\n    error HOST_NEED_MORE_GAS();                                 // 0xd4f5d496\n\n    // App Related Custom Errors\n    // uses SuperAppDefinitions' App Jail Reasons as _code\n    error APP_RULE(uint256 _code);                              // 0xa85ba64f\n\n    error HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY(); // 0x19ab84d1\n    error HOST_NOT_A_SUPER_APP();                               // 0x163cbe43\n    error HOST_NO_APP_REGISTRATION_PERMISSIONS();               // 0x5b93ebf0\n    error HOST_RECEIVER_IS_NOT_SUPER_APP();                     // 0x96aa315e\n    error HOST_SENDER_IS_NOT_SUPER_APP();                       // 0xbacfdc40\n    error HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL();             // 0x44725270\n    error HOST_SUPER_APP_IS_JAILED();                           // 0x02384b64\n    error HOST_SUPER_APP_ALREADY_REGISTERED();                  // 0x01b0a935\n    error HOST_UNAUTHORIZED_SUPER_APP_FACTORY();                // 0x289533c5\n\n    /**************************************************************************\n     * Time\n     *\n     * > The Oracle: You have the sight now, Neo. You are looking at the world without time.\n     * > Neo: Then why can't I see what happens to her?\n     * > The Oracle: We can never see past the choices we don't understand.\n     * >       - The Oracle and Neo conversing about the future of Trinity and the effects of Neo's choices\n     *************************************************************************/\n\n    function getNow() external view returns (uint256);\n\n    /**************************************************************************\n     * Governance\n     *************************************************************************/\n\n    /**\n     * @dev Get the current governance address of the Superfluid host\n     */\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\n\n    /**\n     * @dev Replace the current governance with a new one\n     */\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\n    /**\n     * @dev Governance replaced event\n     * @param oldGov Address of the old governance contract\n     * @param newGov Address of the new governance contract\n     */\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\n\n    /**************************************************************************\n     * Agreement Whitelisting\n     *************************************************************************/\n\n    /**\n     * @dev Register a new agreement class to the system\n     * @param agreementClassLogic Initial agreement class code\n     *\n     * @custom:modifiers \n     * - onlyGovernance\n     */\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class registered event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type registered\n     * @param code Address of the new agreement\n     */\n    event AgreementClassRegistered(bytes32 agreementType, address code);\n\n    /**\n    * @dev Update code of an agreement class\n    * @param agreementClassLogic New code for the agreement class\n    *\n    * @custom:modifiers \n    *  - onlyGovernance\n    */\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\n    /**\n     * @notice Agreement class updated event\n     * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n     * @param agreementType The agreement type updated\n     * @param code Address of the new agreement\n     */\n    event AgreementClassUpdated(bytes32 agreementType, address code);\n\n    /**\n    * @notice Check if the agreement type is whitelisted\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\n\n    /**\n    * @notice Get agreement class\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    */\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\n\n    /**\n    * @dev Map list of the agreement classes using a bitmap\n    * @param bitmap Agreement class bitmap\n    */\n    function mapAgreementClasses(uint256 bitmap)\n        external view\n        returns (ISuperAgreement[] memory agreementClasses);\n\n    /**\n    * @notice Create a new bitmask by adding a agreement class to it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**\n    * @notice Create a new bitmask by removing a agreement class from it\n    * @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n    * @param bitmap Agreement class bitmap\n    */\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**************************************************************************\n    * Super Token Factory\n    **************************************************************************/\n\n    /**\n     * @dev Get the super token factory\n     * @return factory The factory\n     */\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\n\n    /**\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\n     * @return logic The factory logic\n     */\n    function getSuperTokenFactoryLogic() external view returns (address logic);\n\n    /**\n     * @dev Update super token factory\n     * @param newFactory New factory logic\n     */\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\n    /**\n     * @dev SuperToken factory updated event\n     * @param newFactory Address of the new factory\n     */\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\n\n    /**\n     * @notice Update the super token logic to the latest\n     * @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours\n     */\n    function updateSuperTokenLogic(ISuperToken token) external;\n    /**\n     * @dev SuperToken logic updated event\n     * @param code Address of the new SuperToken logic\n     */\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\n\n    /**************************************************************************\n     * App Registry\n     *************************************************************************/\n\n    /**\n     * @dev Message sender (must be a contract) declares itself as a super app.\n     * @custom:deprecated you should use `registerAppWithKey` or `registerAppByFactory` instead,\n     * because app registration is currently governance permissioned on mainnets.\n     * @param configWord The super app manifest configuration, flags are defined in\n     * `SuperAppDefinitions`\n     */\n    function registerApp(uint256 configWord) external;\n    /**\n     * @dev App registered event\n     * @param app Address of jailed app\n     */\n    event AppRegistered(ISuperApp indexed app);\n\n    /**\n     * @dev Message sender declares itself as a super app.\n     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n     * @param registrationKey The registration key issued by the governance, needed to register on a mainnet.\n     * @notice See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n     * On testnets or in dev environment, a placeholder (e.g. empty string) can be used.\n     * While the message sender must be the super app itself, the transaction sender (tx.origin)\n     * must be the deployer account the registration key was issued for.\n     */\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\n\n    /**\n     * @dev Message sender (must be a contract) declares app as a super app\n     * @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n     * @notice On mainnet deployments, only factory contracts pre-authorized by governance can use this.\n     * See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n     */\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\n\n    /**\n     * @dev Query if the app is registered\n     * @param app Super app address\n     */\n    function isApp(ISuperApp app) external view returns(bool);\n\n    /**\n     * @dev Query app callbacklevel\n     * @param app Super app address\n     */\n    function getAppCallbackLevel(ISuperApp app) external view returns(uint8 appCallbackLevel);\n\n    /**\n     * @dev Get the manifest of the super app\n     * @param app Super app address\n     */\n    function getAppManifest(\n        ISuperApp app\n    )\n        external view\n        returns (\n            bool isSuperApp,\n            bool isJailed,\n            uint256 noopMask\n        );\n\n    /**\n     * @dev Query if the app has been jailed\n     * @param app Super app address\n     */\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\n\n    /**\n     * @dev Whitelist the target app for app composition for the source app (msg.sender)\n     * @param targetApp The target super app address\n     */\n    function allowCompositeApp(ISuperApp targetApp) external;\n\n    /**\n     * @dev Query if source app is allowed to call the target app as downstream app\n     * @param app Super app address\n     * @param targetApp The target super app address\n     */\n    function isCompositeAppAllowed(\n        ISuperApp app,\n        ISuperApp targetApp\n    )\n        external view\n        returns (bool isAppAllowed);\n\n    /**************************************************************************\n     * Agreement Framework\n     *\n     * Agreements use these function to trigger super app callbacks, updates\n     * app credit and charge gas fees.\n     *\n     * These functions can only be called by registered agreements.\n     *************************************************************************/\n\n    /**\n     * @dev (For agreements) StaticCall the app before callback\n     * @param  app               The super app.\n     * @param  callData          The call data sending to the super app.\n     * @param  isTermination     Is it a termination callback?\n     * @param  ctx               Current ctx, it will be validated.\n     * @return cbdata            Data returned from the callback.\n     */\n    function callAppBeforeCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns(bytes memory cbdata);\n\n    /**\n     * @dev (For agreements) Call the app after callback\n     * @param  app               The super app.\n     * @param  callData          The call data sending to the super app.\n     * @param  isTermination     Is it a termination callback?\n     * @param  ctx               Current ctx, it will be validated.\n     * @return newCtx            The current context of the transaction.\n     */\n    function callAppAfterCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Create a new callback stack\n     * @param  ctx                     The current ctx, it will be validated.\n     * @param  app                     The super app.\n     * @param  appCreditGranted        App credit granted so far.\n     * @param  appCreditUsed           App credit used so far.\n     * @return newCtx                  The current context of the transaction.\n     */\n    function appCallbackPush(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 appCreditGranted,\n        int256 appCreditUsed,\n        ISuperfluidToken appCreditToken\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Pop from the current app callback stack\n     * @param  ctx                     The ctx that was pushed before the callback stack.\n     * @param  appCreditUsedDelta      App credit used by the app.\n     * @return newCtx                  The current context of the transaction.\n     *\n     * @custom:security\n     * - Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory.\n     * - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.\n     */\n    function appCallbackPop(\n        bytes calldata ctx,\n        int256 appCreditUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Use app credit.\n     * @param  ctx                      The current ctx, it will be validated.\n     * @param  appCreditUsedMore        See app credit for more details.\n     * @return newCtx                   The current context of the transaction.\n     */\n    function ctxUseCredit(\n        bytes calldata ctx,\n        int256 appCreditUsedMore\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev (For agreements) Jail the app.\n     * @param  app                     The super app.\n     * @param  reason                  Jail reason code.\n     * @return newCtx                  The current context of the transaction.\n     */\n    function jailApp(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 reason\n    )\n        external\n        // onlyAgreement\n        // assertValidCtx(ctx)\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Jail event for the app\n     * @param app Address of jailed app\n     * @param reason Reason the app is jailed (see Definitions.sol for the full list)\n     */\n    event Jail(ISuperApp indexed app, uint256 reason);\n\n    /**************************************************************************\n     * Contextless Call Proxies\n     *\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\n     * with agreements or apps.\n     *\n     * NOTE: The contextual call data should be generated using\n     * abi.encodeWithSelector. The context parameter should be set to \"0x\",\n     * an empty bytes array as a placeholder to be replaced by the host\n     * contract.\n     *************************************************************************/\n\n     /**\n      * @dev Call agreement function\n      * @param agreementClass The agreement address you are calling\n      * @param callData The contextual call data with placeholder ctx\n      * @param userData Extra user data being sent to the super app callbacks\n      */\n     function callAgreement(\n         ISuperAgreement agreementClass,\n         bytes calldata callData,\n         bytes calldata userData\n     )\n        external\n        //cleanCtx\n        //isAgreement(agreementClass)\n        returns(bytes memory returnedData);\n\n    /**\n     * @notice Call app action\n     * @dev Main use case is calling app action in a batch call via the host\n     * @param callData The contextual call data\n     *\n     * @custom:note See \"Contextless Call Proxies\" above for more about contextual call data.\n     */\n    function callAppAction(\n        ISuperApp app,\n        bytes calldata callData\n    )\n        external\n        //cleanCtx\n        //isAppActive(app)\n        //isValidAppAction(callData)\n        returns(bytes memory returnedData);\n\n    /**************************************************************************\n     * Contextual Call Proxies and Context Utilities\n     *\n     * For apps, they must use context they receive to interact with\n     * agreements or apps.\n     *\n     * The context changes must be saved and returned by the apps in their\n     * callbacks always, any modification to the context will be detected and\n     * the violating app will be jailed.\n     *************************************************************************/\n\n    /**\n     * @dev Context Struct\n     *\n     * @custom:note on backward compatibility:\n     * - Non-dynamic fields are padded to 32bytes and packed\n     * - Dynamic fields are referenced through a 32bytes offset to their \"parents\" field (or root)\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\n     *    - non-dynamic fields will be parsed at the same memory location,\n     *    - and dynamic fields will simply have a greater offset than it was.\n     * - We cannot change the structure of the Context struct because of ABI compatibility requirements\n     */\n    struct Context {\n        //\n        // Call context\n        //\n        // app callback level\n        uint8 appCallbackLevel;\n        // type of call\n        uint8 callType;\n        // the system timestamp\n        uint256 timestamp;\n        // The intended message sender for the call\n        address msgSender;\n\n        //\n        // Callback context\n        //\n        // For callbacks it is used to know which agreement function selector is called\n        bytes4 agreementSelector;\n        // User provided data for app callbacks\n        bytes userData;\n\n        //\n        // App context\n        //\n        // app credit granted\n        uint256 appCreditGranted;\n        // app credit wanted by the app callback\n        uint256 appCreditWantedDeprecated;\n        // app credit used, allowing negative values over a callback session\n        // the appCreditUsed value over a callback sessions is calculated with:\n        // existing flow data owed deposit + sum of the callback agreements\n        // deposit deltas \n        // the final value used to modify the state is determined by the\n        // _adjustNewAppCreditUsed function (in AgreementLibrary.sol) which takes \n        // the appCreditUsed value reached in the callback session and the app\n        // credit granted\n        int256 appCreditUsed;\n        // app address\n        address appAddress;\n        // app credit in super token\n        ISuperfluidToken appCreditToken;\n    }\n\n    function callAgreementWithContext(\n        ISuperAgreement agreementClass,\n        bytes calldata callData,\n        bytes calldata userData,\n        bytes calldata ctx\n    )\n        external\n        // requireValidCtx(ctx)\n        // onlyAgreement(agreementClass)\n        returns (bytes memory newCtx, bytes memory returnedData);\n\n    function callAppActionWithContext(\n        ISuperApp app,\n        bytes calldata callData,\n        bytes calldata ctx\n    )\n        external\n        // requireValidCtx(ctx)\n        // isAppActive(app)\n        returns (bytes memory newCtx);\n\n    function decodeCtx(bytes memory ctx)\n        external pure\n        returns (Context memory context);\n\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\n\n    /**************************************************************************\n    * Batch call\n    **************************************************************************/\n    /**\n     * @dev Batch operation data\n     */\n    struct Operation {\n        // Operation type. Defined in BatchOperation (Definitions.sol)\n        uint32 operationType;\n        // Operation target\n        address target;\n        // Data specific to the operation\n        bytes data;\n    }\n\n    /**\n     * @dev Batch call function\n     * @param operations Array of batch operations\n     */\n    function batchCall(Operation[] calldata operations) external;\n\n    /**\n     * @dev Batch call function for trusted forwarders (EIP-2771)\n     * @param operations Array of batch operations\n     */\n    function forwardBatchCall(Operation[] calldata operations) external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * TODO: turning these off because solidity-coverage doesn't like it\n     *************************************************************************/\n\n     /* /// @dev The current superfluid context is clean.\n     modifier cleanCtx() virtual;\n\n     /// @dev Require the ctx being valid.\n     modifier requireValidCtx(bytes memory ctx) virtual;\n\n     /// @dev Assert the ctx being valid.\n     modifier assertValidCtx(bytes memory ctx) virtual;\n\n     /// @dev The agreement is a listed agreement.\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\n\n     // onlyGovernance\n\n     /// @dev The msg.sender must be a listed agreement.\n     modifier onlyAgreement() virtual;\n\n     /// @dev The app is registered and not jailed.\n     modifier isAppActive(ISuperApp app) virtual; */\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n/**\n * @title Constant Flow Agreement interface\n * @author Superfluid\n */\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error CFA_ACL_NO_SENDER_CREATE();               // 0x4b993136\n    error CFA_ACL_NO_SENDER_UPDATE();               // 0xedfa0d3b\n    error CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS(); // 0xa3eab6ac\n    error CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS(); // 0xac434b5f\n    error CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS(); // 0xe30f1bff\n    error CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED();   // 0xa0645c1f\n    error CFA_ACL_UNCLEAN_PERMISSIONS();            // 0x7939d66c\n    error CFA_ACL_NO_SENDER_FLOW_OPERATOR();        // 0xb0ed394d\n    error CFA_ACL_NO_NEGATIVE_ALLOWANCE();          // 0x86e0377d\n    error CFA_FLOW_ALREADY_EXISTS();                // 0x801b6863\n    error CFA_FLOW_DOES_NOT_EXIST();                // 0x5a32bf24\n    error CFA_INSUFFICIENT_BALANCE();               // 0xea76c9b3\n    error CFA_ZERO_ADDRESS_SENDER();                // 0x1ce9b067\n    error CFA_ZERO_ADDRESS_RECEIVER();              // 0x78e02b2a\n    error CFA_HOOK_OUT_OF_GAS();                    // 0x9f76430b\n    error CFA_DEPOSIT_TOO_BIG();                    // 0x752c2b9c\n    error CFA_FLOW_RATE_TOO_BIG();                  // 0x0c9c55c1\n    error CFA_NON_CRITICAL_SENDER();                // 0xce11b5d1\n    error CFA_INVALID_FLOW_RATE();                  // 0x91acad16\n    error CFA_NO_SELF_FLOW();                       // 0xa47338ef\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    /**\n     * @notice Get the maximum flow rate allowed with the deposit\n     * @dev The deposit is clipped and rounded down\n     * @param deposit Deposit amount used for creating the flow\n     * @return flowRate The maximum flow rate\n     */\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Get the deposit required for creating the flow\n     * @dev Calculates the deposit based on the liquidationPeriod and flowRate\n     * @param flowRate Flow rate to be tested\n     * @return deposit The deposit amount based on flowRate and liquidationPeriod\n     * @custom:note \n     * - if calculated deposit (flowRate * liquidationPeriod) is less\n     *   than the minimum deposit, we use the minimum deposit otherwise\n     *   we use the calculated deposit\n     */\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view virtual\n        returns (uint256 deposit);\n\n    /**\n     * @dev Returns whether it is the patrician period based on host.getNow()\n     * @param account The account we are interested in\n     * @return isCurrentlyPatricianPeriod Whether it is currently the patrician period dictated by governance\n     * @return timestamp The value of host.getNow()\n     */\n    function isPatricianPeriodNow(\n        ISuperfluidToken token,\n        address account)\n        external view virtual\n        returns (bool isCurrentlyPatricianPeriod, uint256 timestamp);\n\n    /**\n     * @dev Returns whether it is the patrician period based on timestamp\n     * @param account The account we are interested in\n     * @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n     * @return bool Whether it is currently the patrician period dictated by governance\n     */\n    function isPatricianPeriod(\n        ISuperfluidToken token,\n        address account,\n        uint256 timestamp\n    )\n        public view virtual\n        returns (bool);\n\n    /**\n     * @dev msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param permissions A bitmask representation of the granted permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function updateFlowOperatorPermissions(\n        ISuperfluidToken token,\n        address flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance,\n        bytes calldata ctx\n    ) \n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\n     * @dev if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param addedFlowRateAllowance The flow rate allowance delta\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @return newCtx The new context bytes\n     */\n    function increaseFlowRateAllowance(\n        ISuperfluidToken token,\n        address flowOperator,\n        int96 addedFlowRateAllowance,\n        bytes calldata ctx\n    ) external virtual returns(bytes memory newCtx);\n\n    /**\n     * @dev msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`\n     * @dev if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param subtractedFlowRateAllowance The flow rate allowance delta\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @return newCtx The new context bytes\n     */\n    function decreaseFlowRateAllowance(\n        ISuperfluidToken token,\n        address flowOperator,\n        int96 subtractedFlowRateAllowance,\n        bytes calldata ctx\n    ) external virtual returns(bytes memory newCtx);\n\n    /**\n     * @dev msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function authorizeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n     /**\n     * @notice msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\n     * @dev `permissions` and `flowRateAllowance` will both be set to 0\n     * @param token Super token address\n     * @param flowOperator The permission grantee address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     */\n    function revokeFlowOperatorWithFullControl(\n        ISuperfluidToken token,\n        address flowOperator,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\n     * @param token Super token address\n     * @param sender The permission granter address\n     * @param flowOperator The permission grantee address\n     * @return flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorData(\n       ISuperfluidToken token,\n       address sender,\n       address flowOperator\n    )\n        public view virtual\n        returns (\n            bytes32 flowOperatorId,\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Get flow operator using flowOperatorId\n     * @param token Super token address\n     * @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n     * @return permissions A bitmask representation of the granted permissions\n     * @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    function getFlowOperatorDataByID(\n       ISuperfluidToken token,\n       bytes32 flowOperatorId\n    )\n        external view virtual\n        returns (\n            uint8 permissions,\n            int96 flowRateAllowance\n        );\n\n    /**\n     * @notice Create a flow betwen ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementCreated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - A deposit is taken as safety margin for the solvency agents\n     * - A extra gas fee may be taken to pay for solvency agent liquidations\n     */\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Create a flow between sender and receiver\n    * @dev A flow created by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function createFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Update the flow rate between ctx.msgSender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param receiver Flow receiver address\n     * @param flowRate New flow rate in amount per second\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     *\n     * @custom:callbacks \n     * - AgreementUpdated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Only the flow sender may update the flow rate\n     * - Even if the flow rate is zero, the flow is not deleted\n     * from the system\n     * - Deposit amount will be adjusted accordingly\n     * - No new gas fee is charged\n     */\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n    * @notice Update a flow between sender and receiver\n    * @dev A flow updated by an approved flow operator (see above for details on callbacks)\n    * @param token Super token address\n    * @param sender Flow sender address (has granted permissions)\n    * @param receiver Flow receiver address\n    * @param flowRate New flow rate in amount per second\n    * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n    */\n    function updateFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev Get the flow data between `sender` and `receiver` of `token`\n     * @param token Super token address\n     * @param sender Flow receiver\n     * @param receiver Flow sender\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The amount of deposit the flow\n     * @return owedDeposit The amount of owed deposit of the flow\n     */\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @notice Get flow data using agreementId\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param agreementId The agreement ID\n     * @return timestamp Timestamp of when the flow is updated\n     * @return flowRate The flow rate\n     * @return deposit The deposit amount of the flow\n     * @return owedDeposit The owed deposit amount of the flow\n     */\n    function getFlowByID(\n       ISuperfluidToken token,\n       bytes32 agreementId\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get the aggregated flow info of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return timestamp Timestamp of when a flow was last updated for account\n     * @return flowRate The net flow rate of token for account\n     * @return deposit The sum of all deposits for account's flows\n     * @return owedDeposit The sum of all owed deposits for account's flows\n     */\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @dev Get the net flow rate of the account\n     * @param token Super token address\n     * @param account Account for the query\n     * @return flowRate Net flow rate\n     */\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     *\n     * @custom:callbacks \n     * - AgreementTerminated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * @custom:note \n     * - Both flow sender and receiver may delete the flow\n     * - If Sender account is insolvent or in critical state, a solvency agent may\n     *   also terminate the agreement\n     * - Gas fee may be returned to the sender\n     */\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @notice Delete the flow between sender and receiver\n     * @dev A flow deleted by an approved flow operator (see above for details on callbacks)\n     * @param token Super token address\n     * @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n     * @param receiver Flow receiver address\n     */\n    function deleteFlowByOperator(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n     \n    /**\n     * @dev Flow operator updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param flowOperator Flow operator address\n     * @param permissions Octo bitmask representation of permissions\n     * @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n     */\n    event FlowOperatorUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed flowOperator,\n        uint8 permissions,\n        int96 flowRateAllowance\n    );\n\n    /**\n     * @dev Flow updated event\n     * @param token Super token address\n     * @param sender Flow sender address\n     * @param receiver Flow recipient address\n     * @param flowRate Flow rate in amount per second for this flow\n     * @param totalSenderFlowRate Total flow rate in amount per second for the sender\n     * @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n     * @param userData The user provided data\n     *\n     */\n    event FlowUpdated(\n        ISuperfluidToken indexed token,\n        address indexed sender,\n        address indexed receiver,\n        int96 flowRate,\n        int256 totalSenderFlowRate,\n        int256 totalReceiverFlowRate,\n        bytes userData\n    );\n\n    /**\n     * @dev Flow updated extension event\n     * @param flowOperator Flow operator address - the Context.msgSender\n     * @param deposit The deposit amount for the stream\n     */\n    event FlowUpdatedExtension(\n        address indexed flowOperator,\n        uint256 deposit\n    );\n}\n"
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC777/IERC777.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\n     *\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\n     */\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    /**\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\n     */\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\n     */\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\n/**\n * @title ERC20 token info interface\n * @author Superfluid\n * @dev ERC20 standard interface does not specify these functions, but\n *      often the token implementations have them.\n */\ninterface TokenInfo {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\n/**\n * @title Super app definitions library\n * @author Superfluid\n */\nlibrary SuperAppDefinitions {\n\n    /**************************************************************************\n    / App manifest config word\n    /**************************************************************************/\n\n    /*\n     * App level is a way to allow the app to whitelist what other app it can\n     * interact with (aka. composite app feature).\n     *\n     * For more details, refer to the technical paper of superfluid protocol.\n     */\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\n\n    // The app is at the final level, hence it doesn't want to interact with any other app\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\n\n    // The app is at the second level, it may interact with other final level apps if whitelisted\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\n\n    function getAppCallbackLevel(uint256 configWord) internal pure returns (uint8) {\n        return uint8(configWord & APP_LEVEL_MASK);\n    }\n\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\n    }\n\n    /**************************************************************************\n    / Callback implementation bit masks\n    /**************************************************************************/\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\n\n    /**************************************************************************\n    / App Jail Reasons\n    /**************************************************************************/\n\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\n\n    // Validate configWord cleaness for future compatibility, or else may introduce undefined future behavior\n    function isConfigWordClean(uint256 configWord) internal pure returns (bool) {\n        return (configWord & ~(APP_LEVEL_MASK | APP_JAIL_BIT | AGREEMENT_CALLBACK_NOOP_BITMASKS)) == uint256(0);\n    }\n}\n\n/**\n * @title Context definitions library\n * @author Superfluid\n */\nlibrary ContextDefinitions {\n\n    /**************************************************************************\n    / Call info\n    /**************************************************************************/\n\n    // app level\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\n\n    // call type\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\n\n    function decodeCallInfo(uint256 callInfo)\n        internal pure\n        returns (uint8 appCallbackLevel, uint8 callType)\n    {\n        appCallbackLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n    function encodeCallInfo(uint8 appCallbackLevel, uint8 callType)\n        internal pure\n        returns (uint256 callInfo)\n    {\n        return uint256(appCallbackLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n}\n\n/**\n * @title Flow Operator definitions library\n  * @author Superfluid\n */\n library FlowOperatorDefinitions {\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_CREATE = uint8(1) << 0;\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_UPDATE = uint8(1) << 1;\n    uint8 constant internal AUTHORIZE_FLOW_OPERATOR_DELETE = uint8(1) << 2;\n    uint8 constant internal AUTHORIZE_FULL_CONTROL =\n        AUTHORIZE_FLOW_OPERATOR_CREATE | AUTHORIZE_FLOW_OPERATOR_UPDATE | AUTHORIZE_FLOW_OPERATOR_DELETE;\n    uint8 constant internal REVOKE_FLOW_OPERATOR_CREATE = ~(uint8(1) << 0);\n    uint8 constant internal REVOKE_FLOW_OPERATOR_UPDATE = ~(uint8(1) << 1);\n    uint8 constant internal REVOKE_FLOW_OPERATOR_DELETE = ~(uint8(1) << 2);\n\n    function isPermissionsClean(uint8 permissions) internal pure returns (bool) {\n        return (\n            permissions & ~(AUTHORIZE_FLOW_OPERATOR_CREATE\n                | AUTHORIZE_FLOW_OPERATOR_UPDATE\n                | AUTHORIZE_FLOW_OPERATOR_DELETE)\n            ) == uint8(0);\n    }\n }\n\n/**\n * @title Batch operation library\n * @author Superfluid\n */\nlibrary BatchOperation {\n    /**\n     * @dev ERC20.approve batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationApprove(\n     *     abi.decode(data, (address spender, uint256 amount))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\n    /**\n     * @dev ERC20.transferFrom batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationTransferFrom(\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\n    /**\n     * @dev ERC777.send batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationSend(\n     *     abi.decode(data, (address recipient, uint256 amount, bytes userData)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC777_SEND = 3;\n    /**\n     * @dev ERC20.increaseAllowance batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationIncreaseAllowance(\n     *     abi.decode(data, (address account, address spender, uint256 addedValue))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE = 4;\n    /**\n     * @dev ERC20.decreaseAllowance batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDecreaseAllowance(\n     *     abi.decode(data, (address account, address spender, uint256 subtractedValue))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE = 5;\n    /**\n     * @dev SuperToken.upgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationUpgrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\n    /**\n     * @dev SuperToken.downgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDowngrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\n    /**\n     * @dev Superfluid.callAgreement batch operation type\n     *\n     * Call spec:\n     * callAgreement(\n     *     ISuperAgreement(target)),\n     *     abi.decode(data, (bytes callData, bytes userData)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\n    /**\n     * @dev Superfluid.callAppAction batch operation type\n     *\n     * Call spec:\n     * callAppAction(\n     *     ISuperApp(target)),\n     *     data\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\n}\n\n/**\n * @title Superfluid governance configs library\n * @author Superfluid\n */\nlibrary SuperfluidGovernanceConfigs {\n\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n    bytes32 constant internal CFAV1_PPP_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\");\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\");\n\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.trustedForwarder\",\n            forwarder));\n    }\n\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\",\n            deployer,\n            registrationKey));\n    }\n\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32)\n    {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.factory\",\n            factory));\n    }\n\n    function decodePPPConfig(uint256 pppConfig) internal pure\n        returns (uint256 liquidationPeriod, uint256 patricianPeriod)\n    {\n        liquidationPeriod = (pppConfig >> 32) & type(uint32).max;\n        patricianPeriod = pppConfig & type(uint32).max;\n    }\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\n/**\n * @title SuperApp interface\n * @author Superfluid\n * @dev Be aware of the app being jailed, when the word permitted is used.\n */\ninterface ISuperApp {\n\n    /**\n     * @dev Callback before a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * @custom:note \n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n     * @dev Callback after a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param cbdata The data returned from the before-hook callback.\n     * @param ctx The context data.\n     * @return newCtx The current context of the transaction.\n     *\n     * @custom:note \n     * - State changes is permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function afterAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Callback before a new agreement is updated.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * @custom:note \n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n\n    /**\n    * @dev Callback after a new agreement is updated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * @custom:note \n    * - State changes is permitted.\n    * - Only revert with a \"reason\" is permitted.\n    */\n    function afterAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n    * @dev Callback before a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param ctx The context data.\n    * @return cbdata A free format in memory data the app can use to pass arbitary information to\n    *         the after-hook callback.\n    *\n    * @custom:note \n    * - It will be invoked with `staticcall`, no state changes are permitted.\n    * - Revert is not permitted.\n    */\n    function beforeAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n    * @dev Callback after a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * @custom:note \n    * - State changes is permitted.\n    * - Revert is not permitted.\n    */\n    function afterAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Super agreement interface\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Get the type of the agreement class\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class\n     * @param account Account the state belongs to\n     * @param time Time used for the calculation\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n     * @return deposit Account deposit amount of this agreement\n     * @return owedDeposit Account owed deposit amount of this agreement\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\nimport {\n    IERC20,\n    ERC20WithTokenInfo\n} from \"../tokens/ERC20WithTokenInfo.sol\";\n\n/**\n * @title Super token factory interface\n * @author Superfluid\n */\ninterface ISuperTokenFactory {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_FACTORY_ALREADY_EXISTS();                 // 0x91d67972\n    error SUPER_TOKEN_FACTORY_DOES_NOT_EXIST();                 // 0x872cac48\n    error SUPER_TOKEN_FACTORY_UNINITIALIZED();                  // 0x1b39b9b4\n    error SUPER_TOKEN_FACTORY_ONLY_HOST();                      // 0x478b8e83\n    error SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED();  // 0x478b8e83\n    error SUPER_TOKEN_FACTORY_ZERO_ADDRESS();                   // 0x305c9e82\n\n    /**************************************************************************\n    * Immutable Variables\n    **************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /// @dev Initialize the contract\n    function initialize() external;\n\n    /**\n     * @notice Get the canonical super token logic.\n     */\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\n\n    /**\n     * @dev Upgradability modes\n     */\n    enum Upgradability {\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\n        NON_UPGRADABLE,\n        /// Upgradable through `host.updateSuperTokenLogic` operation\n        SEMI_UPGRADABLE,\n        /// Always using the latest super token logic\n        FULL_UPGRADABLE\n    }\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     */\n    function createERC20Wrapper(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Create new super token wrapper for the underlying ERC20 token with extra token info\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     * @return superToken The deployed and initialized wrapper super token\n     * NOTE:\n     * - It assumes token provide the .decimals() function\n     */\n    function createERC20Wrapper(\n        ERC20WithTokenInfo underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @notice Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\n     * @dev salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\n     * @param _underlyingToken Underlying ERC20 token\n     * @return ISuperToken the created supertoken\n     */\n    function createCanonicalERC20Wrapper(ERC20WithTokenInfo _underlyingToken)\n        external\n        returns (ISuperToken);\n\n    /**\n     * @notice Computes/Retrieves wrapper super token address given the underlying token address\n     * @dev We return from our canonical list if it already exists, otherwise we compute it\n     * @dev note that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\n     * @param _underlyingToken Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     * @return isDeployed whether the super token is deployed AND set in the canonical mapping\n     */\n    function computeCanonicalERC20WrapperAddress(address _underlyingToken)\n        external\n        view\n        returns (address superTokenAddress, bool isDeployed);\n\n    /**\n     * @notice Gets the canonical ERC20 wrapper super token address given the underlying token address\n     * @dev We return the address if it exists and the zero address otherwise\n     * @param _underlyingTokenAddress Underlying ERC20 token address\n     * @return superTokenAddress Super token address\n     */\n    function getCanonicalERC20Wrapper(address _underlyingTokenAddress)\n        external\n        view\n        returns (address superTokenAddress);\n\n    /**\n     * @dev Creates a new custom super token\n     * @param customSuperTokenProxy address of the custom supertoken proxy\n     */\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external;\n\n    /**\n      * @dev Super token logic created event\n      * @param tokenLogic Token logic address\n      */\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\n\n    /**\n      * @dev Super token created event\n      * @param token Newly created super token address\n      */\n    event SuperTokenCreated(ISuperToken indexed token);\n\n    /**\n      * @dev Custom super token created event\n      * @param token Newly created custom super token address\n      */\n    event CustomSuperTokenCreated(ISuperToken indexed token);\n\n}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IConstantOutflowNFT } from \"./IConstantOutflowNFT.sol\";\nimport { IConstantInflowNFT } from \"./IConstantInflowNFT.sol\";\nimport { IPoolAdminNFT } from \"./IPoolAdminNFT.sol\";\nimport { IPoolMemberNFT } from \"./IPoolMemberNFT.sol\";\n\n/**\n * @title Super token (Superfluid Token + ERC20 + ERC777) interface\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER();       // 0xf7f02227\n    error SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT();             // 0xfe737d05\n    error SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED(); // 0xe3e13698\n    error SUPER_TOKEN_NO_UNDERLYING_TOKEN();                     // 0xf79cf656\n    error SUPER_TOKEN_ONLY_SELF();                               // 0x7ffa6648\n    error SUPER_TOKEN_ONLY_HOST();                               // 0x98f73704\n    error SUPER_TOKEN_ONLY_GOV_OWNER();                          // 0xd9c7ed08\n    error SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS();               // 0x81638627\n    error SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS();                 // 0xdf070274\n    error SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS();                  // 0xba2ab184\n    error SUPER_TOKEN_MINT_TO_ZERO_ADDRESS();                    // 0x0d243157\n    error SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS();              // 0xeecd6c9b\n    error SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS();                // 0xe219bd39\n    error SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED();               // 0x6bef249d\n\n    /**\n     * @dev Initialize the contract\n     */\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n    * Immutable variables\n    *************************************************************************/\n\n    // solhint-disable-next-line func-name-mixedcase\n    function CONSTANT_OUTFLOW_NFT() external view returns (IConstantOutflowNFT);\n    // solhint-disable-next-line func-name-mixedcase\n    function CONSTANT_INFLOW_NFT() external view returns (IConstantInflowNFT);\n\n    /**************************************************************************\n    * TokenInfo & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * @custom:note SuperToken always uses 18 decimals.\n     *\n     * This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     *         allowed to spend on behalf of `owner` through {transferFrom}. This is\n     *         zero by default.\n     *\n     * @notice This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:note Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * @custom:emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     *         allowance mechanism. `amount` is then deducted from the caller's\n     *         allowance.\n     *\n     * @return Returns Success a boolean value indicating whether the operation succeeded.\n     *\n     * @custom:emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements \n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * @custom:emits an {Approval} event indicating the updated allowance.\n     *\n     * @custom:requirements \n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     *         means all token operations (creation, movement and destruction) must have\n     *         amounts that are a multiple of this number.\n     *\n     * @custom:note For super token contracts, this value is always 1\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * @dev If send or receive hooks are registered for the caller and `recipient`,\n     *      the corresponding functions will be called with `data` and empty\n     *      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements \n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply and transfers the underlying token to the caller's account.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements \n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * @custom:emits an {AuthorizedOperator} event.\n     *\n     * @custom:requirements \n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * @custom:emits a {RevokedOperator} event.\n     *\n     * @custom:requirements \n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * @custom:emits a {Sent} event.\n     *\n     * @custom:requirements \n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * @custom:emits a {Burned} event.\n     *\n     * @custom:requirements \n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * @custom:modifiers \n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n   /**\n    * @dev Transfer `amount` tokens from the `sender` to `recipient`.\n    * If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n    * spend tokens of `sender`.\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfTransferFrom(\n        address sender,\n        address spender,\n        address recipient,\n        uint256 amount\n   ) external;\n\n   /**\n    * @dev Give `spender`, `amount` allowance to spend the tokens of\n    * `account`.\n    *\n    * @custom:modifiers \n    *  - onlySelf\n    */\n   function selfApproveFor(\n        address account,\n        address spender,\n        uint256 amount\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to receive upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * @custom:note It will use `transferFrom` to get tokens. Before calling this\n     * function you should `approve` this contract\n     * \n     * @custom:warning\n     * - there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.\n     * @custom:requirements \n     * - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Downgrade SuperToken to ERC20 and transfer immediately\n     * @param to The account to receive downgraded tokens\n     * @param amount Number of tokens to be downgraded (in 18 decimals)\n     */\n    function downgradeTo(address to, uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are downgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    function operationIncreaseAllowance(\n        address account,\n        address spender,\n        uint256 addedValue\n    ) external;\n\n    function operationDecreaseAllowance(\n        address account,\n        address spender,\n        uint256 subtractedValue\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transferFrom by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC777 send by host contract.\n    * @param spender The account where the funds is sent from.\n    * @param recipient The recipient of the funds.\n    * @param amount Number of tokens to be transferred.\n    * @param data Arbitrary user inputted data\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationSend(\n        address spender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * @custom:modifiers \n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n    // Flow NFT events\n    /**\n     * @dev Constant Outflow NFT proxy created event\n     * @param constantOutflowNFT constant outflow nft address\n     */\n    event ConstantOutflowNFTCreated(\n        IConstantOutflowNFT indexed constantOutflowNFT\n    );\n\n    /**\n     * @dev Constant Inflow NFT proxy created event\n     * @param constantInflowNFT constant inflow nft address\n     */\n    event ConstantInflowNFTCreated(\n        IConstantInflowNFT indexed constantInflowNFT\n    );\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n/**\n * @title Superfluid token interface\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_TOKEN_AGREEMENT_ALREADY_EXISTS();  // 0xf05521f6\n    error SF_TOKEN_AGREEMENT_DOES_NOT_EXIST();  // 0xdae18809\n    error SF_TOKEN_BURN_INSUFFICIENT_BALANCE(); // 0x10ecdf44\n    error SF_TOKEN_MOVE_INSUFFICIENT_BALANCE(); // 0x2f4cb941\n    error SF_TOKEN_ONLY_LISTED_AGREEMENT();     // 0xc9ff6644\n    error SF_TOKEN_ONLY_HOST();                 // 0xc51efddd\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\n     *\n     * @custom:note \n     * - version: 1\n     * - liquidationType key:\n     *    - 0 = reward account receives reward (PIC period)\n     *    - 1 = liquidator account receives reward (Pleb period)\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\n     */\n    struct LiquidationTypeData {\n        uint256 version;\n        uint8 liquidationType;\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @notice Calculate the realtime balance given the current host.getNow() value\n     * @dev realtimeBalanceOf with timestamp equals to block timestamp\n     * @param account for the query\n     * @return availableBalance Real-time balance\n     * @return deposit Account deposit\n     * @return owedDeposit Account owed Deposit\n     */\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @notice Check if account is critical\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @param timestamp The time we'd like to check if the account is critical (should use future)\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @notice Check if account is critical now (current host.getNow())\n    * @dev A critical account is when availableBalance < 0\n    * @param account The account to check\n    * @return isCritical Whether the account is critical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @notice Check if account is solvent\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @param timestamp The time we'd like to check if the account is solvent (should use future)\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @notice Check if account is solvent now\n     * @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n     * @param account The account to check\n     * @return isSolvent True if the account is solvent, false otherwise\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @notice Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement created event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n    /**\n     * @dev Agreement updated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n    /**\n     * @dev Agreement terminated event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * @custom:note \n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of an agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @notice Settle balance from an account by the agreement\n     * @dev The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Make liquidation payouts (v2)\n     * @param id Agreement ID\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n     * @param targetAccount Account to be liquidated\n     * @param rewardAmount The amount the rewarded account will receive\n     * @param targetAccountBalanceDelta The delta amount the target account balance should change by\n     *\n     * @custom:note \n     * - If a bailout is required (bailoutAmount > 0)\n     *   - the actual reward (single deposit) goes to the executor,\n     *   - while the reward account becomes the bailout account\n     *   - total bailout include: bailout amount + reward amount\n     *   - the targetAccount will be bailed out\n     * - If a bailout is not required\n     *   - the targetAccount will pay the rewardAmount\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\n     *\n     * @custom:modifiers \n     *  - onlyAgreement\n     */\n    function makeLiquidationPayoutsV2\n    (\n        bytes32 id,\n        bytes memory liquidationTypeData,\n        address liquidatorAccount,\n        bool useDefaultRewardAccount,\n        address targetAccount,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta\n    ) external;\n    /**\n     * @dev Agreement liquidation event v2 (including agent account)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param liquidatorAccount Address of the executor of the liquidation\n     * @param targetAccount Account of the stream sender\n     * @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n     * @param rewardAmount The amount the reward recipient account balance should change by\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if the agreement is liquidated during the PIC period\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n     *   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n     *   - the targetAccount will pay for the rewardAmount\n     * - if the targetAccount is insolvent\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\n     *   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n     *   - the targetAccount will receive the bailoutAmount\n     */\n    event AgreementLiquidatedV2(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed liquidatorAccount,\n        address indexed targetAccount,\n        address rewardAmountReceiver,\n        uint256 rewardAmount,\n        int256 targetAccountBalanceDelta,\n        bytes liquidationTypeData\n    );\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n    /**************************************************************************\n     * DEPRECATED\n     *************************************************************************/\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param bondAccount Account that collect the reward or bailout accounts\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of liquidation bailouot\n     *\n     * @custom:deprecated Use AgreementLiquidatedV2 instead\n     *\n     * @custom:note \n     * Reward account rule:\n     * - if bailout is equal to 0, then\n     *   - the bondAccount will get the rewardAmount,\n     *   - the penaltyAccount will pay for the rewardAmount.\n     * - if bailout is larger than 0, then\n     *   - the liquidatorAccount will get the rewardAmouont,\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\n     */\n    event AgreementLiquidatedBy(\n        address liquidatorAccount,\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed bondAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    );\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperfluidToken  } from \"./ISuperfluidToken.sol\";\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\n\n\n/**\n * @title Superfluid governance interface\n * @author Superfluid\n */\ninterface ISuperfluidGovernance {\n    \n    /**************************************************************************\n     * Errors\n     *************************************************************************/\n    error SF_GOV_ARRAYS_NOT_SAME_LENGTH();                  // 0x27743aa6\n    error SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD(); // 0xe171980a\n    error SF_GOV_MUST_BE_CONTRACT();                        // 0x80dddd73\n\n    /**\n     * @dev Replace the current governance with a new governance\n     */\n    function replaceGovernance(\n        ISuperfluid host,\n        address newGov) external;\n\n    /**\n     * @dev Register a new agreement class\n     */\n    function registerAgreementClass(\n        ISuperfluid host,\n        address agreementClass) external;\n\n    /**\n     * @dev Update logics of the contracts\n     *\n     * @custom:note \n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\n     */\n    function updateContracts(\n        ISuperfluid host,\n        address hostNewLogic,\n        address[] calldata agreementClassNewLogics,\n        address superTokenFactoryNewLogic\n    ) external;\n\n    /**\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\n     */\n    function batchUpdateSuperTokenLogic(\n        ISuperfluid host,\n        ISuperToken[] calldata tokens) external;\n    \n    /**\n     * @dev Set configuration as address value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        address value\n    ) external;\n    \n    /**\n     * @dev Set configuration as uint256 value\n     */\n    function setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        uint256 value\n    ) external;\n\n    /**\n     * @dev Clear configuration\n     */\n    function clearConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key\n    ) external;\n\n    /**\n     * @dev Get configuration as address value\n     */\n    function getConfigAsAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (address value);\n\n    /**\n     * @dev Get configuration as uint256 value\n     */\n    function getConfigAsUint256(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (uint256 value);\n\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.4;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { TokenInfo } from \"./TokenInfo.sol\";\n\n/**\n * @title ERC20 token with token info interface\n * @author Superfluid\n * @dev Using abstract contract instead of interfaces because old solidity\n *      does not support interface inheriting other interfaces\n * solhint-disable-next-line no-empty-blocks\n *\n */\n// solhint-disable-next-line no-empty-blocks\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPoolMemberNFT {}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPoolAdminNFT {}"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { IFlowNFTBase } from \"./IFlowNFTBase.sol\";\n\ninterface IConstantInflowNFT is IFlowNFTBase {\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n    error CIF_NFT_ONLY_CONSTANT_OUTFLOW(); // 0xe81ef57a\n\n    /**************************************************************************\n     * Write Functions\n     *************************************************************************/\n\n    /// @notice The mint function emits the \"mint\" `Transfer` event.\n    /// @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n    /// is to inform clients that search for events.\n    /// @param to the flow receiver (inflow NFT receiver)\n    /// @param newTokenId the new token id\n    function mint(address to, uint256 newTokenId) external;\n\n    /// @notice This burn function emits the \"burn\" `Transfer` event.\n    /// @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n    /// is to inform clients that search for events.\n    /// @param tokenId desired token id to burn\n    function burn(uint256 tokenId) external;\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { IFlowNFTBase } from \"./IFlowNFTBase.sol\";\n\ninterface IConstantOutflowNFT is IFlowNFTBase {\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n\n    error COF_NFT_INVALID_SUPER_TOKEN();            // 0x6de98774\n    error COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME(); // 0x0d1d1161\n    error COF_NFT_MINT_TO_ZERO_ADDRESS();           // 0x43d05e51\n    error COF_NFT_ONLY_CONSTANT_INFLOW();           // 0xa495a718\n    error COF_NFT_ONLY_FLOW_AGREEMENTS();           // 0xd367b64f\n    error COF_NFT_TOKEN_ALREADY_EXISTS();           // 0xe2480183\n\n\n    /**************************************************************************\n     * Write Functions\n     *************************************************************************/\n\n    /// @notice The onCreate function is called when a new flow is created.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onCreate(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n\n    /// @notice The onUpdate function is called when a flow is updated.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onUpdate(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n\n    /// @notice The onDelete function is called when a flow is deleted.\n    /// @param token the super token passed from the CFA (flowVars)\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    function onDelete(ISuperfluidToken token, address flowSender, address flowReceiver) external;\n}\n"
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport {\n    IERC721Metadata\n} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\ninterface IFlowNFTBase is IERC721Metadata {\n    // FlowNFTData struct storage packing:\n    // b = bits\n    // WORD 1: | superToken      | FREE\n    //         | 160b            | 96b\n    // WORD 2: | flowSender      | FREE\n    //         | 160b            | 96b\n    // WORD 3: | flowReceiver    | flowStartDate | FREE\n    //         | 160b            | 32b           | 64b\n    struct FlowNFTData {\n        address superToken;\n        address flowSender;\n        address flowReceiver;\n        uint32 flowStartDate;\n    }\n\n    /**************************************************************************\n     * Custom Errors\n     *************************************************************************/\n\n    error CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();   // 0xa3352582\n    error CFA_NFT_APPROVE_TO_CALLER();                              // 0xd3c77329\n    error CFA_NFT_APPROVE_TO_CURRENT_OWNER();                       // 0xe4790b25\n    error CFA_NFT_INVALID_TOKEN_ID();                               // 0xeab95e3b\n    error CFA_NFT_ONLY_SUPER_TOKEN_FACTORY();                       // 0xebb7505b\n    error CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL();  // 0x2551d606\n    error CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER();                  // 0x5a26c744\n    error CFA_NFT_TRANSFER_IS_NOT_ALLOWED();                        // 0xaa747eca\n    error CFA_NFT_TRANSFER_TO_ZERO_ADDRESS();                       // 0xde06d21e\n\n    /**************************************************************************\n     * Events\n     *************************************************************************/\n\n    /// @notice Informs third-party platforms that NFT metadata should be updated\n    /// @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n    /// @param tokenId the id of the token that should have its metadata updated\n    event MetadataUpdate(uint256 tokenId);\n\n    /**************************************************************************\n     * View\n     *************************************************************************/\n\n    /// @notice An external function for querying flow data by `tokenId``\n    /// @param tokenId the token id\n    /// @return flowData the flow data associated with `tokenId`\n    function flowDataByTokenId(\n        uint256 tokenId\n    ) external view returns (FlowNFTData memory flowData);\n\n    /// @notice An external function for computing the deterministic tokenId\n    /// @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n    /// @param superToken the super token\n    /// @param flowSender the flow sender\n    /// @param flowReceiver the flow receiver\n    /// @return tokenId the tokenId\n    function getTokenId(\n        address superToken,\n        address flowSender,\n        address flowReceiver\n    ) external view returns (uint256);\n\n    /**************************************************************************\n     * Write\n     *************************************************************************/\n\n    function initialize(\n        string memory nftName,\n        string memory nftSymbol\n    ) external; // initializer;\n\n    function triggerMetadataUpdate(uint256 tokenId) external;\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"IERC777": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "AuthorizedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Burned",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Minted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "RevokedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Sent",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "authorizeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultOperators",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "granularity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "isOperatorFor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "revokeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "send",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.",
						"events": {
							"AuthorizedOperator(address,address)": {
								"details": "Emitted when `operator` is made operator for `tokenHolder`."
							},
							"Burned(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"Minted(address,address,uint256,bytes,bytes)": {
								"details": "Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event."
							},
							"RevokedOperator(address,address)": {
								"details": "Emitted when `operator` is revoked its operator status for `tokenHolder`."
							}
						},
						"kind": "dev",
						"methods": {
							"authorizeOperator(address)": {
								"details": "Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by an account (`owner`)."
							},
							"burn(uint256,bytes)": {
								"details": "Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens."
							},
							"defaultOperators()": {
								"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
							},
							"granularity()": {
								"details": "Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1."
							},
							"isOperatorFor(address,address)": {
								"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"operatorBurn(address,uint256,bytes,bytes)": {
								"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`."
							},
							"operatorSend(address,address,uint256,bytes,bytes)": {
								"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
							},
							"revokeOperator(address)": {
								"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address."
							},
							"send(address,uint256,bytes)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"authorizeOperator(address)": "959b8c3f",
							"balanceOf(address)": "70a08231",
							"burn(uint256,bytes)": "fe9d9303",
							"defaultOperators()": "06e48538",
							"granularity()": "556f0dc7",
							"isOperatorFor(address,address)": "d95b6371",
							"name()": "06fdde03",
							"operatorBurn(address,uint256,bytes,bytes)": "fc673c4f",
							"operatorSend(address,address,uint256,bytes,bytes)": "62ad1b83",
							"revokeOperator(address)": "fad8b32a",
							"send(address,uint256,bytes)": "9bd9bbc6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC777Token standard as defined in the EIP. This contract uses the https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let token holders and recipients react to token movements by using setting implementers for the associated interfaces in said registry. See {IERC1820Registry} and {ERC1820Implementer}.\",\"events\":{\"AuthorizedOperator(address,address)\":{\"details\":\"Emitted when `operator` is made operator for `tokenHolder`.\"},\"Burned(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"Minted(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"RevokedOperator(address,address)\":{\"details\":\"Emitted when `operator` is revoked its operator status for `tokenHolder`.\"}},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address)\":{\"details\":\"Make an account an operator of the caller. See {isOperatorFor}. Emits an {AuthorizedOperator} event. Requirements - `operator` cannot be calling address.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by an account (`owner`).\"},\"burn(uint256,bytes)\":{\"details\":\"Destroys `amount` tokens from the caller's account, reducing the total supply. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - the caller must have at least `amount` tokens.\"},\"defaultOperators()\":{\"details\":\"Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.\"},\"granularity()\":{\"details\":\"Returns the smallest part of the token that is not divisible. This means all token operations (creation, movement and destruction) must have amounts that are a multiple of this number. For most token contracts, this value will equal 1.\"},\"isOperatorFor(address,address)\":{\"details\":\"Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"operatorBurn(address,uint256,bytes,bytes)\":{\"details\":\"Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}. Emits a {Burned} event. Requirements - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.\"},\"operatorSend(address,address,uint256,bytes,bytes)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\"},\"revokeOperator(address)\":{\"details\":\"Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}. Emits a {RevokedOperator} event. Requirements - `operator` cannot be calling address.\"},\"send(address,uint256,bytes)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. If send or receive hooks are registered for the caller and `recipient`, the corresponding functions will be called with `data` and empty `operatorData`. See {IERC777Sender} and {IERC777Recipient}. Emits a {Sent} event. Requirements - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":\"IERC777\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"IConstantFlowAgreementV1": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_NEGATIVE_ALLOWANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_CREATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_FLOW_OPERATOR",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_NO_SENDER_UPDATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ACL_UNCLEAN_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_DEPOSIT_TOO_BIG",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_FLOW_RATE_TOO_BIG",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_HOOK_OUT_OF_GAS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_INVALID_FLOW_RATE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NON_CRITICAL_SENDER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NO_SELF_FLOW",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ZERO_ADDRESS_RECEIVER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_ZERO_ADDRESS_SENDER",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"indexed": false,
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"name": "FlowOperatorUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "totalSenderFlowRate",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "totalReceiverFlowRate",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "FlowUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"name": "FlowUpdatedExtension",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "agreementType",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "authorizeFlowOperatorWithFullControl",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "createFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "createFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "subtractedFlowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "decreaseFlowRateAllowance",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "deleteFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "deleteFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountFlowInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"name": "getDepositRequiredForFlowRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "getFlow",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								}
							],
							"name": "getFlowByID",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								}
							],
							"name": "getFlowOperatorData",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "flowOperatorId",
									"type": "bytes32"
								},
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "flowOperatorId",
									"type": "bytes32"
								}
							],
							"name": "getFlowOperatorDataByID",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								}
							],
							"name": "getMaximumFlowRateFromDeposit",
							"outputs": [
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getNetFlow",
							"outputs": [
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "addedFlowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "increaseFlowRateAllowance",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isPatricianPeriod",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isPatricianPeriodNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCurrentlyPatricianPeriod",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "dynamicBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "revokeFlowOperatorWithFullControl",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlow",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "int96",
									"name": "flowRate",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlowByOperator",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowOperator",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "permissions",
									"type": "uint8"
								},
								{
									"internalType": "int96",
									"name": "flowRateAllowance",
									"type": "int96"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "updateFlowOperatorPermissions",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"FlowOperatorUpdated(address,address,address,uint8,int96)": {
								"details": "Flow operator updated event",
								"params": {
									"flowOperator": "Flow operator address",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "Octo bitmask representation of permissions",
									"sender": "Flow sender address",
									"token": "Super token address"
								}
							},
							"FlowUpdated(address,address,address,int96,int256,int256,bytes)": {
								"details": "Flow updated event",
								"params": {
									"flowRate": "Flow rate in amount per second for this flow",
									"receiver": "Flow recipient address",
									"sender": "Flow sender address",
									"token": "Super token address",
									"totalReceiverFlowRate": "Total flow rate in amount per second for the receiver",
									"totalSenderFlowRate": "Total flow rate in amount per second for the sender",
									"userData": "The user provided data"
								}
							},
							"FlowUpdatedExtension(address,uint256)": {
								"details": "Flow updated extension event",
								"params": {
									"deposit": "The deposit amount for the stream",
									"flowOperator": "Flow operator address - the Context.msgSender"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"agreementType()": {
								"details": "ISuperAgreement.agreementType implementation"
							},
							"authorizeFlowOperatorWithFullControl(address,address,bytes)": {
								"details": "msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								}
							},
							"createFlow(address,address,int96,bytes)": {
								"custom:callbacks": " - AgreementCreated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - A deposit is taken as safety margin for the solvency agents - A extra gas fee may be taken to pay for solvency agent liquidations",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"createFlowByOperator(address,address,address,int96,bytes)": {
								"details": "A flow created by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"sender": "Flow sender address (has granted permissions)",
									"token": "Super token address"
								}
							},
							"decreaseFlowRateAllowance(address,address,int96,bytes)": {
								"details": "msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"subtractedFlowRateAllowance": "The flow rate allowance delta",
									"token": "Super token address"
								},
								"returns": {
									"newCtx": "The new context bytes"
								}
							},
							"deleteFlow(address,address,address,bytes)": {
								"custom:callbacks": " - AgreementTerminated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - Both flow sender and receiver may delete the flow - If Sender account is insolvent or in critical state, a solvency agent may   also terminate the agreement - Gas fee may be returned to the sender",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"deleteFlowByOperator(address,address,address,bytes)": {
								"details": "A flow deleted by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"getAccountFlowInfo(address,address)": {
								"details": "Get the aggregated flow info of the account",
								"params": {
									"account": "Account for the query",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The sum of all deposits for account's flows",
									"flowRate": "The net flow rate of token for account",
									"owedDeposit": "The sum of all owed deposits for account's flows",
									"timestamp": "Timestamp of when a flow was last updated for account"
								}
							},
							"getDepositRequiredForFlowRate(address,int96)": {
								"custom:note": " - if calculated deposit (flowRate * liquidationPeriod) is less   than the minimum deposit, we use the minimum deposit otherwise   we use the calculated deposit",
								"details": "Calculates the deposit based on the liquidationPeriod and flowRate",
								"params": {
									"flowRate": "Flow rate to be tested"
								},
								"returns": {
									"deposit": "The deposit amount based on flowRate and liquidationPeriod"
								}
							},
							"getFlow(address,address,address)": {
								"details": "Get the flow data between `sender` and `receiver` of `token`",
								"params": {
									"receiver": "Flow sender",
									"sender": "Flow receiver",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The amount of deposit the flow",
									"flowRate": "The flow rate",
									"owedDeposit": "The amount of owed deposit of the flow",
									"timestamp": "Timestamp of when the flow is updated"
								}
							},
							"getFlowByID(address,bytes32)": {
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"agreementId": "The agreement ID",
									"token": "Super token address"
								},
								"returns": {
									"deposit": "The deposit amount of the flow",
									"flowRate": "The flow rate",
									"owedDeposit": "The owed deposit amount of the flow",
									"timestamp": "Timestamp of when the flow is updated"
								}
							},
							"getFlowOperatorData(address,address,address)": {
								"params": {
									"flowOperator": "The permission grantee address",
									"sender": "The permission granter address",
									"token": "Super token address"
								},
								"returns": {
									"flowOperatorId": "The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions"
								}
							},
							"getFlowOperatorDataByID(address,bytes32)": {
								"params": {
									"flowOperatorId": "The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator",
									"token": "Super token address"
								},
								"returns": {
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions"
								}
							},
							"getMaximumFlowRateFromDeposit(address,uint256)": {
								"details": "The deposit is clipped and rounded down",
								"params": {
									"deposit": "Deposit amount used for creating the flow"
								},
								"returns": {
									"flowRate": "The maximum flow rate"
								}
							},
							"getNetFlow(address,address)": {
								"details": "Get the net flow rate of the account",
								"params": {
									"account": "Account for the query",
									"token": "Super token address"
								},
								"returns": {
									"flowRate": "Net flow rate"
								}
							},
							"increaseFlowRateAllowance(address,address,int96,bytes)": {
								"details": "if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE",
								"params": {
									"addedFlowRateAllowance": "The flow rate allowance delta",
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								},
								"returns": {
									"newCtx": "The new context bytes"
								}
							},
							"isPatricianPeriod(address,address,uint256)": {
								"details": "Returns whether it is the patrician period based on timestamp",
								"params": {
									"account": "The account we are interested in",
									"timestamp": "The timestamp we are interested in observing the result of isPatricianPeriod"
								},
								"returns": {
									"_0": "bool Whether it is currently the patrician period dictated by governance"
								}
							},
							"isPatricianPeriodNow(address,address)": {
								"details": "Returns whether it is the patrician period based on host.getNow()",
								"params": {
									"account": "The account we are interested in"
								},
								"returns": {
									"isCurrentlyPatricianPeriod": "Whether it is currently the patrician period dictated by governance",
									"timestamp": "The value of host.getNow()"
								}
							},
							"realtimeBalanceOf(address,address,uint256)": {
								"details": "Calculate the real-time balance for the account of this agreement class",
								"params": {
									"account": "Account the state belongs to",
									"time": "Time used for the calculation"
								},
								"returns": {
									"deposit": "Account deposit amount of this agreement",
									"dynamicBalance": "Dynamic balance portion of real-time balance of this agreement",
									"owedDeposit": "Account owed deposit amount of this agreement"
								}
							},
							"revokeFlowOperatorWithFullControl(address,address,bytes)": {
								"details": "`permissions` and `flowRateAllowance` will both be set to 0",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"token": "Super token address"
								}
							},
							"updateFlow(address,address,int96,bytes)": {
								"custom:callbacks": " - AgreementUpdated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)",
								"custom:note": " - Only the flow sender may update the flow rate - Even if the flow rate is zero, the flow is not deleted from the system - Deposit amount will be adjusted accordingly - No new gas fee is charged",
								"details": "flowId (agreementId) is the keccak256 hash of encoded sender and receiver",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"token": "Super token address"
								}
							},
							"updateFlowByOperator(address,address,address,int96,bytes)": {
								"details": "A flow updated by an approved flow operator (see above for details on callbacks)",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowRate": "New flow rate in amount per second",
									"receiver": "Flow receiver address",
									"sender": "Flow sender address (has granted permissions)",
									"token": "Super token address"
								}
							},
							"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)": {
								"details": "msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`",
								"params": {
									"ctx": "Context bytes (see ISuperfluid.sol for Context struct)",
									"flowOperator": "The permission grantee address",
									"flowRateAllowance": "The flow rate allowance the `flowOperator` is granted (only goes down)",
									"permissions": "A bitmask representation of the granted permissions",
									"token": "Super token address"
								}
							}
						},
						"title": "Constant Flow Agreement interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"agreementType()": "7730599e",
							"authorizeFlowOperatorWithFullControl(address,address,bytes)": "54b770e3",
							"createFlow(address,address,int96,bytes)": "62fc305e",
							"createFlowByOperator(address,address,address,int96,bytes)": "94229ecb",
							"decreaseFlowRateAllowance(address,address,int96,bytes)": "5f51fb23",
							"deleteFlow(address,address,address,bytes)": "b4b333c6",
							"deleteFlowByOperator(address,address,address,bytes)": "4c8b181f",
							"getAccountFlowInfo(address,address)": "0f1ac495",
							"getDepositRequiredForFlowRate(address,int96)": "8d997f6e",
							"getFlow(address,address,address)": "e6a1e888",
							"getFlowByID(address,bytes32)": "aabd2668",
							"getFlowOperatorData(address,address,address)": "00422bbe",
							"getFlowOperatorDataByID(address,bytes32)": "09d256ef",
							"getMaximumFlowRateFromDeposit(address,uint256)": "0602f7db",
							"getNetFlow(address,address)": "e8e7e2d1",
							"increaseFlowRateAllowance(address,address,int96,bytes)": "ac5f5d00",
							"isPatricianPeriod(address,address,uint256)": "4b839e0b",
							"isPatricianPeriodNow(address,address)": "4fe9c291",
							"realtimeBalanceOf(address,address,uint256)": "9b2e48bc",
							"revokeFlowOperatorWithFullControl(address,address,bytes)": "062e56ec",
							"updateFlow(address,address,int96,bytes)": "50209a62",
							"updateFlowByOperator(address,address,address,int96,bytes)": "354b9590",
							"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)": "811b3d40"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_CREATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_FLOW_OPERATOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_NO_SENDER_UPDATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ACL_UNCLEAN_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_DEPOSIT_TOO_BIG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_FLOW_RATE_TOO_BIG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_HOOK_OUT_OF_GAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_INVALID_FLOW_RATE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NON_CRITICAL_SENDER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NO_SELF_FLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ZERO_ADDRESS_RECEIVER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_ZERO_ADDRESS_SENDER\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"name\":\"FlowOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalSenderFlowRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalReceiverFlowRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"FlowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"FlowUpdatedExtension\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agreementType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"authorizeFlowOperatorWithFullControl\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"createFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"createFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"subtractedFlowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"decreaseFlowRateAllowance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"deleteFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"deleteFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountFlowInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"name\":\"getDepositRequiredForFlowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getFlow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"}],\"name\":\"getFlowByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"}],\"name\":\"getFlowOperatorData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"flowOperatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"flowOperatorId\",\"type\":\"bytes32\"}],\"name\":\"getFlowOperatorDataByID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getMaximumFlowRateFromDeposit\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNetFlow\",\"outputs\":[{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"addedFlowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"increaseFlowRateAllowance\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isPatricianPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPatricianPeriodNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCurrentlyPatricianPeriod\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"dynamicBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"revokeFlowOperatorWithFullControl\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlow\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"int96\",\"name\":\"flowRate\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlowByOperator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowOperator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"permissions\",\"type\":\"uint8\"},{\"internalType\":\"int96\",\"name\":\"flowRateAllowance\",\"type\":\"int96\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"updateFlowOperatorPermissions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"FlowOperatorUpdated(address,address,address,uint8,int96)\":{\"details\":\"Flow operator updated event\",\"params\":{\"flowOperator\":\"Flow operator address\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"Octo bitmask representation of permissions\",\"sender\":\"Flow sender address\",\"token\":\"Super token address\"}},\"FlowUpdated(address,address,address,int96,int256,int256,bytes)\":{\"details\":\"Flow updated event\",\"params\":{\"flowRate\":\"Flow rate in amount per second for this flow\",\"receiver\":\"Flow recipient address\",\"sender\":\"Flow sender address\",\"token\":\"Super token address\",\"totalReceiverFlowRate\":\"Total flow rate in amount per second for the receiver\",\"totalSenderFlowRate\":\"Total flow rate in amount per second for the sender\",\"userData\":\"The user provided data\"}},\"FlowUpdatedExtension(address,uint256)\":{\"details\":\"Flow updated extension event\",\"params\":{\"deposit\":\"The deposit amount for the stream\",\"flowOperator\":\"Flow operator address - the Context.msgSender\"}}},\"kind\":\"dev\",\"methods\":{\"agreementType()\":{\"details\":\"ISuperAgreement.agreementType implementation\"},\"authorizeFlowOperatorWithFullControl(address,address,bytes)\":{\"details\":\"msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"}},\"createFlow(address,address,int96,bytes)\":{\"custom:callbacks\":\" - AgreementCreated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - A deposit is taken as safety margin for the solvency agents - A extra gas fee may be taken to pay for solvency agent liquidations\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"createFlowByOperator(address,address,address,int96,bytes)\":{\"details\":\"A flow created by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"sender\":\"Flow sender address (has granted permissions)\",\"token\":\"Super token address\"}},\"decreaseFlowRateAllowance(address,address,int96,bytes)\":{\"details\":\"msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"subtractedFlowRateAllowance\":\"The flow rate allowance delta\",\"token\":\"Super token address\"},\"returns\":{\"newCtx\":\"The new context bytes\"}},\"deleteFlow(address,address,address,bytes)\":{\"custom:callbacks\":\" - AgreementTerminated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - Both flow sender and receiver may delete the flow - If Sender account is insolvent or in critical state, a solvency agent may   also terminate the agreement - Gas fee may be returned to the sender\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"deleteFlowByOperator(address,address,address,bytes)\":{\"details\":\"A flow deleted by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"getAccountFlowInfo(address,address)\":{\"details\":\"Get the aggregated flow info of the account\",\"params\":{\"account\":\"Account for the query\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The sum of all deposits for account's flows\",\"flowRate\":\"The net flow rate of token for account\",\"owedDeposit\":\"The sum of all owed deposits for account's flows\",\"timestamp\":\"Timestamp of when a flow was last updated for account\"}},\"getDepositRequiredForFlowRate(address,int96)\":{\"custom:note\":\" - if calculated deposit (flowRate * liquidationPeriod) is less   than the minimum deposit, we use the minimum deposit otherwise   we use the calculated deposit\",\"details\":\"Calculates the deposit based on the liquidationPeriod and flowRate\",\"params\":{\"flowRate\":\"Flow rate to be tested\"},\"returns\":{\"deposit\":\"The deposit amount based on flowRate and liquidationPeriod\"}},\"getFlow(address,address,address)\":{\"details\":\"Get the flow data between `sender` and `receiver` of `token`\",\"params\":{\"receiver\":\"Flow sender\",\"sender\":\"Flow receiver\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The amount of deposit the flow\",\"flowRate\":\"The flow rate\",\"owedDeposit\":\"The amount of owed deposit of the flow\",\"timestamp\":\"Timestamp of when the flow is updated\"}},\"getFlowByID(address,bytes32)\":{\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"agreementId\":\"The agreement ID\",\"token\":\"Super token address\"},\"returns\":{\"deposit\":\"The deposit amount of the flow\",\"flowRate\":\"The flow rate\",\"owedDeposit\":\"The owed deposit amount of the flow\",\"timestamp\":\"Timestamp of when the flow is updated\"}},\"getFlowOperatorData(address,address,address)\":{\"params\":{\"flowOperator\":\"The permission grantee address\",\"sender\":\"The permission granter address\",\"token\":\"Super token address\"},\"returns\":{\"flowOperatorId\":\"The keccak256 hash of encoded string \\\"flowOperator\\\", sender and flowOperator\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\"}},\"getFlowOperatorDataByID(address,bytes32)\":{\"params\":{\"flowOperatorId\":\"The keccak256 hash of encoded string \\\"flowOperator\\\", sender and flowOperator\",\"token\":\"Super token address\"},\"returns\":{\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\"}},\"getMaximumFlowRateFromDeposit(address,uint256)\":{\"details\":\"The deposit is clipped and rounded down\",\"params\":{\"deposit\":\"Deposit amount used for creating the flow\"},\"returns\":{\"flowRate\":\"The maximum flow rate\"}},\"getNetFlow(address,address)\":{\"details\":\"Get the net flow rate of the account\",\"params\":{\"account\":\"Account for the query\",\"token\":\"Super token address\"},\"returns\":{\"flowRate\":\"Net flow rate\"}},\"increaseFlowRateAllowance(address,address,int96,bytes)\":{\"details\":\"if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\",\"params\":{\"addedFlowRateAllowance\":\"The flow rate allowance delta\",\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"},\"returns\":{\"newCtx\":\"The new context bytes\"}},\"isPatricianPeriod(address,address,uint256)\":{\"details\":\"Returns whether it is the patrician period based on timestamp\",\"params\":{\"account\":\"The account we are interested in\",\"timestamp\":\"The timestamp we are interested in observing the result of isPatricianPeriod\"},\"returns\":{\"_0\":\"bool Whether it is currently the patrician period dictated by governance\"}},\"isPatricianPeriodNow(address,address)\":{\"details\":\"Returns whether it is the patrician period based on host.getNow()\",\"params\":{\"account\":\"The account we are interested in\"},\"returns\":{\"isCurrentlyPatricianPeriod\":\"Whether it is currently the patrician period dictated by governance\",\"timestamp\":\"The value of host.getNow()\"}},\"realtimeBalanceOf(address,address,uint256)\":{\"details\":\"Calculate the real-time balance for the account of this agreement class\",\"params\":{\"account\":\"Account the state belongs to\",\"time\":\"Time used for the calculation\"},\"returns\":{\"deposit\":\"Account deposit amount of this agreement\",\"dynamicBalance\":\"Dynamic balance portion of real-time balance of this agreement\",\"owedDeposit\":\"Account owed deposit amount of this agreement\"}},\"revokeFlowOperatorWithFullControl(address,address,bytes)\":{\"details\":\"`permissions` and `flowRateAllowance` will both be set to 0\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"token\":\"Super token address\"}},\"updateFlow(address,address,int96,bytes)\":{\"custom:callbacks\":\" - AgreementUpdated   - agreementId - can be used in getFlowByID   - agreementData - abi.encode(address flowSender, address flowReceiver)\",\"custom:note\":\" - Only the flow sender may update the flow rate - Even if the flow rate is zero, the flow is not deleted from the system - Deposit amount will be adjusted accordingly - No new gas fee is charged\",\"details\":\"flowId (agreementId) is the keccak256 hash of encoded sender and receiver\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"token\":\"Super token address\"}},\"updateFlowByOperator(address,address,address,int96,bytes)\":{\"details\":\"A flow updated by an approved flow operator (see above for details on callbacks)\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowRate\":\"New flow rate in amount per second\",\"receiver\":\"Flow receiver address\",\"sender\":\"Flow sender address (has granted permissions)\",\"token\":\"Super token address\"}},\"updateFlowOperatorPermissions(address,address,uint8,int96,bytes)\":{\"details\":\"msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\",\"params\":{\"ctx\":\"Context bytes (see ISuperfluid.sol for Context struct)\",\"flowOperator\":\"The permission grantee address\",\"flowRateAllowance\":\"The flow rate allowance the `flowOperator` is granted (only goes down)\",\"permissions\":\"A bitmask representation of the granted permissions\",\"token\":\"Super token address\"}}},\"title\":\"Constant Flow Agreement interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createFlow(address,address,int96,bytes)\":{\"notice\":\"Create a flow betwen ctx.msgSender and receiver\"},\"createFlowByOperator(address,address,address,int96,bytes)\":{\"notice\":\"Create a flow between sender and receiver\"},\"deleteFlow(address,address,address,bytes)\":{\"notice\":\"Delete the flow between sender and receiver\"},\"deleteFlowByOperator(address,address,address,bytes)\":{\"notice\":\"Delete the flow between sender and receiver\"},\"getDepositRequiredForFlowRate(address,int96)\":{\"notice\":\"Get the deposit required for creating the flow\"},\"getFlowByID(address,bytes32)\":{\"notice\":\"Get flow data using agreementId\"},\"getFlowOperatorData(address,address,address)\":{\"notice\":\"Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\"},\"getFlowOperatorDataByID(address,bytes32)\":{\"notice\":\"Get flow operator using flowOperatorId\"},\"getMaximumFlowRateFromDeposit(address,uint256)\":{\"notice\":\"Get the maximum flow rate allowed with the deposit\"},\"increaseFlowRateAllowance(address,address,int96,bytes)\":{\"notice\":\"msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\"},\"revokeFlowOperatorWithFullControl(address,address,bytes)\":{\"notice\":\"msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\"},\"updateFlow(address,address,int96,bytes)\":{\"notice\":\"Update the flow rate between ctx.msgSender and receiver\"},\"updateFlowByOperator(address,address,address,int96,bytes)\":{\"notice\":\"Update a flow between sender and receiver\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":\"IConstantFlowAgreementV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0x8a191d6f5dcdfd97e8fbbe17382fa96f51dbaddea6ed704206e7cbda5d12cc65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5bed573cf54d2406d0e7566ab6cd37c31025c6fab3b5b8d8ef9b79b1cab098fd\",\"dweb:/ipfs/QmegphCXp9qTAvefUYyW8eGdaGQMLJ4JrEXELU7WhisRcS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"createFlow(address,address,int96,bytes)": {
								"notice": "Create a flow betwen ctx.msgSender and receiver"
							},
							"createFlowByOperator(address,address,address,int96,bytes)": {
								"notice": "Create a flow between sender and receiver"
							},
							"deleteFlow(address,address,address,bytes)": {
								"notice": "Delete the flow between sender and receiver"
							},
							"deleteFlowByOperator(address,address,address,bytes)": {
								"notice": "Delete the flow between sender and receiver"
							},
							"getDepositRequiredForFlowRate(address,int96)": {
								"notice": "Get the deposit required for creating the flow"
							},
							"getFlowByID(address,bytes32)": {
								"notice": "Get flow data using agreementId"
							},
							"getFlowOperatorData(address,address,address)": {
								"notice": "Get the permissions of a flow operator between `sender` and `flowOperator` for `token`"
							},
							"getFlowOperatorDataByID(address,bytes32)": {
								"notice": "Get flow operator using flowOperatorId"
							},
							"getMaximumFlowRateFromDeposit(address,uint256)": {
								"notice": "Get the maximum flow rate allowed with the deposit"
							},
							"increaseFlowRateAllowance(address,address,int96,bytes)": {
								"notice": "msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`"
							},
							"revokeFlowOperatorWithFullControl(address,address,bytes)": {
								"notice": "msgSender from `ctx` revokes `flowOperator` create/update/delete permissions"
							},
							"updateFlow(address,address,int96,bytes)": {
								"notice": "Update the flow rate between ctx.msgSender and receiver"
							},
							"updateFlowByOperator(address,address,address,int96,bytes)": {
								"notice": "Update a flow between sender and receiver"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
				"BatchOperation": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"OPERATION_TYPE_ERC20_APPROVE": {
								"details": "ERC20.approve batch operation type Call spec: ISuperToken(target).operationApprove(     abi.decode(data, (address spender, uint256 amount)) )"
							},
							"OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE": {
								"details": "ERC20.decreaseAllowance batch operation type Call spec: ISuperToken(target).operationDecreaseAllowance(     abi.decode(data, (address account, address spender, uint256 subtractedValue)) )"
							},
							"OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE": {
								"details": "ERC20.increaseAllowance batch operation type Call spec: ISuperToken(target).operationIncreaseAllowance(     abi.decode(data, (address account, address spender, uint256 addedValue)) )"
							},
							"OPERATION_TYPE_ERC20_TRANSFER_FROM": {
								"details": "ERC20.transferFrom batch operation type Call spec: ISuperToken(target).operationTransferFrom(     abi.decode(data, (address sender, address recipient, uint256 amount) )"
							},
							"OPERATION_TYPE_ERC777_SEND": {
								"details": "ERC777.send batch operation type Call spec: ISuperToken(target).operationSend(     abi.decode(data, (address recipient, uint256 amount, bytes userData) )"
							},
							"OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT": {
								"details": "Superfluid.callAgreement batch operation type Call spec: callAgreement(     ISuperAgreement(target)),     abi.decode(data, (bytes callData, bytes userData) )"
							},
							"OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION": {
								"details": "Superfluid.callAppAction batch operation type Call spec: callAppAction(     ISuperApp(target)),     data )"
							},
							"OPERATION_TYPE_SUPERTOKEN_DOWNGRADE": {
								"details": "SuperToken.downgrade batch operation type Call spec: ISuperToken(target).operationDowngrade(     abi.decode(data, (uint256 amount) )"
							},
							"OPERATION_TYPE_SUPERTOKEN_UPGRADE": {
								"details": "SuperToken.upgrade batch operation type Call spec: ISuperToken(target).operationUpgrade(     abi.decode(data, (uint256 amount) )"
							}
						},
						"title": "Batch operation library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":5645:8269  library BatchOperation {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":5645:8269  library BatchOperation {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220507f546f0e9f8f03ec302e93430663d4c564ea9ba5b891da4323f6c82ea052f064736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220507f546f0e9f8f03ec302e93430663d4c564ea9ba5b891da4323f6c82ea052f064736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP PUSH32 0x546F0E9F8F03EC302E93430663D4C564EA9BA5B891DA4323F6C82EA052F06473 PUSH16 0x6C634300080A00330000000000000000 ",
							"sourceMap": "5645:2624:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220507f546f0e9f8f03ec302e93430663d4c564ea9ba5b891da4323f6c82ea052f064736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP PUSH32 0x546F0E9F8F03EC302E93430663D4C564EA9BA5B891DA4323F6C82EA052F06473 PUSH16 0x6C634300080A00330000000000000000 ",
							"sourceMap": "5645:2624:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 5645,
									"end": 8269,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220507f546f0e9f8f03ec302e93430663d4c564ea9ba5b891da4323f6c82ea052f064736f6c634300080a0033",
									".code": [
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5645,
											"end": 8269,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OPERATION_TYPE_ERC20_APPROVE\":{\"details\":\"ERC20.approve batch operation type Call spec: ISuperToken(target).operationApprove(     abi.decode(data, (address spender, uint256 amount)) )\"},\"OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE\":{\"details\":\"ERC20.decreaseAllowance batch operation type Call spec: ISuperToken(target).operationDecreaseAllowance(     abi.decode(data, (address account, address spender, uint256 subtractedValue)) )\"},\"OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE\":{\"details\":\"ERC20.increaseAllowance batch operation type Call spec: ISuperToken(target).operationIncreaseAllowance(     abi.decode(data, (address account, address spender, uint256 addedValue)) )\"},\"OPERATION_TYPE_ERC20_TRANSFER_FROM\":{\"details\":\"ERC20.transferFrom batch operation type Call spec: ISuperToken(target).operationTransferFrom(     abi.decode(data, (address sender, address recipient, uint256 amount) )\"},\"OPERATION_TYPE_ERC777_SEND\":{\"details\":\"ERC777.send batch operation type Call spec: ISuperToken(target).operationSend(     abi.decode(data, (address recipient, uint256 amount, bytes userData) )\"},\"OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT\":{\"details\":\"Superfluid.callAgreement batch operation type Call spec: callAgreement(     ISuperAgreement(target)),     abi.decode(data, (bytes callData, bytes userData) )\"},\"OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION\":{\"details\":\"Superfluid.callAppAction batch operation type Call spec: callAppAction(     ISuperApp(target)),     data )\"},\"OPERATION_TYPE_SUPERTOKEN_DOWNGRADE\":{\"details\":\"SuperToken.downgrade batch operation type Call spec: ISuperToken(target).operationDowngrade(     abi.decode(data, (uint256 amount) )\"},\"OPERATION_TYPE_SUPERTOKEN_UPGRADE\":{\"details\":\"SuperToken.upgrade batch operation type Call spec: ISuperToken(target).operationUpgrade(     abi.decode(data, (uint256 amount) )\"}},\"title\":\"Batch operation library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"BatchOperation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ContextDefinitions": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Context definitions library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":3371:4559  library ContextDefinitions {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":3371:4559  library ContextDefinitions {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220836ba42d24218a2e16f7cc876f248a7fdbfdccee3e16d4f2af0f48d4b62ca73d64736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220836ba42d24218a2e16f7cc876f248a7fdbfdccee3e16d4f2af0f48d4b62ca73d64736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 PUSH12 0xA42D24218A2E16F7CC876F24 DUP11 PUSH32 0xDBFDCCEE3E16D4F2AF0F48D4B62CA73D64736F6C634300080A00330000000000 ",
							"sourceMap": "3371:1188:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220836ba42d24218a2e16f7cc876f248a7fdbfdccee3e16d4f2af0f48d4b62ca73d64736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 PUSH12 0xA42D24218A2E16F7CC876F24 DUP11 PUSH32 0xDBFDCCEE3E16D4F2AF0F48D4B62CA73D64736F6C634300080A00330000000000 ",
							"sourceMap": "3371:1188:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodeCallInfo(uint256)": "infinite",
								"encodeCallInfo(uint8,uint8)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3371,
									"end": 4559,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220836ba42d24218a2e16f7cc876f248a7fdbfdccee3e16d4f2af0f48d4b62ca73d64736f6c634300080a0033",
									".code": [
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3371,
											"end": 4559,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Context definitions library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"ContextDefinitions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"FlowOperatorDefinitions": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Flow Operator definitions library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":4637:5579  library FlowOperatorDefinitions {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":4637:5579  library FlowOperatorDefinitions {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b5e9a94661d09e33614f024860ca1a13596a04679b04e4145da324a2c204c0fc64736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b5e9a94661d09e33614f024860ca1a13596a04679b04e4145da324a2c204c0fc64736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB5 0xE9 0xA9 CHAINID PUSH2 0xD09E CALLER PUSH2 0x4F02 BASEFEE PUSH1 0xCA BYTE SGT MSIZE PUSH11 0x4679B04E4145DA324A2C2 DIV 0xC0 0xFC PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "4637:942:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b5e9a94661d09e33614f024860ca1a13596a04679b04e4145da324a2c204c0fc64736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB5 0xE9 0xA9 CHAINID PUSH2 0xD09E CALLER PUSH2 0x4F02 BASEFEE PUSH1 0xCA BYTE SGT MSIZE PUSH11 0x4679B04E4145DA324A2C2 DIV 0xC0 0xFC PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
							"sourceMap": "4637:942:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"isPermissionsClean(uint8)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 4637,
									"end": 5579,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b5e9a94661d09e33614f024860ca1a13596a04679b04e4145da324a2c204c0fc64736f6c634300080a0033",
									".code": [
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4637,
											"end": 5579,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Flow Operator definitions library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"FlowOperatorDefinitions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SuperAppDefinitions": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Super app definitions library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":129:3301  library SuperAppDefinitions {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":129:3301  library SuperAppDefinitions {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b20960ebbd5e7c903d0d70eb66019e5116d639dbbb17ed1d99ededcb288bd10164736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b20960ebbd5e7c903d0d70eb66019e5116d639dbbb17ed1d99ededcb288bd10164736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 MULMOD PUSH1 0xEB 0xBD 0x5E PUSH29 0x903D0D70EB66019E5116D639DBBB17ED1D99EDEDCB288BD10164736F6C PUSH4 0x4300080A STOP CALLER ",
							"sourceMap": "129:3172:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b20960ebbd5e7c903d0d70eb66019e5116d639dbbb17ed1d99ededcb288bd10164736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 MULMOD PUSH1 0xEB 0xBD 0x5E PUSH29 0x903D0D70EB66019E5116D639DBBB17ED1D99EDEDCB288BD10164736F6C PUSH4 0x4300080A STOP CALLER ",
							"sourceMap": "129:3172:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"getAppCallbackLevel(uint256)": "infinite",
								"isAppJailed(uint256)": "infinite",
								"isConfigWordClean(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 129,
									"end": 3301,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b20960ebbd5e7c903d0d70eb66019e5116d639dbbb17ed1d99ededcb288bd10164736f6c634300080a0033",
									".code": [
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 129,
											"end": 3301,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Super app definitions library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"SuperAppDefinitions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SuperfluidGovernanceConfigs": {
					"abi": [],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {},
						"title": "Superfluid governance configs library",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":8349:9864  library SuperfluidGovernanceConfigs {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":8349:9864  library SuperfluidGovernanceConfigs {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e7e7c153517612ec86ded0bbe5cbd2ea4adc6a81c5d67976e6ccde4db8d6728464736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e7e7c153517612ec86ded0bbe5cbd2ea4adc6a81c5d67976e6ccde4db8d6728464736f6c634300080a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xE7 0xC1 MSTORE8 MLOAD PUSH23 0x12EC86DED0BBE5CBD2EA4ADC6A81C5D67976E6CCDE4DB8 0xD6 PUSH19 0x8464736F6C634300080A003300000000000000 ",
							"sourceMap": "8349:1515:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e7e7c153517612ec86ded0bbe5cbd2ea4adc6a81c5d67976e6ccde4db8d6728464736f6c634300080a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xE7 0xC1 MSTORE8 MLOAD PUSH23 0x12EC86DED0BBE5CBD2EA4ADC6A81C5D67976E6CCDE4DB8 0xD6 PUSH19 0x8464736F6C634300080A003300000000000000 ",
							"sourceMap": "8349:1515:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"decodePPPConfig(uint256)": "infinite",
								"getAppFactoryConfigKey(address)": "infinite",
								"getAppRegistrationConfigKey(address,string memory)": "infinite",
								"getTrustedForwarderConfigKey(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 8349,
									"end": 9864,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e7e7c153517612ec86ded0bbe5cbd2ea4adc6a81c5d67976e6ccde4db8d6728464736f6c634300080a0033",
									".code": [
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8349,
											"end": 9864,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Superfluid governance configs library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":\"SuperfluidGovernanceConfigs\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"IConstantInflowNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CIF_NFT_ONLY_CONSTANT_OUTFLOW",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "newTokenId",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"burn(uint256)": {
								"details": "We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.",
								"params": {
									"tokenId": "desired token id to burn"
								}
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"mint(address,uint256)": {
								"details": "We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.",
								"params": {
									"newTokenId": "the new token id",
									"to": "the flow receiver (inflow NFT receiver)"
								}
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CIF_NFT_ONLY_CONSTANT_OUTFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"burn(uint256)\":{\"details\":\"We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.\",\"params\":{\"tokenId\":\"desired token id to burn\"}},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"mint(address,uint256)\":{\"details\":\"We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose is to inform clients that search for events.\",\"params\":{\"newTokenId\":\"the new token id\",\"to\":\"the flow receiver (inflow NFT receiver)\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"This burn function emits the \\\"burn\\\" `Transfer` event.\"},\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"mint(address,uint256)\":{\"notice\":\"The mint function emits the \\\"mint\\\" `Transfer` event.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":\"IConstantInflowNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "This burn function emits the \"burn\" `Transfer` event."
							},
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							},
							"mint(address,uint256)": {
								"notice": "The mint function emits the \"mint\" `Transfer` event."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"IConstantOutflowNFT": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_INVALID_SUPER_TOKEN",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_ONLY_CONSTANT_INFLOW",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "COF_NFT_TOKEN_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onCreate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onDelete",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "onUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"onCreate(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"onDelete(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"onUpdate(address,address,address)": {
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"token": "the super token passed from the CFA (flowVars)"
								}
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"onCreate(address,address,address)": "f7e3d983",
							"onDelete(address,address,address)": "ef1f0237",
							"onUpdate(address,address,address)": "eb54a7ca",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_INVALID_SUPER_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_CONSTANT_INFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_FLOW_AGREEMENTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_TOKEN_ALREADY_EXISTS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onDelete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"onCreate(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"onDelete(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"onUpdate(address,address,address)\":{\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"token\":\"the super token passed from the CFA (flowVars)\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"onCreate(address,address,address)\":{\"notice\":\"The onCreate function is called when a new flow is created.\"},\"onDelete(address,address,address)\":{\"notice\":\"The onDelete function is called when a flow is deleted.\"},\"onUpdate(address,address,address)\":{\"notice\":\"The onUpdate function is called when a flow is updated.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":\"IConstantOutflowNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							},
							"onCreate(address,address,address)": {
								"notice": "The onCreate function is called when a new flow is created."
							},
							"onDelete(address,address,address)": {
								"notice": "The onDelete function is called when a flow is deleted."
							},
							"onUpdate(address,address,address)": {
								"notice": "The onUpdate function is called when a flow is updated."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"IFlowNFTBase": {
					"abi": [
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CALLER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_INVALID_TOKEN_ID",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "MetadataUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "flowDataByTokenId",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "superToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowSender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "flowReceiver",
											"type": "address"
										},
										{
											"internalType": "uint32",
											"name": "flowStartDate",
											"type": "uint32"
										}
									],
									"internalType": "struct IFlowNFTBase.FlowNFTData",
									"name": "flowData",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowSender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "flowReceiver",
									"type": "address"
								}
							],
							"name": "getTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "nftName",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "nftSymbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "triggerMetadataUpdate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"details": "This event comes from https://eips.ethereum.org/EIPS/eip-4906",
								"params": {
									"tokenId": "the id of the token that should have its metadata updated"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"flowDataByTokenId(uint256)": {
								"params": {
									"tokenId": "the token id"
								},
								"returns": {
									"flowData": "the flow data associated with `tokenId`"
								}
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"getTokenId(address,address,address)": {
								"details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
								"params": {
									"flowReceiver": "the flow receiver",
									"flowSender": "the flow sender",
									"superToken": "the super token"
								},
								"returns": {
									"_0": "tokenId the tokenId"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"flowDataByTokenId(uint256)": "8d47859e",
							"getApproved(uint256)": "081812fc",
							"getTokenId(address,address,address)": "89f71d2d",
							"initialize(string,string)": "4cd88b76",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"triggerMetadataUpdate(uint256)": "2f388560"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"_0\":\"tokenId the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":\"IFlowNFTBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"MetadataUpdate(uint256)": {
								"notice": "Informs third-party platforms that NFT metadata should be updated"
							}
						},
						"kind": "user",
						"methods": {
							"flowDataByTokenId(uint256)": {
								"notice": "An external function for querying flow data by `tokenId``"
							},
							"getTokenId(address,address,address)": {
								"notice": "An external function for computing the deterministic tokenId"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
				"IPoolAdminNFT": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":\"IPoolAdminNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
				"IPoolMemberNFT": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":\"IPoolMemberNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ISuperAgreement": {
					"abi": [
						{
							"inputs": [],
							"name": "agreementType",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidToken",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "dynamicBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {
							"agreementType()": {
								"details": "Get the type of the agreement class"
							},
							"realtimeBalanceOf(address,address,uint256)": {
								"details": "Calculate the real-time balance for the account of this agreement class",
								"params": {
									"account": "Account the state belongs to",
									"time": "Time used for the calculation"
								},
								"returns": {
									"deposit": "Account deposit amount of this agreement",
									"dynamicBalance": "Dynamic balance portion of real-time balance of this agreement",
									"owedDeposit": "Account owed deposit amount of this agreement"
								}
							}
						},
						"title": "Super agreement interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"agreementType()": "7730599e",
							"realtimeBalanceOf(address,address,uint256)": "9b2e48bc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"agreementType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"dynamicBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{\"agreementType()\":{\"details\":\"Get the type of the agreement class\"},\"realtimeBalanceOf(address,address,uint256)\":{\"details\":\"Calculate the real-time balance for the account of this agreement class\",\"params\":{\"account\":\"Account the state belongs to\",\"time\":\"Time used for the calculation\"},\"returns\":{\"deposit\":\"Account deposit amount of this agreement\",\"dynamicBalance\":\"Dynamic balance portion of real-time balance of this agreement\",\"owedDeposit\":\"Account owed deposit amount of this agreement\"}}},\"title\":\"Super agreement interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":\"ISuperAgreement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
				"ISuperApp": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "afterAgreementCreated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "afterAgreementTerminated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "afterAgreementUpdated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "beforeAgreementCreated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "beforeAgreementTerminated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "agreementId",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "agreementData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "beforeAgreementUpdated",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"details": "Be aware of the app being jailed, when the word permitted is used.",
						"kind": "dev",
						"methods": {
							"afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": {
								"custom:note": " - State changes is permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback after a new agreement is created.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"cbdata": "The data returned from the before-hook callback.",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"newCtx": "The current context of the transaction."
								}
							},
							"afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": {
								"custom:note": " - State changes is permitted. - Revert is not permitted.",
								"details": "Callback after a new agreement is terminated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"cbdata": "The data returned from the before-hook callback.",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"newCtx": "The current context of the transaction."
								}
							},
							"afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": {
								"custom:note": " - State changes is permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback after a new agreement is updated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"cbdata": "The data returned from the before-hook callback.",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"newCtx": "The current context of the transaction."
								}
							},
							"beforeAgreementCreated(address,address,bytes32,bytes,bytes)": {
								"custom:note": " - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback before a new agreement is created.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"cbdata": "A free format in memory data the app can use to pass          arbitary information to the after-hook callback."
								}
							},
							"beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": {
								"custom:note": " - It will be invoked with `staticcall`, no state changes are permitted. - Revert is not permitted.",
								"details": "Callback before a new agreement is terminated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"cbdata": "A free format in memory data the app can use to pass arbitary information to         the after-hook callback."
								}
							},
							"beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": {
								"custom:note": " - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \"reason\" is permitted.",
								"details": "Callback before a new agreement is updated.",
								"params": {
									"agreementClass": "The agreement class address.",
									"agreementData": "The agreement data (non-compressed)",
									"agreementId": "The agreementId",
									"ctx": "The context data.",
									"superToken": "The super token used for the agreement."
								},
								"returns": {
									"cbdata": "A free format in memory data the app can use to pass          arbitary information to the after-hook callback."
								}
							}
						},
						"title": "SuperApp interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": "d86ed3e5",
							"afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": "53c11f99",
							"afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": "230dbd29",
							"beforeAgreementCreated(address,address,bytes32,bytes,bytes)": "30d9c915",
							"beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": "5f9e7d77",
							"beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": "884d1f40"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"afterAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementCreated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementTerminated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"agreementId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"agreementData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"beforeAgreementUpdated\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"Be aware of the app being jailed, when the word permitted is used.\",\"kind\":\"dev\",\"methods\":{\"afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)\":{\"custom:note\":\" - State changes is permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback after a new agreement is created.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"cbdata\":\"The data returned from the before-hook callback.\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"newCtx\":\"The current context of the transaction.\"}},\"afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)\":{\"custom:note\":\" - State changes is permitted. - Revert is not permitted.\",\"details\":\"Callback after a new agreement is terminated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"cbdata\":\"The data returned from the before-hook callback.\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"newCtx\":\"The current context of the transaction.\"}},\"afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)\":{\"custom:note\":\" - State changes is permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback after a new agreement is updated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"cbdata\":\"The data returned from the before-hook callback.\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"newCtx\":\"The current context of the transaction.\"}},\"beforeAgreementCreated(address,address,bytes32,bytes,bytes)\":{\"custom:note\":\" - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback before a new agreement is created.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"cbdata\":\"A free format in memory data the app can use to pass          arbitary information to the after-hook callback.\"}},\"beforeAgreementTerminated(address,address,bytes32,bytes,bytes)\":{\"custom:note\":\" - It will be invoked with `staticcall`, no state changes are permitted. - Revert is not permitted.\",\"details\":\"Callback before a new agreement is terminated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"cbdata\":\"A free format in memory data the app can use to pass arbitary information to         the after-hook callback.\"}},\"beforeAgreementUpdated(address,address,bytes32,bytes,bytes)\":{\"custom:note\":\" - It will be invoked with `staticcall`, no state changes are permitted. - Only revert with a \\\"reason\\\" is permitted.\",\"details\":\"Callback before a new agreement is updated.\",\"params\":{\"agreementClass\":\"The agreement class address.\",\"agreementData\":\"The agreement data (non-compressed)\",\"agreementId\":\"The agreementId\",\"ctx\":\"The context data.\",\"superToken\":\"The super token used for the agreement.\"},\"returns\":{\"cbdata\":\"A free format in memory data the app can use to pass          arbitary information to the after-hook callback.\"}}},\"title\":\"SuperApp interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":\"ISuperApp\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"ISuperToken": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_MINT_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_NO_UNDERLYING_TOKEN",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_GOV_OWNER",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_ONLY_SELF",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "rewardAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidatedBy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "rewardAmountReceiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								}
							],
							"name": "AgreementLiquidatedV2",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								}
							],
							"name": "AgreementStateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "AgreementTerminated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "AuthorizedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "bailoutAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "Bailout",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Burned",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IConstantInflowNFT",
									"name": "constantInflowNFT",
									"type": "address"
								}
							],
							"name": "ConstantInflowNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IConstantOutflowNFT",
									"name": "constantOutflowNFT",
									"type": "address"
								}
							],
							"name": "ConstantOutflowNFTCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Minted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "RevokedOperator",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "Sent",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokenDowngraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokenUpgraded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "CONSTANT_INFLOW_NFT",
							"outputs": [
								{
									"internalType": "contract IConstantInflowNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "CONSTANT_OUTFLOW_NFT",
							"outputs": [
								{
									"internalType": "contract IConstantOutflowNFT",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "authorizeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "createAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultOperators",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "downgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "downgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountActiveAgreements",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "activeAgreements",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementData",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementStateSlot",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getUnderlyingToken",
							"outputs": [
								{
									"internalType": "address",
									"name": "tokenAddr",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "granularity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "n",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "s",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountCritical",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountCriticalNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountSolvent",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountSolventNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenHolder",
									"type": "address"
								}
							],
							"name": "isOperatorFor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "useDefaultRewardAccount",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								}
							],
							"name": "makeLiquidationPayoutsV2",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationApprove",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "operationDecreaseAllowance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationDowngrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "operationIncreaseAllowance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "operationSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "operationUpgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "operatorData",
									"type": "bytes"
								}
							],
							"name": "operatorSend",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "realtimeBalanceOfNow",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "revokeOperator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "selfApproveFor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "selfBurn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "selfMint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "selfTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "send",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "settleBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "terminateAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "transferAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementStateSlot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "upgrade",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "upgradeTo",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"ConstantInflowNFTCreated(address)": {
								"details": "Constant Inflow NFT proxy created event",
								"params": {
									"constantInflowNFT": "constant inflow nft address"
								}
							},
							"ConstantOutflowNFTCreated(address)": {
								"details": "Constant Outflow NFT proxy created event",
								"params": {
									"constantOutflowNFT": "constant outflow nft address"
								}
							},
							"TokenDowngraded(address,uint256)": {
								"details": "Token downgrade event",
								"params": {
									"account": "Account whose tokens are downgraded",
									"amount": "Amount of tokens downgraded"
								}
							},
							"TokenUpgraded(address,uint256)": {
								"details": "Token upgrade event",
								"params": {
									"account": "Account where tokens are upgraded to",
									"amount": "Amount of tokens upgraded (in 18 decimals)"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default."
							},
							"approve(address,uint256)": {
								"custom:emits": "an {Approval} event.",
								"custom:note": "Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"authorizeOperator(address)": {
								"custom:emits": "an {AuthorizedOperator} event.",
								"custom:requirements": " - `operator` cannot be calling address.",
								"details": "Make an account an operator of the caller. See {isOperatorFor}."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by an account (`owner`)."
							},
							"burn(uint256,bytes)": {
								"custom:emits": "a {Burned} event.",
								"custom:requirements": " - the caller must have at least `amount` tokens.",
								"details": "Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}."
							},
							"createAgreement(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"decimals()": {
								"custom:note": "SuperToken always uses 18 decimals. This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.",
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called."
							},
							"decreaseAllowance(address,uint256)": {
								"custom:emits": "an {Approval} event indicating the updated allowance.",
								"custom:requirements": " - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.",
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}."
							},
							"defaultOperators()": {
								"details": "Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false."
							},
							"downgrade(uint256)": {
								"details": "Downgrade SuperToken to ERC20.It will call transfer to send tokens",
								"params": {
									"amount": "Number of tokens to be downgraded"
								}
							},
							"downgradeTo(address,uint256)": {
								"details": "Downgrade SuperToken to ERC20 and transfer immediately",
								"params": {
									"amount": "Number of tokens to be downgraded (in 18 decimals)",
									"to": "The account to receive downgraded tokens"
								}
							},
							"getAccountActiveAgreements(address)": {
								"details": "An active agreement is one that has state for the account",
								"params": {
									"account": "Account to query"
								},
								"returns": {
									"activeAgreements": "List of accounts that have non-zero states for the account"
								}
							},
							"getAgreementData(address,bytes32,uint256)": {
								"details": "Get data of the agreement",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								},
								"returns": {
									"data": "Data of the agreement"
								}
							},
							"getAgreementStateSlot(address,address,uint256,uint256)": {
								"details": "Get data of the slot of the state of an agreement",
								"params": {
									"account": "Account to query",
									"agreementClass": "Contract address of the agreement",
									"dataLength": "length of the state data",
									"slotId": "slot id of the state"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"getUnderlyingToken()": {
								"details": "Return the underlying token contract",
								"returns": {
									"tokenAddr": "Underlying token address"
								}
							},
							"granularity()": {
								"custom:note": "For super token contracts, this value is always 1",
								"details": "Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number."
							},
							"increaseAllowance(address,uint256)": {
								"custom:emits": "an {Approval} event indicating the updated allowance.",
								"custom:requirements": " - `spender` cannot be the zero address.",
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}."
							},
							"initialize(address,uint8,string,string)": {
								"details": "Initialize the contract"
							},
							"isAccountCritical(address,uint256)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is critical (should use future)"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountCriticalNow(address)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountSolvent(address,uint256)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is solvent (should use future)"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isAccountSolventNow(address)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isOperatorFor(address,address)": {
								"details": "Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}."
							},
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"custom:note": " - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount",
								"details": "Make liquidation payouts (v2)",
								"params": {
									"id": "Agreement ID",
									"liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the rewarded account will receive",
									"targetAccount": "Account to be liquidated",
									"targetAccountBalanceDelta": "The delta amount the target account balance should change by",
									"useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"operationApprove(address,address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Perform ERC20 approve by host contract.",
								"params": {
									"account": "The account owner to be approved.",
									"amount": "Number of tokens to be approved.",
									"spender": "The spender of account owner's funds."
								}
							},
							"operationDowngrade(address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Downgrade ERC20 to SuperToken by host contract.",
								"params": {
									"account": "The account to be changed.",
									"amount": "Number of tokens to be downgraded (in 18 decimals)"
								}
							},
							"operationSend(address,address,uint256,bytes)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Perform ERC777 send by host contract.",
								"params": {
									"amount": "Number of tokens to be transferred.",
									"data": "Arbitrary user inputted data",
									"recipient": "The recipient of the funds.",
									"spender": "The account where the funds is sent from."
								}
							},
							"operationTransferFrom(address,address,address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Perform ERC20 transferFrom by host contract.",
								"params": {
									"account": "The account to spend sender's funds.",
									"amount": "Number of tokens to be transferred.",
									"recipient": "The recipient of the funds.",
									"spender": "The account where the funds is sent from."
								}
							},
							"operationUpgrade(address,uint256)": {
								"custom:modifiers": "  - onlyHost",
								"details": "Upgrade ERC20 to SuperToken by host contract.",
								"params": {
									"account": "The account to be changed.",
									"amount": "Number of tokens to be upgraded (in 18 decimals)"
								}
							},
							"operatorBurn(address,uint256,bytes,bytes)": {
								"custom:emits": "a {Burned} event.",
								"custom:requirements": " - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.",
								"details": "Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}."
							},
							"operatorSend(address,address,uint256,bytes,bytes)": {
								"custom:emits": "a {Sent} event.",
								"custom:requirements": " - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.",
								"details": "Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}."
							},
							"realtimeBalanceOf(address,uint256)": {
								"details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
								"params": {
									"account": "for the query",
									"timestamp": "Time of balance"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"realtimeBalanceOfNow(address)": {
								"details": "realtimeBalanceOf with timestamp equals to block timestamp",
								"params": {
									"account": "for the query"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"revokeOperator(address)": {
								"custom:emits": "a {RevokedOperator} event.",
								"custom:requirements": " - `operator` cannot be calling address.",
								"details": "Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}."
							},
							"selfApproveFor(address,address,uint256)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Give `spender`, `amount` allowance to spend the tokens of `account`."
							},
							"selfBurn(address,uint256,bytes)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Burn existing tokens for the account"
							},
							"selfMint(address,uint256,bytes)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Mint new tokens for the account"
							},
							"selfTransferFrom(address,address,address,uint256)": {
								"custom:modifiers": "  - onlySelf",
								"details": "Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`."
							},
							"send(address,uint256,bytes)": {
								"custom:emits": "a {Sent} event.",
								"custom:requirements": " - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.",
								"details": "Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}."
							},
							"settleBalance(address,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"details": "The agreement needs to make sure that the balance delta is balanced afterwards",
								"params": {
									"account": "Account to query.",
									"delta": "Amount of balance delta to be settled"
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"terminateAgreement(bytes32,uint256)": {
								"details": "Close the agreement",
								"params": {
									"id": "Agreement ID"
								}
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"custom:emits": "a {Transfer} event.",
								"details": "Moves `amount` tokens from the caller's account to `recipient`.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"transferAll(address)": {
								"details": "Transfer all available balance from `msg.sender` to `recipient`"
							},
							"transferFrom(address,address,uint256)": {
								"custom:emits": "a {Transfer} event.",
								"details": "Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.",
								"returns": {
									"_0": "Returns Success a boolean value indicating whether the operation succeeded."
								}
							},
							"updateAgreementData(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"updateAgreementStateSlot(address,uint256,bytes32[])": {
								"custom:note": " - To clear the storage out, provide zero-ed array of intended length",
								"details": "Update agreement state slot",
								"params": {
									"account": "Account to be updated"
								}
							},
							"upgrade(uint256)": {
								"custom:note": "It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract",
								"details": "Upgrade ERC20 to SuperToken.",
								"params": {
									"amount": "Number of tokens to be upgraded (in 18 decimals)"
								}
							},
							"upgradeTo(address,uint256,bytes)": {
								"custom:note": "It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract ",
								"custom:requirements": " - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.",
								"custom:warning": "- there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.",
								"details": "Upgrade ERC20 to SuperToken and transfer immediately",
								"params": {
									"amount": "Number of tokens to be upgraded (in 18 decimals)",
									"data": "User data for the TokensRecipient callback",
									"to": "The account to receive upgraded tokens"
								}
							}
						},
						"title": "Super token (Superfluid Token + ERC20 + ERC777) interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"CONSTANT_INFLOW_NFT()": "4c5c0c85",
							"CONSTANT_OUTFLOW_NFT()": "ef43d2c6",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"authorizeOperator(address)": "959b8c3f",
							"balanceOf(address)": "70a08231",
							"burn(uint256,bytes)": "fe9d9303",
							"createAgreement(bytes32,bytes32[])": "12a6a3f8",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"defaultOperators()": "06e48538",
							"downgrade(uint256)": "11bcc81e",
							"downgradeTo(address,uint256)": "83ba2525",
							"getAccountActiveAgreements(address)": "386fa221",
							"getAgreementData(address,bytes32,uint256)": "6c2d9f2f",
							"getAgreementStateSlot(address,address,uint256,uint256)": "4b61cc33",
							"getHost()": "20bc4425",
							"getUnderlyingToken()": "ee719bc8",
							"granularity()": "556f0dc7",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(address,uint8,string,string)": "42fe0980",
							"isAccountCritical(address,uint256)": "d9d078d6",
							"isAccountCriticalNow(address)": "79359f6f",
							"isAccountSolvent(address,uint256)": "b84cdd4a",
							"isAccountSolventNow(address)": "bb0d196e",
							"isOperatorFor(address,address)": "d95b6371",
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": "1863e809",
							"name()": "06fdde03",
							"operationApprove(address,address,uint256)": "62aa5287",
							"operationDecreaseAllowance(address,address,uint256)": "c780fd82",
							"operationDowngrade(address,uint256)": "245887fc",
							"operationIncreaseAllowance(address,address,uint256)": "4b2763b3",
							"operationSend(address,address,uint256,bytes)": "ca0c1e7f",
							"operationTransferFrom(address,address,address,uint256)": "16d055d6",
							"operationUpgrade(address,uint256)": "ca789464",
							"operatorBurn(address,uint256,bytes,bytes)": "fc673c4f",
							"operatorSend(address,address,uint256,bytes,bytes)": "62ad1b83",
							"realtimeBalanceOf(address,uint256)": "eb3537cc",
							"realtimeBalanceOfNow(address)": "2ec8eec7",
							"revokeOperator(address)": "fad8b32a",
							"selfApproveFor(address,address,uint256)": "66a12fb6",
							"selfBurn(address,uint256,bytes)": "9d876741",
							"selfMint(address,uint256,bytes)": "c68d4283",
							"selfTransferFrom(address,address,address,uint256)": "41b706be",
							"send(address,uint256,bytes)": "9bd9bbc6",
							"settleBalance(address,int256)": "cf97256d",
							"symbol()": "95d89b41",
							"terminateAgreement(bytes32,uint256)": "27048397",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAll(address)": "a3a7e7f3",
							"transferFrom(address,address,uint256)": "23b872dd",
							"updateAgreementData(bytes32,bytes32[])": "a1b2bf8b",
							"updateAgreementStateSlot(address,uint256,bytes32[])": "090c415e",
							"upgrade(uint256)": "45977d03",
							"upgradeTo(address,uint256,bytes)": "5b9d09cc"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_BURN_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_MOVE_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_NO_UNDERLYING_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_GOV_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_ONLY_SELF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"}],\"name\":\"AgreementLiquidatedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bailoutAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"Bailout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"constantInflowNFT\",\"type\":\"address\"}],\"name\":\"ConstantInflowNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IConstantOutflowNFT\",\"name\":\"constantOutflowNFT\",\"type\":\"address\"}],\"name\":\"ConstantOutflowNFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDowngraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONSTANT_INFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONSTANT_OUTFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantOutflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"downgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"downgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"activeAgreements\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountCriticalNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountSolventNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDefaultRewardAccount\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"}],\"name\":\"makeLiquidationPayoutsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"operationDecreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationDowngrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"operationIncreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"operationSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operationUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfApproveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"selfBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"selfMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"ConstantInflowNFTCreated(address)\":{\"details\":\"Constant Inflow NFT proxy created event\",\"params\":{\"constantInflowNFT\":\"constant inflow nft address\"}},\"ConstantOutflowNFTCreated(address)\":{\"details\":\"Constant Outflow NFT proxy created event\",\"params\":{\"constantOutflowNFT\":\"constant outflow nft address\"}},\"TokenDowngraded(address,uint256)\":{\"details\":\"Token downgrade event\",\"params\":{\"account\":\"Account whose tokens are downgraded\",\"amount\":\"Amount of tokens downgraded\"}},\"TokenUpgraded(address,uint256)\":{\"details\":\"Token upgrade event\",\"params\":{\"account\":\"Account where tokens are upgraded to\",\"amount\":\"Amount of tokens upgraded (in 18 decimals)\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be         allowed to spend on behalf of `owner` through {transferFrom}. This is         zero by default.\"},\"approve(address,uint256)\":{\"custom:emits\":\"an {Approval} event.\",\"custom:note\":\"Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"authorizeOperator(address)\":{\"custom:emits\":\"an {AuthorizedOperator} event.\",\"custom:requirements\":\" - `operator` cannot be calling address.\",\"details\":\"Make an account an operator of the caller. See {isOperatorFor}.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by an account (`owner`).\"},\"burn(uint256,bytes)\":{\"custom:emits\":\"a {Burned} event.\",\"custom:requirements\":\" - the caller must have at least `amount` tokens.\",\"details\":\"Destroys `amount` tokens from the caller's account, reducing the total supply and transfers the underlying token to the caller's account. If a send hook is registered for the caller, the corresponding function will be called with `data` and empty `operatorData`. See {IERC777Sender}.\"},\"createAgreement(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"decimals()\":{\"custom:note\":\"SuperToken always uses 18 decimals. This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\",\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called.\"},\"decreaseAllowance(address,uint256)\":{\"custom:emits\":\"an {Approval} event indicating the updated allowance.\",\"custom:requirements\":\" - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\",\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\"},\"defaultOperators()\":{\"details\":\"Returns the list of default operators. These accounts are operators for all token holders, even if {authorizeOperator} was never called on them. This list is immutable, but individual holders may revoke these via {revokeOperator}, in which case {isOperatorFor} will return false.\"},\"downgrade(uint256)\":{\"details\":\"Downgrade SuperToken to ERC20.It will call transfer to send tokens\",\"params\":{\"amount\":\"Number of tokens to be downgraded\"}},\"downgradeTo(address,uint256)\":{\"details\":\"Downgrade SuperToken to ERC20 and transfer immediately\",\"params\":{\"amount\":\"Number of tokens to be downgraded (in 18 decimals)\",\"to\":\"The account to receive downgraded tokens\"}},\"getAccountActiveAgreements(address)\":{\"details\":\"An active agreement is one that has state for the account\",\"params\":{\"account\":\"Account to query\"},\"returns\":{\"activeAgreements\":\"List of accounts that have non-zero states for the account\"}},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"Get data of the agreement\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"},\"returns\":{\"data\":\"Data of the agreement\"}},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"Get data of the slot of the state of an agreement\",\"params\":{\"account\":\"Account to query\",\"agreementClass\":\"Contract address of the agreement\",\"dataLength\":\"length of the state data\",\"slotId\":\"slot id of the state\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"getUnderlyingToken()\":{\"details\":\"Return the underlying token contract\",\"returns\":{\"tokenAddr\":\"Underlying token address\"}},\"granularity()\":{\"custom:note\":\"For super token contracts, this value is always 1\",\"details\":\"Returns the smallest part of the token that is not divisible. This         means all token operations (creation, movement and destruction) must have         amounts that are a multiple of this number.\"},\"increaseAllowance(address,uint256)\":{\"custom:emits\":\"an {Approval} event indicating the updated allowance.\",\"custom:requirements\":\" - `spender` cannot be the zero address.\",\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}.\"},\"initialize(address,uint8,string,string)\":{\"details\":\"Initialize the contract\"},\"isAccountCritical(address,uint256)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is critical (should use future)\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountCriticalNow(address)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountSolvent(address,uint256)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is solvent (should use future)\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isAccountSolventNow(address)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isOperatorFor(address,address)\":{\"details\":\"Returns true if an account is an operator of `tokenHolder`. Operators can send and burn tokens on behalf of their owners. All accounts are their own operator. See {operatorSend} and {operatorBurn}.\"},\"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"custom:note\":\" - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount\",\"details\":\"Make liquidation payouts (v2)\",\"params\":{\"id\":\"Agreement ID\",\"liquidationTypeData\":\"Data regarding the version of the liquidation schema and the type\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the rewarded account will receive\",\"targetAccount\":\"Account to be liquidated\",\"targetAccountBalanceDelta\":\"The delta amount the target account balance should change by\",\"useDefaultRewardAccount\":\"Whether or not the default reward account receives the rewardAmount\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"operationApprove(address,address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Perform ERC20 approve by host contract.\",\"params\":{\"account\":\"The account owner to be approved.\",\"amount\":\"Number of tokens to be approved.\",\"spender\":\"The spender of account owner's funds.\"}},\"operationDowngrade(address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Downgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be downgraded (in 18 decimals)\"}},\"operationSend(address,address,uint256,bytes)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Perform ERC777 send by host contract.\",\"params\":{\"amount\":\"Number of tokens to be transferred.\",\"data\":\"Arbitrary user inputted data\",\"recipient\":\"The recipient of the funds.\",\"spender\":\"The account where the funds is sent from.\"}},\"operationTransferFrom(address,address,address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Perform ERC20 transferFrom by host contract.\",\"params\":{\"account\":\"The account to spend sender's funds.\",\"amount\":\"Number of tokens to be transferred.\",\"recipient\":\"The recipient of the funds.\",\"spender\":\"The account where the funds is sent from.\"}},\"operationUpgrade(address,uint256)\":{\"custom:modifiers\":\"  - onlyHost\",\"details\":\"Upgrade ERC20 to SuperToken by host contract.\",\"params\":{\"account\":\"The account to be changed.\",\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"}},\"operatorBurn(address,uint256,bytes,bytes)\":{\"custom:emits\":\"a {Burned} event.\",\"custom:requirements\":\" - `account` cannot be the zero address. - `account` must have at least `amount` tokens. - the caller must be an operator for `account`.\",\"details\":\"Destroys `amount` tokens from `account`, reducing the total supply. The caller must be an operator of `account`. If a send hook is registered for `account`, the corresponding function will be called with `data` and `operatorData`. See {IERC777Sender}.\"},\"operatorSend(address,address,uint256,bytes,bytes)\":{\"custom:emits\":\"a {Sent} event.\",\"custom:requirements\":\" - `sender` cannot be the zero address. - `sender` must have at least `amount` tokens. - the caller must be an operator for `sender`. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\",\"details\":\"Moves `amount` tokens from `sender` to `recipient`. The caller must be an operator of `sender`. If send or receive hooks are registered for `sender` and `recipient`, the corresponding functions will be called with `data` and `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\"},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"Calculate the real balance of a user, taking in consideration all agreements of the account\",\"params\":{\"account\":\"for the query\",\"timestamp\":\"Time of balance\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block timestamp\",\"params\":{\"account\":\"for the query\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"revokeOperator(address)\":{\"custom:emits\":\"a {RevokedOperator} event.\",\"custom:requirements\":\" - `operator` cannot be calling address.\",\"details\":\"Revoke an account's operator status for the caller. See {isOperatorFor} and {defaultOperators}.\"},\"selfApproveFor(address,address,uint256)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Give `spender`, `amount` allowance to spend the tokens of `account`.\"},\"selfBurn(address,uint256,bytes)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Burn existing tokens for the account\"},\"selfMint(address,uint256,bytes)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Mint new tokens for the account\"},\"selfTransferFrom(address,address,address,uint256)\":{\"custom:modifiers\":\"  - onlySelf\",\"details\":\"Transfer `amount` tokens from the `sender` to `recipient`. If `spender` isn't the same as `sender`, checks if `spender` has allowance to spend tokens of `sender`.\"},\"send(address,uint256,bytes)\":{\"custom:emits\":\"a {Sent} event.\",\"custom:requirements\":\" - the caller must have at least `amount` tokens. - `recipient` cannot be the zero address. - if `recipient` is a contract, it must implement the {IERC777Recipient} interface.\",\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.If send or receive hooks are registered for the caller and `recipient`,      the corresponding functions will be called with `data` and empty      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\"},\"settleBalance(address,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"details\":\"The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"Close the agreement\",\"params\":{\"id\":\"Agreement ID\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"custom:emits\":\"a {Transfer} event.\",\"details\":\"Moves `amount` tokens from the caller's account to `recipient`.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"transferAll(address)\":{\"details\":\"Transfer all available balance from `msg.sender` to `recipient`\"},\"transferFrom(address,address,uint256)\":{\"custom:emits\":\"a {Transfer} event.\",\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the         allowance mechanism. `amount` is then deducted from the caller's         allowance.\",\"returns\":{\"_0\":\"Returns Success a boolean value indicating whether the operation succeeded.\"}},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"custom:note\":\" - To clear the storage out, provide zero-ed array of intended length\",\"details\":\"Update agreement state slot\",\"params\":{\"account\":\"Account to be updated\"}},\"upgrade(uint256)\":{\"custom:note\":\"It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract\",\"details\":\"Upgrade ERC20 to SuperToken.\",\"params\":{\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\"}},\"upgradeTo(address,uint256,bytes)\":{\"custom:note\":\"It will use `transferFrom` to get tokens. Before calling this function you should `approve` this contract \",\"custom:requirements\":\" - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts.\",\"custom:warning\":\"- there is potential of reentrancy IF the \\\"to\\\" account is a registered ERC777 recipient.\",\"details\":\"Upgrade ERC20 to SuperToken and transfer immediately\",\"params\":{\"amount\":\"Number of tokens to be upgraded (in 18 decimals)\",\"data\":\"User data for the TokensRecipient callback\",\"to\":\"The account to receive upgraded tokens\"}}},\"title\":\"Super token (Superfluid Token + ERC20 + ERC777) interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"This value changes when {approve} or {transferFrom} are called.\"},\"getAccountActiveAgreements(address)\":{\"notice\":\"Get a list of agreements that is active for the account\"},\"isAccountCritical(address,uint256)\":{\"notice\":\"Check if account is critical\"},\"isAccountCriticalNow(address)\":{\"notice\":\"Check if account is critical now (current host.getNow())\"},\"isAccountSolvent(address,uint256)\":{\"notice\":\"Check if account is solvent\"},\"isAccountSolventNow(address)\":{\"notice\":\"Check if account is solvent now\"},\"realtimeBalanceOfNow(address)\":{\"notice\":\"Calculate the realtime balance given the current host.getNow() value\"},\"settleBalance(address,int256)\":{\"notice\":\"Settle balance from an account by the agreement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":\"ISuperToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"allowance(address,address)": {
								"notice": "This value changes when {approve} or {transferFrom} are called."
							},
							"getAccountActiveAgreements(address)": {
								"notice": "Get a list of agreements that is active for the account"
							},
							"isAccountCritical(address,uint256)": {
								"notice": "Check if account is critical"
							},
							"isAccountCriticalNow(address)": {
								"notice": "Check if account is critical now (current host.getNow())"
							},
							"isAccountSolvent(address,uint256)": {
								"notice": "Check if account is solvent"
							},
							"isAccountSolventNow(address)": {
								"notice": "Check if account is solvent now"
							},
							"realtimeBalanceOfNow(address)": {
								"notice": "Calculate the realtime balance given the current host.getNow() value"
							},
							"settleBalance(address,int256)": {
								"notice": "Settle balance from an account by the agreement"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"ISuperTokenFactory": {
					"abi": [
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_UNINITIALIZED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SUPER_TOKEN_FACTORY_ZERO_ADDRESS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "CustomSuperTokenCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SuperTokenCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "tokenLogic",
									"type": "address"
								}
							],
							"name": "SuperTokenLogicCreated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_underlyingToken",
									"type": "address"
								}
							],
							"name": "computeCanonicalERC20WrapperAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "superTokenAddress",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "isDeployed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ERC20WithTokenInfo",
									"name": "_underlyingToken",
									"type": "address"
								}
							],
							"name": "createCanonicalERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ERC20WithTokenInfo",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "underlyingToken",
									"type": "address"
								},
								{
									"internalType": "uint8",
									"name": "underlyingDecimals",
									"type": "uint8"
								},
								{
									"internalType": "enum ISuperTokenFactory.Upgradability",
									"name": "upgradability",
									"type": "uint8"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "createERC20Wrapper",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_underlyingTokenAddress",
									"type": "address"
								}
							],
							"name": "getCanonicalERC20Wrapper",
							"outputs": [
								{
									"internalType": "address",
									"name": "superTokenAddress",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenLogic",
							"outputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "superToken",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "customSuperTokenProxy",
									"type": "address"
								}
							],
							"name": "initializeCustomSuperToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"CustomSuperTokenCreated(address)": {
								"details": "Custom super token created event",
								"params": {
									"token": "Newly created custom super token address"
								}
							},
							"SuperTokenCreated(address)": {
								"details": "Super token created event",
								"params": {
									"token": "Newly created super token address"
								}
							},
							"SuperTokenLogicCreated(address)": {
								"details": "Super token logic created event",
								"params": {
									"tokenLogic": "Token logic address"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"computeCanonicalERC20WrapperAddress(address)": {
								"details": "We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens",
								"params": {
									"_underlyingToken": "Underlying ERC20 token address"
								},
								"returns": {
									"isDeployed": "whether the super token is deployed AND set in the canonical mapping",
									"superTokenAddress": "Super token address"
								}
							},
							"createCanonicalERC20Wrapper(address)": {
								"details": "salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))",
								"params": {
									"_underlyingToken": "Underlying ERC20 token"
								},
								"returns": {
									"_0": "ISuperToken the created supertoken"
								}
							},
							"createERC20Wrapper(address,uint8,string,string)": {
								"params": {
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token NOTE: - It assumes token provide the .decimals() function"
								}
							},
							"createERC20Wrapper(address,uint8,uint8,string,string)": {
								"params": {
									"name": "Super token name",
									"symbol": "Super token symbol",
									"underlyingDecimals": "Underlying token decimals",
									"underlyingToken": "Underlying ERC20 token",
									"upgradability": "Upgradability mode"
								},
								"returns": {
									"superToken": "The deployed and initialized wrapper super token"
								}
							},
							"getCanonicalERC20Wrapper(address)": {
								"details": "We return the address if it exists and the zero address otherwise",
								"params": {
									"_underlyingTokenAddress": "Underlying ERC20 token address"
								},
								"returns": {
									"superTokenAddress": "Super token address"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"initialize()": {
								"details": "Initialize the contract"
							},
							"initializeCustomSuperToken(address)": {
								"details": "Creates a new custom super token",
								"params": {
									"customSuperTokenProxy": "address of the custom supertoken proxy"
								}
							}
						},
						"title": "Super token factory interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"computeCanonicalERC20WrapperAddress(address)": "bab74c89",
							"createCanonicalERC20Wrapper(address)": "151188dc",
							"createERC20Wrapper(address,uint8,string,string)": "431f1481",
							"createERC20Wrapper(address,uint8,uint8,string,string)": "a6d0c534",
							"getCanonicalERC20Wrapper(address)": "eff0a89d",
							"getHost()": "20bc4425",
							"getSuperTokenLogic()": "9470a5b2",
							"initialize()": "8129fc1c",
							"initializeCustomSuperToken(address)": "d412d344"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_UNINITIALIZED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SUPER_TOKEN_FACTORY_ZERO_ADDRESS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CustomSuperTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SuperTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"tokenLogic\",\"type\":\"address\"}],\"name\":\"SuperTokenLogicCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"computeCanonicalERC20WrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDeployed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20WithTokenInfo\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"name\":\"createCanonicalERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20WithTokenInfo\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals\",\"type\":\"uint8\"},{\"internalType\":\"enum ISuperTokenFactory.Upgradability\",\"name\":\"upgradability\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC20Wrapper\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingTokenAddress\",\"type\":\"address\"}],\"name\":\"getCanonicalERC20Wrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenLogic\",\"outputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customSuperTokenProxy\",\"type\":\"address\"}],\"name\":\"initializeCustomSuperToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"CustomSuperTokenCreated(address)\":{\"details\":\"Custom super token created event\",\"params\":{\"token\":\"Newly created custom super token address\"}},\"SuperTokenCreated(address)\":{\"details\":\"Super token created event\",\"params\":{\"token\":\"Newly created super token address\"}},\"SuperTokenLogicCreated(address)\":{\"details\":\"Super token logic created event\",\"params\":{\"tokenLogic\":\"Token logic address\"}}},\"kind\":\"dev\",\"methods\":{\"computeCanonicalERC20WrapperAddress(address)\":{\"details\":\"We return from our canonical list if it already exists, otherwise we compute itnote that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\",\"params\":{\"_underlyingToken\":\"Underlying ERC20 token address\"},\"returns\":{\"isDeployed\":\"whether the super token is deployed AND set in the canonical mapping\",\"superTokenAddress\":\"Super token address\"}},\"createCanonicalERC20Wrapper(address)\":{\"details\":\"salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\",\"params\":{\"_underlyingToken\":\"Underlying ERC20 token\"},\"returns\":{\"_0\":\"ISuperToken the created supertoken\"}},\"createERC20Wrapper(address,uint8,string,string)\":{\"params\":{\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token NOTE: - It assumes token provide the .decimals() function\"}},\"createERC20Wrapper(address,uint8,uint8,string,string)\":{\"params\":{\"name\":\"Super token name\",\"symbol\":\"Super token symbol\",\"underlyingDecimals\":\"Underlying token decimals\",\"underlyingToken\":\"Underlying ERC20 token\",\"upgradability\":\"Upgradability mode\"},\"returns\":{\"superToken\":\"The deployed and initialized wrapper super token\"}},\"getCanonicalERC20Wrapper(address)\":{\"details\":\"We return the address if it exists and the zero address otherwise\",\"params\":{\"_underlyingTokenAddress\":\"Underlying ERC20 token address\"},\"returns\":{\"superTokenAddress\":\"Super token address\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"initialize()\":{\"details\":\"Initialize the contract\"},\"initializeCustomSuperToken(address)\":{\"details\":\"Creates a new custom super token\",\"params\":{\"customSuperTokenProxy\":\"address of the custom supertoken proxy\"}}},\"title\":\"Super token factory interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeCanonicalERC20WrapperAddress(address)\":{\"notice\":\"Computes/Retrieves wrapper super token address given the underlying token address\"},\"createCanonicalERC20Wrapper(address)\":{\"notice\":\"Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\"},\"createERC20Wrapper(address,uint8,string,string)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token with extra token info\"},\"createERC20Wrapper(address,uint8,uint8,string,string)\":{\"notice\":\"Create new super token wrapper for the underlying ERC20 token\"},\"getCanonicalERC20Wrapper(address)\":{\"notice\":\"Gets the canonical ERC20 wrapper super token address given the underlying token address\"},\"getSuperTokenLogic()\":{\"notice\":\"Get the canonical super token logic.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":\"ISuperTokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"computeCanonicalERC20WrapperAddress(address)": {
								"notice": "Computes/Retrieves wrapper super token address given the underlying token address"
							},
							"createCanonicalERC20Wrapper(address)": {
								"notice": "Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists"
							},
							"createERC20Wrapper(address,uint8,string,string)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token with extra token info"
							},
							"createERC20Wrapper(address,uint8,uint8,string,string)": {
								"notice": "Create new super token wrapper for the underlying ERC20 token"
							},
							"getCanonicalERC20Wrapper(address)": {
								"notice": "Gets the canonical ERC20 wrapper super token address given the underlying token address"
							},
							"getSuperTokenLogic()": {
								"notice": "Get the canonical super token logic."
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
				"ISuperfluid": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_code",
									"type": "uint256"
								}
							],
							"name": "APP_RULE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_AGREEMENT_ALREADY_REGISTERED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_AGREEMENT_IS_NOT_REGISTERED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_INVALID_CONFIG_WORD",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_MAX_256_AGREEMENTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_MUST_BE_CONTRACT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NEED_MORE_GAS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NON_UPGRADEABLE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NOT_A_SUPER_APP",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_NO_APP_REGISTRATION_PERMISSIONS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_ONLY_GOVERNANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_RECEIVER_IS_NOT_SUPER_APP",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SENDER_IS_NOT_SUPER_APP",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SUPER_APP_ALREADY_REGISTERED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_SUPER_APP_IS_JAILED",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_UNAUTHORIZED_SUPER_APP_FACTORY",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "code",
									"type": "address"
								}
							],
							"name": "AgreementClassRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "code",
									"type": "address"
								}
							],
							"name": "AgreementClassUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "AppRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "contract ISuperfluidGovernance",
									"name": "oldGov",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "contract ISuperfluidGovernance",
									"name": "newGov",
									"type": "address"
								}
							],
							"name": "GovernanceReplaced",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "reason",
									"type": "uint256"
								}
							],
							"name": "Jail",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "contract ISuperTokenFactory",
									"name": "newFactory",
									"type": "address"
								}
							],
							"name": "SuperTokenFactoryUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "code",
									"type": "address"
								}
							],
							"name": "SuperTokenLogicUpdated",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bitmap",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "addToAgreementClassesBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "newBitmap",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "targetApp",
									"type": "address"
								}
							],
							"name": "allowCompositeApp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "int256",
									"name": "appCreditUsedDelta",
									"type": "int256"
								}
							],
							"name": "appCallbackPop",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "appCreditGranted",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "appCreditUsed",
									"type": "int256"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "appCreditToken",
									"type": "address"
								}
							],
							"name": "appCallbackPush",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "operationType",
											"type": "uint32"
										},
										{
											"internalType": "address",
											"name": "target",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										}
									],
									"internalType": "struct ISuperfluid.Operation[]",
									"name": "operations",
									"type": "tuple[]"
								}
							],
							"name": "batchCall",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "callAgreement",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "returnedData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAgreementWithContext",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "returnedData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								}
							],
							"name": "callAppAction",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "returnedData",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAppActionWithContext",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bool",
									"name": "isTermination",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAppAfterCallback",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bool",
									"name": "isTermination",
									"type": "bool"
								},
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "callAppBeforeCallback",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "cbdata",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "int256",
									"name": "appCreditUsedMore",
									"type": "int256"
								}
							],
							"name": "ctxUseCredit",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "decodeCtx",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint8",
											"name": "appCallbackLevel",
											"type": "uint8"
										},
										{
											"internalType": "uint8",
											"name": "callType",
											"type": "uint8"
										},
										{
											"internalType": "uint256",
											"name": "timestamp",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "msgSender",
											"type": "address"
										},
										{
											"internalType": "bytes4",
											"name": "agreementSelector",
											"type": "bytes4"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										},
										{
											"internalType": "uint256",
											"name": "appCreditGranted",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "appCreditWantedDeprecated",
											"type": "uint256"
										},
										{
											"internalType": "int256",
											"name": "appCreditUsed",
											"type": "int256"
										},
										{
											"internalType": "address",
											"name": "appAddress",
											"type": "address"
										},
										{
											"internalType": "contract ISuperfluidToken",
											"name": "appCreditToken",
											"type": "address"
										}
									],
									"internalType": "struct ISuperfluid.Context",
									"name": "context",
									"type": "tuple"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint32",
											"name": "operationType",
											"type": "uint32"
										},
										{
											"internalType": "address",
											"name": "target",
											"type": "address"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										}
									],
									"internalType": "struct ISuperfluid.Operation[]",
									"name": "operations",
									"type": "tuple[]"
								}
							],
							"name": "forwardBatchCall",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "getAgreementClass",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "getAppCallbackLevel",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "appCallbackLevel",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "getAppManifest",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSuperApp",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "isJailed",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "noopMask",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getGovernance",
							"outputs": [
								{
									"internalType": "contract ISuperfluidGovernance",
									"name": "governance",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getNow",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenFactory",
							"outputs": [
								{
									"internalType": "contract ISuperTokenFactory",
									"name": "factory",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSuperTokenFactoryLogic",
							"outputs": [
								{
									"internalType": "address",
									"name": "logic",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClass",
									"type": "address"
								}
							],
							"name": "isAgreementClassListed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "yes",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "isAgreementTypeListed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "yes",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "isApp",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								}
							],
							"name": "isAppJailed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isJail",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "contract ISuperApp",
									"name": "targetApp",
									"type": "address"
								}
							],
							"name": "isCompositeAppAllowed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isAppAllowed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								}
							],
							"name": "isCtxValid",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "ctx",
									"type": "bytes"
								},
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "reason",
									"type": "uint256"
								}
							],
							"name": "jailApp",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "newCtx",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bitmap",
									"type": "uint256"
								}
							],
							"name": "mapAgreementClasses",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "agreementClasses",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClassLogic",
									"type": "address"
								}
							],
							"name": "registerAgreementClass",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "configWord",
									"type": "uint256"
								}
							],
							"name": "registerApp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperApp",
									"name": "app",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "configWord",
									"type": "uint256"
								}
							],
							"name": "registerAppByFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "configWord",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "registrationKey",
									"type": "string"
								}
							],
							"name": "registerAppWithKey",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bitmap",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "agreementType",
									"type": "bytes32"
								}
							],
							"name": "removeFromAgreementClassesBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "newBitmap",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluidGovernance",
									"name": "newGov",
									"type": "address"
								}
							],
							"name": "replaceGovernance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperAgreement",
									"name": "agreementClassLogic",
									"type": "address"
								}
							],
							"name": "updateAgreementClass",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperTokenFactory",
									"name": "newFactory",
									"type": "address"
								}
							],
							"name": "updateSuperTokenFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperToken",
									"name": "token",
									"type": "address"
								}
							],
							"name": "updateSuperTokenLogic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementClassRegistered(bytes32,address)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"agreementType": "The agreement type registered",
									"code": "Address of the new agreement"
								}
							},
							"AgreementClassUpdated(bytes32,address)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"agreementType": "The agreement type updated",
									"code": "Address of the new agreement"
								}
							},
							"AppRegistered(address)": {
								"details": "App registered event",
								"params": {
									"app": "Address of jailed app"
								}
							},
							"GovernanceReplaced(address,address)": {
								"details": "Governance replaced event",
								"params": {
									"newGov": "Address of the new governance contract",
									"oldGov": "Address of the old governance contract"
								}
							},
							"Jail(address,uint256)": {
								"details": "Jail event for the app",
								"params": {
									"app": "Address of jailed app",
									"reason": "Reason the app is jailed (see Definitions.sol for the full list)"
								}
							},
							"SuperTokenFactoryUpdated(address)": {
								"details": "SuperToken factory updated event",
								"params": {
									"newFactory": "Address of the new factory"
								}
							},
							"SuperTokenLogicUpdated(address,address)": {
								"details": "SuperToken logic updated event",
								"params": {
									"code": "Address of the new SuperToken logic"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addToAgreementClassesBitmap(uint256,bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"bitmap": "Agreement class bitmap"
								}
							},
							"allowCompositeApp(address)": {
								"details": "Whitelist the target app for app composition for the source app (msg.sender)",
								"params": {
									"targetApp": "The target super app address"
								}
							},
							"appCallbackPop(bytes,int256)": {
								"custom:security": "- Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory. - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.",
								"details": "(For agreements) Pop from the current app callback stack",
								"params": {
									"appCreditUsedDelta": "App credit used by the app.",
									"ctx": "The ctx that was pushed before the callback stack."
								},
								"returns": {
									"newCtx": "                 The current context of the transaction."
								}
							},
							"appCallbackPush(bytes,address,uint256,int256,address)": {
								"details": "(For agreements) Create a new callback stack",
								"params": {
									"app": "The super app.",
									"appCreditGranted": "App credit granted so far.",
									"appCreditUsed": "App credit used so far.",
									"ctx": "The current ctx, it will be validated."
								},
								"returns": {
									"newCtx": "                 The current context of the transaction."
								}
							},
							"batchCall((uint32,address,bytes)[])": {
								"details": "Batch call function",
								"params": {
									"operations": "Array of batch operations"
								}
							},
							"callAgreement(address,bytes,bytes)": {
								"details": "Call agreement function",
								"params": {
									"agreementClass": "The agreement address you are calling",
									"callData": "The contextual call data with placeholder ctx",
									"userData": "Extra user data being sent to the super app callbacks"
								}
							},
							"callAppAction(address,bytes)": {
								"custom:note": "See \"Contextless Call Proxies\" above for more about contextual call data.",
								"details": "Main use case is calling app action in a batch call via the host",
								"params": {
									"callData": "The contextual call data"
								}
							},
							"callAppAfterCallback(address,bytes,bool,bytes)": {
								"details": "(For agreements) Call the app after callback",
								"params": {
									"app": "The super app.",
									"callData": "The call data sending to the super app.",
									"ctx": "Current ctx, it will be validated.",
									"isTermination": "Is it a termination callback?"
								},
								"returns": {
									"newCtx": "           The current context of the transaction."
								}
							},
							"callAppBeforeCallback(address,bytes,bool,bytes)": {
								"details": "(For agreements) StaticCall the app before callback",
								"params": {
									"app": "The super app.",
									"callData": "The call data sending to the super app.",
									"ctx": "Current ctx, it will be validated.",
									"isTermination": "Is it a termination callback?"
								},
								"returns": {
									"cbdata": "           Data returned from the callback."
								}
							},
							"ctxUseCredit(bytes,int256)": {
								"details": "(For agreements) Use app credit.",
								"params": {
									"appCreditUsedMore": "See app credit for more details.",
									"ctx": "The current ctx, it will be validated."
								},
								"returns": {
									"newCtx": "                  The current context of the transaction."
								}
							},
							"forwardBatchCall((uint32,address,bytes)[])": {
								"details": "Batch call function for trusted forwarders (EIP-2771)",
								"params": {
									"operations": "Array of batch operations"
								}
							},
							"getAgreementClass(bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
							},
							"getAppCallbackLevel(address)": {
								"details": "Query app callbacklevel",
								"params": {
									"app": "Super app address"
								}
							},
							"getAppManifest(address)": {
								"details": "Get the manifest of the super app",
								"params": {
									"app": "Super app address"
								}
							},
							"getGovernance()": {
								"details": "Get the current governance address of the Superfluid host"
							},
							"getSuperTokenFactory()": {
								"details": "Get the super token factory",
								"returns": {
									"factory": "The factory"
								}
							},
							"getSuperTokenFactoryLogic()": {
								"details": "Get the super token factory logic (applicable to upgradable deployment)",
								"returns": {
									"logic": "The factory logic"
								}
							},
							"isAgreementClassListed(address)": {
								"details": "Check if the agreement class is whitelisted"
							},
							"isAgreementTypeListed(bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
							},
							"isApp(address)": {
								"details": "Query if the app is registered",
								"params": {
									"app": "Super app address"
								}
							},
							"isAppJailed(address)": {
								"details": "Query if the app has been jailed",
								"params": {
									"app": "Super app address"
								}
							},
							"isCompositeAppAllowed(address,address)": {
								"details": "Query if source app is allowed to call the target app as downstream app",
								"params": {
									"app": "Super app address",
									"targetApp": "The target super app address"
								}
							},
							"jailApp(bytes,address,uint256)": {
								"details": "(For agreements) Jail the app.",
								"params": {
									"app": "The super app.",
									"reason": "Jail reason code."
								},
								"returns": {
									"newCtx": "                 The current context of the transaction."
								}
							},
							"mapAgreementClasses(uint256)": {
								"details": "Map list of the agreement classes using a bitmap",
								"params": {
									"bitmap": "Agreement class bitmap"
								}
							},
							"registerAgreementClass(address)": {
								"custom:modifiers": " - onlyGovernance",
								"details": "Register a new agreement class to the system",
								"params": {
									"agreementClassLogic": "Initial agreement class code"
								}
							},
							"registerApp(uint256)": {
								"custom:deprecated": "you should use `registerAppWithKey` or `registerAppByFactory` instead, because app registration is currently governance permissioned on mainnets.",
								"details": "Message sender (must be a contract) declares itself as a super app.",
								"params": {
									"configWord": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`"
								}
							},
							"registerAppByFactory(address,uint256)": {
								"details": "Message sender (must be a contract) declares app as a super app",
								"params": {
									"configWord": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`"
								}
							},
							"registerAppWithKey(uint256,string)": {
								"details": "Message sender declares itself as a super app.",
								"params": {
									"configWord": "The super app manifest configuration, flags are defined in `SuperAppDefinitions`",
									"registrationKey": "The registration key issued by the governance, needed to register on a mainnet."
								}
							},
							"removeFromAgreementClassesBitmap(uint256,bytes32)": {
								"details": "agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"",
								"params": {
									"bitmap": "Agreement class bitmap"
								}
							},
							"replaceGovernance(address)": {
								"details": "Replace the current governance with a new one"
							},
							"updateAgreementClass(address)": {
								"custom:modifiers": "  - onlyGovernance",
								"details": "Update code of an agreement class",
								"params": {
									"agreementClassLogic": "New code for the agreement class"
								}
							},
							"updateSuperTokenFactory(address)": {
								"details": "Update super token factory",
								"params": {
									"newFactory": "New factory logic"
								}
							},
							"updateSuperTokenLogic(address)": {
								"details": "Refer to ISuperTokenFactory.Upgradability for expected behaviours"
							}
						},
						"title": "Host interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addToAgreementClassesBitmap(uint256,bytes32)": "bced3ddc",
							"allowCompositeApp(address)": "57121e0c",
							"appCallbackPop(bytes,int256)": "989b0c3e",
							"appCallbackPush(bytes,address,uint256,int256,address)": "768fabb0",
							"batchCall((uint32,address,bytes)[])": "6ad3ca7d",
							"callAgreement(address,bytes,bytes)": "39255d5b",
							"callAgreementWithContext(address,bytes,bytes,bytes)": "4329d293",
							"callAppAction(address,bytes)": "1e855cf3",
							"callAppActionWithContext(address,bytes,bytes)": "ba48b5f8",
							"callAppAfterCallback(address,bytes,bool,bytes)": "1e6d0a84",
							"callAppBeforeCallback(address,bytes,bool,bytes)": "74041e02",
							"ctxUseCredit(bytes,int256)": "59a29141",
							"decodeCtx(bytes)": "3f6c923a",
							"forwardBatchCall((uint32,address,bytes)[])": "670e77e3",
							"getAgreementClass(bytes32)": "b6d200de",
							"getAppCallbackLevel(address)": "9378fa13",
							"getAppManifest(address)": "f9f522f4",
							"getGovernance()": "289b3c0d",
							"getNow()": "bbe4fd50",
							"getSuperTokenFactory()": "731aed6e",
							"getSuperTokenFactoryLogic()": "f2e55caf",
							"isAgreementClassListed(address)": "8ca48484",
							"isAgreementTypeListed(bytes32)": "e8dccb7d",
							"isApp(address)": "3ca3ad4e",
							"isAppJailed(address)": "6b4f3335",
							"isCompositeAppAllowed(address,address)": "bb84cfa1",
							"isCtxValid(bytes)": "bf428734",
							"jailApp(bytes,address,uint256)": "b724211e",
							"mapAgreementClasses(uint256)": "c56a069d",
							"registerAgreementClass(address)": "15a024e1",
							"registerApp(uint256)": "ad3915c8",
							"registerAppByFactory(address,uint256)": "f3733052",
							"registerAppWithKey(uint256,string)": "bd1c448b",
							"removeFromAgreementClassesBitmap(uint256,bytes32)": "a5dbbbcd",
							"replaceGovernance(address)": "7283100c",
							"updateAgreementClass(address)": "06cecba8",
							"updateSuperTokenFactory(address)": "54fbc493",
							"updateSuperTokenLogic(address)": "787afde7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"APP_RULE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_AGREEMENT_ALREADY_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_AGREEMENT_IS_NOT_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_INVALID_CONFIG_WORD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_MAX_256_AGREEMENTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_MUST_BE_CONTRACT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NEED_MORE_GAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NON_UPGRADEABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NOT_A_SUPER_APP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_NO_APP_REGISTRATION_PERMISSIONS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_ONLY_GOVERNANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_RECEIVER_IS_NOT_SUPER_APP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SENDER_IS_NOT_SUPER_APP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SUPER_APP_ALREADY_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_SUPER_APP_IS_JAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_UNAUTHORIZED_SUPER_APP_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"AgreementClassRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"AgreementClassUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"AppRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"oldGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"GovernanceReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"Jail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISuperTokenFactory\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"SuperTokenFactoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"}],\"name\":\"SuperTokenLogicUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"addToAgreementClassesBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"targetApp\",\"type\":\"address\"}],\"name\":\"allowCompositeApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsedDelta\",\"type\":\"int256\"}],\"name\":\"appCallbackPop\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"appCreditGranted\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsed\",\"type\":\"int256\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"appCreditToken\",\"type\":\"address\"}],\"name\":\"appCallbackPush\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"operationType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ISuperfluid.Operation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"batchCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"callAgreement\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnedData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAgreementWithContext\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"returnedData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"callAppAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnedData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAppActionWithContext\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isTermination\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAppAfterCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isTermination\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"callAppBeforeCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"cbdata\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsedMore\",\"type\":\"int256\"}],\"name\":\"ctxUseCredit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"decodeCtx\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"appCallbackLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"agreementSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"appCreditGranted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"appCreditWantedDeprecated\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"appCreditUsed\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"appAddress\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"appCreditToken\",\"type\":\"address\"}],\"internalType\":\"struct ISuperfluid.Context\",\"name\":\"context\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"operationType\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ISuperfluid.Operation[]\",\"name\":\"operations\",\"type\":\"tuple[]\"}],\"name\":\"forwardBatchCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"getAgreementClass\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"getAppCallbackLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"appCallbackLevel\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"getAppManifest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSuperApp\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isJailed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"noopMask\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"governance\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenFactory\",\"outputs\":[{\"internalType\":\"contract ISuperTokenFactory\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperTokenFactoryLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClass\",\"type\":\"address\"}],\"name\":\"isAgreementClassListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"yes\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"isAgreementTypeListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"yes\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"isApp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"isAppJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isJail\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"contract ISuperApp\",\"name\":\"targetApp\",\"type\":\"address\"}],\"name\":\"isCompositeAppAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAppAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"}],\"name\":\"isCtxValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ctx\",\"type\":\"bytes\"},{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reason\",\"type\":\"uint256\"}],\"name\":\"jailApp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newCtx\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"}],\"name\":\"mapAgreementClasses\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"agreementClasses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClassLogic\",\"type\":\"address\"}],\"name\":\"registerAgreementClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configWord\",\"type\":\"uint256\"}],\"name\":\"registerApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperApp\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configWord\",\"type\":\"uint256\"}],\"name\":\"registerAppByFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"configWord\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"registrationKey\",\"type\":\"string\"}],\"name\":\"registerAppWithKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitmap\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"agreementType\",\"type\":\"bytes32\"}],\"name\":\"removeFromAgreementClassesBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBitmap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidGovernance\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"replaceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperAgreement\",\"name\":\"agreementClassLogic\",\"type\":\"address\"}],\"name\":\"updateAgreementClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperTokenFactory\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"updateSuperTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperToken\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateSuperTokenLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementClassRegistered(bytes32,address)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"agreementType\":\"The agreement type registered\",\"code\":\"Address of the new agreement\"}},\"AgreementClassUpdated(bytes32,address)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"agreementType\":\"The agreement type updated\",\"code\":\"Address of the new agreement\"}},\"AppRegistered(address)\":{\"details\":\"App registered event\",\"params\":{\"app\":\"Address of jailed app\"}},\"GovernanceReplaced(address,address)\":{\"details\":\"Governance replaced event\",\"params\":{\"newGov\":\"Address of the new governance contract\",\"oldGov\":\"Address of the old governance contract\"}},\"Jail(address,uint256)\":{\"details\":\"Jail event for the app\",\"params\":{\"app\":\"Address of jailed app\",\"reason\":\"Reason the app is jailed (see Definitions.sol for the full list)\"}},\"SuperTokenFactoryUpdated(address)\":{\"details\":\"SuperToken factory updated event\",\"params\":{\"newFactory\":\"Address of the new factory\"}},\"SuperTokenLogicUpdated(address,address)\":{\"details\":\"SuperToken logic updated event\",\"params\":{\"code\":\"Address of the new SuperToken logic\"}}},\"kind\":\"dev\",\"methods\":{\"addToAgreementClassesBitmap(uint256,bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"bitmap\":\"Agreement class bitmap\"}},\"allowCompositeApp(address)\":{\"details\":\"Whitelist the target app for app composition for the source app (msg.sender)\",\"params\":{\"targetApp\":\"The target super app address\"}},\"appCallbackPop(bytes,int256)\":{\"custom:security\":\"- Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory. - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly.\",\"details\":\"(For agreements) Pop from the current app callback stack\",\"params\":{\"appCreditUsedDelta\":\"App credit used by the app.\",\"ctx\":\"The ctx that was pushed before the callback stack.\"},\"returns\":{\"newCtx\":\"                 The current context of the transaction.\"}},\"appCallbackPush(bytes,address,uint256,int256,address)\":{\"details\":\"(For agreements) Create a new callback stack\",\"params\":{\"app\":\"The super app.\",\"appCreditGranted\":\"App credit granted so far.\",\"appCreditUsed\":\"App credit used so far.\",\"ctx\":\"The current ctx, it will be validated.\"},\"returns\":{\"newCtx\":\"                 The current context of the transaction.\"}},\"batchCall((uint32,address,bytes)[])\":{\"details\":\"Batch call function\",\"params\":{\"operations\":\"Array of batch operations\"}},\"callAgreement(address,bytes,bytes)\":{\"details\":\"Call agreement function\",\"params\":{\"agreementClass\":\"The agreement address you are calling\",\"callData\":\"The contextual call data with placeholder ctx\",\"userData\":\"Extra user data being sent to the super app callbacks\"}},\"callAppAction(address,bytes)\":{\"custom:note\":\"See \\\"Contextless Call Proxies\\\" above for more about contextual call data.\",\"details\":\"Main use case is calling app action in a batch call via the host\",\"params\":{\"callData\":\"The contextual call data\"}},\"callAppAfterCallback(address,bytes,bool,bytes)\":{\"details\":\"(For agreements) Call the app after callback\",\"params\":{\"app\":\"The super app.\",\"callData\":\"The call data sending to the super app.\",\"ctx\":\"Current ctx, it will be validated.\",\"isTermination\":\"Is it a termination callback?\"},\"returns\":{\"newCtx\":\"           The current context of the transaction.\"}},\"callAppBeforeCallback(address,bytes,bool,bytes)\":{\"details\":\"(For agreements) StaticCall the app before callback\",\"params\":{\"app\":\"The super app.\",\"callData\":\"The call data sending to the super app.\",\"ctx\":\"Current ctx, it will be validated.\",\"isTermination\":\"Is it a termination callback?\"},\"returns\":{\"cbdata\":\"           Data returned from the callback.\"}},\"ctxUseCredit(bytes,int256)\":{\"details\":\"(For agreements) Use app credit.\",\"params\":{\"appCreditUsedMore\":\"See app credit for more details.\",\"ctx\":\"The current ctx, it will be validated.\"},\"returns\":{\"newCtx\":\"                  The current context of the transaction.\"}},\"forwardBatchCall((uint32,address,bytes)[])\":{\"details\":\"Batch call function for trusted forwarders (EIP-2771)\",\"params\":{\"operations\":\"Array of batch operations\"}},\"getAgreementClass(bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\"},\"getAppCallbackLevel(address)\":{\"details\":\"Query app callbacklevel\",\"params\":{\"app\":\"Super app address\"}},\"getAppManifest(address)\":{\"details\":\"Get the manifest of the super app\",\"params\":{\"app\":\"Super app address\"}},\"getGovernance()\":{\"details\":\"Get the current governance address of the Superfluid host\"},\"getSuperTokenFactory()\":{\"details\":\"Get the super token factory\",\"returns\":{\"factory\":\"The factory\"}},\"getSuperTokenFactoryLogic()\":{\"details\":\"Get the super token factory logic (applicable to upgradable deployment)\",\"returns\":{\"logic\":\"The factory logic\"}},\"isAgreementClassListed(address)\":{\"details\":\"Check if the agreement class is whitelisted\"},\"isAgreementTypeListed(bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\"},\"isApp(address)\":{\"details\":\"Query if the app is registered\",\"params\":{\"app\":\"Super app address\"}},\"isAppJailed(address)\":{\"details\":\"Query if the app has been jailed\",\"params\":{\"app\":\"Super app address\"}},\"isCompositeAppAllowed(address,address)\":{\"details\":\"Query if source app is allowed to call the target app as downstream app\",\"params\":{\"app\":\"Super app address\",\"targetApp\":\"The target super app address\"}},\"jailApp(bytes,address,uint256)\":{\"details\":\"(For agreements) Jail the app.\",\"params\":{\"app\":\"The super app.\",\"reason\":\"Jail reason code.\"},\"returns\":{\"newCtx\":\"                 The current context of the transaction.\"}},\"mapAgreementClasses(uint256)\":{\"details\":\"Map list of the agreement classes using a bitmap\",\"params\":{\"bitmap\":\"Agreement class bitmap\"}},\"registerAgreementClass(address)\":{\"custom:modifiers\":\" - onlyGovernance\",\"details\":\"Register a new agreement class to the system\",\"params\":{\"agreementClassLogic\":\"Initial agreement class code\"}},\"registerApp(uint256)\":{\"custom:deprecated\":\"you should use `registerAppWithKey` or `registerAppByFactory` instead, because app registration is currently governance permissioned on mainnets.\",\"details\":\"Message sender (must be a contract) declares itself as a super app.\",\"params\":{\"configWord\":\"The super app manifest configuration, flags are defined in `SuperAppDefinitions`\"}},\"registerAppByFactory(address,uint256)\":{\"details\":\"Message sender (must be a contract) declares app as a super app\",\"params\":{\"configWord\":\"The super app manifest configuration, flags are defined in `SuperAppDefinitions`\"}},\"registerAppWithKey(uint256,string)\":{\"details\":\"Message sender declares itself as a super app.\",\"params\":{\"configWord\":\"The super app manifest configuration, flags are defined in `SuperAppDefinitions`\",\"registrationKey\":\"The registration key issued by the governance, needed to register on a mainnet.\"}},\"removeFromAgreementClassesBitmap(uint256,bytes32)\":{\"details\":\"agreementType is the keccak256 hash of: \\\"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\\\"\",\"params\":{\"bitmap\":\"Agreement class bitmap\"}},\"replaceGovernance(address)\":{\"details\":\"Replace the current governance with a new one\"},\"updateAgreementClass(address)\":{\"custom:modifiers\":\"  - onlyGovernance\",\"details\":\"Update code of an agreement class\",\"params\":{\"agreementClassLogic\":\"New code for the agreement class\"}},\"updateSuperTokenFactory(address)\":{\"details\":\"Update super token factory\",\"params\":{\"newFactory\":\"New factory logic\"}},\"updateSuperTokenLogic(address)\":{\"details\":\"Refer to ISuperTokenFactory.Upgradability for expected behaviours\"}},\"title\":\"Host interface\",\"version\":1},\"userdoc\":{\"events\":{\"AgreementClassRegistered(bytes32,address)\":{\"notice\":\"Agreement class registered event\"},\"AgreementClassUpdated(bytes32,address)\":{\"notice\":\"Agreement class updated event\"}},\"kind\":\"user\",\"methods\":{\"addToAgreementClassesBitmap(uint256,bytes32)\":{\"notice\":\"Create a new bitmask by adding a agreement class to it\"},\"callAppAction(address,bytes)\":{\"notice\":\"Call app action\"},\"getAgreementClass(bytes32)\":{\"notice\":\"Get agreement class\"},\"isAgreementTypeListed(bytes32)\":{\"notice\":\"Check if the agreement type is whitelisted\"},\"registerAppByFactory(address,uint256)\":{\"notice\":\"On mainnet deployments, only factory contracts pre-authorized by governance can use this. See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\"},\"registerAppWithKey(uint256,string)\":{\"notice\":\"See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide On testnets or in dev environment, a placeholder (e.g. empty string) can be used. While the message sender must be the super app itself, the transaction sender (tx.origin) must be the deployer account the registration key was issued for.\"},\"removeFromAgreementClassesBitmap(uint256,bytes32)\":{\"notice\":\"Create a new bitmask by removing a agreement class from it\"},\"updateSuperTokenLogic(address)\":{\"notice\":\"Update the super token logic to the latest\"}},\"notice\":\"This is the central contract of the system where super agreement, super app and super token features are connected. The Superfluid host contract is also the entry point for the protocol users, where batch call and meta transaction are provided for UX improvements.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":\"ISuperfluid\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"AgreementClassRegistered(bytes32,address)": {
								"notice": "Agreement class registered event"
							},
							"AgreementClassUpdated(bytes32,address)": {
								"notice": "Agreement class updated event"
							}
						},
						"kind": "user",
						"methods": {
							"addToAgreementClassesBitmap(uint256,bytes32)": {
								"notice": "Create a new bitmask by adding a agreement class to it"
							},
							"callAppAction(address,bytes)": {
								"notice": "Call app action"
							},
							"getAgreementClass(bytes32)": {
								"notice": "Get agreement class"
							},
							"isAgreementTypeListed(bytes32)": {
								"notice": "Check if the agreement type is whitelisted"
							},
							"registerAppByFactory(address,uint256)": {
								"notice": "On mainnet deployments, only factory contracts pre-authorized by governance can use this. See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide"
							},
							"registerAppWithKey(uint256,string)": {
								"notice": "See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide On testnets or in dev environment, a placeholder (e.g. empty string) can be used. While the message sender must be the super app itself, the transaction sender (tx.origin) must be the deployer account the registration key was issued for."
							},
							"removeFromAgreementClassesBitmap(uint256,bytes32)": {
								"notice": "Create a new bitmask by removing a agreement class from it"
							},
							"updateSuperTokenLogic(address)": {
								"notice": "Update the super token logic to the latest"
							}
						},
						"notice": "This is the central contract of the system where super agreement, super app and super token features are connected. The Superfluid host contract is also the entry point for the protocol users, where batch call and meta transaction are provided for UX improvements.",
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
				"ISuperfluidGovernance": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_GOV_ARRAYS_NOT_SAME_LENGTH",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_GOV_MUST_BE_CONTRACT",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperToken[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "batchUpdateSuperTokenLogic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "clearConfig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "getConfigAsAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "value",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								}
							],
							"name": "getConfigAsUint256",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								}
							],
							"name": "registerAgreementClass",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "newGov",
									"type": "address"
								}
							],
							"name": "replaceGovernance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "value",
									"type": "address"
								}
							],
							"name": "setConfig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "contract ISuperfluidToken",
									"name": "superToken",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "key",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "setConfig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISuperfluid",
									"name": "host",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "hostNewLogic",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "agreementClassNewLogics",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "superTokenFactoryNewLogic",
									"type": "address"
								}
							],
							"name": "updateContracts",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"kind": "dev",
						"methods": {
							"batchUpdateSuperTokenLogic(address,address[])": {
								"details": "Update supertoken logic contract to the latest that is managed by the super token factory"
							},
							"clearConfig(address,address,bytes32)": {
								"details": "Clear configuration"
							},
							"getConfigAsAddress(address,address,bytes32)": {
								"details": "Get configuration as address value"
							},
							"getConfigAsUint256(address,address,bytes32)": {
								"details": "Get configuration as uint256 value"
							},
							"registerAgreementClass(address,address)": {
								"details": "Register a new agreement class"
							},
							"replaceGovernance(address,address)": {
								"details": "Replace the current governance with a new governance"
							},
							"setConfig(address,address,bytes32,address)": {
								"details": "Set configuration as address value"
							},
							"setConfig(address,address,bytes32,uint256)": {
								"details": "Set configuration as uint256 value"
							},
							"updateContracts(address,address,address[],address)": {
								"custom:note": " - Because they might have inter-dependencies, it is good to have one single function to update them all",
								"details": "Update logics of the contracts"
							}
						},
						"title": "Superfluid governance interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"batchUpdateSuperTokenLogic(address,address[])": "42148deb",
							"clearConfig(address,address,bytes32)": "640b6cc9",
							"getConfigAsAddress(address,address,bytes32)": "8369a0f1",
							"getConfigAsUint256(address,address,bytes32)": "80f70cba",
							"registerAgreementClass(address,address)": "cadf8f85",
							"replaceGovernance(address,address)": "44864b25",
							"setConfig(address,address,bytes32,address)": "78707cb8",
							"setConfig(address,address,bytes32,uint256)": "f79a8e63",
							"updateContracts(address,address,address[],address)": "427942a4"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_GOV_ARRAYS_NOT_SAME_LENGTH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_GOV_MUST_BE_CONTRACT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperToken[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"batchUpdateSuperTokenLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"clearConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfigAsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getConfigAsUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"}],\"name\":\"registerAgreementClass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGov\",\"type\":\"address\"}],\"name\":\"replaceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hostNewLogic\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"agreementClassNewLogics\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"superTokenFactoryNewLogic\",\"type\":\"address\"}],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"kind\":\"dev\",\"methods\":{\"batchUpdateSuperTokenLogic(address,address[])\":{\"details\":\"Update supertoken logic contract to the latest that is managed by the super token factory\"},\"clearConfig(address,address,bytes32)\":{\"details\":\"Clear configuration\"},\"getConfigAsAddress(address,address,bytes32)\":{\"details\":\"Get configuration as address value\"},\"getConfigAsUint256(address,address,bytes32)\":{\"details\":\"Get configuration as uint256 value\"},\"registerAgreementClass(address,address)\":{\"details\":\"Register a new agreement class\"},\"replaceGovernance(address,address)\":{\"details\":\"Replace the current governance with a new governance\"},\"setConfig(address,address,bytes32,address)\":{\"details\":\"Set configuration as address value\"},\"setConfig(address,address,bytes32,uint256)\":{\"details\":\"Set configuration as uint256 value\"},\"updateContracts(address,address,address[],address)\":{\"custom:note\":\" - Because they might have inter-dependencies, it is good to have one single function to update them all\",\"details\":\"Update logics of the contracts\"}},\"title\":\"Superfluid governance interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":\"ISuperfluidGovernance\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ISuperfluidToken": {
					"abi": [
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_HOST",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "rewardAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "penaltyAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "AgreementLiquidatedBy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "rewardAmountReceiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								}
							],
							"name": "AgreementLiquidatedV2",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								}
							],
							"name": "AgreementStateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "AgreementTerminated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "AgreementUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "bailoutAccount",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bailoutAmount",
									"type": "uint256"
								}
							],
							"name": "Bailout",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "createAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getAccountActiveAgreements",
							"outputs": [
								{
									"internalType": "contract ISuperAgreement[]",
									"name": "activeAgreements",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementData",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "agreementClass",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "getAgreementStateSlot",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getHost",
							"outputs": [
								{
									"internalType": "address",
									"name": "host",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountCritical",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountCriticalNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isCritical",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "isAccountSolvent",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isAccountSolventNow",
							"outputs": [
								{
									"internalType": "bool",
									"name": "isSolvent",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "liquidationTypeData",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "liquidatorAccount",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "useDefaultRewardAccount",
									"type": "bool"
								},
								{
									"internalType": "address",
									"name": "targetAccount",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "rewardAmount",
									"type": "uint256"
								},
								{
									"internalType": "int256",
									"name": "targetAccountBalanceDelta",
									"type": "int256"
								}
							],
							"name": "makeLiquidationPayoutsV2",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "realtimeBalanceOf",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "realtimeBalanceOfNow",
							"outputs": [
								{
									"internalType": "int256",
									"name": "availableBalance",
									"type": "int256"
								},
								{
									"internalType": "uint256",
									"name": "deposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "owedDeposit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "settleBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "dataLength",
									"type": "uint256"
								}
							],
							"name": "terminateAgreement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32[]",
									"name": "data",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "slotId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "slotData",
									"type": "bytes32[]"
								}
							],
							"name": "updateAgreementStateSlot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"events": {
							"AgreementCreated(address,bytes32,bytes32[])": {
								"details": "Agreement created event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"AgreementLiquidated(address,bytes32,address,address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAccount": "Account that collect the reward",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"custom:note": " Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.",
								"details": "Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"bailoutAmount": "Amount of liquidation bailouot",
									"bondAccount": "Account that collect the reward or bailout accounts",
									"id": "Agreement ID",
									"liquidatorAccount": "Account of the agent that performed the liquidation.",
									"penaltyAccount": "Account of the agreement to be penalized",
									"rewardAmount": "Amount of liquidation reward"
								}
							},
							"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)": {
								"custom:note": " Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount",
								"details": "Agreement liquidation event v2 (including agent account)",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID",
									"liquidationTypeData": "The encoded liquidation type data including the version (how to decode)",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the reward recipient account balance should change by",
									"rewardAmountReceiver": "Account that collects the reward or bails out insolvent accounts",
									"targetAccount": "Account of the stream sender",
									"targetAccountBalanceDelta": "The amount the sender account balance should change by"
								}
							},
							"AgreementStateUpdated(address,address,uint256)": {
								"details": "Agreement account state updated event",
								"params": {
									"account": "Account updated",
									"agreementClass": "Contract address of the agreement",
									"slotId": "slot id of the agreement state"
								}
							},
							"AgreementTerminated(address,bytes32)": {
								"details": "Agreement terminated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								}
							},
							"AgreementUpdated(address,bytes32,bytes32[])": {
								"details": "Agreement updated event",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"Bailout(address,uint256)": {
								"custom:deprecated": "Use AgreementLiquidatedV2 instead",
								"details": "System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)",
								"params": {
									"bailoutAccount": "Account that bailout the penalty account",
									"bailoutAmount": "Amount of account bailout"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createAgreement(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"getAccountActiveAgreements(address)": {
								"details": "An active agreement is one that has state for the account",
								"params": {
									"account": "Account to query"
								},
								"returns": {
									"activeAgreements": "List of accounts that have non-zero states for the account"
								}
							},
							"getAgreementData(address,bytes32,uint256)": {
								"details": "Get data of the agreement",
								"params": {
									"agreementClass": "Contract address of the agreement",
									"id": "Agreement ID"
								},
								"returns": {
									"data": "Data of the agreement"
								}
							},
							"getAgreementStateSlot(address,address,uint256,uint256)": {
								"details": "Get data of the slot of the state of an agreement",
								"params": {
									"account": "Account to query",
									"agreementClass": "Contract address of the agreement",
									"dataLength": "length of the state data",
									"slotId": "slot id of the state"
								}
							},
							"getHost()": {
								"details": "Get superfluid host contract address"
							},
							"isAccountCritical(address,uint256)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is critical (should use future)"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountCriticalNow(address)": {
								"details": "A critical account is when availableBalance < 0",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isCritical": "Whether the account is critical"
								}
							},
							"isAccountSolvent(address,uint256)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check",
									"timestamp": "The time we'd like to check if the account is solvent (should use future)"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"isAccountSolventNow(address)": {
								"details": "An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance",
								"params": {
									"account": "The account to check"
								},
								"returns": {
									"isSolvent": "True if the account is solvent, false otherwise"
								}
							},
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"custom:note": " - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount",
								"details": "Make liquidation payouts (v2)",
								"params": {
									"id": "Agreement ID",
									"liquidationTypeData": "Data regarding the version of the liquidation schema and the type",
									"liquidatorAccount": "Address of the executor of the liquidation",
									"rewardAmount": "The amount the rewarded account will receive",
									"targetAccount": "Account to be liquidated",
									"targetAccountBalanceDelta": "The delta amount the target account balance should change by",
									"useDefaultRewardAccount": "Whether or not the default reward account receives the rewardAmount"
								}
							},
							"realtimeBalanceOf(address,uint256)": {
								"details": "Calculate the real balance of a user, taking in consideration all agreements of the account",
								"params": {
									"account": "for the query",
									"timestamp": "Time of balance"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"realtimeBalanceOfNow(address)": {
								"details": "realtimeBalanceOf with timestamp equals to block timestamp",
								"params": {
									"account": "for the query"
								},
								"returns": {
									"availableBalance": "Real-time balance",
									"deposit": "Account deposit",
									"owedDeposit": "Account owed Deposit"
								}
							},
							"settleBalance(address,int256)": {
								"custom:modifiers": "  - onlyAgreement",
								"details": "The agreement needs to make sure that the balance delta is balanced afterwards",
								"params": {
									"account": "Account to query.",
									"delta": "Amount of balance delta to be settled"
								}
							},
							"terminateAgreement(bytes32,uint256)": {
								"details": "Close the agreement",
								"params": {
									"id": "Agreement ID"
								}
							},
							"updateAgreementData(bytes32,bytes32[])": {
								"details": "Create a new agreement",
								"params": {
									"data": "Agreement data",
									"id": "Agreement ID"
								}
							},
							"updateAgreementStateSlot(address,uint256,bytes32[])": {
								"custom:note": " - To clear the storage out, provide zero-ed array of intended length",
								"details": "Update agreement state slot",
								"params": {
									"account": "Account to be updated"
								}
							}
						},
						"title": "Superfluid token interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"createAgreement(bytes32,bytes32[])": "12a6a3f8",
							"getAccountActiveAgreements(address)": "386fa221",
							"getAgreementData(address,bytes32,uint256)": "6c2d9f2f",
							"getAgreementStateSlot(address,address,uint256,uint256)": "4b61cc33",
							"getHost()": "20bc4425",
							"isAccountCritical(address,uint256)": "d9d078d6",
							"isAccountCriticalNow(address)": "79359f6f",
							"isAccountSolvent(address,uint256)": "b84cdd4a",
							"isAccountSolventNow(address)": "bb0d196e",
							"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)": "1863e809",
							"realtimeBalanceOf(address,uint256)": "eb3537cc",
							"realtimeBalanceOfNow(address)": "2ec8eec7",
							"settleBalance(address,int256)": "cf97256d",
							"terminateAgreement(bytes32,uint256)": "27048397",
							"updateAgreementData(bytes32,bytes32[])": "a1b2bf8b",
							"updateAgreementStateSlot(address,uint256,bytes32[])": "090c415e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_ALREADY_EXISTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_AGREEMENT_DOES_NOT_EXIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_BURN_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_MOVE_INSUFFICIENT_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_HOST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SF_TOKEN_ONLY_LISTED_AGREEMENT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"penaltyAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"AgreementLiquidatedBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardAmountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"}],\"name\":\"AgreementLiquidatedV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"}],\"name\":\"AgreementStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AgreementTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"AgreementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bailoutAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bailoutAmount\",\"type\":\"uint256\"}],\"name\":\"Bailout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"createAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountActiveAgreements\",\"outputs\":[{\"internalType\":\"contract ISuperAgreement[]\",\"name\":\"activeAgreements\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementData\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agreementClass\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"getAgreementStateSlot\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountCritical\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountCriticalNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCritical\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isAccountSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAccountSolventNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSolvent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"liquidationTypeData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"liquidatorAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useDefaultRewardAccount\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"targetAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"targetAccountBalanceDelta\",\"type\":\"int256\"}],\"name\":\"makeLiquidationPayoutsV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"realtimeBalanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"realtimeBalanceOfNow\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"availableBalance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owedDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"settleBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dataLength\",\"type\":\"uint256\"}],\"name\":\"terminateAgreement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"slotData\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgreementStateSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"events\":{\"AgreementCreated(address,bytes32,bytes32[])\":{\"details\":\"Agreement created event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"AgreementLiquidated(address,bytes32,address,address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAccount\":\"Account that collect the reward\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedBy(address,address,bytes32,address,address,uint256,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"custom:note\":\" Reward account rule: - if bailout is equal to 0, then   - the bondAccount will get the rewardAmount,   - the penaltyAccount will pay for the rewardAmount. - if bailout is larger than 0, then   - the liquidatorAccount will get the rewardAmouont,   - the bondAccount will pay for both the rewardAmount and bailoutAmount,   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\",\"details\":\"Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"bailoutAmount\":\"Amount of liquidation bailouot\",\"bondAccount\":\"Account that collect the reward or bailout accounts\",\"id\":\"Agreement ID\",\"liquidatorAccount\":\"Account of the agent that performed the liquidation.\",\"penaltyAccount\":\"Account of the agreement to be penalized\",\"rewardAmount\":\"Amount of liquidation reward\"}},\"AgreementLiquidatedV2(address,bytes32,address,address,address,uint256,int256,bytes)\":{\"custom:note\":\" Reward account rule: - if the agreement is liquidated during the PIC period   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount   - the targetAccount will pay for the rewardAmount - if the agreement is liquidated after the PIC period AND the targetAccount is solvent   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)   - the targetAccount will pay for the rewardAmount - if the targetAccount is insolvent   - the liquidatorAccount will get the rewardAmount (single deposit)   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount   - the targetAccount will receive the bailoutAmount\",\"details\":\"Agreement liquidation event v2 (including agent account)\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\",\"liquidationTypeData\":\"The encoded liquidation type data including the version (how to decode)\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the reward recipient account balance should change by\",\"rewardAmountReceiver\":\"Account that collects the reward or bails out insolvent accounts\",\"targetAccount\":\"Account of the stream sender\",\"targetAccountBalanceDelta\":\"The amount the sender account balance should change by\"}},\"AgreementStateUpdated(address,address,uint256)\":{\"details\":\"Agreement account state updated event\",\"params\":{\"account\":\"Account updated\",\"agreementClass\":\"Contract address of the agreement\",\"slotId\":\"slot id of the agreement state\"}},\"AgreementTerminated(address,bytes32)\":{\"details\":\"Agreement terminated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"}},\"AgreementUpdated(address,bytes32,bytes32[])\":{\"details\":\"Agreement updated event\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"Bailout(address,uint256)\":{\"custom:deprecated\":\"Use AgreementLiquidatedV2 instead\",\"details\":\"System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\",\"params\":{\"bailoutAccount\":\"Account that bailout the penalty account\",\"bailoutAmount\":\"Amount of account bailout\"}}},\"kind\":\"dev\",\"methods\":{\"createAgreement(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"getAccountActiveAgreements(address)\":{\"details\":\"An active agreement is one that has state for the account\",\"params\":{\"account\":\"Account to query\"},\"returns\":{\"activeAgreements\":\"List of accounts that have non-zero states for the account\"}},\"getAgreementData(address,bytes32,uint256)\":{\"details\":\"Get data of the agreement\",\"params\":{\"agreementClass\":\"Contract address of the agreement\",\"id\":\"Agreement ID\"},\"returns\":{\"data\":\"Data of the agreement\"}},\"getAgreementStateSlot(address,address,uint256,uint256)\":{\"details\":\"Get data of the slot of the state of an agreement\",\"params\":{\"account\":\"Account to query\",\"agreementClass\":\"Contract address of the agreement\",\"dataLength\":\"length of the state data\",\"slotId\":\"slot id of the state\"}},\"getHost()\":{\"details\":\"Get superfluid host contract address\"},\"isAccountCritical(address,uint256)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is critical (should use future)\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountCriticalNow(address)\":{\"details\":\"A critical account is when availableBalance < 0\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isCritical\":\"Whether the account is critical\"}},\"isAccountSolvent(address,uint256)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\",\"timestamp\":\"The time we'd like to check if the account is solvent (should use future)\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"isAccountSolventNow(address)\":{\"details\":\"An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\",\"params\":{\"account\":\"The account to check\"},\"returns\":{\"isSolvent\":\"True if the account is solvent, false otherwise\"}},\"makeLiquidationPayoutsV2(bytes32,bytes,address,bool,address,uint256,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"custom:note\":\" - If a bailout is required (bailoutAmount > 0)   - the actual reward (single deposit) goes to the executor,   - while the reward account becomes the bailout account   - total bailout include: bailout amount + reward amount   - the targetAccount will be bailed out - If a bailout is not required   - the targetAccount will pay the rewardAmount   - the liquidator (reward account in PIC period) will receive the rewardAmount\",\"details\":\"Make liquidation payouts (v2)\",\"params\":{\"id\":\"Agreement ID\",\"liquidationTypeData\":\"Data regarding the version of the liquidation schema and the type\",\"liquidatorAccount\":\"Address of the executor of the liquidation\",\"rewardAmount\":\"The amount the rewarded account will receive\",\"targetAccount\":\"Account to be liquidated\",\"targetAccountBalanceDelta\":\"The delta amount the target account balance should change by\",\"useDefaultRewardAccount\":\"Whether or not the default reward account receives the rewardAmount\"}},\"realtimeBalanceOf(address,uint256)\":{\"details\":\"Calculate the real balance of a user, taking in consideration all agreements of the account\",\"params\":{\"account\":\"for the query\",\"timestamp\":\"Time of balance\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"realtimeBalanceOfNow(address)\":{\"details\":\"realtimeBalanceOf with timestamp equals to block timestamp\",\"params\":{\"account\":\"for the query\"},\"returns\":{\"availableBalance\":\"Real-time balance\",\"deposit\":\"Account deposit\",\"owedDeposit\":\"Account owed Deposit\"}},\"settleBalance(address,int256)\":{\"custom:modifiers\":\"  - onlyAgreement\",\"details\":\"The agreement needs to make sure that the balance delta is balanced afterwards\",\"params\":{\"account\":\"Account to query.\",\"delta\":\"Amount of balance delta to be settled\"}},\"terminateAgreement(bytes32,uint256)\":{\"details\":\"Close the agreement\",\"params\":{\"id\":\"Agreement ID\"}},\"updateAgreementData(bytes32,bytes32[])\":{\"details\":\"Create a new agreement\",\"params\":{\"data\":\"Agreement data\",\"id\":\"Agreement ID\"}},\"updateAgreementStateSlot(address,uint256,bytes32[])\":{\"custom:note\":\" - To clear the storage out, provide zero-ed array of intended length\",\"details\":\"Update agreement state slot\",\"params\":{\"account\":\"Account to be updated\"}}},\"title\":\"Superfluid token interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAccountActiveAgreements(address)\":{\"notice\":\"Get a list of agreements that is active for the account\"},\"isAccountCritical(address,uint256)\":{\"notice\":\"Check if account is critical\"},\"isAccountCriticalNow(address)\":{\"notice\":\"Check if account is critical now (current host.getNow())\"},\"isAccountSolvent(address,uint256)\":{\"notice\":\"Check if account is solvent\"},\"isAccountSolventNow(address)\":{\"notice\":\"Check if account is solvent now\"},\"realtimeBalanceOfNow(address)\":{\"notice\":\"Calculate the realtime balance given the current host.getNow() value\"},\"settleBalance(address,int256)\":{\"notice\":\"Settle balance from an account by the agreement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":\"ISuperfluidToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getAccountActiveAgreements(address)": {
								"notice": "Get a list of agreements that is active for the account"
							},
							"isAccountCritical(address,uint256)": {
								"notice": "Check if account is critical"
							},
							"isAccountCriticalNow(address)": {
								"notice": "Check if account is critical now (current host.getNow())"
							},
							"isAccountSolvent(address,uint256)": {
								"notice": "Check if account is solvent"
							},
							"isAccountSolventNow(address)": {
								"notice": "Check if account is solvent now"
							},
							"realtimeBalanceOfNow(address)": {
								"notice": "Calculate the realtime balance given the current host.getNow() value"
							},
							"settleBalance(address,int256)": {
								"notice": "Settle balance from an account by the agreement"
							}
						},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
				"ERC20WithTokenInfo": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"details": "Using abstract contract instead of interfaces because old solidity      does not support interface inheriting other interfaces solhint-disable-next-line no-empty-blocks",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"title": "ERC20 token with token info interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"Using abstract contract instead of interfaces because old solidity      does not support interface inheriting other interfaces solhint-disable-next-line no-empty-blocks\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"ERC20 token with token info interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":\"ERC20WithTokenInfo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
				"TokenInfo": {
					"abi": [
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Superfluid",
						"details": "ERC20 standard interface does not specify these functions, but      often the token implementations have them.",
						"kind": "dev",
						"methods": {
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							}
						},
						"title": "ERC20 token info interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"ERC20 standard interface does not specify these functions, but      often the token implementations have them.\",\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"}},\"title\":\"ERC20 token info interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":\"TokenInfo\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"mosaic/Mosaic.sol": {
				"Mosaic": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "profileId",
									"type": "string"
								}
							],
							"name": "isSubscribed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "subscribed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"mosaic/Mosaic.sol\":789:2367  contract Mosaic {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"mosaic/Mosaic.sol\":789:2367  contract Mosaic {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x2251a8a9\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"mosaic/Mosaic.sol\":811:1436  function isSubscribed(address sender, address receiver, string memory profileId) public view returns (bool subscribed) {... */\n    tag_3:\n      tag_4\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_5\n      swap2\n      swap1\n      tag_6\n      jump\t// in\n    tag_5:\n      tag_7\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_8\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_7:\n        /* \"mosaic/Mosaic.sol\":913:928  bool subscribed */\n      0x00\n        /* \"mosaic/Mosaic.sol\":969:985  IERC721 _lensHub */\n      dup1\n        /* \"mosaic/Mosaic.sol\":996:1038  0x60Ae865ee4C725cd04353b5AAb364553f56ceF82 */\n      0x60ae865ee4c725cd04353b5aab364553f56cef82\n        /* \"mosaic/Mosaic.sol\":969:1039  IERC721 _lensHub = IERC721(0x60Ae865ee4C725cd04353b5AAb364553f56ceF82) */\n      swap1\n      pop\n        /* \"mosaic/Mosaic.sol\":1049:1078  IConstantFlowAgreementV1 _cfa */\n      0x00\n        /* \"mosaic/Mosaic.sol\":1106:1148  0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873 */\n      0x49e565ed1bdc17f3d220f72df0857c26fa83f873\n        /* \"mosaic/Mosaic.sol\":1049:1149  IConstantFlowAgreementV1 _cfa = IConstantFlowAgreementV1(0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873) */\n      swap1\n      pop\n        /* \"mosaic/Mosaic.sol\":1162:1176  int96 flowRate */\n      0x00\n        /* \"mosaic/Mosaic.sol\":1183:1187  _cfa */\n      dup2\n        /* \"mosaic/Mosaic.sol\":1183:1195  _cfa.getFlow */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xe6a1e888\n        /* \"mosaic/Mosaic.sol\":1213:1255  0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f */\n      0x5d8b4c2554aeb7e86f387b4d6c00ac33499ed01f\n        /* \"mosaic/Mosaic.sol\":1258:1264  sender */\n      dup10\n        /* \"mosaic/Mosaic.sol\":1266:1274  receiver */\n      dup10\n        /* \"mosaic/Mosaic.sol\":1183:1275  _cfa.getFlow(ISuperfluidToken(0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f), sender, receiver) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_11\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_12\n      jump\t// in\n    tag_11:\n      0x80\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_14\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_14:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n        /* \"mosaic/Mosaic.sol\":1159:1275  (, int96 flowRate, ,) = _cfa.getFlow(ISuperfluidToken(0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f), sender, receiver) */\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"mosaic/Mosaic.sol\":1285:1299  address _owner */\n      0x00\n        /* \"mosaic/Mosaic.sol\":1302:1310  _lensHub */\n      dup4\n        /* \"mosaic/Mosaic.sol\":1302:1318  _lensHub.ownerOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x6352211e\n        /* \"mosaic/Mosaic.sol\":1319:1338  parseInt(profileId) */\n      tag_17\n        /* \"mosaic/Mosaic.sol\":1328:1337  profileId */\n      dup9\n        /* \"mosaic/Mosaic.sol\":1319:1327  parseInt */\n      tag_18\n        /* \"mosaic/Mosaic.sol\":1319:1338  parseInt(profileId) */\n      jump\t// in\n    tag_17:\n        /* \"mosaic/Mosaic.sol\":1302:1339  _lensHub.ownerOf(parseInt(profileId)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_19\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_22\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_22:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n        /* \"mosaic/Mosaic.sol\":1285:1339  address _owner = _lensHub.ownerOf(parseInt(profileId)) */\n      swap1\n      pop\n        /* \"mosaic/Mosaic.sol\":1365:1366  1 */\n      0x01\n        /* \"mosaic/Mosaic.sol\":1354:1362  flowRate */\n      dup3\n        /* \"mosaic/Mosaic.sol\":1354:1366  flowRate > 1 */\n      0x0b\n      signextend\n      sgt\n        /* \"mosaic/Mosaic.sol\":1354:1386  flowRate > 1 || sender == _owner */\n      dup1\n      tag_25\n      jumpi\n      pop\n        /* \"mosaic/Mosaic.sol\":1380:1386  _owner */\n      dup1\n        /* \"mosaic/Mosaic.sol\":1370:1386  sender == _owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"mosaic/Mosaic.sol\":1370:1376  sender */\n      dup9\n        /* \"mosaic/Mosaic.sol\":1370:1386  sender == _owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"mosaic/Mosaic.sol\":1354:1386  flowRate > 1 || sender == _owner */\n    tag_25:\n        /* \"mosaic/Mosaic.sol\":1350:1430  if (flowRate > 1 || sender == _owner) {... */\n      iszero\n      tag_26\n      jumpi\n        /* \"mosaic/Mosaic.sol\":1415:1419  true */\n      0x01\n        /* \"mosaic/Mosaic.sol\":1402:1419  subscribed = true */\n      swap5\n      pop\n        /* \"mosaic/Mosaic.sol\":1350:1430  if (flowRate > 1 || sender == _owner) {... */\n    tag_26:\n        /* \"mosaic/Mosaic.sol\":930:1436  {... */\n      pop\n      pop\n      pop\n      pop\n        /* \"mosaic/Mosaic.sol\":811:1436  function isSubscribed(address sender, address receiver, string memory profileId) public view returns (bool subscribed) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"mosaic/Mosaic.sol\":1442:1560  function parseInt(string memory _a) internal pure returns (uint256 _parsedInt) {... */\n    tag_18:\n        /* \"mosaic/Mosaic.sol\":1501:1519  uint256 _parsedInt */\n      0x00\n        /* \"mosaic/Mosaic.sol\":1538:1553  parseInt(_a, 0) */\n      tag_28\n        /* \"mosaic/Mosaic.sol\":1547:1549  _a */\n      dup3\n        /* \"mosaic/Mosaic.sol\":1551:1552  0 */\n      0x00\n        /* \"mosaic/Mosaic.sol\":1538:1546  parseInt */\n      tag_29\n        /* \"mosaic/Mosaic.sol\":1538:1553  parseInt(_a, 0) */\n      jump\t// in\n    tag_28:\n        /* \"mosaic/Mosaic.sol\":1531:1553  return parseInt(_a, 0) */\n      swap1\n      pop\n        /* \"mosaic/Mosaic.sol\":1442:1560  function parseInt(string memory _a) internal pure returns (uint256 _parsedInt) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"mosaic/Mosaic.sol\":1566:2365  function parseInt(string memory _a, uint _b) internal pure returns (uint256 _parsedInt) {... */\n    tag_29:\n        /* \"mosaic/Mosaic.sol\":1634:1652  uint256 _parsedInt */\n      0x00\n        /* \"mosaic/Mosaic.sol\":1664:1684  bytes memory bresult */\n      dup1\n        /* \"mosaic/Mosaic.sol\":1693:1695  _a */\n      dup4\n        /* \"mosaic/Mosaic.sol\":1664:1696  bytes memory bresult = bytes(_a) */\n      swap1\n      pop\n        /* \"mosaic/Mosaic.sol\":1706:1715  uint mint */\n      0x00\n        /* \"mosaic/Mosaic.sol\":1729:1742  bool decimals */\n      dup1\n        /* \"mosaic/Mosaic.sol\":1765:1771  uint i */\n      0x00\n        /* \"mosaic/Mosaic.sol\":1760:2276  for (uint i = 0; i < bresult.length; i++) {... */\n    tag_31:\n        /* \"mosaic/Mosaic.sol\":1781:1788  bresult */\n      dup4\n        /* \"mosaic/Mosaic.sol\":1781:1795  bresult.length */\n      mload\n        /* \"mosaic/Mosaic.sol\":1777:1778  i */\n      dup2\n        /* \"mosaic/Mosaic.sol\":1777:1795  i < bresult.length */\n      lt\n        /* \"mosaic/Mosaic.sol\":1760:2276  for (uint i = 0; i < bresult.length; i++) {... */\n      iszero\n      tag_32\n      jumpi\n        /* \"mosaic/Mosaic.sol\":1848:1850  48 */\n      0x30\n        /* \"mosaic/Mosaic.sol\":1832:1839  bresult */\n      dup5\n        /* \"mosaic/Mosaic.sol\":1840:1841  i */\n      dup3\n        /* \"mosaic/Mosaic.sol\":1832:1842  bresult[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_34\n      jumpi\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n    tag_34:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"mosaic/Mosaic.sol\":1826:1843  uint8(bresult[i]) */\n      0xf8\n      shr\n        /* \"mosaic/Mosaic.sol\":1821:1844  uint(uint8(bresult[i])) */\n      0xff\n      and\n        /* \"mosaic/Mosaic.sol\":1821:1850  uint(uint8(bresult[i])) >= 48 */\n      lt\n      iszero\n        /* \"mosaic/Mosaic.sol\":1820:1886  (uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57) */\n      dup1\n      iszero\n      tag_37\n      jumpi\n      pop\n        /* \"mosaic/Mosaic.sol\":1883:1885  57 */\n      0x39\n        /* \"mosaic/Mosaic.sol\":1867:1874  bresult */\n      dup5\n        /* \"mosaic/Mosaic.sol\":1875:1876  i */\n      dup3\n        /* \"mosaic/Mosaic.sol\":1867:1877  bresult[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_38\n      jumpi\n      tag_39\n      tag_36\n      jump\t// in\n    tag_39:\n    tag_38:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"mosaic/Mosaic.sol\":1861:1878  uint8(bresult[i]) */\n      0xf8\n      shr\n        /* \"mosaic/Mosaic.sol\":1856:1879  uint(uint8(bresult[i])) */\n      0xff\n      and\n        /* \"mosaic/Mosaic.sol\":1856:1885  uint(uint8(bresult[i])) <= 57 */\n      gt\n      iszero\n        /* \"mosaic/Mosaic.sol\":1820:1886  (uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57) */\n    tag_37:\n        /* \"mosaic/Mosaic.sol\":1816:2266  if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {... */\n      iszero\n      tag_40\n      jumpi\n        /* \"mosaic/Mosaic.sol\":1910:1918  decimals */\n      dup2\n        /* \"mosaic/Mosaic.sol\":1906:2081  if (decimals) {... */\n      iszero\n      tag_41\n      jumpi\n        /* \"mosaic/Mosaic.sol\":1951:1952  0 */\n      0x00\n        /* \"mosaic/Mosaic.sol\":1945:1947  _b */\n      dup7\n        /* \"mosaic/Mosaic.sol\":1945:1952  _b == 0 */\n      eq\n        /* \"mosaic/Mosaic.sol\":1941:2063  if (_b == 0) {... */\n      iszero\n      tag_42\n      jumpi\n        /* \"mosaic/Mosaic.sol\":1979:1984  break */\n      jump(tag_32)\n        /* \"mosaic/Mosaic.sol\":1941:2063  if (_b == 0) {... */\n    tag_42:\n        /* \"mosaic/Mosaic.sol\":2037:2041  _b-- */\n      dup6\n      dup1\n      tag_44\n      swap1\n      tag_45\n      jump\t// in\n    tag_44:\n      swap7\n      pop\n      pop\n        /* \"mosaic/Mosaic.sol\":1906:2081  if (decimals) {... */\n    tag_41:\n        /* \"mosaic/Mosaic.sol\":2106:2108  10 */\n      0x0a\n        /* \"mosaic/Mosaic.sol\":2098:2108  mint *= 10 */\n      dup4\n      tag_46\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_46:\n      swap3\n      pop\n        /* \"mosaic/Mosaic.sol\":2160:2162  48 */\n      0x30\n        /* \"mosaic/Mosaic.sol\":2145:2152  bresult */\n      dup5\n        /* \"mosaic/Mosaic.sol\":2153:2154  i */\n      dup3\n        /* \"mosaic/Mosaic.sol\":2145:2155  bresult[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_48\n      jumpi\n      tag_49\n      tag_36\n      jump\t// in\n    tag_49:\n    tag_48:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"mosaic/Mosaic.sol\":2139:2156  uint8(bresult[i]) */\n      0xf8\n      shr\n        /* \"mosaic/Mosaic.sol\":2134:2157  uint(uint8(bresult[i])) */\n      0xff\n      and\n        /* \"mosaic/Mosaic.sol\":2134:2162  uint(uint8(bresult[i])) - 48 */\n      tag_50\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n        /* \"mosaic/Mosaic.sol\":2126:2162  mint += uint(uint8(bresult[i])) - 48 */\n      dup4\n      tag_52\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n    tag_52:\n      swap3\n      pop\n        /* \"mosaic/Mosaic.sol\":1816:2266  if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {... */\n      jump(tag_54)\n    tag_40:\n        /* \"mosaic/Mosaic.sol\":2214:2216  46 */\n      0x2e\n        /* \"mosaic/Mosaic.sol\":2198:2205  bresult */\n      dup5\n        /* \"mosaic/Mosaic.sol\":2206:2207  i */\n      dup3\n        /* \"mosaic/Mosaic.sol\":2198:2208  bresult[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_55\n      jumpi\n      tag_56\n      tag_36\n      jump\t// in\n    tag_56:\n    tag_55:\n      0x20\n      add\n      add\n      mload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"mosaic/Mosaic.sol\":2192:2209  uint8(bresult[i]) */\n      0xf8\n      shr\n        /* \"mosaic/Mosaic.sol\":2187:2210  uint(uint8(bresult[i])) */\n      0xff\n      and\n        /* \"mosaic/Mosaic.sol\":2187:2216  uint(uint8(bresult[i])) == 46 */\n      eq\n        /* \"mosaic/Mosaic.sol\":2183:2266  if (uint(uint8(bresult[i])) == 46) {... */\n      iszero\n      tag_57\n      jumpi\n        /* \"mosaic/Mosaic.sol\":2247:2251  true */\n      0x01\n        /* \"mosaic/Mosaic.sol\":2236:2251  decimals = true */\n      swap2\n      pop\n        /* \"mosaic/Mosaic.sol\":2183:2266  if (uint(uint8(bresult[i])) == 46) {... */\n    tag_57:\n        /* \"mosaic/Mosaic.sol\":1816:2266  if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {... */\n    tag_54:\n        /* \"mosaic/Mosaic.sol\":1797:1800  i++ */\n      dup1\n      dup1\n      tag_58\n      swap1\n      tag_59\n      jump\t// in\n    tag_58:\n      swap2\n      pop\n      pop\n        /* \"mosaic/Mosaic.sol\":1760:2276  for (uint i = 0; i < bresult.length; i++) {... */\n      jump(tag_31)\n    tag_32:\n      pop\n        /* \"mosaic/Mosaic.sol\":2294:2295  0 */\n      0x00\n        /* \"mosaic/Mosaic.sol\":2289:2291  _b */\n      dup6\n        /* \"mosaic/Mosaic.sol\":2289:2295  _b > 0 */\n      gt\n        /* \"mosaic/Mosaic.sol\":2285:2338  if (_b > 0) {... */\n      iszero\n      tag_60\n      jumpi\n        /* \"mosaic/Mosaic.sol\":2325:2327  _b */\n      dup5\n        /* \"mosaic/Mosaic.sol\":2319:2321  10 */\n      0x0a\n        /* \"mosaic/Mosaic.sol\":2319:2327  10 ** _b */\n      tag_61\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_61:\n        /* \"mosaic/Mosaic.sol\":2311:2327  mint *= 10 ** _b */\n      dup3\n      tag_63\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_63:\n      swap2\n      pop\n        /* \"mosaic/Mosaic.sol\":2285:2338  if (_b > 0) {... */\n    tag_60:\n        /* \"mosaic/Mosaic.sol\":2354:2358  mint */\n      dup2\n        /* \"mosaic/Mosaic.sol\":2347:2358  return mint */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"mosaic/Mosaic.sol\":1566:2365  function parseInt(string memory _a, uint _b) internal pure returns (uint256 _parsedInt) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:82   */\n    tag_64:\n        /* \"#utility.yul\":40:46   */\n      0x00\n        /* \"#utility.yul\":73:75   */\n      0x40\n        /* \"#utility.yul\":67:76   */\n      mload\n        /* \"#utility.yul\":57:76   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:82   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_65:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_66:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_67:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_68:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_107\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_67\n      jump\t// in\n    tag_107:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_69:\n        /* \"#utility.yul\":641:665   */\n      tag_109\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_68\n      jump\t// in\n    tag_109:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_110\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_110:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_70:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_112\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_69\n      jump\t// in\n    tag_112:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:958   */\n    tag_71:\n        /* \"#utility.yul\":950:951   */\n      0x00\n        /* \"#utility.yul\":947:948   */\n      dup1\n        /* \"#utility.yul\":940:952   */\n      revert\n        /* \"#utility.yul\":964:1081   */\n    tag_72:\n        /* \"#utility.yul\":1073:1074   */\n      0x00\n        /* \"#utility.yul\":1070:1071   */\n      dup1\n        /* \"#utility.yul\":1063:1075   */\n      revert\n        /* \"#utility.yul\":1087:1189   */\n    tag_73:\n        /* \"#utility.yul\":1128:1134   */\n      0x00\n        /* \"#utility.yul\":1179:1181   */\n      0x1f\n        /* \"#utility.yul\":1175:1182   */\n      not\n        /* \"#utility.yul\":1170:1172   */\n      0x1f\n        /* \"#utility.yul\":1163:1168   */\n      dup4\n        /* \"#utility.yul\":1159:1173   */\n      add\n        /* \"#utility.yul\":1155:1183   */\n      and\n        /* \"#utility.yul\":1145:1183   */\n      swap1\n      pop\n        /* \"#utility.yul\":1087:1189   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1195:1375   */\n    tag_74:\n        /* \"#utility.yul\":1243:1320   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":1240:1241   */\n      0x00\n        /* \"#utility.yul\":1233:1321   */\n      mstore\n        /* \"#utility.yul\":1340:1344   */\n      0x41\n        /* \"#utility.yul\":1337:1338   */\n      0x04\n        /* \"#utility.yul\":1330:1345   */\n      mstore\n        /* \"#utility.yul\":1364:1368   */\n      0x24\n        /* \"#utility.yul\":1361:1362   */\n      0x00\n        /* \"#utility.yul\":1354:1369   */\n      revert\n        /* \"#utility.yul\":1381:1662   */\n    tag_75:\n        /* \"#utility.yul\":1464:1491   */\n      tag_118\n        /* \"#utility.yul\":1486:1490   */\n      dup3\n        /* \"#utility.yul\":1464:1491   */\n      tag_73\n      jump\t// in\n    tag_118:\n        /* \"#utility.yul\":1456:1462   */\n      dup2\n        /* \"#utility.yul\":1452:1492   */\n      add\n        /* \"#utility.yul\":1594:1600   */\n      dup2\n        /* \"#utility.yul\":1582:1592   */\n      dup2\n        /* \"#utility.yul\":1579:1601   */\n      lt\n        /* \"#utility.yul\":1558:1576   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1546:1556   */\n      dup3\n        /* \"#utility.yul\":1543:1577   */\n      gt\n        /* \"#utility.yul\":1540:1602   */\n      or\n        /* \"#utility.yul\":1537:1625   */\n      iszero\n      tag_119\n      jumpi\n        /* \"#utility.yul\":1605:1623   */\n      tag_120\n      tag_74\n      jump\t// in\n    tag_120:\n        /* \"#utility.yul\":1537:1625   */\n    tag_119:\n        /* \"#utility.yul\":1645:1655   */\n      dup1\n        /* \"#utility.yul\":1641:1643   */\n      0x40\n        /* \"#utility.yul\":1634:1656   */\n      mstore\n        /* \"#utility.yul\":1424:1662   */\n      pop\n        /* \"#utility.yul\":1381:1662   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1668:1797   */\n    tag_76:\n        /* \"#utility.yul\":1702:1708   */\n      0x00\n        /* \"#utility.yul\":1729:1749   */\n      tag_122\n      tag_64\n      jump\t// in\n    tag_122:\n        /* \"#utility.yul\":1719:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1758:1791   */\n      tag_123\n        /* \"#utility.yul\":1786:1790   */\n      dup3\n        /* \"#utility.yul\":1778:1784   */\n      dup3\n        /* \"#utility.yul\":1758:1791   */\n      tag_75\n      jump\t// in\n    tag_123:\n        /* \"#utility.yul\":1668:1797   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1803:2111   */\n    tag_77:\n        /* \"#utility.yul\":1865:1869   */\n      0x00\n        /* \"#utility.yul\":1955:1973   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1947:1953   */\n      dup3\n        /* \"#utility.yul\":1944:1974   */\n      gt\n        /* \"#utility.yul\":1941:1997   */\n      iszero\n      tag_125\n      jumpi\n        /* \"#utility.yul\":1977:1995   */\n      tag_126\n      tag_74\n      jump\t// in\n    tag_126:\n        /* \"#utility.yul\":1941:1997   */\n    tag_125:\n        /* \"#utility.yul\":2015:2044   */\n      tag_127\n        /* \"#utility.yul\":2037:2043   */\n      dup3\n        /* \"#utility.yul\":2015:2044   */\n      tag_73\n      jump\t// in\n    tag_127:\n        /* \"#utility.yul\":2007:2044   */\n      swap1\n      pop\n        /* \"#utility.yul\":2099:2103   */\n      0x20\n        /* \"#utility.yul\":2093:2097   */\n      dup2\n        /* \"#utility.yul\":2089:2104   */\n      add\n        /* \"#utility.yul\":2081:2104   */\n      swap1\n      pop\n        /* \"#utility.yul\":1803:2111   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2117:2271   */\n    tag_78:\n        /* \"#utility.yul\":2201:2207   */\n      dup3\n        /* \"#utility.yul\":2196:2199   */\n      dup2\n        /* \"#utility.yul\":2191:2194   */\n      dup4\n        /* \"#utility.yul\":2178:2208   */\n      calldatacopy\n        /* \"#utility.yul\":2263:2264   */\n      0x00\n        /* \"#utility.yul\":2254:2260   */\n      dup4\n        /* \"#utility.yul\":2249:2252   */\n      dup4\n        /* \"#utility.yul\":2245:2261   */\n      add\n        /* \"#utility.yul\":2238:2265   */\n      mstore\n        /* \"#utility.yul\":2117:2271   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2277:2689   */\n    tag_79:\n        /* \"#utility.yul\":2355:2360   */\n      0x00\n        /* \"#utility.yul\":2380:2446   */\n      tag_130\n        /* \"#utility.yul\":2396:2445   */\n      tag_131\n        /* \"#utility.yul\":2438:2444   */\n      dup5\n        /* \"#utility.yul\":2396:2445   */\n      tag_77\n      jump\t// in\n    tag_131:\n        /* \"#utility.yul\":2380:2446   */\n      tag_76\n      jump\t// in\n    tag_130:\n        /* \"#utility.yul\":2371:2446   */\n      swap1\n      pop\n        /* \"#utility.yul\":2469:2475   */\n      dup3\n        /* \"#utility.yul\":2462:2467   */\n      dup2\n        /* \"#utility.yul\":2455:2476   */\n      mstore\n        /* \"#utility.yul\":2507:2511   */\n      0x20\n        /* \"#utility.yul\":2500:2505   */\n      dup2\n        /* \"#utility.yul\":2496:2512   */\n      add\n        /* \"#utility.yul\":2545:2548   */\n      dup5\n        /* \"#utility.yul\":2536:2542   */\n      dup5\n        /* \"#utility.yul\":2531:2534   */\n      dup5\n        /* \"#utility.yul\":2527:2543   */\n      add\n        /* \"#utility.yul\":2524:2549   */\n      gt\n        /* \"#utility.yul\":2521:2633   */\n      iszero\n      tag_132\n      jumpi\n        /* \"#utility.yul\":2552:2631   */\n      tag_133\n      tag_72\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":2521:2633   */\n    tag_132:\n        /* \"#utility.yul\":2642:2683   */\n      tag_134\n        /* \"#utility.yul\":2676:2682   */\n      dup5\n        /* \"#utility.yul\":2671:2674   */\n      dup3\n        /* \"#utility.yul\":2666:2669   */\n      dup6\n        /* \"#utility.yul\":2642:2683   */\n      tag_78\n      jump\t// in\n    tag_134:\n        /* \"#utility.yul\":2361:2689   */\n      pop\n        /* \"#utility.yul\":2277:2689   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2709:3049   */\n    tag_80:\n        /* \"#utility.yul\":2765:2770   */\n      0x00\n        /* \"#utility.yul\":2814:2817   */\n      dup3\n        /* \"#utility.yul\":2807:2811   */\n      0x1f\n        /* \"#utility.yul\":2799:2805   */\n      dup4\n        /* \"#utility.yul\":2795:2812   */\n      add\n        /* \"#utility.yul\":2791:2818   */\n      slt\n        /* \"#utility.yul\":2781:2903   */\n      tag_136\n      jumpi\n        /* \"#utility.yul\":2822:2901   */\n      tag_137\n      tag_71\n      jump\t// in\n    tag_137:\n        /* \"#utility.yul\":2781:2903   */\n    tag_136:\n        /* \"#utility.yul\":2939:2945   */\n      dup2\n        /* \"#utility.yul\":2926:2946   */\n      calldataload\n        /* \"#utility.yul\":2964:3043   */\n      tag_138\n        /* \"#utility.yul\":3039:3042   */\n      dup5\n        /* \"#utility.yul\":3031:3037   */\n      dup3\n        /* \"#utility.yul\":3024:3028   */\n      0x20\n        /* \"#utility.yul\":3016:3022   */\n      dup7\n        /* \"#utility.yul\":3012:3029   */\n      add\n        /* \"#utility.yul\":2964:3043   */\n      tag_79\n      jump\t// in\n    tag_138:\n        /* \"#utility.yul\":2955:3043   */\n      swap2\n      pop\n        /* \"#utility.yul\":2771:3049   */\n      pop\n        /* \"#utility.yul\":2709:3049   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3055:3854   */\n    tag_6:\n        /* \"#utility.yul\":3142:3148   */\n      0x00\n        /* \"#utility.yul\":3150:3156   */\n      dup1\n        /* \"#utility.yul\":3158:3164   */\n      0x00\n        /* \"#utility.yul\":3207:3209   */\n      0x60\n        /* \"#utility.yul\":3195:3204   */\n      dup5\n        /* \"#utility.yul\":3186:3193   */\n      dup7\n        /* \"#utility.yul\":3182:3205   */\n      sub\n        /* \"#utility.yul\":3178:3210   */\n      slt\n        /* \"#utility.yul\":3175:3294   */\n      iszero\n      tag_140\n      jumpi\n        /* \"#utility.yul\":3213:3292   */\n      tag_141\n      tag_65\n      jump\t// in\n    tag_141:\n        /* \"#utility.yul\":3175:3294   */\n    tag_140:\n        /* \"#utility.yul\":3333:3334   */\n      0x00\n        /* \"#utility.yul\":3358:3411   */\n      tag_142\n        /* \"#utility.yul\":3403:3410   */\n      dup7\n        /* \"#utility.yul\":3394:3400   */\n      dup3\n        /* \"#utility.yul\":3383:3392   */\n      dup8\n        /* \"#utility.yul\":3379:3401   */\n      add\n        /* \"#utility.yul\":3358:3411   */\n      tag_70\n      jump\t// in\n    tag_142:\n        /* \"#utility.yul\":3348:3411   */\n      swap4\n      pop\n        /* \"#utility.yul\":3304:3421   */\n      pop\n        /* \"#utility.yul\":3460:3462   */\n      0x20\n        /* \"#utility.yul\":3486:3539   */\n      tag_143\n        /* \"#utility.yul\":3531:3538   */\n      dup7\n        /* \"#utility.yul\":3522:3528   */\n      dup3\n        /* \"#utility.yul\":3511:3520   */\n      dup8\n        /* \"#utility.yul\":3507:3529   */\n      add\n        /* \"#utility.yul\":3486:3539   */\n      tag_70\n      jump\t// in\n    tag_143:\n        /* \"#utility.yul\":3476:3539   */\n      swap3\n      pop\n        /* \"#utility.yul\":3431:3549   */\n      pop\n        /* \"#utility.yul\":3616:3618   */\n      0x40\n        /* \"#utility.yul\":3605:3614   */\n      dup5\n        /* \"#utility.yul\":3601:3619   */\n      add\n        /* \"#utility.yul\":3588:3620   */\n      calldataload\n        /* \"#utility.yul\":3647:3665   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3639:3645   */\n      dup2\n        /* \"#utility.yul\":3636:3666   */\n      gt\n        /* \"#utility.yul\":3633:3750   */\n      iszero\n      tag_144\n      jumpi\n        /* \"#utility.yul\":3669:3748   */\n      tag_145\n      tag_66\n      jump\t// in\n    tag_145:\n        /* \"#utility.yul\":3633:3750   */\n    tag_144:\n        /* \"#utility.yul\":3774:3837   */\n      tag_146\n        /* \"#utility.yul\":3829:3836   */\n      dup7\n        /* \"#utility.yul\":3820:3826   */\n      dup3\n        /* \"#utility.yul\":3809:3818   */\n      dup8\n        /* \"#utility.yul\":3805:3827   */\n      add\n        /* \"#utility.yul\":3774:3837   */\n      tag_80\n      jump\t// in\n    tag_146:\n        /* \"#utility.yul\":3764:3837   */\n      swap2\n      pop\n        /* \"#utility.yul\":3559:3847   */\n      pop\n        /* \"#utility.yul\":3055:3854   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":3860:3950   */\n    tag_81:\n        /* \"#utility.yul\":3894:3901   */\n      0x00\n        /* \"#utility.yul\":3937:3942   */\n      dup2\n        /* \"#utility.yul\":3930:3943   */\n      iszero\n        /* \"#utility.yul\":3923:3944   */\n      iszero\n        /* \"#utility.yul\":3912:3944   */\n      swap1\n      pop\n        /* \"#utility.yul\":3860:3950   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3956:4065   */\n    tag_82:\n        /* \"#utility.yul\":4037:4058   */\n      tag_149\n        /* \"#utility.yul\":4052:4057   */\n      dup2\n        /* \"#utility.yul\":4037:4058   */\n      tag_81\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":4032:4035   */\n      dup3\n        /* \"#utility.yul\":4025:4059   */\n      mstore\n        /* \"#utility.yul\":3956:4065   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4071:4281   */\n    tag_9:\n        /* \"#utility.yul\":4158:4162   */\n      0x00\n        /* \"#utility.yul\":4196:4198   */\n      0x20\n        /* \"#utility.yul\":4185:4194   */\n      dup3\n        /* \"#utility.yul\":4181:4199   */\n      add\n        /* \"#utility.yul\":4173:4199   */\n      swap1\n      pop\n        /* \"#utility.yul\":4209:4274   */\n      tag_151\n        /* \"#utility.yul\":4271:4272   */\n      0x00\n        /* \"#utility.yul\":4260:4269   */\n      dup4\n        /* \"#utility.yul\":4256:4273   */\n      add\n        /* \"#utility.yul\":4247:4253   */\n      dup5\n        /* \"#utility.yul\":4209:4274   */\n      tag_82\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":4071:4281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4287:4347   */\n    tag_83:\n        /* \"#utility.yul\":4315:4318   */\n      0x00\n        /* \"#utility.yul\":4336:4341   */\n      dup2\n        /* \"#utility.yul\":4329:4341   */\n      swap1\n      pop\n        /* \"#utility.yul\":4287:4347   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4353:4495   */\n    tag_84:\n        /* \"#utility.yul\":4403:4412   */\n      0x00\n        /* \"#utility.yul\":4436:4489   */\n      tag_154\n        /* \"#utility.yul\":4454:4488   */\n      tag_155\n        /* \"#utility.yul\":4463:4487   */\n      tag_156\n        /* \"#utility.yul\":4481:4486   */\n      dup5\n        /* \"#utility.yul\":4463:4487   */\n      tag_67\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":4454:4488   */\n      tag_83\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":4436:4489   */\n      tag_67\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":4423:4489   */\n      swap1\n      pop\n        /* \"#utility.yul\":4353:4495   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4501:4627   */\n    tag_85:\n        /* \"#utility.yul\":4551:4560   */\n      0x00\n        /* \"#utility.yul\":4584:4621   */\n      tag_158\n        /* \"#utility.yul\":4615:4620   */\n      dup3\n        /* \"#utility.yul\":4584:4621   */\n      tag_84\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":4571:4621   */\n      swap1\n      pop\n        /* \"#utility.yul\":4501:4627   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4633:4784   */\n    tag_86:\n        /* \"#utility.yul\":4708:4717   */\n      0x00\n        /* \"#utility.yul\":4741:4778   */\n      tag_160\n        /* \"#utility.yul\":4772:4777   */\n      dup3\n        /* \"#utility.yul\":4741:4778   */\n      tag_85\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":4728:4778   */\n      swap1\n      pop\n        /* \"#utility.yul\":4633:4784   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4790:4971   */\n    tag_87:\n        /* \"#utility.yul\":4902:4964   */\n      tag_162\n        /* \"#utility.yul\":4958:4963   */\n      dup2\n        /* \"#utility.yul\":4902:4964   */\n      tag_86\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":4897:4900   */\n      dup3\n        /* \"#utility.yul\":4890:4965   */\n      mstore\n        /* \"#utility.yul\":4790:4971   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4977:5095   */\n    tag_88:\n        /* \"#utility.yul\":5064:5088   */\n      tag_164\n        /* \"#utility.yul\":5082:5087   */\n      dup2\n        /* \"#utility.yul\":5064:5088   */\n      tag_68\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":5059:5062   */\n      dup3\n        /* \"#utility.yul\":5052:5089   */\n      mstore\n        /* \"#utility.yul\":4977:5095   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5101:5593   */\n    tag_12:\n        /* \"#utility.yul\":5275:5279   */\n      0x00\n        /* \"#utility.yul\":5313:5315   */\n      0x60\n        /* \"#utility.yul\":5302:5311   */\n      dup3\n        /* \"#utility.yul\":5298:5316   */\n      add\n        /* \"#utility.yul\":5290:5316   */\n      swap1\n      pop\n        /* \"#utility.yul\":5326:5422   */\n      tag_166\n        /* \"#utility.yul\":5419:5420   */\n      0x00\n        /* \"#utility.yul\":5408:5417   */\n      dup4\n        /* \"#utility.yul\":5404:5421   */\n      add\n        /* \"#utility.yul\":5395:5401   */\n      dup7\n        /* \"#utility.yul\":5326:5422   */\n      tag_87\n      jump\t// in\n    tag_166:\n        /* \"#utility.yul\":5432:5504   */\n      tag_167\n        /* \"#utility.yul\":5500:5502   */\n      0x20\n        /* \"#utility.yul\":5489:5498   */\n      dup4\n        /* \"#utility.yul\":5485:5503   */\n      add\n        /* \"#utility.yul\":5476:5482   */\n      dup6\n        /* \"#utility.yul\":5432:5504   */\n      tag_88\n      jump\t// in\n    tag_167:\n        /* \"#utility.yul\":5514:5586   */\n      tag_168\n        /* \"#utility.yul\":5582:5584   */\n      0x40\n        /* \"#utility.yul\":5571:5580   */\n      dup4\n        /* \"#utility.yul\":5567:5585   */\n      add\n        /* \"#utility.yul\":5558:5564   */\n      dup5\n        /* \"#utility.yul\":5514:5586   */\n      tag_88\n      jump\t// in\n    tag_168:\n        /* \"#utility.yul\":5101:5593   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5599:5676   */\n    tag_89:\n        /* \"#utility.yul\":5636:5643   */\n      0x00\n        /* \"#utility.yul\":5665:5670   */\n      dup2\n        /* \"#utility.yul\":5654:5670   */\n      swap1\n      pop\n        /* \"#utility.yul\":5599:5676   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5682:5804   */\n    tag_90:\n        /* \"#utility.yul\":5755:5779   */\n      tag_171\n        /* \"#utility.yul\":5773:5778   */\n      dup2\n        /* \"#utility.yul\":5755:5779   */\n      tag_89\n      jump\t// in\n    tag_171:\n        /* \"#utility.yul\":5748:5753   */\n      dup2\n        /* \"#utility.yul\":5745:5780   */\n      eq\n        /* \"#utility.yul\":5735:5798   */\n      tag_172\n      jumpi\n        /* \"#utility.yul\":5794:5795   */\n      0x00\n        /* \"#utility.yul\":5791:5792   */\n      dup1\n        /* \"#utility.yul\":5784:5796   */\n      revert\n        /* \"#utility.yul\":5735:5798   */\n    tag_172:\n        /* \"#utility.yul\":5682:5804   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5810:5953   */\n    tag_91:\n        /* \"#utility.yul\":5867:5872   */\n      0x00\n        /* \"#utility.yul\":5898:5904   */\n      dup2\n        /* \"#utility.yul\":5892:5905   */\n      mload\n        /* \"#utility.yul\":5883:5905   */\n      swap1\n      pop\n        /* \"#utility.yul\":5914:5947   */\n      tag_174\n        /* \"#utility.yul\":5941:5946   */\n      dup2\n        /* \"#utility.yul\":5914:5947   */\n      tag_90\n      jump\t// in\n    tag_174:\n        /* \"#utility.yul\":5810:5953   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5959:6050   */\n    tag_92:\n        /* \"#utility.yul\":5994:6001   */\n      0x00\n        /* \"#utility.yul\":6038:6043   */\n      dup2\n        /* \"#utility.yul\":6034:6036   */\n      0x0b\n        /* \"#utility.yul\":6023:6044   */\n      signextend\n        /* \"#utility.yul\":6012:6044   */\n      swap1\n      pop\n        /* \"#utility.yul\":5959:6050   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6056:6174   */\n    tag_93:\n        /* \"#utility.yul\":6127:6149   */\n      tag_177\n        /* \"#utility.yul\":6143:6148   */\n      dup2\n        /* \"#utility.yul\":6127:6149   */\n      tag_92\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":6120:6125   */\n      dup2\n        /* \"#utility.yul\":6117:6150   */\n      eq\n        /* \"#utility.yul\":6107:6168   */\n      tag_178\n      jumpi\n        /* \"#utility.yul\":6164:6165   */\n      0x00\n        /* \"#utility.yul\":6161:6162   */\n      dup1\n        /* \"#utility.yul\":6154:6166   */\n      revert\n        /* \"#utility.yul\":6107:6168   */\n    tag_178:\n        /* \"#utility.yul\":6056:6174   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6180:6319   */\n    tag_94:\n        /* \"#utility.yul\":6235:6240   */\n      0x00\n        /* \"#utility.yul\":6266:6272   */\n      dup2\n        /* \"#utility.yul\":6260:6273   */\n      mload\n        /* \"#utility.yul\":6251:6273   */\n      swap1\n      pop\n        /* \"#utility.yul\":6282:6313   */\n      tag_180\n        /* \"#utility.yul\":6307:6312   */\n      dup2\n        /* \"#utility.yul\":6282:6313   */\n      tag_93\n      jump\t// in\n    tag_180:\n        /* \"#utility.yul\":6180:6319   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6325:7141   */\n    tag_16:\n        /* \"#utility.yul\":6420:6426   */\n      0x00\n        /* \"#utility.yul\":6428:6434   */\n      dup1\n        /* \"#utility.yul\":6436:6442   */\n      0x00\n        /* \"#utility.yul\":6444:6450   */\n      dup1\n        /* \"#utility.yul\":6493:6496   */\n      0x80\n        /* \"#utility.yul\":6481:6490   */\n      dup6\n        /* \"#utility.yul\":6472:6479   */\n      dup8\n        /* \"#utility.yul\":6468:6491   */\n      sub\n        /* \"#utility.yul\":6464:6497   */\n      slt\n        /* \"#utility.yul\":6461:6581   */\n      iszero\n      tag_182\n      jumpi\n        /* \"#utility.yul\":6500:6579   */\n      tag_183\n      tag_65\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":6461:6581   */\n    tag_182:\n        /* \"#utility.yul\":6620:6621   */\n      0x00\n        /* \"#utility.yul\":6645:6709   */\n      tag_184\n        /* \"#utility.yul\":6701:6708   */\n      dup8\n        /* \"#utility.yul\":6692:6698   */\n      dup3\n        /* \"#utility.yul\":6681:6690   */\n      dup9\n        /* \"#utility.yul\":6677:6699   */\n      add\n        /* \"#utility.yul\":6645:6709   */\n      tag_91\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":6635:6709   */\n      swap5\n      pop\n        /* \"#utility.yul\":6591:6719   */\n      pop\n        /* \"#utility.yul\":6758:6760   */\n      0x20\n        /* \"#utility.yul\":6784:6846   */\n      tag_185\n        /* \"#utility.yul\":6838:6845   */\n      dup8\n        /* \"#utility.yul\":6829:6835   */\n      dup3\n        /* \"#utility.yul\":6818:6827   */\n      dup9\n        /* \"#utility.yul\":6814:6836   */\n      add\n        /* \"#utility.yul\":6784:6846   */\n      tag_94\n      jump\t// in\n    tag_185:\n        /* \"#utility.yul\":6774:6846   */\n      swap4\n      pop\n        /* \"#utility.yul\":6729:6856   */\n      pop\n        /* \"#utility.yul\":6895:6897   */\n      0x40\n        /* \"#utility.yul\":6921:6985   */\n      tag_186\n        /* \"#utility.yul\":6977:6984   */\n      dup8\n        /* \"#utility.yul\":6968:6974   */\n      dup3\n        /* \"#utility.yul\":6957:6966   */\n      dup9\n        /* \"#utility.yul\":6953:6975   */\n      add\n        /* \"#utility.yul\":6921:6985   */\n      tag_91\n      jump\t// in\n    tag_186:\n        /* \"#utility.yul\":6911:6985   */\n      swap3\n      pop\n        /* \"#utility.yul\":6866:6995   */\n      pop\n        /* \"#utility.yul\":7034:7036   */\n      0x60\n        /* \"#utility.yul\":7060:7124   */\n      tag_187\n        /* \"#utility.yul\":7116:7123   */\n      dup8\n        /* \"#utility.yul\":7107:7113   */\n      dup3\n        /* \"#utility.yul\":7096:7105   */\n      dup9\n        /* \"#utility.yul\":7092:7114   */\n      add\n        /* \"#utility.yul\":7060:7124   */\n      tag_91\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":7050:7124   */\n      swap2\n      pop\n        /* \"#utility.yul\":7005:7134   */\n      pop\n        /* \"#utility.yul\":6325:7141   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7147:7265   */\n    tag_95:\n        /* \"#utility.yul\":7234:7258   */\n      tag_189\n        /* \"#utility.yul\":7252:7257   */\n      dup2\n        /* \"#utility.yul\":7234:7258   */\n      tag_89\n      jump\t// in\n    tag_189:\n        /* \"#utility.yul\":7229:7232   */\n      dup3\n        /* \"#utility.yul\":7222:7259   */\n      mstore\n        /* \"#utility.yul\":7147:7265   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7271:7493   */\n    tag_20:\n        /* \"#utility.yul\":7364:7368   */\n      0x00\n        /* \"#utility.yul\":7402:7404   */\n      0x20\n        /* \"#utility.yul\":7391:7400   */\n      dup3\n        /* \"#utility.yul\":7387:7405   */\n      add\n        /* \"#utility.yul\":7379:7405   */\n      swap1\n      pop\n        /* \"#utility.yul\":7415:7486   */\n      tag_191\n        /* \"#utility.yul\":7483:7484   */\n      0x00\n        /* \"#utility.yul\":7472:7481   */\n      dup4\n        /* \"#utility.yul\":7468:7485   */\n      add\n        /* \"#utility.yul\":7459:7465   */\n      dup5\n        /* \"#utility.yul\":7415:7486   */\n      tag_95\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":7271:7493   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7499:7642   */\n    tag_96:\n        /* \"#utility.yul\":7556:7561   */\n      0x00\n        /* \"#utility.yul\":7587:7593   */\n      dup2\n        /* \"#utility.yul\":7581:7594   */\n      mload\n        /* \"#utility.yul\":7572:7594   */\n      swap1\n      pop\n        /* \"#utility.yul\":7603:7636   */\n      tag_193\n        /* \"#utility.yul\":7630:7635   */\n      dup2\n        /* \"#utility.yul\":7603:7636   */\n      tag_69\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":7499:7642   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7648:7999   */\n    tag_24:\n        /* \"#utility.yul\":7718:7724   */\n      0x00\n        /* \"#utility.yul\":7767:7769   */\n      0x20\n        /* \"#utility.yul\":7755:7764   */\n      dup3\n        /* \"#utility.yul\":7746:7753   */\n      dup5\n        /* \"#utility.yul\":7742:7765   */\n      sub\n        /* \"#utility.yul\":7738:7770   */\n      slt\n        /* \"#utility.yul\":7735:7854   */\n      iszero\n      tag_195\n      jumpi\n        /* \"#utility.yul\":7773:7852   */\n      tag_196\n      tag_65\n      jump\t// in\n    tag_196:\n        /* \"#utility.yul\":7735:7854   */\n    tag_195:\n        /* \"#utility.yul\":7893:7894   */\n      0x00\n        /* \"#utility.yul\":7918:7982   */\n      tag_197\n        /* \"#utility.yul\":7974:7981   */\n      dup5\n        /* \"#utility.yul\":7965:7971   */\n      dup3\n        /* \"#utility.yul\":7954:7963   */\n      dup6\n        /* \"#utility.yul\":7950:7972   */\n      add\n        /* \"#utility.yul\":7918:7982   */\n      tag_96\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":7908:7982   */\n      swap2\n      pop\n        /* \"#utility.yul\":7864:7992   */\n      pop\n        /* \"#utility.yul\":7648:7999   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8005:8185   */\n    tag_36:\n        /* \"#utility.yul\":8053:8130   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8050:8051   */\n      0x00\n        /* \"#utility.yul\":8043:8131   */\n      mstore\n        /* \"#utility.yul\":8150:8154   */\n      0x32\n        /* \"#utility.yul\":8147:8148   */\n      0x04\n        /* \"#utility.yul\":8140:8155   */\n      mstore\n        /* \"#utility.yul\":8174:8178   */\n      0x24\n        /* \"#utility.yul\":8171:8172   */\n      0x00\n        /* \"#utility.yul\":8164:8179   */\n      revert\n        /* \"#utility.yul\":8191:8371   */\n    tag_97:\n        /* \"#utility.yul\":8239:8316   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":8236:8237   */\n      0x00\n        /* \"#utility.yul\":8229:8317   */\n      mstore\n        /* \"#utility.yul\":8336:8340   */\n      0x11\n        /* \"#utility.yul\":8333:8334   */\n      0x04\n        /* \"#utility.yul\":8326:8341   */\n      mstore\n        /* \"#utility.yul\":8360:8364   */\n      0x24\n        /* \"#utility.yul\":8357:8358   */\n      0x00\n        /* \"#utility.yul\":8350:8365   */\n      revert\n        /* \"#utility.yul\":8377:8548   */\n    tag_45:\n        /* \"#utility.yul\":8416:8419   */\n      0x00\n        /* \"#utility.yul\":8439:8463   */\n      tag_201\n        /* \"#utility.yul\":8457:8462   */\n      dup3\n        /* \"#utility.yul\":8439:8463   */\n      tag_89\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":8430:8463   */\n      swap2\n      pop\n        /* \"#utility.yul\":8485:8489   */\n      0x00\n        /* \"#utility.yul\":8478:8483   */\n      dup3\n        /* \"#utility.yul\":8475:8490   */\n      eq\n        /* \"#utility.yul\":8472:8513   */\n      iszero\n      tag_202\n      jumpi\n        /* \"#utility.yul\":8493:8511   */\n      tag_203\n      tag_97\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":8472:8513   */\n    tag_202:\n        /* \"#utility.yul\":8540:8541   */\n      0x01\n        /* \"#utility.yul\":8533:8538   */\n      dup3\n        /* \"#utility.yul\":8529:8542   */\n      sub\n        /* \"#utility.yul\":8522:8542   */\n      swap1\n      pop\n        /* \"#utility.yul\":8377:8548   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8554:8902   */\n    tag_47:\n        /* \"#utility.yul\":8594:8601   */\n      0x00\n        /* \"#utility.yul\":8617:8637   */\n      tag_205\n        /* \"#utility.yul\":8635:8636   */\n      dup3\n        /* \"#utility.yul\":8617:8637   */\n      tag_89\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":8612:8637   */\n      swap2\n      pop\n        /* \"#utility.yul\":8651:8671   */\n      tag_206\n        /* \"#utility.yul\":8669:8670   */\n      dup4\n        /* \"#utility.yul\":8651:8671   */\n      tag_89\n      jump\t// in\n    tag_206:\n        /* \"#utility.yul\":8646:8671   */\n      swap3\n      pop\n        /* \"#utility.yul\":8839:8840   */\n      dup2\n        /* \"#utility.yul\":8771:8837   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":8767:8841   */\n      div\n        /* \"#utility.yul\":8764:8765   */\n      dup4\n        /* \"#utility.yul\":8761:8842   */\n      gt\n        /* \"#utility.yul\":8756:8757   */\n      dup3\n        /* \"#utility.yul\":8749:8758   */\n      iszero\n        /* \"#utility.yul\":8742:8759   */\n      iszero\n        /* \"#utility.yul\":8738:8843   */\n      and\n        /* \"#utility.yul\":8735:8866   */\n      iszero\n      tag_207\n      jumpi\n        /* \"#utility.yul\":8846:8864   */\n      tag_208\n      tag_97\n      jump\t// in\n    tag_208:\n        /* \"#utility.yul\":8735:8866   */\n    tag_207:\n        /* \"#utility.yul\":8894:8895   */\n      dup3\n        /* \"#utility.yul\":8891:8892   */\n      dup3\n        /* \"#utility.yul\":8887:8896   */\n      mul\n        /* \"#utility.yul\":8876:8896   */\n      swap1\n      pop\n        /* \"#utility.yul\":8554:8902   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8908:9099   */\n    tag_51:\n        /* \"#utility.yul\":8948:8952   */\n      0x00\n        /* \"#utility.yul\":8968:8988   */\n      tag_210\n        /* \"#utility.yul\":8986:8987   */\n      dup3\n        /* \"#utility.yul\":8968:8988   */\n      tag_89\n      jump\t// in\n    tag_210:\n        /* \"#utility.yul\":8963:8988   */\n      swap2\n      pop\n        /* \"#utility.yul\":9002:9022   */\n      tag_211\n        /* \"#utility.yul\":9020:9021   */\n      dup4\n        /* \"#utility.yul\":9002:9022   */\n      tag_89\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":8997:9022   */\n      swap3\n      pop\n        /* \"#utility.yul\":9041:9042   */\n      dup3\n        /* \"#utility.yul\":9038:9039   */\n      dup3\n        /* \"#utility.yul\":9035:9043   */\n      lt\n        /* \"#utility.yul\":9032:9066   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":9046:9064   */\n      tag_213\n      tag_97\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":9032:9066   */\n    tag_212:\n        /* \"#utility.yul\":9091:9092   */\n      dup3\n        /* \"#utility.yul\":9088:9089   */\n      dup3\n        /* \"#utility.yul\":9084:9093   */\n      sub\n        /* \"#utility.yul\":9076:9093   */\n      swap1\n      pop\n        /* \"#utility.yul\":8908:9099   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9105:9410   */\n    tag_53:\n        /* \"#utility.yul\":9145:9148   */\n      0x00\n        /* \"#utility.yul\":9164:9184   */\n      tag_215\n        /* \"#utility.yul\":9182:9183   */\n      dup3\n        /* \"#utility.yul\":9164:9184   */\n      tag_89\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":9159:9184   */\n      swap2\n      pop\n        /* \"#utility.yul\":9198:9218   */\n      tag_216\n        /* \"#utility.yul\":9216:9217   */\n      dup4\n        /* \"#utility.yul\":9198:9218   */\n      tag_89\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":9193:9218   */\n      swap3\n      pop\n        /* \"#utility.yul\":9352:9353   */\n      dup3\n        /* \"#utility.yul\":9284:9350   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":9280:9354   */\n      sub\n        /* \"#utility.yul\":9277:9278   */\n      dup3\n        /* \"#utility.yul\":9274:9355   */\n      gt\n        /* \"#utility.yul\":9271:9378   */\n      iszero\n      tag_217\n      jumpi\n        /* \"#utility.yul\":9358:9376   */\n      tag_218\n      tag_97\n      jump\t// in\n    tag_218:\n        /* \"#utility.yul\":9271:9378   */\n    tag_217:\n        /* \"#utility.yul\":9402:9403   */\n      dup3\n        /* \"#utility.yul\":9399:9400   */\n      dup3\n        /* \"#utility.yul\":9395:9404   */\n      add\n        /* \"#utility.yul\":9388:9404   */\n      swap1\n      pop\n        /* \"#utility.yul\":9105:9410   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9416:9649   */\n    tag_59:\n        /* \"#utility.yul\":9455:9458   */\n      0x00\n        /* \"#utility.yul\":9478:9502   */\n      tag_220\n        /* \"#utility.yul\":9496:9501   */\n      dup3\n        /* \"#utility.yul\":9478:9502   */\n      tag_89\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":9469:9502   */\n      swap2\n      pop\n        /* \"#utility.yul\":9524:9590   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":9517:9522   */\n      dup3\n        /* \"#utility.yul\":9514:9591   */\n      eq\n        /* \"#utility.yul\":9511:9614   */\n      iszero\n      tag_221\n      jumpi\n        /* \"#utility.yul\":9594:9612   */\n      tag_222\n      tag_97\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":9511:9614   */\n    tag_221:\n        /* \"#utility.yul\":9641:9642   */\n      0x01\n        /* \"#utility.yul\":9634:9639   */\n      dup3\n        /* \"#utility.yul\":9630:9643   */\n      add\n        /* \"#utility.yul\":9623:9643   */\n      swap1\n      pop\n        /* \"#utility.yul\":9416:9649   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9655:9757   */\n    tag_98:\n        /* \"#utility.yul\":9697:9705   */\n      0x00\n        /* \"#utility.yul\":9744:9749   */\n      dup2\n        /* \"#utility.yul\":9741:9742   */\n      0x01\n        /* \"#utility.yul\":9737:9750   */\n      shr\n        /* \"#utility.yul\":9716:9750   */\n      swap1\n      pop\n        /* \"#utility.yul\":9655:9757   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9763:10611   */\n    tag_99:\n        /* \"#utility.yul\":9824:9829   */\n      0x00\n        /* \"#utility.yul\":9831:9835   */\n      dup1\n        /* \"#utility.yul\":9855:9861   */\n      dup3\n        /* \"#utility.yul\":9846:9861   */\n      swap2\n      pop\n        /* \"#utility.yul\":9879:9884   */\n      dup4\n        /* \"#utility.yul\":9870:9884   */\n      swap1\n      pop\n        /* \"#utility.yul\":9893:10605   */\n    tag_225:\n        /* \"#utility.yul\":9914:9915   */\n      0x01\n        /* \"#utility.yul\":9904:9912   */\n      dup6\n        /* \"#utility.yul\":9901:9916   */\n      gt\n        /* \"#utility.yul\":9893:10605   */\n      iszero\n      tag_227\n      jumpi\n        /* \"#utility.yul\":10009:10013   */\n      dup1\n        /* \"#utility.yul\":10004:10007   */\n      dup7\n        /* \"#utility.yul\":10000:10014   */\n      div\n        /* \"#utility.yul\":9994:9998   */\n      dup2\n        /* \"#utility.yul\":9991:10015   */\n      gt\n        /* \"#utility.yul\":9988:10038   */\n      iszero\n      tag_228\n      jumpi\n        /* \"#utility.yul\":10018:10036   */\n      tag_229\n      tag_97\n      jump\t// in\n    tag_229:\n        /* \"#utility.yul\":9988:10038   */\n    tag_228:\n        /* \"#utility.yul\":10068:10069   */\n      0x01\n        /* \"#utility.yul\":10058:10066   */\n      dup6\n        /* \"#utility.yul\":10054:10070   */\n      and\n        /* \"#utility.yul\":10051:10502   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":10483:10487   */\n      dup1\n        /* \"#utility.yul\":10476:10481   */\n      dup3\n        /* \"#utility.yul\":10472:10488   */\n      mul\n        /* \"#utility.yul\":10463:10488   */\n      swap2\n      pop\n        /* \"#utility.yul\":10051:10502   */\n    tag_230:\n        /* \"#utility.yul\":10533:10537   */\n      dup1\n        /* \"#utility.yul\":10527:10531   */\n      dup2\n        /* \"#utility.yul\":10523:10538   */\n      mul\n        /* \"#utility.yul\":10515:10538   */\n      swap1\n      pop\n        /* \"#utility.yul\":10563:10595   */\n      tag_231\n        /* \"#utility.yul\":10586:10594   */\n      dup6\n        /* \"#utility.yul\":10563:10595   */\n      tag_98\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":10551:10595   */\n      swap5\n      pop\n        /* \"#utility.yul\":9893:10605   */\n      jump(tag_225)\n    tag_227:\n        /* \"#utility.yul\":9763:10611   */\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10617:11690   */\n    tag_100:\n        /* \"#utility.yul\":10671:10676   */\n      0x00\n        /* \"#utility.yul\":10862:10870   */\n      dup3\n        /* \"#utility.yul\":10852:10892   */\n      tag_233\n      jumpi\n        /* \"#utility.yul\":10883:10884   */\n      0x01\n        /* \"#utility.yul\":10874:10884   */\n      swap1\n      pop\n        /* \"#utility.yul\":10885:10890   */\n      jump(tag_232)\n        /* \"#utility.yul\":10852:10892   */\n    tag_233:\n        /* \"#utility.yul\":10911:10915   */\n      dup2\n        /* \"#utility.yul\":10901:10937   */\n      tag_234\n      jumpi\n        /* \"#utility.yul\":10928:10929   */\n      0x00\n        /* \"#utility.yul\":10919:10929   */\n      swap1\n      pop\n        /* \"#utility.yul\":10930:10935   */\n      jump(tag_232)\n        /* \"#utility.yul\":10901:10937   */\n    tag_234:\n        /* \"#utility.yul\":10997:11001   */\n      dup2\n        /* \"#utility.yul\":11045:11046   */\n      0x01\n        /* \"#utility.yul\":11040:11067   */\n      dup2\n      eq\n      tag_236\n      jumpi\n        /* \"#utility.yul\":11081:11082   */\n      0x02\n        /* \"#utility.yul\":11076:11267   */\n      dup2\n      eq\n      tag_237\n      jumpi\n        /* \"#utility.yul\":10990:11267   */\n      jump(tag_235)\n        /* \"#utility.yul\":11040:11067   */\n    tag_236:\n        /* \"#utility.yul\":11058:11059   */\n      0x01\n        /* \"#utility.yul\":11049:11059   */\n      swap2\n      pop\n        /* \"#utility.yul\":11060:11065   */\n      pop\n      jump(tag_232)\n        /* \"#utility.yul\":11076:11267   */\n    tag_237:\n        /* \"#utility.yul\":11121:11124   */\n      0xff\n        /* \"#utility.yul\":11111:11119   */\n      dup5\n        /* \"#utility.yul\":11108:11125   */\n      gt\n        /* \"#utility.yul\":11105:11148   */\n      iszero\n      tag_238\n      jumpi\n        /* \"#utility.yul\":11128:11146   */\n      tag_239\n      tag_97\n      jump\t// in\n    tag_239:\n        /* \"#utility.yul\":11105:11148   */\n    tag_238:\n        /* \"#utility.yul\":11177:11185   */\n      dup4\n        /* \"#utility.yul\":11174:11175   */\n      0x02\n        /* \"#utility.yul\":11170:11186   */\n      exp\n        /* \"#utility.yul\":11161:11186   */\n      swap2\n      pop\n        /* \"#utility.yul\":11212:11215   */\n      dup5\n        /* \"#utility.yul\":11205:11210   */\n      dup3\n        /* \"#utility.yul\":11202:11216   */\n      gt\n        /* \"#utility.yul\":11199:11239   */\n      iszero\n      tag_240\n      jumpi\n        /* \"#utility.yul\":11219:11237   */\n      tag_241\n      tag_97\n      jump\t// in\n    tag_241:\n        /* \"#utility.yul\":11199:11239   */\n    tag_240:\n        /* \"#utility.yul\":11252:11257   */\n      pop\n      jump(tag_232)\n        /* \"#utility.yul\":10990:11267   */\n    tag_235:\n      pop\n        /* \"#utility.yul\":11376:11378   */\n      0x20\n        /* \"#utility.yul\":11366:11374   */\n      dup4\n        /* \"#utility.yul\":11363:11379   */\n      lt\n        /* \"#utility.yul\":11357:11360   */\n      0x0133\n        /* \"#utility.yul\":11351:11355   */\n      dup4\n        /* \"#utility.yul\":11348:11361   */\n      lt\n        /* \"#utility.yul\":11344:11380   */\n      and\n        /* \"#utility.yul\":11326:11328   */\n      0x4e\n        /* \"#utility.yul\":11316:11324   */\n      dup5\n        /* \"#utility.yul\":11313:11329   */\n      lt\n        /* \"#utility.yul\":11308:11310   */\n      0x0b\n        /* \"#utility.yul\":11302:11306   */\n      dup5\n        /* \"#utility.yul\":11299:11311   */\n      lt\n        /* \"#utility.yul\":11295:11330   */\n      and\n        /* \"#utility.yul\":11279:11390   */\n      or\n        /* \"#utility.yul\":11276:11522   */\n      iszero\n      tag_242\n      jumpi\n        /* \"#utility.yul\":11432:11440   */\n      dup3\n        /* \"#utility.yul\":11426:11430   */\n      dup3\n        /* \"#utility.yul\":11422:11441   */\n      exp\n        /* \"#utility.yul\":11413:11441   */\n      swap1\n      pop\n        /* \"#utility.yul\":11467:11470   */\n      dup4\n        /* \"#utility.yul\":11460:11465   */\n      dup2\n        /* \"#utility.yul\":11457:11471   */\n      gt\n        /* \"#utility.yul\":11454:11494   */\n      iszero\n      tag_243\n      jumpi\n        /* \"#utility.yul\":11474:11492   */\n      tag_244\n      tag_97\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":11454:11494   */\n    tag_243:\n        /* \"#utility.yul\":11507:11512   */\n      jump(tag_232)\n        /* \"#utility.yul\":11276:11522   */\n    tag_242:\n        /* \"#utility.yul\":11547:11589   */\n      tag_245\n        /* \"#utility.yul\":11585:11588   */\n      dup5\n        /* \"#utility.yul\":11575:11583   */\n      dup5\n        /* \"#utility.yul\":11569:11573   */\n      dup5\n        /* \"#utility.yul\":11566:11567   */\n      0x01\n        /* \"#utility.yul\":11547:11589   */\n      tag_99\n      jump\t// in\n    tag_245:\n        /* \"#utility.yul\":11532:11589   */\n      swap3\n      pop\n      swap1\n      pop\n        /* \"#utility.yul\":11621:11625   */\n      dup2\n        /* \"#utility.yul\":11616:11619   */\n      dup5\n        /* \"#utility.yul\":11612:11626   */\n      div\n        /* \"#utility.yul\":11605:11610   */\n      dup2\n        /* \"#utility.yul\":11602:11627   */\n      gt\n        /* \"#utility.yul\":11599:11650   */\n      iszero\n      tag_246\n      jumpi\n        /* \"#utility.yul\":11630:11648   */\n      tag_247\n      tag_97\n      jump\t// in\n    tag_247:\n        /* \"#utility.yul\":11599:11650   */\n    tag_246:\n        /* \"#utility.yul\":11679:11683   */\n      dup2\n        /* \"#utility.yul\":11672:11677   */\n      dup2\n        /* \"#utility.yul\":11668:11684   */\n      mul\n        /* \"#utility.yul\":11659:11684   */\n      swap1\n      pop\n        /* \"#utility.yul\":10617:11690   */\n    tag_232:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11696:11981   */\n    tag_62:\n        /* \"#utility.yul\":11756:11761   */\n      0x00\n        /* \"#utility.yul\":11780:11803   */\n      tag_249\n        /* \"#utility.yul\":11798:11802   */\n      dup3\n        /* \"#utility.yul\":11780:11803   */\n      tag_89\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":11772:11803   */\n      swap2\n      pop\n        /* \"#utility.yul\":11824:11851   */\n      tag_250\n        /* \"#utility.yul\":11842:11850   */\n      dup4\n        /* \"#utility.yul\":11824:11851   */\n      tag_89\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":11812:11851   */\n      swap3\n      pop\n        /* \"#utility.yul\":11870:11974   */\n      tag_251\n        /* \"#utility.yul\":11907:11973   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":11897:11905   */\n      dup5\n        /* \"#utility.yul\":11891:11895   */\n      dup5\n        /* \"#utility.yul\":11870:11974   */\n      tag_100\n      jump\t// in\n    tag_251:\n        /* \"#utility.yul\":11861:11974   */\n      swap1\n      pop\n        /* \"#utility.yul\":11696:11981   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212205d17ef19d00c579521c7b81c67d146b19163e61084724599ab0343c57002394d64736f6c634300080a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610b21806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632251a8a914610030575b600080fd5b61004a6004803603810190610045919061052c565b610060565b60405161005791906105b6565b60405180910390f35b6000807360ae865ee4c725cd04353b5aab364553f56cef82905060007349e565ed1bdc17f3d220f72df0857c26fa83f873905060008173ffffffffffffffffffffffffffffffffffffffff1663e6a1e888735d8b4c2554aeb7e86f387b4d6c00ac33499ed01f89896040518463ffffffff1660e01b81526004016100e69392919061063f565b608060405180830381865afa158015610103573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012791906106e5565b505091505060008373ffffffffffffffffffffffffffffffffffffffff16636352211e61015388610204565b6040518263ffffffff1660e01b815260040161016f919061075b565b602060405180830381865afa15801561018c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b0919061078b565b9050600182600b0b13806101ef57508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156101f957600194505b505050509392505050565b6000610211826000610218565b9050919050565b60008083905060008060005b8351811015610343576030848281518110610242576102416107b8565b5b602001015160f81c60f81b60f81c60ff161015801561028557506039848281518110610271576102706107b8565b5b602001015160f81c60f81b60f81c60ff1611155b156102fe5781156102ad57600086141561029e57610343565b85806102a990610816565b9650505b600a836102ba9190610840565b925060308482815181106102d1576102d06107b8565b5b602001015160f81c60f81b60f81c60ff166102ec919061089a565b836102f791906108ce565b9250610330565b602e848281518110610313576103126107b8565b5b602001015160f81c60f81b60f81c60ff16141561032f57600191505b5b808061033b90610924565b915050610224565b5060008511156103685784600a61035a9190610aa0565b826103659190610840565b91505b81935050505092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103b382610388565b9050919050565b6103c3816103a8565b81146103ce57600080fd5b50565b6000813590506103e0816103ba565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610439826103f0565b810181811067ffffffffffffffff8211171561045857610457610401565b5b80604052505050565b600061046b610374565b90506104778282610430565b919050565b600067ffffffffffffffff82111561049757610496610401565b5b6104a0826103f0565b9050602081019050919050565b82818337600083830152505050565b60006104cf6104ca8461047c565b610461565b9050828152602081018484840111156104eb576104ea6103eb565b5b6104f68482856104ad565b509392505050565b600082601f830112610513576105126103e6565b5b81356105238482602086016104bc565b91505092915050565b6000806000606084860312156105455761054461037e565b5b6000610553868287016103d1565b9350506020610564868287016103d1565b925050604084013567ffffffffffffffff81111561058557610584610383565b5b610591868287016104fe565b9150509250925092565b60008115159050919050565b6105b08161059b565b82525050565b60006020820190506105cb60008301846105a7565b92915050565b6000819050919050565b60006105f66105f16105ec84610388565b6105d1565b610388565b9050919050565b6000610608826105db565b9050919050565b600061061a826105fd565b9050919050565b61062a8161060f565b82525050565b610639816103a8565b82525050565b60006060820190506106546000830186610621565b6106616020830185610630565b61066e6040830184610630565b949350505050565b6000819050919050565b61068981610676565b811461069457600080fd5b50565b6000815190506106a681610680565b92915050565b600081600b0b9050919050565b6106c2816106ac565b81146106cd57600080fd5b50565b6000815190506106df816106b9565b92915050565b600080600080608085870312156106ff576106fe61037e565b5b600061070d87828801610697565b945050602061071e878288016106d0565b935050604061072f87828801610697565b925050606061074087828801610697565b91505092959194509250565b61075581610676565b82525050565b6000602082019050610770600083018461074c565b92915050565b600081519050610785816103ba565b92915050565b6000602082840312156107a1576107a061037e565b5b60006107af84828501610776565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061082182610676565b91506000821415610835576108346107e7565b5b600182039050919050565b600061084b82610676565b915061085683610676565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561088f5761088e6107e7565b5b828202905092915050565b60006108a582610676565b91506108b083610676565b9250828210156108c3576108c26107e7565b5b828203905092915050565b60006108d982610676565b91506108e483610676565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610919576109186107e7565b5b828201905092915050565b600061092f82610676565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610962576109616107e7565b5b600182019050919050565b60008160011c9050919050565b6000808291508390505b60018511156109c4578086048111156109a05761099f6107e7565b5b60018516156109af5780820291505b80810290506109bd8561096d565b9450610984565b94509492505050565b6000826109dd5760019050610a99565b816109eb5760009050610a99565b8160018114610a015760028114610a0b57610a3a565b6001915050610a99565b60ff841115610a1d57610a1c6107e7565b5b8360020a915084821115610a3457610a336107e7565b5b50610a99565b5060208310610133831016604e8410600b8410161715610a6f5782820a905083811115610a6a57610a696107e7565b5b610a99565b610a7c848484600161097a565b92509050818404811115610a9357610a926107e7565b5b81810290505b9392505050565b6000610aab82610676565b9150610ab683610676565b9250610ae37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846109cd565b90509291505056fea26469706673582212205d17ef19d00c579521c7b81c67d146b19163e61084724599ab0343c57002394d64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB21 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2251A8A9 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x52C JUMP JUMPDEST PUSH2 0x60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57 SWAP2 SWAP1 PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH20 0x60AE865EE4C725CD04353B5AAB364553F56CEF82 SWAP1 POP PUSH1 0x0 PUSH20 0x49E565ED1BDC17F3D220F72DF0857C26FA83F873 SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE6A1E888 PUSH20 0x5D8B4C2554AEB7E86F387B4D6C00AC33499ED01F DUP10 DUP10 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x63F JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x103 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x127 SWAP2 SWAP1 PUSH2 0x6E5 JUMP JUMPDEST POP POP SWAP2 POP POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E PUSH2 0x153 DUP9 PUSH2 0x204 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x75B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B0 SWAP2 SWAP1 PUSH2 0x78B JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH1 0xB SIGNEXTEND SGT DUP1 PUSH2 0x1EF JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x1 SWAP5 POP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x211 DUP3 PUSH1 0x0 PUSH2 0x218 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x343 JUMPI PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x242 JUMPI PUSH2 0x241 PUSH2 0x7B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND LT ISZERO DUP1 ISZERO PUSH2 0x285 JUMPI POP PUSH1 0x39 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x271 JUMPI PUSH2 0x270 PUSH2 0x7B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x2FE JUMPI DUP2 ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP7 EQ ISZERO PUSH2 0x29E JUMPI PUSH2 0x343 JUMP JUMPDEST DUP6 DUP1 PUSH2 0x2A9 SWAP1 PUSH2 0x816 JUMP JUMPDEST SWAP7 POP POP JUMPDEST PUSH1 0xA DUP4 PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x840 JUMP JUMPDEST SWAP3 POP PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D1 JUMPI PUSH2 0x2D0 PUSH2 0x7B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND PUSH2 0x2EC SWAP2 SWAP1 PUSH2 0x89A JUMP JUMPDEST DUP4 PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x8CE JUMP JUMPDEST SWAP3 POP PUSH2 0x330 JUMP JUMPDEST PUSH1 0x2E DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x313 JUMPI PUSH2 0x312 PUSH2 0x7B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND EQ ISZERO PUSH2 0x32F JUMPI PUSH1 0x1 SWAP2 POP JUMPDEST JUMPDEST DUP1 DUP1 PUSH2 0x33B SWAP1 PUSH2 0x924 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x224 JUMP JUMPDEST POP PUSH1 0x0 DUP6 GT ISZERO PUSH2 0x368 JUMPI DUP5 PUSH1 0xA PUSH2 0x35A SWAP2 SWAP1 PUSH2 0xAA0 JUMP JUMPDEST DUP3 PUSH2 0x365 SWAP2 SWAP1 PUSH2 0x840 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B3 DUP3 PUSH2 0x388 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3C3 DUP2 PUSH2 0x3A8 JUMP JUMPDEST DUP2 EQ PUSH2 0x3CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3E0 DUP2 PUSH2 0x3BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x439 DUP3 PUSH2 0x3F0 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x458 JUMPI PUSH2 0x457 PUSH2 0x401 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46B PUSH2 0x374 JUMP JUMPDEST SWAP1 POP PUSH2 0x477 DUP3 DUP3 PUSH2 0x430 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x497 JUMPI PUSH2 0x496 PUSH2 0x401 JUMP JUMPDEST JUMPDEST PUSH2 0x4A0 DUP3 PUSH2 0x3F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CF PUSH2 0x4CA DUP5 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x461 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x4EB JUMPI PUSH2 0x4EA PUSH2 0x3EB JUMP JUMPDEST JUMPDEST PUSH2 0x4F6 DUP5 DUP3 DUP6 PUSH2 0x4AD JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x513 JUMPI PUSH2 0x512 PUSH2 0x3E6 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x523 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x4BC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x545 JUMPI PUSH2 0x544 PUSH2 0x37E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x553 DUP7 DUP3 DUP8 ADD PUSH2 0x3D1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x564 DUP7 DUP3 DUP8 ADD PUSH2 0x3D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x585 JUMPI PUSH2 0x584 PUSH2 0x383 JUMP JUMPDEST JUMPDEST PUSH2 0x591 DUP7 DUP3 DUP8 ADD PUSH2 0x4FE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5B0 DUP2 PUSH2 0x59B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5CB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 PUSH2 0x5F1 PUSH2 0x5EC DUP5 PUSH2 0x388 JUMP JUMPDEST PUSH2 0x5D1 JUMP JUMPDEST PUSH2 0x388 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x608 DUP3 PUSH2 0x5DB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x61A DUP3 PUSH2 0x5FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x62A DUP2 PUSH2 0x60F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x639 DUP2 PUSH2 0x3A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x654 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x621 JUMP JUMPDEST PUSH2 0x661 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x630 JUMP JUMPDEST PUSH2 0x66E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x630 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x689 DUP2 PUSH2 0x676 JUMP JUMPDEST DUP2 EQ PUSH2 0x694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6A6 DUP2 PUSH2 0x680 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xB SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6C2 DUP2 PUSH2 0x6AC JUMP JUMPDEST DUP2 EQ PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6DF DUP2 PUSH2 0x6B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6FF JUMPI PUSH2 0x6FE PUSH2 0x37E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x70D DUP8 DUP3 DUP9 ADD PUSH2 0x697 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x71E DUP8 DUP3 DUP9 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x72F DUP8 DUP3 DUP9 ADD PUSH2 0x697 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x740 DUP8 DUP3 DUP9 ADD PUSH2 0x697 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x755 DUP2 PUSH2 0x676 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x770 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x74C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x785 DUP2 PUSH2 0x3BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7A1 JUMPI PUSH2 0x7A0 PUSH2 0x37E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x7AF DUP5 DUP3 DUP6 ADD PUSH2 0x776 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x821 DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x835 JUMPI PUSH2 0x834 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84B DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH2 0x856 DUP4 PUSH2 0x676 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x88F JUMPI PUSH2 0x88E PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A5 DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH2 0x8B0 DUP4 PUSH2 0x676 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x8C3 JUMPI PUSH2 0x8C2 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D9 DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH2 0x8E4 DUP4 PUSH2 0x676 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x919 JUMPI PUSH2 0x918 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x92F DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x962 JUMPI PUSH2 0x961 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x9C4 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x9A0 JUMPI PUSH2 0x99F PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x9AF JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x9BD DUP6 PUSH2 0x96D JUMP JUMPDEST SWAP5 POP PUSH2 0x984 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9DD JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xA99 JUMP JUMPDEST DUP2 PUSH2 0x9EB JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xA99 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xA01 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xA0B JUMPI PUSH2 0xA3A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xA99 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xA1D JUMPI PUSH2 0xA1C PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0xA34 JUMPI PUSH2 0xA33 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST POP PUSH2 0xA99 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xA6F JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0xA6A JUMPI PUSH2 0xA69 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST PUSH2 0xA99 JUMP JUMPDEST PUSH2 0xA7C DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x97A JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0xA93 JUMPI PUSH2 0xA92 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAAB DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH2 0xAB6 DUP4 PUSH2 0x676 JUMP JUMPDEST SWAP3 POP PUSH2 0xAE3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x9CD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D OR 0xEF NOT 0xD0 0xC JUMPI SWAP6 0x21 0xC7 0xB8 SHR PUSH8 0xD146B19163E61084 PUSH19 0x4599AB0343C57002394D64736F6C634300080A STOP CALLER ",
							"sourceMap": "789:1578:21:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@isSubscribed_3228": {
									"entryPoint": 96,
									"id": 3228,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@parseInt_3241": {
									"entryPoint": 516,
									"id": 3241,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@parseInt_3367": {
									"entryPoint": 536,
									"id": 3367,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_available_length_t_string_memory_ptr": {
									"entryPoint": 1212,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 977,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 1910,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_int96_fromMemory": {
									"entryPoint": 1744,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_string_memory_ptr": {
									"entryPoint": 1278,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 1687,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 1931,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_string_memory_ptr": {
									"entryPoint": 1324,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_uint256t_int96t_uint256t_uint256_fromMemory": {
									"entryPoint": 1765,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 1584,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 1447,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack": {
									"entryPoint": 1569,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 1868,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 1462,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ISuperfluidToken_$3123_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed": {
									"entryPoint": 1599,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 1883,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 1121,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 884,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_string_memory_ptr": {
									"entryPoint": 1148,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2254,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 2426,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint256": {
									"entryPoint": 2720,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 2509,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 2112,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 2202,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 936,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 1435,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_int96": {
									"entryPoint": 1708,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 904,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 1654,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_ISuperfluidToken_$3123_to_t_address": {
									"entryPoint": 1551,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 1533,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 1499,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_calldata_to_memory": {
									"entryPoint": 1197,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"decrement_t_uint256": {
									"entryPoint": 2070,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 1072,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"identity": {
									"entryPoint": 1489,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 2340,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 2023,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 1976,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1025,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 998,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 1003,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 899,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 894,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 1008,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_right_1_unsigned": {
									"entryPoint": 2413,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 954,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_int96": {
									"entryPoint": 1721,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 1664,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11984:22",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:22"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:22"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:22",
														"type": ""
													}
												],
												"src": "7:75:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:22"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:22"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:22",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:22",
														"type": ""
													}
												],
												"src": "334:126:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:22",
														"type": ""
													}
												],
												"src": "466:96:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:22"
															},
															"nodeType": "YulIf",
															"src": "621:63:22"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:22",
														"type": ""
													}
												],
												"src": "568:122:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "748:87:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "758:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "767:20:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:22"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "796:33:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "796:33:22"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "726:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "734:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "742:5:22",
														"type": ""
													}
												],
												"src": "696:139:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "930:28:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "947:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "950:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "940:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "940:12:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "940:12:22"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "841:117:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1053:28:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1070:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1073:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1063:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1063:12:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1063:12:22"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "964:117:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1135:54:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1145:38:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1163:5:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1170:2:22",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1159:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1159:14:22"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1179:2:22",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1175:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1175:7:22"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1155:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1155:28:22"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "1145:6:22"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1118:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "1128:6:22",
														"type": ""
													}
												],
												"src": "1087:102:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1223:152:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1240:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1243:77:22",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1233:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1233:88:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1233:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1337:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1340:4:22",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1330:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1330:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1330:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1361:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1364:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1354:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1354:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1354:15:22"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1195:180:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1424:238:22",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1434:58:22",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1456:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "1486:4:22"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "1464:21:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1464:27:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1452:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1452:40:22"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "1438:10:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1603:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1605:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1605:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1605:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1546:10:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1558:18:22",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1543:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1543:34:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1582:10:22"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1594:6:22"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1579:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1579:22:22"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1540:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1540:62:22"
															},
															"nodeType": "YulIf",
															"src": "1537:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1641:2:22",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1645:10:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1634:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1634:22:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1634:22:22"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1410:6:22",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1418:4:22",
														"type": ""
													}
												],
												"src": "1381:281:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1709:88:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1719:30:22",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "1729:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1729:20:22"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1719:6:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1778:6:22"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1786:4:22"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "1758:19:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1758:33:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1758:33:22"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1693:4:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1702:6:22",
														"type": ""
													}
												],
												"src": "1668:129:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1870:241:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1975:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1977:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1977:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1977:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1947:6:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1955:18:22",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1944:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "1944:30:22"
															},
															"nodeType": "YulIf",
															"src": "1941:56:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2007:37:22",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2037:6:22"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "2015:21:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2015:29:22"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "2007:4:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2081:23:22",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "2093:4:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2099:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2089:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2089:15:22"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "2081:4:22"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1854:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1865:4:22",
														"type": ""
													}
												],
												"src": "1803:308:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2168:103:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "2191:3:22"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "2196:3:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2201:6:22"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "2178:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2178:30:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2178:30:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "2249:3:22"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2254:6:22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2245:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2245:16:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2263:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2238:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2238:27:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2238:27:22"
														}
													]
												},
												"name": "copy_calldata_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2150:3:22",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "2155:3:22",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2160:6:22",
														"type": ""
													}
												],
												"src": "2117:154:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2361:328:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2371:75:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2438:6:22"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "2396:41:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2396:49:22"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2380:15:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2380:66:22"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "2371:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2462:5:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2469:6:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2455:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2455:21:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2455:21:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2485:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2500:5:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2507:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2496:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2496:16:22"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "2489:3:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2550:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "2552:77:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2552:79:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2552:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "2531:3:22"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2536:6:22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2527:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2527:16:22"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "2545:3:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2524:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2524:25:22"
															},
															"nodeType": "YulIf",
															"src": "2521:112:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "2666:3:22"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "2671:3:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2676:6:22"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2642:23:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2642:41:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2642:41:22"
														}
													]
												},
												"name": "abi_decode_available_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2334:3:22",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2339:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2347:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2355:5:22",
														"type": ""
													}
												],
												"src": "2277:412:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2771:278:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2820:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "2822:77:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2822:79:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2822:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2799:6:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2807:4:22",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2795:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2795:17:22"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "2814:3:22"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2791:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2791:27:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2784:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2784:35:22"
															},
															"nodeType": "YulIf",
															"src": "2781:122:22"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2912:34:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2939:6:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2926:12:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2926:20:22"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2916:6:22",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2955:88:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3016:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3024:4:22",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3012:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3012:17:22"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3031:6:22"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "3039:3:22"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2964:47:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "2964:79:22"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "2955:5:22"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2749:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2757:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2765:5:22",
														"type": ""
													}
												],
												"src": "2709:340:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3165:689:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3211:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3213:77:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3213:79:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3213:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3186:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3195:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3182:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3182:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3207:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3178:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3178:32:22"
															},
															"nodeType": "YulIf",
															"src": "3175:119:22"
														},
														{
															"nodeType": "YulBlock",
															"src": "3304:117:22",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3319:15:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3333:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3323:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3348:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3383:9:22"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3394:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3379:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3379:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3403:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3358:20:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3358:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3348:6:22"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3431:118:22",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3446:16:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3460:2:22",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3450:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3476:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3511:9:22"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3522:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3507:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3507:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3531:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3486:20:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3486:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3476:6:22"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3559:288:22",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3574:46:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3605:9:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3616:2:22",
																						"type": "",
																						"value": "64"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3601:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3601:18:22"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "3588:12:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3588:32:22"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3578:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3667:83:22",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "3669:77:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3669:79:22"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3669:79:22"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3639:6:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3647:18:22",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3636:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3636:30:22"
																	},
																	"nodeType": "YulIf",
																	"src": "3633:117:22"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3764:73:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3809:9:22"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3820:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3805:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3805:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3829:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "3774:30:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3774:63:22"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "3764:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3119:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3130:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3142:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3150:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3158:6:22",
														"type": ""
													}
												],
												"src": "3055:799:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3902:48:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3912:32:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3937:5:22"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3930:6:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3930:13:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3923:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "3923:21:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3912:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3884:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3894:7:22",
														"type": ""
													}
												],
												"src": "3860:90:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4015:50:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4032:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4052:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "4037:14:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4037:21:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4025:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4025:34:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4025:34:22"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4003:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4010:3:22",
														"type": ""
													}
												],
												"src": "3956:109:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4163:118:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4173:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4185:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4196:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4181:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4181:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4173:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4247:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4260:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4271:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4256:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4256:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4209:37:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4209:65:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4209:65:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4135:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4147:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4158:4:22",
														"type": ""
													}
												],
												"src": "4071:210:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4319:28:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4329:12:22",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4336:5:22"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "4329:3:22"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4305:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "4315:3:22",
														"type": ""
													}
												],
												"src": "4287:60:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4413:82:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4423:66:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4481:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nodeType": "YulIdentifier",
																					"src": "4463:17:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4463:24:22"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "4454:8:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4454:34:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "4436:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4436:53:22"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "4423:9:22"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4393:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "4403:9:22",
														"type": ""
													}
												],
												"src": "4353:142:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4561:66:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4571:50:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4615:5:22"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "4584:30:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4584:37:22"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "4571:9:22"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4541:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "4551:9:22",
														"type": ""
													}
												],
												"src": "4501:126:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4718:66:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4728:50:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4772:5:22"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "4741:30:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4741:37:22"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "4728:9:22"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_ISuperfluidToken_$3123_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4698:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "4708:9:22",
														"type": ""
													}
												],
												"src": "4633:151:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4880:91:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4897:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4958:5:22"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_ISuperfluidToken_$3123_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4902:55:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4902:62:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4890:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "4890:75:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4890:75:22"
														}
													]
												},
												"name": "abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4868:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4875:3:22",
														"type": ""
													}
												],
												"src": "4790:181:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5042:53:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5059:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5082:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5064:17:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5064:24:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5052:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5052:37:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5052:37:22"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5030:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5037:3:22",
														"type": ""
													}
												],
												"src": "4977:118:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5280:313:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5290:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5302:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5313:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5298:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5298:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5290:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5395:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5408:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5419:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5404:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5404:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5326:68:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5326:96:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5326:96:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5476:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5489:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5500:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5485:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5485:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5432:43:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5432:72:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5432:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5558:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5571:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5582:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5567:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5567:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5514:43:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5514:72:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5514:72:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ISuperfluidToken_$3123_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5236:9:22",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5248:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5256:6:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5264:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5275:4:22",
														"type": ""
													}
												],
												"src": "5101:492:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5644:32:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5654:16:22",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5665:5:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5654:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5626:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5636:7:22",
														"type": ""
													}
												],
												"src": "5599:77:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5725:79:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5782:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5791:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5794:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5784:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5784:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5784:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5748:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5773:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "5755:17:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5755:24:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5745:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5745:35:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5738:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5738:43:22"
															},
															"nodeType": "YulIf",
															"src": "5735:63:22"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5718:5:22",
														"type": ""
													}
												],
												"src": "5682:122:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5873:80:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5883:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5898:6:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5892:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5892:13:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5883:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5941:5:22"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "5914:26:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "5914:33:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5914:33:22"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5851:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5859:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5867:5:22",
														"type": ""
													}
												],
												"src": "5810:143:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6002:48:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6012:32:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6034:2:22",
																		"type": "",
																		"value": "11"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6038:5:22"
																	}
																],
																"functionName": {
																	"name": "signextend",
																	"nodeType": "YulIdentifier",
																	"src": "6023:10:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:21:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "6012:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_int96",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5984:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5994:7:22",
														"type": ""
													}
												],
												"src": "5959:91:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6097:77:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6152:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6161:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6164:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6154:6:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6154:12:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6154:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6120:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6143:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_int96",
																					"nodeType": "YulIdentifier",
																					"src": "6127:15:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6127:22:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6117:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6117:33:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6110:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6110:41:22"
															},
															"nodeType": "YulIf",
															"src": "6107:61:22"
														}
													]
												},
												"name": "validator_revert_t_int96",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6090:5:22",
														"type": ""
													}
												],
												"src": "6056:118:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6241:78:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6251:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6266:6:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6260:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6260:13:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6251:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6307:5:22"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_int96",
																	"nodeType": "YulIdentifier",
																	"src": "6282:24:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6282:31:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6282:31:22"
														}
													]
												},
												"name": "abi_decode_t_int96_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6219:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6227:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6235:5:22",
														"type": ""
													}
												],
												"src": "6180:139:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6451:690:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6498:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6500:77:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6500:79:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6500:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6472:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6481:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6468:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6468:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6493:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6464:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "6464:33:22"
															},
															"nodeType": "YulIf",
															"src": "6461:120:22"
														},
														{
															"nodeType": "YulBlock",
															"src": "6591:128:22",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6606:15:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6620:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6610:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6635:74:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6681:9:22"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6692:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6677:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6677:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6701:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "6645:31:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6645:64:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6635:6:22"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6729:127:22",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6744:16:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6758:2:22",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6748:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6774:72:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6818:9:22"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6829:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6814:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6814:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6838:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_int96_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "6784:29:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6784:62:22"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "6774:6:22"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6866:129:22",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6881:16:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6895:2:22",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6885:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6911:74:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6957:9:22"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6968:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6953:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6953:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6977:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "6921:31:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6921:64:22"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "6911:6:22"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "7005:129:22",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7020:16:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7034:2:22",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "7024:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7050:74:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7096:9:22"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7107:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7092:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7092:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7116:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "7060:31:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7060:64:22"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "7050:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_int96t_uint256t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6397:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6408:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6420:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6428:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6436:6:22",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "6444:6:22",
														"type": ""
													}
												],
												"src": "6325:816:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7212:53:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7229:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7252:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7234:17:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7234:24:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7222:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7222:37:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7222:37:22"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7200:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7207:3:22",
														"type": ""
													}
												],
												"src": "7147:118:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7369:124:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7379:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7391:9:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7402:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7387:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7387:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7379:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7459:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7472:9:22"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7483:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7468:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7468:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7415:43:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7415:71:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7415:71:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7341:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7353:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7364:4:22",
														"type": ""
													}
												],
												"src": "7271:222:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7562:80:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7572:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "7587:6:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7581:5:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7581:13:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "7572:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7630:5:22"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "7603:26:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7603:33:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7603:33:22"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "7540:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7548:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7556:5:22",
														"type": ""
													}
												],
												"src": "7499:143:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7725:274:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7771:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "7773:77:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7773:79:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7773:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7746:7:22"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7755:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7742:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7742:23:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7767:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7738:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "7738:32:22"
															},
															"nodeType": "YulIf",
															"src": "7735:119:22"
														},
														{
															"nodeType": "YulBlock",
															"src": "7864:128:22",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "7879:15:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7893:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "7883:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "7908:74:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "7954:9:22"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "7965:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7950:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7950:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7974:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "7918:31:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7918:64:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "7908:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7695:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7706:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7718:6:22",
														"type": ""
													}
												],
												"src": "7648:351:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8033:152:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8050:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8053:77:22",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8043:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8043:88:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8043:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8147:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8150:4:22",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8140:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8140:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8140:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8171:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8174:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8164:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8164:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8164:15:22"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "8005:180:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8219:152:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8236:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8239:77:22",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8229:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8229:88:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8229:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8333:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8336:4:22",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8326:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8326:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8326:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8357:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8360:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8350:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8350:15:22"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8350:15:22"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "8191:180:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8420:128:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8430:33:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8457:5:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8439:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8439:24:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "8430:5:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8491:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8493:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8493:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8493:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8478:5:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8485:4:22",
																		"type": "",
																		"value": "0x00"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "8475:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8475:15:22"
															},
															"nodeType": "YulIf",
															"src": "8472:41:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8522:20:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "8533:5:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8540:1:22",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "8529:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8529:13:22"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "8522:3:22"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "8406:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "8416:3:22",
														"type": ""
													}
												],
												"src": "8377:171:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8602:300:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8612:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8635:1:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8617:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8617:20:22"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "8612:1:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8646:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8669:1:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8651:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8651:20:22"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "8646:1:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8844:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8846:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8846:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8846:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8756:1:22"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "8749:6:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8749:9:22"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "8742:6:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8742:17:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "8764:1:22"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8771:66:22",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8839:1:22"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "8767:3:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8767:74:22"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "8761:2:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8761:81:22"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "8738:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8738:105:22"
															},
															"nodeType": "YulIf",
															"src": "8735:131:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8876:20:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8891:1:22"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8894:1:22"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "8887:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8887:9:22"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "8876:7:22"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8585:1:22",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8588:1:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "8594:7:22",
														"type": ""
													}
												],
												"src": "8554:348:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8953:146:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8963:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8986:1:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "8968:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "8968:20:22"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "8963:1:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8997:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9020:1:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9002:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9002:20:22"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "8997:1:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9044:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9046:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9046:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9046:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9038:1:22"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9041:1:22"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9035:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9035:8:22"
															},
															"nodeType": "YulIf",
															"src": "9032:34:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9076:17:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9088:1:22"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9091:1:22"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "9084:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9084:9:22"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "9076:4:22"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8939:1:22",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8942:1:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "8948:4:22",
														"type": ""
													}
												],
												"src": "8908:191:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9149:261:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9159:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9182:1:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9164:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9164:20:22"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "9159:1:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9193:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9216:1:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9198:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9198:20:22"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "9193:1:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9356:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9358:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9358:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9358:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9277:1:22"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9284:66:22",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "9352:1:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9280:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9280:74:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9274:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9274:81:22"
															},
															"nodeType": "YulIf",
															"src": "9271:107:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9388:16:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9399:1:22"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9402:1:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9395:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9395:9:22"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "9388:3:22"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9136:1:22",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9139:1:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "9145:3:22",
														"type": ""
													}
												],
												"src": "9105:305:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9459:190:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9469:33:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9496:5:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9478:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9478:24:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "9469:5:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9592:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9594:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9594:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9594:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9517:5:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9524:66:22",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "9514:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9514:77:22"
															},
															"nodeType": "YulIf",
															"src": "9511:103:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9623:20:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9634:5:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9641:1:22",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9630:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9630:13:22"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "9623:3:22"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9445:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "9455:3:22",
														"type": ""
													}
												],
												"src": "9416:233:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9706:51:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9716:34:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9741:1:22",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9744:5:22"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "9737:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9737:13:22"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "9716:8:22"
																}
															]
														}
													]
												},
												"name": "shift_right_1_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9687:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "9697:8:22",
														"type": ""
													}
												],
												"src": "9655:102:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9836:775:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9846:15:22",
															"value": {
																"name": "_power",
																"nodeType": "YulIdentifier",
																"src": "9855:6:22"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "9846:5:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9870:14:22",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "9879:5:22"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "9870:4:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9928:677:22",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "10016:22:22",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "10018:16:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10018:18:22"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "10018:18:22"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "9994:4:22"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "10004:3:22"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "10009:4:22"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "10000:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10000:14:22"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "9991:2:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9991:24:22"
																		},
																		"nodeType": "YulIf",
																		"src": "9988:50:22"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "10083:419:22",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "10463:25:22",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "10476:5:22"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "10483:4:22"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "10472:3:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10472:16:22"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "10463:5:22"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "10058:8:22"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10068:1:22",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "10054:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10054:16:22"
																		},
																		"nodeType": "YulIf",
																		"src": "10051:451:22"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "10515:23:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "10527:4:22"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "10533:4:22"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "10523:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10523:15:22"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "10515:4:22"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "10551:44:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "10586:8:22"
																				}
																			],
																			"functionName": {
																				"name": "shift_right_1_unsigned",
																				"nodeType": "YulIdentifier",
																				"src": "10563:22:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10563:32:22"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "10551:8:22"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "9904:8:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9914:1:22",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9901:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "9901:15:22"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "9917:2:22",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "9897:3:22",
																"statements": []
															},
															"src": "9893:712:22"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_power",
														"nodeType": "YulTypedName",
														"src": "9791:6:22",
														"type": ""
													},
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "9799:5:22",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "9806:8:22",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "9816:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "9824:5:22",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "9831:4:22",
														"type": ""
													}
												],
												"src": "9763:848:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10677:1013:22",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10872:20:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10874:10:22",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "10883:1:22",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "10874:5:22"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "10885:5:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "10862:8:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10855:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10855:16:22"
															},
															"nodeType": "YulIf",
															"src": "10852:40:22"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10917:20:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10919:10:22",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "10928:1:22",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "10919:5:22"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "10930:5:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "10911:4:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10904:6:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "10904:12:22"
															},
															"nodeType": "YulIf",
															"src": "10901:36:22"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "11047:20:22",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "11049:10:22",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11058:1:22",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "11049:5:22"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "11060:5:22"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "11040:27:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11045:1:22",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "11091:176:22",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "11126:22:22",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "11128:16:22"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11128:18:22"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "11128:18:22"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "11111:8:22"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "11121:3:22",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "11108:2:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11108:17:22"
																				},
																				"nodeType": "YulIf",
																				"src": "11105:43:22"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "11161:25:22",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "11174:1:22",
																							"type": "",
																							"value": "2"
																						},
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "11177:8:22"
																						}
																					],
																					"functionName": {
																						"name": "exp",
																						"nodeType": "YulIdentifier",
																						"src": "11170:3:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11170:16:22"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "11161:5:22"
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "11217:22:22",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "11219:16:22"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11219:18:22"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "11219:18:22"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "11205:5:22"
																						},
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "11212:3:22"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "11202:2:22"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11202:14:22"
																				},
																				"nodeType": "YulIf",
																				"src": "11199:40:22"
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "11252:5:22"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "11076:191:22",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11081:1:22",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "10997:4:22"
															},
															"nodeType": "YulSwitch",
															"src": "10990:277:22"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11399:123:22",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "11413:28:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "11426:4:22"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "11432:8:22"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "11422:3:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11422:19:22"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "11413:5:22"
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "11472:22:22",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "11474:16:22"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11474:18:22"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "11474:18:22"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "power",
																					"nodeType": "YulIdentifier",
																					"src": "11460:5:22"
																				},
																				{
																					"name": "max",
																					"nodeType": "YulIdentifier",
																					"src": "11467:3:22"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "11457:2:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11457:14:22"
																		},
																		"nodeType": "YulIf",
																		"src": "11454:40:22"
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "11507:5:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "11302:4:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11308:2:22",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "11299:2:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11299:12:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "11316:8:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11326:2:22",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "11313:2:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11313:16:22"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "11295:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11295:35:22"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "11351:4:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11357:3:22",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "11348:2:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11348:13:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "11366:8:22"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11376:2:22",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "11363:2:22"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11363:16:22"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "11344:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11344:36:22"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "11279:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11279:111:22"
															},
															"nodeType": "YulIf",
															"src": "11276:246:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11532:57:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11566:1:22",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "11569:4:22"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "11575:8:22"
																	},
																	{
																		"name": "max",
																		"nodeType": "YulIdentifier",
																		"src": "11585:3:22"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "11547:18:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11547:42:22"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "11532:5:22"
																},
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "11539:4:22"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11628:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11630:16:22"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11630:18:22"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11630:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power",
																		"nodeType": "YulIdentifier",
																		"src": "11605:5:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "max",
																				"nodeType": "YulIdentifier",
																				"src": "11616:3:22"
																			},
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "11621:4:22"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "11612:3:22"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11612:14:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "11602:2:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11602:25:22"
															},
															"nodeType": "YulIf",
															"src": "11599:51:22"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11659:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "power",
																		"nodeType": "YulIdentifier",
																		"src": "11672:5:22"
																	},
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "11679:4:22"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "11668:3:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11668:16:22"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "11659:5:22"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "10647:4:22",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "10653:8:22",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "10663:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "10671:5:22",
														"type": ""
													}
												],
												"src": "10617:1073:22"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11762:219:22",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11772:31:22",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "11798:4:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11780:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11780:23:22"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "11772:4:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11812:39:22",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "11842:8:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "11824:17:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11824:27:22"
															},
															"variableNames": [
																{
																	"name": "exponent",
																	"nodeType": "YulIdentifier",
																	"src": "11812:8:22"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11861:113:22",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "11891:4:22"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "11897:8:22"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11907:66:22",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "11870:20:22"
																},
																"nodeType": "YulFunctionCall",
																"src": "11870:104:22"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "11861:5:22"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "11737:4:22",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "11743:8:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "11756:5:22",
														"type": ""
													}
												],
												"src": "11696:285:22"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ISuperfluidToken_$3123_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ISuperfluidToken_$3123_to_t_address(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_ISuperfluidToken_$3123_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_contract$_ISuperfluidToken_$3123_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_int96(value) -> cleaned {\n        cleaned := signextend(11, value)\n    }\n\n    function validator_revert_t_int96(value) {\n        if iszero(eq(value, cleanup_t_int96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_int96_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_int96(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_int96t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_int96_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint256(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n}\n",
									"id": 22,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c80632251a8a914610030575b600080fd5b61004a6004803603810190610045919061052c565b610060565b60405161005791906105b6565b60405180910390f35b6000807360ae865ee4c725cd04353b5aab364553f56cef82905060007349e565ed1bdc17f3d220f72df0857c26fa83f873905060008173ffffffffffffffffffffffffffffffffffffffff1663e6a1e888735d8b4c2554aeb7e86f387b4d6c00ac33499ed01f89896040518463ffffffff1660e01b81526004016100e69392919061063f565b608060405180830381865afa158015610103573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012791906106e5565b505091505060008373ffffffffffffffffffffffffffffffffffffffff16636352211e61015388610204565b6040518263ffffffff1660e01b815260040161016f919061075b565b602060405180830381865afa15801561018c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b0919061078b565b9050600182600b0b13806101ef57508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16145b156101f957600194505b505050509392505050565b6000610211826000610218565b9050919050565b60008083905060008060005b8351811015610343576030848281518110610242576102416107b8565b5b602001015160f81c60f81b60f81c60ff161015801561028557506039848281518110610271576102706107b8565b5b602001015160f81c60f81b60f81c60ff1611155b156102fe5781156102ad57600086141561029e57610343565b85806102a990610816565b9650505b600a836102ba9190610840565b925060308482815181106102d1576102d06107b8565b5b602001015160f81c60f81b60f81c60ff166102ec919061089a565b836102f791906108ce565b9250610330565b602e848281518110610313576103126107b8565b5b602001015160f81c60f81b60f81c60ff16141561032f57600191505b5b808061033b90610924565b915050610224565b5060008511156103685784600a61035a9190610aa0565b826103659190610840565b91505b81935050505092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103b382610388565b9050919050565b6103c3816103a8565b81146103ce57600080fd5b50565b6000813590506103e0816103ba565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610439826103f0565b810181811067ffffffffffffffff8211171561045857610457610401565b5b80604052505050565b600061046b610374565b90506104778282610430565b919050565b600067ffffffffffffffff82111561049757610496610401565b5b6104a0826103f0565b9050602081019050919050565b82818337600083830152505050565b60006104cf6104ca8461047c565b610461565b9050828152602081018484840111156104eb576104ea6103eb565b5b6104f68482856104ad565b509392505050565b600082601f830112610513576105126103e6565b5b81356105238482602086016104bc565b91505092915050565b6000806000606084860312156105455761054461037e565b5b6000610553868287016103d1565b9350506020610564868287016103d1565b925050604084013567ffffffffffffffff81111561058557610584610383565b5b610591868287016104fe565b9150509250925092565b60008115159050919050565b6105b08161059b565b82525050565b60006020820190506105cb60008301846105a7565b92915050565b6000819050919050565b60006105f66105f16105ec84610388565b6105d1565b610388565b9050919050565b6000610608826105db565b9050919050565b600061061a826105fd565b9050919050565b61062a8161060f565b82525050565b610639816103a8565b82525050565b60006060820190506106546000830186610621565b6106616020830185610630565b61066e6040830184610630565b949350505050565b6000819050919050565b61068981610676565b811461069457600080fd5b50565b6000815190506106a681610680565b92915050565b600081600b0b9050919050565b6106c2816106ac565b81146106cd57600080fd5b50565b6000815190506106df816106b9565b92915050565b600080600080608085870312156106ff576106fe61037e565b5b600061070d87828801610697565b945050602061071e878288016106d0565b935050604061072f87828801610697565b925050606061074087828801610697565b91505092959194509250565b61075581610676565b82525050565b6000602082019050610770600083018461074c565b92915050565b600081519050610785816103ba565b92915050565b6000602082840312156107a1576107a061037e565b5b60006107af84828501610776565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061082182610676565b91506000821415610835576108346107e7565b5b600182039050919050565b600061084b82610676565b915061085683610676565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561088f5761088e6107e7565b5b828202905092915050565b60006108a582610676565b91506108b083610676565b9250828210156108c3576108c26107e7565b5b828203905092915050565b60006108d982610676565b91506108e483610676565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610919576109186107e7565b5b828201905092915050565b600061092f82610676565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610962576109616107e7565b5b600182019050919050565b60008160011c9050919050565b6000808291508390505b60018511156109c4578086048111156109a05761099f6107e7565b5b60018516156109af5780820291505b80810290506109bd8561096d565b9450610984565b94509492505050565b6000826109dd5760019050610a99565b816109eb5760009050610a99565b8160018114610a015760028114610a0b57610a3a565b6001915050610a99565b60ff841115610a1d57610a1c6107e7565b5b8360020a915084821115610a3457610a336107e7565b5b50610a99565b5060208310610133831016604e8410600b8410161715610a6f5782820a905083811115610a6a57610a696107e7565b5b610a99565b610a7c848484600161097a565b92509050818404811115610a9357610a926107e7565b5b81810290505b9392505050565b6000610aab82610676565b9150610ab683610676565b9250610ae37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846109cd565b90509291505056fea26469706673582212205d17ef19d00c579521c7b81c67d146b19163e61084724599ab0343c57002394d64736f6c634300080a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2251A8A9 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x52C JUMP JUMPDEST PUSH2 0x60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57 SWAP2 SWAP1 PUSH2 0x5B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH20 0x60AE865EE4C725CD04353B5AAB364553F56CEF82 SWAP1 POP PUSH1 0x0 PUSH20 0x49E565ED1BDC17F3D220F72DF0857C26FA83F873 SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xE6A1E888 PUSH20 0x5D8B4C2554AEB7E86F387B4D6C00AC33499ED01F DUP10 DUP10 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x63F JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x103 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x127 SWAP2 SWAP1 PUSH2 0x6E5 JUMP JUMPDEST POP POP SWAP2 POP POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E PUSH2 0x153 DUP9 PUSH2 0x204 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x75B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x18C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B0 SWAP2 SWAP1 PUSH2 0x78B JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 PUSH1 0xB SIGNEXTEND SGT DUP1 PUSH2 0x1EF JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x1 SWAP5 POP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x211 DUP3 PUSH1 0x0 PUSH2 0x218 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x343 JUMPI PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x242 JUMPI PUSH2 0x241 PUSH2 0x7B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND LT ISZERO DUP1 ISZERO PUSH2 0x285 JUMPI POP PUSH1 0x39 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x271 JUMPI PUSH2 0x270 PUSH2 0x7B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND GT ISZERO JUMPDEST ISZERO PUSH2 0x2FE JUMPI DUP2 ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP7 EQ ISZERO PUSH2 0x29E JUMPI PUSH2 0x343 JUMP JUMPDEST DUP6 DUP1 PUSH2 0x2A9 SWAP1 PUSH2 0x816 JUMP JUMPDEST SWAP7 POP POP JUMPDEST PUSH1 0xA DUP4 PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x840 JUMP JUMPDEST SWAP3 POP PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2D1 JUMPI PUSH2 0x2D0 PUSH2 0x7B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND PUSH2 0x2EC SWAP2 SWAP1 PUSH2 0x89A JUMP JUMPDEST DUP4 PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x8CE JUMP JUMPDEST SWAP3 POP PUSH2 0x330 JUMP JUMPDEST PUSH1 0x2E DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x313 JUMPI PUSH2 0x312 PUSH2 0x7B8 JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD MLOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0xF8 SHR PUSH1 0xFF AND EQ ISZERO PUSH2 0x32F JUMPI PUSH1 0x1 SWAP2 POP JUMPDEST JUMPDEST DUP1 DUP1 PUSH2 0x33B SWAP1 PUSH2 0x924 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x224 JUMP JUMPDEST POP PUSH1 0x0 DUP6 GT ISZERO PUSH2 0x368 JUMPI DUP5 PUSH1 0xA PUSH2 0x35A SWAP2 SWAP1 PUSH2 0xAA0 JUMP JUMPDEST DUP3 PUSH2 0x365 SWAP2 SWAP1 PUSH2 0x840 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B3 DUP3 PUSH2 0x388 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3C3 DUP2 PUSH2 0x3A8 JUMP JUMPDEST DUP2 EQ PUSH2 0x3CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3E0 DUP2 PUSH2 0x3BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x439 DUP3 PUSH2 0x3F0 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x458 JUMPI PUSH2 0x457 PUSH2 0x401 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46B PUSH2 0x374 JUMP JUMPDEST SWAP1 POP PUSH2 0x477 DUP3 DUP3 PUSH2 0x430 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x497 JUMPI PUSH2 0x496 PUSH2 0x401 JUMP JUMPDEST JUMPDEST PUSH2 0x4A0 DUP3 PUSH2 0x3F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4CF PUSH2 0x4CA DUP5 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x461 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x4EB JUMPI PUSH2 0x4EA PUSH2 0x3EB JUMP JUMPDEST JUMPDEST PUSH2 0x4F6 DUP5 DUP3 DUP6 PUSH2 0x4AD JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x513 JUMPI PUSH2 0x512 PUSH2 0x3E6 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x523 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x4BC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x545 JUMPI PUSH2 0x544 PUSH2 0x37E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x553 DUP7 DUP3 DUP8 ADD PUSH2 0x3D1 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x564 DUP7 DUP3 DUP8 ADD PUSH2 0x3D1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x585 JUMPI PUSH2 0x584 PUSH2 0x383 JUMP JUMPDEST JUMPDEST PUSH2 0x591 DUP7 DUP3 DUP8 ADD PUSH2 0x4FE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5B0 DUP2 PUSH2 0x59B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5CB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F6 PUSH2 0x5F1 PUSH2 0x5EC DUP5 PUSH2 0x388 JUMP JUMPDEST PUSH2 0x5D1 JUMP JUMPDEST PUSH2 0x388 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x608 DUP3 PUSH2 0x5DB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x61A DUP3 PUSH2 0x5FD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x62A DUP2 PUSH2 0x60F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x639 DUP2 PUSH2 0x3A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x654 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x621 JUMP JUMPDEST PUSH2 0x661 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x630 JUMP JUMPDEST PUSH2 0x66E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x630 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x689 DUP2 PUSH2 0x676 JUMP JUMPDEST DUP2 EQ PUSH2 0x694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6A6 DUP2 PUSH2 0x680 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xB SIGNEXTEND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6C2 DUP2 PUSH2 0x6AC JUMP JUMPDEST DUP2 EQ PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x6DF DUP2 PUSH2 0x6B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6FF JUMPI PUSH2 0x6FE PUSH2 0x37E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x70D DUP8 DUP3 DUP9 ADD PUSH2 0x697 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x71E DUP8 DUP3 DUP9 ADD PUSH2 0x6D0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x72F DUP8 DUP3 DUP9 ADD PUSH2 0x697 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x740 DUP8 DUP3 DUP9 ADD PUSH2 0x697 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x755 DUP2 PUSH2 0x676 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x770 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x74C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x785 DUP2 PUSH2 0x3BA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7A1 JUMPI PUSH2 0x7A0 PUSH2 0x37E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x7AF DUP5 DUP3 DUP6 ADD PUSH2 0x776 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x821 DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x835 JUMPI PUSH2 0x834 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84B DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH2 0x856 DUP4 PUSH2 0x676 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x88F JUMPI PUSH2 0x88E PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8A5 DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH2 0x8B0 DUP4 PUSH2 0x676 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x8C3 JUMPI PUSH2 0x8C2 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D9 DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH2 0x8E4 DUP4 PUSH2 0x676 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x919 JUMPI PUSH2 0x918 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x92F DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x962 JUMPI PUSH2 0x961 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x9C4 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x9A0 JUMPI PUSH2 0x99F PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x9AF JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x9BD DUP6 PUSH2 0x96D JUMP JUMPDEST SWAP5 POP PUSH2 0x984 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x9DD JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xA99 JUMP JUMPDEST DUP2 PUSH2 0x9EB JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xA99 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xA01 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xA0B JUMPI PUSH2 0xA3A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0xA99 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xA1D JUMPI PUSH2 0xA1C PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0xA34 JUMPI PUSH2 0xA33 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST POP PUSH2 0xA99 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xA6F JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0xA6A JUMPI PUSH2 0xA69 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST PUSH2 0xA99 JUMP JUMPDEST PUSH2 0xA7C DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x97A JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0xA93 JUMPI PUSH2 0xA92 PUSH2 0x7E7 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAAB DUP3 PUSH2 0x676 JUMP JUMPDEST SWAP2 POP PUSH2 0xAB6 DUP4 PUSH2 0x676 JUMP JUMPDEST SWAP3 POP PUSH2 0xAE3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x9CD JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D OR 0xEF NOT 0xD0 0xC JUMPI SWAP6 0x21 0xC7 0xB8 SHR PUSH8 0xD146B19163E61084 PUSH19 0x4599AB0343C57002394D64736F6C634300080A STOP CALLER ",
							"sourceMap": "789:1578:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;811:625;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;913:15;969:16;996:42;969:70;;1049:29;1106:42;1049:100;;1162:14;1183:4;:12;;;1213:42;1258:6;1266:8;1183:92;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1159:116;;;;;1285:14;1302:8;:16;;;1319:19;1328:9;1319:8;:19::i;:::-;1302:37;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1285:54;;1365:1;1354:8;:12;;;:32;;;;1380:6;1370:16;;:6;:16;;;1354:32;1350:80;;;1415:4;1402:17;;1350:80;930:506;;;;811:625;;;;;:::o;1442:118::-;1501:18;1538:15;1547:2;1551:1;1538:8;:15::i;:::-;1531:22;;1442:118;;;:::o;1566:799::-;1634:18;1664:20;1693:2;1664:32;;1706:9;1729:13;1765:6;1760:516;1781:7;:14;1777:1;:18;1760:516;;;1848:2;1832:7;1840:1;1832:10;;;;;;;;:::i;:::-;;;;;;;;;;1826:17;;1821:23;;:29;;1820:66;;;;;1883:2;1867:7;1875:1;1867:10;;;;;;;;:::i;:::-;;;;;;;;;;1861:17;;1856:23;;:29;;1820:66;1816:450;;;1910:8;1906:175;;;1951:1;1945:2;:7;1941:122;;;1979:5;;1941:122;2037:4;;;;;:::i;:::-;;;;1906:175;2106:2;2098:10;;;;;:::i;:::-;;;2160:2;2145:7;2153:1;2145:10;;;;;;;;:::i;:::-;;;;;;;;;;2139:17;;2134:23;;:28;;;;:::i;:::-;2126:36;;;;;:::i;:::-;;;1816:450;;;2214:2;2198:7;2206:1;2198:10;;;;;;;;:::i;:::-;;;;;;;;;;2192:17;;2187:23;;:29;2183:83;;;2247:4;2236:15;;2183:83;1816:450;1797:3;;;;;:::i;:::-;;;;1760:516;;;;2294:1;2289:2;:6;2285:53;;;2325:2;2319;:8;;;;:::i;:::-;2311:16;;;;;:::i;:::-;;;2285:53;2354:4;2347:11;;;;;1566:799;;;;:::o;7:75:22:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:117::-;950:1;947;940:12;964:117;1073:1;1070;1063:12;1087:102;1128:6;1179:2;1175:7;1170:2;1163:5;1159:14;1155:28;1145:38;;1087:102;;;:::o;1195:180::-;1243:77;1240:1;1233:88;1340:4;1337:1;1330:15;1364:4;1361:1;1354:15;1381:281;1464:27;1486:4;1464:27;:::i;:::-;1456:6;1452:40;1594:6;1582:10;1579:22;1558:18;1546:10;1543:34;1540:62;1537:88;;;1605:18;;:::i;:::-;1537:88;1645:10;1641:2;1634:22;1424:238;1381:281;;:::o;1668:129::-;1702:6;1729:20;;:::i;:::-;1719:30;;1758:33;1786:4;1778:6;1758:33;:::i;:::-;1668:129;;;:::o;1803:308::-;1865:4;1955:18;1947:6;1944:30;1941:56;;;1977:18;;:::i;:::-;1941:56;2015:29;2037:6;2015:29;:::i;:::-;2007:37;;2099:4;2093;2089:15;2081:23;;1803:308;;;:::o;2117:154::-;2201:6;2196:3;2191;2178:30;2263:1;2254:6;2249:3;2245:16;2238:27;2117:154;;;:::o;2277:412::-;2355:5;2380:66;2396:49;2438:6;2396:49;:::i;:::-;2380:66;:::i;:::-;2371:75;;2469:6;2462:5;2455:21;2507:4;2500:5;2496:16;2545:3;2536:6;2531:3;2527:16;2524:25;2521:112;;;2552:79;;:::i;:::-;2521:112;2642:41;2676:6;2671:3;2666;2642:41;:::i;:::-;2361:328;2277:412;;;;;:::o;2709:340::-;2765:5;2814:3;2807:4;2799:6;2795:17;2791:27;2781:122;;2822:79;;:::i;:::-;2781:122;2939:6;2926:20;2964:79;3039:3;3031:6;3024:4;3016:6;3012:17;2964:79;:::i;:::-;2955:88;;2771:278;2709:340;;;;:::o;3055:799::-;3142:6;3150;3158;3207:2;3195:9;3186:7;3182:23;3178:32;3175:119;;;3213:79;;:::i;:::-;3175:119;3333:1;3358:53;3403:7;3394:6;3383:9;3379:22;3358:53;:::i;:::-;3348:63;;3304:117;3460:2;3486:53;3531:7;3522:6;3511:9;3507:22;3486:53;:::i;:::-;3476:63;;3431:118;3616:2;3605:9;3601:18;3588:32;3647:18;3639:6;3636:30;3633:117;;;3669:79;;:::i;:::-;3633:117;3774:63;3829:7;3820:6;3809:9;3805:22;3774:63;:::i;:::-;3764:73;;3559:288;3055:799;;;;;:::o;3860:90::-;3894:7;3937:5;3930:13;3923:21;3912:32;;3860:90;;;:::o;3956:109::-;4037:21;4052:5;4037:21;:::i;:::-;4032:3;4025:34;3956:109;;:::o;4071:210::-;4158:4;4196:2;4185:9;4181:18;4173:26;;4209:65;4271:1;4260:9;4256:17;4247:6;4209:65;:::i;:::-;4071:210;;;;:::o;4287:60::-;4315:3;4336:5;4329:12;;4287:60;;;:::o;4353:142::-;4403:9;4436:53;4454:34;4463:24;4481:5;4463:24;:::i;:::-;4454:34;:::i;:::-;4436:53;:::i;:::-;4423:66;;4353:142;;;:::o;4501:126::-;4551:9;4584:37;4615:5;4584:37;:::i;:::-;4571:50;;4501:126;;;:::o;4633:151::-;4708:9;4741:37;4772:5;4741:37;:::i;:::-;4728:50;;4633:151;;;:::o;4790:181::-;4902:62;4958:5;4902:62;:::i;:::-;4897:3;4890:75;4790:181;;:::o;4977:118::-;5064:24;5082:5;5064:24;:::i;:::-;5059:3;5052:37;4977:118;;:::o;5101:492::-;5275:4;5313:2;5302:9;5298:18;5290:26;;5326:96;5419:1;5408:9;5404:17;5395:6;5326:96;:::i;:::-;5432:72;5500:2;5489:9;5485:18;5476:6;5432:72;:::i;:::-;5514;5582:2;5571:9;5567:18;5558:6;5514:72;:::i;:::-;5101:492;;;;;;:::o;5599:77::-;5636:7;5665:5;5654:16;;5599:77;;;:::o;5682:122::-;5755:24;5773:5;5755:24;:::i;:::-;5748:5;5745:35;5735:63;;5794:1;5791;5784:12;5735:63;5682:122;:::o;5810:143::-;5867:5;5898:6;5892:13;5883:22;;5914:33;5941:5;5914:33;:::i;:::-;5810:143;;;;:::o;5959:91::-;5994:7;6038:5;6034:2;6023:21;6012:32;;5959:91;;;:::o;6056:118::-;6127:22;6143:5;6127:22;:::i;:::-;6120:5;6117:33;6107:61;;6164:1;6161;6154:12;6107:61;6056:118;:::o;6180:139::-;6235:5;6266:6;6260:13;6251:22;;6282:31;6307:5;6282:31;:::i;:::-;6180:139;;;;:::o;6325:816::-;6420:6;6428;6436;6444;6493:3;6481:9;6472:7;6468:23;6464:33;6461:120;;;6500:79;;:::i;:::-;6461:120;6620:1;6645:64;6701:7;6692:6;6681:9;6677:22;6645:64;:::i;:::-;6635:74;;6591:128;6758:2;6784:62;6838:7;6829:6;6818:9;6814:22;6784:62;:::i;:::-;6774:72;;6729:127;6895:2;6921:64;6977:7;6968:6;6957:9;6953:22;6921:64;:::i;:::-;6911:74;;6866:129;7034:2;7060:64;7116:7;7107:6;7096:9;7092:22;7060:64;:::i;:::-;7050:74;;7005:129;6325:816;;;;;;;:::o;7147:118::-;7234:24;7252:5;7234:24;:::i;:::-;7229:3;7222:37;7147:118;;:::o;7271:222::-;7364:4;7402:2;7391:9;7387:18;7379:26;;7415:71;7483:1;7472:9;7468:17;7459:6;7415:71;:::i;:::-;7271:222;;;;:::o;7499:143::-;7556:5;7587:6;7581:13;7572:22;;7603:33;7630:5;7603:33;:::i;:::-;7499:143;;;;:::o;7648:351::-;7718:6;7767:2;7755:9;7746:7;7742:23;7738:32;7735:119;;;7773:79;;:::i;:::-;7735:119;7893:1;7918:64;7974:7;7965:6;7954:9;7950:22;7918:64;:::i;:::-;7908:74;;7864:128;7648:351;;;;:::o;8005:180::-;8053:77;8050:1;8043:88;8150:4;8147:1;8140:15;8174:4;8171:1;8164:15;8191:180;8239:77;8236:1;8229:88;8336:4;8333:1;8326:15;8360:4;8357:1;8350:15;8377:171;8416:3;8439:24;8457:5;8439:24;:::i;:::-;8430:33;;8485:4;8478:5;8475:15;8472:41;;;8493:18;;:::i;:::-;8472:41;8540:1;8533:5;8529:13;8522:20;;8377:171;;;:::o;8554:348::-;8594:7;8617:20;8635:1;8617:20;:::i;:::-;8612:25;;8651:20;8669:1;8651:20;:::i;:::-;8646:25;;8839:1;8771:66;8767:74;8764:1;8761:81;8756:1;8749:9;8742:17;8738:105;8735:131;;;8846:18;;:::i;:::-;8735:131;8894:1;8891;8887:9;8876:20;;8554:348;;;;:::o;8908:191::-;8948:4;8968:20;8986:1;8968:20;:::i;:::-;8963:25;;9002:20;9020:1;9002:20;:::i;:::-;8997:25;;9041:1;9038;9035:8;9032:34;;;9046:18;;:::i;:::-;9032:34;9091:1;9088;9084:9;9076:17;;8908:191;;;;:::o;9105:305::-;9145:3;9164:20;9182:1;9164:20;:::i;:::-;9159:25;;9198:20;9216:1;9198:20;:::i;:::-;9193:25;;9352:1;9284:66;9280:74;9277:1;9274:81;9271:107;;;9358:18;;:::i;:::-;9271:107;9402:1;9399;9395:9;9388:16;;9105:305;;;;:::o;9416:233::-;9455:3;9478:24;9496:5;9478:24;:::i;:::-;9469:33;;9524:66;9517:5;9514:77;9511:103;;;9594:18;;:::i;:::-;9511:103;9641:1;9634:5;9630:13;9623:20;;9416:233;;;:::o;9655:102::-;9697:8;9744:5;9741:1;9737:13;9716:34;;9655:102;;;:::o;9763:848::-;9824:5;9831:4;9855:6;9846:15;;9879:5;9870:14;;9893:712;9914:1;9904:8;9901:15;9893:712;;;10009:4;10004:3;10000:14;9994:4;9991:24;9988:50;;;10018:18;;:::i;:::-;9988:50;10068:1;10058:8;10054:16;10051:451;;;10483:4;10476:5;10472:16;10463:25;;10051:451;10533:4;10527;10523:15;10515:23;;10563:32;10586:8;10563:32;:::i;:::-;10551:44;;9893:712;;;9763:848;;;;;;;:::o;10617:1073::-;10671:5;10862:8;10852:40;;10883:1;10874:10;;10885:5;;10852:40;10911:4;10901:36;;10928:1;10919:10;;10930:5;;10901:36;10997:4;11045:1;11040:27;;;;11081:1;11076:191;;;;10990:277;;11040:27;11058:1;11049:10;;11060:5;;;11076:191;11121:3;11111:8;11108:17;11105:43;;;11128:18;;:::i;:::-;11105:43;11177:8;11174:1;11170:16;11161:25;;11212:3;11205:5;11202:14;11199:40;;;11219:18;;:::i;:::-;11199:40;11252:5;;;10990:277;;11376:2;11366:8;11363:16;11357:3;11351:4;11348:13;11344:36;11326:2;11316:8;11313:16;11308:2;11302:4;11299:12;11295:35;11279:111;11276:246;;;11432:8;11426:4;11422:19;11413:28;;11467:3;11460:5;11457:14;11454:40;;;11474:18;;:::i;:::-;11454:40;11507:5;;11276:246;11547:42;11585:3;11575:8;11569:4;11566:1;11547:42;:::i;:::-;11532:57;;;;11621:4;11616:3;11612:14;11605:5;11602:25;11599:51;;;11630:18;;:::i;:::-;11599:51;11679:4;11672:5;11668:16;11659:25;;10617:1073;;;;;;:::o;11696:285::-;11756:5;11780:23;11798:4;11780:23;:::i;:::-;11772:31;;11824:27;11842:8;11824:27;:::i;:::-;11812:39;;11870:104;11907:66;11897:8;11891:4;11870:104;:::i;:::-;11861:113;;11696:285;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "569800",
								"executionCost": "606",
								"totalCost": "570406"
							},
							"external": {
								"isSubscribed(address,address,string)": "infinite"
							},
							"internal": {
								"parseInt(string memory)": "infinite",
								"parseInt(string memory,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 789,
									"end": 2367,
									"name": "PUSH",
									"source": 21,
									"value": "80"
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "PUSH",
									"source": 21,
									"value": "40"
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "CALLVALUE",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "ISZERO",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "JUMPI",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "REVERT",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "tag",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "PUSH #[$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "PUSH [$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "CODECOPY",
									"source": 21
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 789,
									"end": 2367,
									"name": "RETURN",
									"source": 21
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205d17ef19d00c579521c7b81c67d146b19163e61084724599ab0343c57002394d64736f6c634300080a0033",
									".code": [
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "CALLVALUE",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "tag",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "CALLDATASIZE",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH",
											"source": 21,
											"value": "E0"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH",
											"source": 21,
											"value": "2251A8A9"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "3"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "tag",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 789,
											"end": 2367,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "tag",
											"source": 21,
											"value": "3"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "CALLDATASIZE",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "5"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "6"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "tag",
											"source": 21,
											"value": "5"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "7"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "tag",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "8"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "9"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "tag",
											"source": 21,
											"value": "8"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "RETURN",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "tag",
											"source": 21,
											"value": "7"
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 913,
											"end": 928,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 969,
											"end": 985,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 996,
											"end": 1038,
											"name": "PUSH",
											"source": 21,
											"value": "60AE865EE4C725CD04353B5AAB364553F56CEF82"
										},
										{
											"begin": 969,
											"end": 1039,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 969,
											"end": 1039,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1049,
											"end": 1078,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1106,
											"end": 1148,
											"name": "PUSH",
											"source": 21,
											"value": "49E565ED1BDC17F3D220F72DF0857C26FA83F873"
										},
										{
											"begin": 1049,
											"end": 1149,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1049,
											"end": 1149,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1162,
											"end": 1176,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1183,
											"end": 1187,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1195,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1183,
											"end": 1195,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1195,
											"name": "PUSH",
											"source": 21,
											"value": "E6A1E888"
										},
										{
											"begin": 1213,
											"end": 1255,
											"name": "PUSH",
											"source": 21,
											"value": "5D8B4C2554AEB7E86F387B4D6C00AC33499ED01F"
										},
										{
											"begin": 1258,
											"end": 1264,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 1266,
											"end": 1274,
											"name": "DUP10",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "E0"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "SHL",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "11"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "12"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "tag",
											"source": 21,
											"value": "11"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "GAS",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "STATICCALL",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "14"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "RETURNDATASIZE",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "RETURNDATACOPY",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "RETURNDATASIZE",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "tag",
											"source": 21,
											"value": "14"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "RETURNDATASIZE",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "NOT",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "15"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "16"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "tag",
											"source": 21,
											"value": "15"
										},
										{
											"begin": 1183,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1159,
											"end": 1275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1159,
											"end": 1275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1159,
											"end": 1275,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1159,
											"end": 1275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1159,
											"end": 1275,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1285,
											"end": 1299,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1310,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1318,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1302,
											"end": 1318,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1318,
											"name": "PUSH",
											"source": 21,
											"value": "6352211E"
										},
										{
											"begin": 1319,
											"end": 1338,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "17"
										},
										{
											"begin": 1328,
											"end": 1337,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 1319,
											"end": 1327,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "18"
										},
										{
											"begin": 1319,
											"end": 1338,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1319,
											"end": 1338,
											"name": "tag",
											"source": 21,
											"value": "17"
										},
										{
											"begin": 1319,
											"end": 1338,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "E0"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "SHL",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "19"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "tag",
											"source": 21,
											"value": "19"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "GAS",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "STATICCALL",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "22"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "RETURNDATASIZE",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "RETURNDATACOPY",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "RETURNDATASIZE",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "tag",
											"source": 21,
											"value": "22"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "RETURNDATASIZE",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "NOT",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "1F"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "23"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "24"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "tag",
											"source": 21,
											"value": "23"
										},
										{
											"begin": 1302,
											"end": 1339,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1285,
											"end": 1339,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1285,
											"end": 1339,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1365,
											"end": 1366,
											"name": "PUSH",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 1354,
											"end": 1362,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1354,
											"end": 1366,
											"name": "PUSH",
											"source": 21,
											"value": "B"
										},
										{
											"begin": 1354,
											"end": 1366,
											"name": "SIGNEXTEND",
											"source": 21
										},
										{
											"begin": 1354,
											"end": 1366,
											"name": "SGT",
											"source": 21
										},
										{
											"begin": 1354,
											"end": 1386,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1354,
											"end": 1386,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "25"
										},
										{
											"begin": 1354,
											"end": 1386,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1354,
											"end": 1386,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1380,
											"end": 1386,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1370,
											"end": 1386,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1370,
											"end": 1386,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1370,
											"end": 1376,
											"name": "DUP9",
											"source": 21
										},
										{
											"begin": 1370,
											"end": 1386,
											"name": "PUSH",
											"source": 21,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1370,
											"end": 1386,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1370,
											"end": 1386,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 1354,
											"end": 1386,
											"name": "tag",
											"source": 21,
											"value": "25"
										},
										{
											"begin": 1354,
											"end": 1386,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1350,
											"end": 1430,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1350,
											"end": 1430,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "26"
										},
										{
											"begin": 1350,
											"end": 1430,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1415,
											"end": 1419,
											"name": "PUSH",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 1402,
											"end": 1419,
											"name": "SWAP5",
											"source": 21
										},
										{
											"begin": 1402,
											"end": 1419,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1350,
											"end": 1430,
											"name": "tag",
											"source": 21,
											"value": "26"
										},
										{
											"begin": 1350,
											"end": 1430,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 930,
											"end": 1436,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 930,
											"end": 1436,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 930,
											"end": 1436,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 930,
											"end": 1436,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 811,
											"end": 1436,
											"name": "JUMP",
											"source": 21,
											"value": "[out]"
										},
										{
											"begin": 1442,
											"end": 1560,
											"name": "tag",
											"source": 21,
											"value": "18"
										},
										{
											"begin": 1442,
											"end": 1560,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1501,
											"end": 1519,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1538,
											"end": 1553,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "28"
										},
										{
											"begin": 1547,
											"end": 1549,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1551,
											"end": 1552,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1538,
											"end": 1546,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "29"
										},
										{
											"begin": 1538,
											"end": 1553,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1538,
											"end": 1553,
											"name": "tag",
											"source": 21,
											"value": "28"
										},
										{
											"begin": 1538,
											"end": 1553,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1531,
											"end": 1553,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1531,
											"end": 1553,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1442,
											"end": 1560,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1442,
											"end": 1560,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1442,
											"end": 1560,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1442,
											"end": 1560,
											"name": "JUMP",
											"source": 21,
											"value": "[out]"
										},
										{
											"begin": 1566,
											"end": 2365,
											"name": "tag",
											"source": 21,
											"value": "29"
										},
										{
											"begin": 1566,
											"end": 2365,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1634,
											"end": 1652,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1664,
											"end": 1684,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1693,
											"end": 1695,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1664,
											"end": 1696,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1664,
											"end": 1696,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1706,
											"end": 1715,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1729,
											"end": 1742,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1765,
											"end": 1771,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "tag",
											"source": 21,
											"value": "31"
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1781,
											"end": 1788,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1781,
											"end": 1795,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1777,
											"end": 1778,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1777,
											"end": 1795,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "32"
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1848,
											"end": 1850,
											"name": "PUSH",
											"source": 21,
											"value": "30"
										},
										{
											"begin": 1832,
											"end": 1839,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 1840,
											"end": 1841,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "34"
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "35"
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "36"
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "tag",
											"source": 21,
											"value": "35"
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "tag",
											"source": 21,
											"value": "34"
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 1832,
											"end": 1842,
											"name": "SHL",
											"source": 21
										},
										{
											"begin": 1826,
											"end": 1843,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 1826,
											"end": 1843,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 1821,
											"end": 1844,
											"name": "PUSH",
											"source": 21,
											"value": "FF"
										},
										{
											"begin": 1821,
											"end": 1844,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1821,
											"end": 1850,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 1821,
											"end": 1850,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1820,
											"end": 1886,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1820,
											"end": 1886,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1820,
											"end": 1886,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "37"
										},
										{
											"begin": 1820,
											"end": 1886,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1820,
											"end": 1886,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1883,
											"end": 1885,
											"name": "PUSH",
											"source": 21,
											"value": "39"
										},
										{
											"begin": 1867,
											"end": 1874,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 1875,
											"end": 1876,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "38"
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "39"
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "36"
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "tag",
											"source": 21,
											"value": "39"
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "tag",
											"source": 21,
											"value": "38"
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 1867,
											"end": 1877,
											"name": "SHL",
											"source": 21
										},
										{
											"begin": 1861,
											"end": 1878,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 1861,
											"end": 1878,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 1856,
											"end": 1879,
											"name": "PUSH",
											"source": 21,
											"value": "FF"
										},
										{
											"begin": 1856,
											"end": 1879,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 1856,
											"end": 1885,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 1856,
											"end": 1885,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1820,
											"end": 1886,
											"name": "tag",
											"source": 21,
											"value": "37"
										},
										{
											"begin": 1820,
											"end": 1886,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1816,
											"end": 2266,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1816,
											"end": 2266,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1816,
											"end": 2266,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1910,
											"end": 1918,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 1906,
											"end": 2081,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1906,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "41"
										},
										{
											"begin": 1906,
											"end": 2081,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1951,
											"end": 1952,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 1945,
											"end": 1947,
											"name": "DUP7",
											"source": 21
										},
										{
											"begin": 1945,
											"end": 1952,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 1941,
											"end": 2063,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 1941,
											"end": 2063,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "42"
										},
										{
											"begin": 1941,
											"end": 2063,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 1979,
											"end": 1984,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "32"
										},
										{
											"begin": 1979,
											"end": 1984,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1941,
											"end": 2063,
											"name": "tag",
											"source": 21,
											"value": "42"
										},
										{
											"begin": 1941,
											"end": 2063,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "44"
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "45"
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "tag",
											"source": 21,
											"value": "44"
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "SWAP7",
											"source": 21
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2037,
											"end": 2041,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1906,
											"end": 2081,
											"name": "tag",
											"source": 21,
											"value": "41"
										},
										{
											"begin": 1906,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2106,
											"end": 2108,
											"name": "PUSH",
											"source": 21,
											"value": "A"
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "46"
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "47"
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "tag",
											"source": 21,
											"value": "46"
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 2098,
											"end": 2108,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2160,
											"end": 2162,
											"name": "PUSH",
											"source": 21,
											"value": "30"
										},
										{
											"begin": 2145,
											"end": 2152,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 2153,
											"end": 2154,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "48"
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "49"
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "36"
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "tag",
											"source": 21,
											"value": "49"
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "tag",
											"source": 21,
											"value": "48"
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 2145,
											"end": 2155,
											"name": "SHL",
											"source": 21
										},
										{
											"begin": 2139,
											"end": 2156,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 2139,
											"end": 2156,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 2134,
											"end": 2157,
											"name": "PUSH",
											"source": 21,
											"value": "FF"
										},
										{
											"begin": 2134,
											"end": 2157,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 2134,
											"end": 2162,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "50"
										},
										{
											"begin": 2134,
											"end": 2162,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2134,
											"end": 2162,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2134,
											"end": 2162,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "51"
										},
										{
											"begin": 2134,
											"end": 2162,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 2134,
											"end": 2162,
											"name": "tag",
											"source": 21,
											"value": "50"
										},
										{
											"begin": 2134,
											"end": 2162,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "52"
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "53"
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "tag",
											"source": 21,
											"value": "52"
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 2126,
											"end": 2162,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1816,
											"end": 2266,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "54"
										},
										{
											"begin": 1816,
											"end": 2266,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1816,
											"end": 2266,
											"name": "tag",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 1816,
											"end": 2266,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2214,
											"end": 2216,
											"name": "PUSH",
											"source": 21,
											"value": "2E"
										},
										{
											"begin": 2198,
											"end": 2205,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 2206,
											"end": 2207,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "55"
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "56"
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "36"
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "tag",
											"source": 21,
											"value": "56"
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "tag",
											"source": 21,
											"value": "55"
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "PUSH",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "MLOAD",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 2198,
											"end": 2208,
											"name": "SHL",
											"source": 21
										},
										{
											"begin": 2192,
											"end": 2209,
											"name": "PUSH",
											"source": 21,
											"value": "F8"
										},
										{
											"begin": 2192,
											"end": 2209,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 2187,
											"end": 2210,
											"name": "PUSH",
											"source": 21,
											"value": "FF"
										},
										{
											"begin": 2187,
											"end": 2210,
											"name": "AND",
											"source": 21
										},
										{
											"begin": 2187,
											"end": 2216,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 2183,
											"end": 2266,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 2183,
											"end": 2266,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "57"
										},
										{
											"begin": 2183,
											"end": 2266,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 2247,
											"end": 2251,
											"name": "PUSH",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 2236,
											"end": 2251,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2236,
											"end": 2251,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2183,
											"end": 2266,
											"name": "tag",
											"source": 21,
											"value": "57"
										},
										{
											"begin": 2183,
											"end": 2266,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1816,
											"end": 2266,
											"name": "tag",
											"source": 21,
											"value": "54"
										},
										{
											"begin": 1816,
											"end": 2266,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "58"
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "59"
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "tag",
											"source": 21,
											"value": "58"
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1797,
											"end": 1800,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "31"
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "tag",
											"source": 21,
											"value": "32"
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1760,
											"end": 2276,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2294,
											"end": 2295,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 2289,
											"end": 2291,
											"name": "DUP6",
											"source": 21
										},
										{
											"begin": 2289,
											"end": 2295,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 2285,
											"end": 2338,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 2285,
											"end": 2338,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 2285,
											"end": 2338,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 2325,
											"end": 2327,
											"name": "DUP5",
											"source": 21
										},
										{
											"begin": 2319,
											"end": 2321,
											"name": "PUSH",
											"source": 21,
											"value": "A"
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "61"
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "62"
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "tag",
											"source": 21,
											"value": "61"
										},
										{
											"begin": 2319,
											"end": 2327,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "63"
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "47"
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "JUMP",
											"source": 21,
											"value": "[in]"
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "tag",
											"source": 21,
											"value": "63"
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 2311,
											"end": 2327,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2285,
											"end": 2338,
											"name": "tag",
											"source": 21,
											"value": "60"
										},
										{
											"begin": 2285,
											"end": 2338,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 2354,
											"end": 2358,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 2347,
											"end": 2358,
											"name": "SWAP4",
											"source": 21
										},
										{
											"begin": 2347,
											"end": 2358,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2347,
											"end": 2358,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2347,
											"end": 2358,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 2347,
											"end": 2358,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1566,
											"end": 2365,
											"name": "SWAP3",
											"source": 21
										},
										{
											"begin": 1566,
											"end": 2365,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 1566,
											"end": 2365,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1566,
											"end": 2365,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1566,
											"end": 2365,
											"name": "JUMP",
											"source": 21,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "tag",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 40,
											"end": 46,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 75,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 67,
											"end": 76,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 57,
											"end": 76,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 57,
											"end": 76,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7,
											"end": 82,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 22,
											"value": "65"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 22,
											"value": "66"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 22,
											"value": "67"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 22,
											"value": "68"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "107"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "67"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 22,
											"value": "107"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 22,
											"value": "69"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "109"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "68"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 22,
											"value": "109"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "110"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 22,
											"value": "110"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 22,
											"value": "70"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "112"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "69"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 22,
											"value": "112"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 841,
											"end": 958,
											"name": "tag",
											"source": 22,
											"value": "71"
										},
										{
											"begin": 841,
											"end": 958,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 950,
											"end": 951,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 947,
											"end": 948,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 940,
											"end": 952,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 964,
											"end": 1081,
											"name": "tag",
											"source": 22,
											"value": "72"
										},
										{
											"begin": 964,
											"end": 1081,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1073,
											"end": 1074,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1070,
											"end": 1071,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1063,
											"end": 1075,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1189,
											"name": "tag",
											"source": 22,
											"value": "73"
										},
										{
											"begin": 1087,
											"end": 1189,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1128,
											"end": 1134,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1179,
											"end": 1181,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 1175,
											"end": 1182,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 1170,
											"end": 1172,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 1163,
											"end": 1168,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 1159,
											"end": 1173,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1155,
											"end": 1183,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1145,
											"end": 1183,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1145,
											"end": 1183,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1189,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1189,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1189,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1189,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 1195,
											"end": 1375,
											"name": "tag",
											"source": 22,
											"value": "74"
										},
										{
											"begin": 1195,
											"end": 1375,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1243,
											"end": 1320,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1241,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1233,
											"end": 1321,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1340,
											"end": 1344,
											"name": "PUSH",
											"source": 22,
											"value": "41"
										},
										{
											"begin": 1337,
											"end": 1338,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 1330,
											"end": 1345,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1364,
											"end": 1368,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 1361,
											"end": 1362,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1354,
											"end": 1369,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1381,
											"end": 1662,
											"name": "tag",
											"source": 22,
											"value": "75"
										},
										{
											"begin": 1381,
											"end": 1662,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1464,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "118"
										},
										{
											"begin": 1486,
											"end": 1490,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1464,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "73"
										},
										{
											"begin": 1464,
											"end": 1491,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1464,
											"end": 1491,
											"name": "tag",
											"source": 22,
											"value": "118"
										},
										{
											"begin": 1464,
											"end": 1491,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1456,
											"end": 1462,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1452,
											"end": 1492,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1594,
											"end": 1600,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1582,
											"end": 1592,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1579,
											"end": 1601,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 1558,
											"end": 1576,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1546,
											"end": 1556,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1543,
											"end": 1577,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 1540,
											"end": 1602,
											"name": "OR",
											"source": 22
										},
										{
											"begin": 1537,
											"end": 1625,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1537,
											"end": 1625,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "119"
										},
										{
											"begin": 1537,
											"end": 1625,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1605,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "120"
										},
										{
											"begin": 1605,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "74"
										},
										{
											"begin": 1605,
											"end": 1623,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1605,
											"end": 1623,
											"name": "tag",
											"source": 22,
											"value": "120"
										},
										{
											"begin": 1605,
											"end": 1623,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1537,
											"end": 1625,
											"name": "tag",
											"source": 22,
											"value": "119"
										},
										{
											"begin": 1537,
											"end": 1625,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1645,
											"end": 1655,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1641,
											"end": 1643,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 1634,
											"end": 1656,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1424,
											"end": 1662,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1381,
											"end": 1662,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1381,
											"end": 1662,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1381,
											"end": 1662,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1797,
											"name": "tag",
											"source": 22,
											"value": "76"
										},
										{
											"begin": 1668,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1702,
											"end": 1708,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1729,
											"end": 1749,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "122"
										},
										{
											"begin": 1729,
											"end": 1749,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "64"
										},
										{
											"begin": 1729,
											"end": 1749,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1729,
											"end": 1749,
											"name": "tag",
											"source": 22,
											"value": "122"
										},
										{
											"begin": 1729,
											"end": 1749,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1719,
											"end": 1749,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1758,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "123"
										},
										{
											"begin": 1786,
											"end": 1790,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1778,
											"end": 1784,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1758,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "75"
										},
										{
											"begin": 1758,
											"end": 1791,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1758,
											"end": 1791,
											"name": "tag",
											"source": 22,
											"value": "123"
										},
										{
											"begin": 1758,
											"end": 1791,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1668,
											"end": 1797,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1668,
											"end": 1797,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1668,
											"end": 1797,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1668,
											"end": 1797,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 1803,
											"end": 2111,
											"name": "tag",
											"source": 22,
											"value": "77"
										},
										{
											"begin": 1803,
											"end": 2111,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1865,
											"end": 1869,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1955,
											"end": 1973,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1947,
											"end": 1953,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1944,
											"end": 1974,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 1941,
											"end": 1997,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 1941,
											"end": 1997,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "125"
										},
										{
											"begin": 1941,
											"end": 1997,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1977,
											"end": 1995,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "126"
										},
										{
											"begin": 1977,
											"end": 1995,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "74"
										},
										{
											"begin": 1977,
											"end": 1995,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 1977,
											"end": 1995,
											"name": "tag",
											"source": 22,
											"value": "126"
										},
										{
											"begin": 1977,
											"end": 1995,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1941,
											"end": 1997,
											"name": "tag",
											"source": 22,
											"value": "125"
										},
										{
											"begin": 1941,
											"end": 1997,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2015,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "127"
										},
										{
											"begin": 2037,
											"end": 2043,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2015,
											"end": 2044,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "73"
										},
										{
											"begin": 2015,
											"end": 2044,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2015,
											"end": 2044,
											"name": "tag",
											"source": 22,
											"value": "127"
										},
										{
											"begin": 2015,
											"end": 2044,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2007,
											"end": 2044,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2007,
											"end": 2044,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2099,
											"end": 2103,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2093,
											"end": 2097,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2089,
											"end": 2104,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2081,
											"end": 2104,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2081,
											"end": 2104,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1803,
											"end": 2111,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1803,
											"end": 2111,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1803,
											"end": 2111,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1803,
											"end": 2111,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 2117,
											"end": 2271,
											"name": "tag",
											"source": 22,
											"value": "78"
										},
										{
											"begin": 2117,
											"end": 2271,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2201,
											"end": 2207,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2196,
											"end": 2199,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2191,
											"end": 2194,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 2178,
											"end": 2208,
											"name": "CALLDATACOPY",
											"source": 22
										},
										{
											"begin": 2263,
											"end": 2264,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2254,
											"end": 2260,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 2249,
											"end": 2252,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 2245,
											"end": 2261,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2238,
											"end": 2265,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 2117,
											"end": 2271,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2117,
											"end": 2271,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2117,
											"end": 2271,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2117,
											"end": 2271,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 2277,
											"end": 2689,
											"name": "tag",
											"source": 22,
											"value": "79"
										},
										{
											"begin": 2277,
											"end": 2689,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2355,
											"end": 2360,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2380,
											"end": 2446,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "130"
										},
										{
											"begin": 2396,
											"end": 2445,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "131"
										},
										{
											"begin": 2438,
											"end": 2444,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2396,
											"end": 2445,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "77"
										},
										{
											"begin": 2396,
											"end": 2445,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2396,
											"end": 2445,
											"name": "tag",
											"source": 22,
											"value": "131"
										},
										{
											"begin": 2396,
											"end": 2445,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2380,
											"end": 2446,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "76"
										},
										{
											"begin": 2380,
											"end": 2446,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2380,
											"end": 2446,
											"name": "tag",
											"source": 22,
											"value": "130"
										},
										{
											"begin": 2380,
											"end": 2446,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2371,
											"end": 2446,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2371,
											"end": 2446,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2469,
											"end": 2475,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2462,
											"end": 2467,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2455,
											"end": 2476,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 2507,
											"end": 2511,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2500,
											"end": 2505,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2496,
											"end": 2512,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2545,
											"end": 2548,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2536,
											"end": 2542,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2531,
											"end": 2534,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2527,
											"end": 2543,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2524,
											"end": 2549,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 2521,
											"end": 2633,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2521,
											"end": 2633,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "132"
										},
										{
											"begin": 2521,
											"end": 2633,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2552,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "133"
										},
										{
											"begin": 2552,
											"end": 2631,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "72"
										},
										{
											"begin": 2552,
											"end": 2631,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2552,
											"end": 2631,
											"name": "tag",
											"source": 22,
											"value": "133"
										},
										{
											"begin": 2552,
											"end": 2631,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2521,
											"end": 2633,
											"name": "tag",
											"source": 22,
											"value": "132"
										},
										{
											"begin": 2521,
											"end": 2633,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2642,
											"end": 2683,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "134"
										},
										{
											"begin": 2676,
											"end": 2682,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 2671,
											"end": 2674,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2666,
											"end": 2669,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 2642,
											"end": 2683,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "78"
										},
										{
											"begin": 2642,
											"end": 2683,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2642,
											"end": 2683,
											"name": "tag",
											"source": 22,
											"value": "134"
										},
										{
											"begin": 2642,
											"end": 2683,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2361,
											"end": 2689,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2277,
											"end": 2689,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 2277,
											"end": 2689,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2277,
											"end": 2689,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2277,
											"end": 2689,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2277,
											"end": 2689,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2277,
											"end": 2689,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 2709,
											"end": 3049,
											"name": "tag",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 2709,
											"end": 3049,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2765,
											"end": 2770,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2814,
											"end": 2817,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2807,
											"end": 2811,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 2799,
											"end": 2805,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 2795,
											"end": 2812,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2791,
											"end": 2818,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 2781,
											"end": 2903,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "136"
										},
										{
											"begin": 2781,
											"end": 2903,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2822,
											"end": 2901,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "137"
										},
										{
											"begin": 2822,
											"end": 2901,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "71"
										},
										{
											"begin": 2822,
											"end": 2901,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2822,
											"end": 2901,
											"name": "tag",
											"source": 22,
											"value": "137"
										},
										{
											"begin": 2822,
											"end": 2901,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2781,
											"end": 2903,
											"name": "tag",
											"source": 22,
											"value": "136"
										},
										{
											"begin": 2781,
											"end": 2903,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2939,
											"end": 2945,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2926,
											"end": 2946,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 2964,
											"end": 3043,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "138"
										},
										{
											"begin": 3039,
											"end": 3042,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 3031,
											"end": 3037,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3024,
											"end": 3028,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 3016,
											"end": 3022,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 3012,
											"end": 3029,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2964,
											"end": 3043,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "79"
										},
										{
											"begin": 2964,
											"end": 3043,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 2964,
											"end": 3043,
											"name": "tag",
											"source": 22,
											"value": "138"
										},
										{
											"begin": 2964,
											"end": 3043,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2955,
											"end": 3043,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2955,
											"end": 3043,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2771,
											"end": 3049,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2709,
											"end": 3049,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2709,
											"end": 3049,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2709,
											"end": 3049,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2709,
											"end": 3049,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2709,
											"end": 3049,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 3055,
											"end": 3854,
											"name": "tag",
											"source": 22,
											"value": "6"
										},
										{
											"begin": 3055,
											"end": 3854,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3142,
											"end": 3148,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3150,
											"end": 3156,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 3158,
											"end": 3164,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3207,
											"end": 3209,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 3195,
											"end": 3204,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 3186,
											"end": 3193,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 3182,
											"end": 3205,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 3178,
											"end": 3210,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 3175,
											"end": 3294,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 3175,
											"end": 3294,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "140"
										},
										{
											"begin": 3175,
											"end": 3294,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 3213,
											"end": 3292,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "141"
										},
										{
											"begin": 3213,
											"end": 3292,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "65"
										},
										{
											"begin": 3213,
											"end": 3292,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 3213,
											"end": 3292,
											"name": "tag",
											"source": 22,
											"value": "141"
										},
										{
											"begin": 3213,
											"end": 3292,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3175,
											"end": 3294,
											"name": "tag",
											"source": 22,
											"value": "140"
										},
										{
											"begin": 3175,
											"end": 3294,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3333,
											"end": 3334,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3358,
											"end": 3411,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "142"
										},
										{
											"begin": 3403,
											"end": 3410,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 3394,
											"end": 3400,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3383,
											"end": 3392,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 3379,
											"end": 3401,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3358,
											"end": 3411,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "70"
										},
										{
											"begin": 3358,
											"end": 3411,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 3358,
											"end": 3411,
											"name": "tag",
											"source": 22,
											"value": "142"
										},
										{
											"begin": 3358,
											"end": 3411,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3348,
											"end": 3411,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 3348,
											"end": 3411,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3304,
											"end": 3421,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3460,
											"end": 3462,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "143"
										},
										{
											"begin": 3531,
											"end": 3538,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 3522,
											"end": 3528,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3511,
											"end": 3520,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 3507,
											"end": 3529,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "70"
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "tag",
											"source": 22,
											"value": "143"
										},
										{
											"begin": 3486,
											"end": 3539,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3476,
											"end": 3539,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3476,
											"end": 3539,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3431,
											"end": 3549,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3616,
											"end": 3618,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 3605,
											"end": 3614,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 3601,
											"end": 3619,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3588,
											"end": 3620,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3639,
											"end": 3645,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 3636,
											"end": 3666,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 3633,
											"end": 3750,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 3633,
											"end": 3750,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "144"
										},
										{
											"begin": 3633,
											"end": 3750,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 3669,
											"end": 3748,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "145"
										},
										{
											"begin": 3669,
											"end": 3748,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "66"
										},
										{
											"begin": 3669,
											"end": 3748,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 3669,
											"end": 3748,
											"name": "tag",
											"source": 22,
											"value": "145"
										},
										{
											"begin": 3669,
											"end": 3748,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3633,
											"end": 3750,
											"name": "tag",
											"source": 22,
											"value": "144"
										},
										{
											"begin": 3633,
											"end": 3750,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3774,
											"end": 3837,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "146"
										},
										{
											"begin": 3829,
											"end": 3836,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 3820,
											"end": 3826,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3809,
											"end": 3818,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 3805,
											"end": 3827,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3774,
											"end": 3837,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 3774,
											"end": 3837,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 3774,
											"end": 3837,
											"name": "tag",
											"source": 22,
											"value": "146"
										},
										{
											"begin": 3774,
											"end": 3837,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3764,
											"end": 3837,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 3764,
											"end": 3837,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3559,
											"end": 3847,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3055,
											"end": 3854,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3055,
											"end": 3854,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3055,
											"end": 3854,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3055,
											"end": 3854,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3055,
											"end": 3854,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3055,
											"end": 3854,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 3860,
											"end": 3950,
											"name": "tag",
											"source": 22,
											"value": "81"
										},
										{
											"begin": 3860,
											"end": 3950,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3894,
											"end": 3901,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3937,
											"end": 3942,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 3930,
											"end": 3943,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 3923,
											"end": 3944,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 3912,
											"end": 3944,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 3912,
											"end": 3944,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3860,
											"end": 3950,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 3860,
											"end": 3950,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 3860,
											"end": 3950,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3860,
											"end": 3950,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 3956,
											"end": 4065,
											"name": "tag",
											"source": 22,
											"value": "82"
										},
										{
											"begin": 3956,
											"end": 4065,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "149"
										},
										{
											"begin": 4052,
											"end": 4057,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "81"
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "tag",
											"source": 22,
											"value": "149"
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4032,
											"end": 4035,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3956,
											"end": 4065,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3956,
											"end": 4065,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3956,
											"end": 4065,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 4071,
											"end": 4281,
											"name": "tag",
											"source": 22,
											"value": "9"
										},
										{
											"begin": 4071,
											"end": 4281,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4158,
											"end": 4162,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4196,
											"end": 4198,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 4185,
											"end": 4194,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4181,
											"end": 4199,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4173,
											"end": 4199,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4173,
											"end": 4199,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4209,
											"end": 4274,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "151"
										},
										{
											"begin": 4271,
											"end": 4272,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4260,
											"end": 4269,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 4256,
											"end": 4273,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4247,
											"end": 4253,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 4209,
											"end": 4274,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "82"
										},
										{
											"begin": 4209,
											"end": 4274,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4209,
											"end": 4274,
											"name": "tag",
											"source": 22,
											"value": "151"
										},
										{
											"begin": 4209,
											"end": 4274,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4071,
											"end": 4281,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 4071,
											"end": 4281,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4071,
											"end": 4281,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4071,
											"end": 4281,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4071,
											"end": 4281,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 4287,
											"end": 4347,
											"name": "tag",
											"source": 22,
											"value": "83"
										},
										{
											"begin": 4287,
											"end": 4347,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4315,
											"end": 4318,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4336,
											"end": 4341,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4329,
											"end": 4341,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4329,
											"end": 4341,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4287,
											"end": 4347,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4287,
											"end": 4347,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4287,
											"end": 4347,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4287,
											"end": 4347,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 4353,
											"end": 4495,
											"name": "tag",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 4353,
											"end": 4495,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4403,
											"end": 4412,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4436,
											"end": 4489,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "154"
										},
										{
											"begin": 4454,
											"end": 4488,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "155"
										},
										{
											"begin": 4463,
											"end": 4487,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "156"
										},
										{
											"begin": 4481,
											"end": 4486,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 4463,
											"end": 4487,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "67"
										},
										{
											"begin": 4463,
											"end": 4487,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4463,
											"end": 4487,
											"name": "tag",
											"source": 22,
											"value": "156"
										},
										{
											"begin": 4463,
											"end": 4487,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4454,
											"end": 4488,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "83"
										},
										{
											"begin": 4454,
											"end": 4488,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4454,
											"end": 4488,
											"name": "tag",
											"source": 22,
											"value": "155"
										},
										{
											"begin": 4454,
											"end": 4488,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4436,
											"end": 4489,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "67"
										},
										{
											"begin": 4436,
											"end": 4489,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4436,
											"end": 4489,
											"name": "tag",
											"source": 22,
											"value": "154"
										},
										{
											"begin": 4436,
											"end": 4489,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4423,
											"end": 4489,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4423,
											"end": 4489,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4353,
											"end": 4495,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4353,
											"end": 4495,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4353,
											"end": 4495,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4353,
											"end": 4495,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 4501,
											"end": 4627,
											"name": "tag",
											"source": 22,
											"value": "85"
										},
										{
											"begin": 4501,
											"end": 4627,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4551,
											"end": 4560,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4584,
											"end": 4621,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "158"
										},
										{
											"begin": 4615,
											"end": 4620,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4584,
											"end": 4621,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "84"
										},
										{
											"begin": 4584,
											"end": 4621,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4584,
											"end": 4621,
											"name": "tag",
											"source": 22,
											"value": "158"
										},
										{
											"begin": 4584,
											"end": 4621,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4571,
											"end": 4621,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4571,
											"end": 4621,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4501,
											"end": 4627,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4501,
											"end": 4627,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4501,
											"end": 4627,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4501,
											"end": 4627,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 4633,
											"end": 4784,
											"name": "tag",
											"source": 22,
											"value": "86"
										},
										{
											"begin": 4633,
											"end": 4784,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4708,
											"end": 4717,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4741,
											"end": 4778,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "160"
										},
										{
											"begin": 4772,
											"end": 4777,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4741,
											"end": 4778,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "85"
										},
										{
											"begin": 4741,
											"end": 4778,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4741,
											"end": 4778,
											"name": "tag",
											"source": 22,
											"value": "160"
										},
										{
											"begin": 4741,
											"end": 4778,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4728,
											"end": 4778,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4728,
											"end": 4778,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4633,
											"end": 4784,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4633,
											"end": 4784,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4633,
											"end": 4784,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4633,
											"end": 4784,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 4790,
											"end": 4971,
											"name": "tag",
											"source": 22,
											"value": "87"
										},
										{
											"begin": 4790,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4902,
											"end": 4964,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "162"
										},
										{
											"begin": 4958,
											"end": 4963,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4902,
											"end": 4964,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "86"
										},
										{
											"begin": 4902,
											"end": 4964,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 4902,
											"end": 4964,
											"name": "tag",
											"source": 22,
											"value": "162"
										},
										{
											"begin": 4902,
											"end": 4964,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4897,
											"end": 4900,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4890,
											"end": 4965,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4790,
											"end": 4971,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4790,
											"end": 4971,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4790,
											"end": 4971,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 4977,
											"end": 5095,
											"name": "tag",
											"source": 22,
											"value": "88"
										},
										{
											"begin": 4977,
											"end": 5095,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5064,
											"end": 5088,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "164"
										},
										{
											"begin": 5082,
											"end": 5087,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 5064,
											"end": 5088,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "68"
										},
										{
											"begin": 5064,
											"end": 5088,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 5064,
											"end": 5088,
											"name": "tag",
											"source": 22,
											"value": "164"
										},
										{
											"begin": 5064,
											"end": 5088,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5059,
											"end": 5062,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5052,
											"end": 5089,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4977,
											"end": 5095,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4977,
											"end": 5095,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4977,
											"end": 5095,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 5101,
											"end": 5593,
											"name": "tag",
											"source": 22,
											"value": "12"
										},
										{
											"begin": 5101,
											"end": 5593,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5275,
											"end": 5279,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5313,
											"end": 5315,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 5302,
											"end": 5311,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5298,
											"end": 5316,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5290,
											"end": 5316,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5290,
											"end": 5316,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5326,
											"end": 5422,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "166"
										},
										{
											"begin": 5419,
											"end": 5420,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5408,
											"end": 5417,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 5404,
											"end": 5421,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5395,
											"end": 5401,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 5326,
											"end": 5422,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "87"
										},
										{
											"begin": 5326,
											"end": 5422,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 5326,
											"end": 5422,
											"name": "tag",
											"source": 22,
											"value": "166"
										},
										{
											"begin": 5326,
											"end": 5422,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5432,
											"end": 5504,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "167"
										},
										{
											"begin": 5500,
											"end": 5502,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 5489,
											"end": 5498,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 5485,
											"end": 5503,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5476,
											"end": 5482,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 5432,
											"end": 5504,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "88"
										},
										{
											"begin": 5432,
											"end": 5504,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 5432,
											"end": 5504,
											"name": "tag",
											"source": 22,
											"value": "167"
										},
										{
											"begin": 5432,
											"end": 5504,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5514,
											"end": 5586,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "168"
										},
										{
											"begin": 5582,
											"end": 5584,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 5571,
											"end": 5580,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 5567,
											"end": 5585,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5558,
											"end": 5564,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 5514,
											"end": 5586,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "88"
										},
										{
											"begin": 5514,
											"end": 5586,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 5514,
											"end": 5586,
											"name": "tag",
											"source": 22,
											"value": "168"
										},
										{
											"begin": 5514,
											"end": 5586,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5101,
											"end": 5593,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 5101,
											"end": 5593,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 5101,
											"end": 5593,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5101,
											"end": 5593,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5101,
											"end": 5593,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5101,
											"end": 5593,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5101,
											"end": 5593,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 5599,
											"end": 5676,
											"name": "tag",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 5599,
											"end": 5676,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5636,
											"end": 5643,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5665,
											"end": 5670,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 5654,
											"end": 5670,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5654,
											"end": 5670,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5599,
											"end": 5676,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 5599,
											"end": 5676,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5599,
											"end": 5676,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5599,
											"end": 5676,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 5682,
											"end": 5804,
											"name": "tag",
											"source": 22,
											"value": "90"
										},
										{
											"begin": 5682,
											"end": 5804,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5755,
											"end": 5779,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "171"
										},
										{
											"begin": 5773,
											"end": 5778,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 5755,
											"end": 5779,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 5755,
											"end": 5779,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 5755,
											"end": 5779,
											"name": "tag",
											"source": 22,
											"value": "171"
										},
										{
											"begin": 5755,
											"end": 5779,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5748,
											"end": 5753,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 5745,
											"end": 5780,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 5735,
											"end": 5798,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "172"
										},
										{
											"begin": 5735,
											"end": 5798,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 5794,
											"end": 5795,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5791,
											"end": 5792,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 5784,
											"end": 5796,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 5735,
											"end": 5798,
											"name": "tag",
											"source": 22,
											"value": "172"
										},
										{
											"begin": 5735,
											"end": 5798,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5682,
											"end": 5804,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5682,
											"end": 5804,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 5810,
											"end": 5953,
											"name": "tag",
											"source": 22,
											"value": "91"
										},
										{
											"begin": 5810,
											"end": 5953,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5867,
											"end": 5872,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5898,
											"end": 5904,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 5892,
											"end": 5905,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 5883,
											"end": 5905,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5883,
											"end": 5905,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5914,
											"end": 5947,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "174"
										},
										{
											"begin": 5941,
											"end": 5946,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 5914,
											"end": 5947,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "90"
										},
										{
											"begin": 5914,
											"end": 5947,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 5914,
											"end": 5947,
											"name": "tag",
											"source": 22,
											"value": "174"
										},
										{
											"begin": 5914,
											"end": 5947,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5810,
											"end": 5953,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 5810,
											"end": 5953,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 5810,
											"end": 5953,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5810,
											"end": 5953,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5810,
											"end": 5953,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 5959,
											"end": 6050,
											"name": "tag",
											"source": 22,
											"value": "92"
										},
										{
											"begin": 5959,
											"end": 6050,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5994,
											"end": 6001,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6038,
											"end": 6043,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6034,
											"end": 6036,
											"name": "PUSH",
											"source": 22,
											"value": "B"
										},
										{
											"begin": 6023,
											"end": 6044,
											"name": "SIGNEXTEND",
											"source": 22
										},
										{
											"begin": 6012,
											"end": 6044,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6012,
											"end": 6044,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5959,
											"end": 6050,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 5959,
											"end": 6050,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5959,
											"end": 6050,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5959,
											"end": 6050,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 6056,
											"end": 6174,
											"name": "tag",
											"source": 22,
											"value": "93"
										},
										{
											"begin": 6056,
											"end": 6174,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6127,
											"end": 6149,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "177"
										},
										{
											"begin": 6143,
											"end": 6148,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6127,
											"end": 6149,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "92"
										},
										{
											"begin": 6127,
											"end": 6149,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 6127,
											"end": 6149,
											"name": "tag",
											"source": 22,
											"value": "177"
										},
										{
											"begin": 6127,
											"end": 6149,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6120,
											"end": 6125,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6117,
											"end": 6150,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 6107,
											"end": 6168,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "178"
										},
										{
											"begin": 6107,
											"end": 6168,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 6164,
											"end": 6165,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6161,
											"end": 6162,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 6154,
											"end": 6166,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 6107,
											"end": 6168,
											"name": "tag",
											"source": 22,
											"value": "178"
										},
										{
											"begin": 6107,
											"end": 6168,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6056,
											"end": 6174,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6056,
											"end": 6174,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 6180,
											"end": 6319,
											"name": "tag",
											"source": 22,
											"value": "94"
										},
										{
											"begin": 6180,
											"end": 6319,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6235,
											"end": 6240,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6266,
											"end": 6272,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6260,
											"end": 6273,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 6251,
											"end": 6273,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6251,
											"end": 6273,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6282,
											"end": 6313,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "180"
										},
										{
											"begin": 6307,
											"end": 6312,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6282,
											"end": 6313,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "93"
										},
										{
											"begin": 6282,
											"end": 6313,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 6282,
											"end": 6313,
											"name": "tag",
											"source": 22,
											"value": "180"
										},
										{
											"begin": 6282,
											"end": 6313,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6180,
											"end": 6319,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 6180,
											"end": 6319,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 6180,
											"end": 6319,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6180,
											"end": 6319,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6180,
											"end": 6319,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "tag",
											"source": 22,
											"value": "16"
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6420,
											"end": 6426,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6428,
											"end": 6434,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 6436,
											"end": 6442,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6444,
											"end": 6450,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 6493,
											"end": 6496,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 6481,
											"end": 6490,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 6472,
											"end": 6479,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 6468,
											"end": 6491,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 6464,
											"end": 6497,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 6461,
											"end": 6581,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 6461,
											"end": 6581,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "182"
										},
										{
											"begin": 6461,
											"end": 6581,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 6500,
											"end": 6579,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "183"
										},
										{
											"begin": 6500,
											"end": 6579,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "65"
										},
										{
											"begin": 6500,
											"end": 6579,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 6500,
											"end": 6579,
											"name": "tag",
											"source": 22,
											"value": "183"
										},
										{
											"begin": 6500,
											"end": 6579,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6461,
											"end": 6581,
											"name": "tag",
											"source": 22,
											"value": "182"
										},
										{
											"begin": 6461,
											"end": 6581,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6620,
											"end": 6621,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6645,
											"end": 6709,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "184"
										},
										{
											"begin": 6701,
											"end": 6708,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 6692,
											"end": 6698,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6681,
											"end": 6690,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 6677,
											"end": 6699,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6645,
											"end": 6709,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "91"
										},
										{
											"begin": 6645,
											"end": 6709,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 6645,
											"end": 6709,
											"name": "tag",
											"source": 22,
											"value": "184"
										},
										{
											"begin": 6645,
											"end": 6709,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6635,
											"end": 6709,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 6635,
											"end": 6709,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6591,
											"end": 6719,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6758,
											"end": 6760,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 6784,
											"end": 6846,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "185"
										},
										{
											"begin": 6838,
											"end": 6845,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 6829,
											"end": 6835,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6818,
											"end": 6827,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 6814,
											"end": 6836,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6784,
											"end": 6846,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "94"
										},
										{
											"begin": 6784,
											"end": 6846,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 6784,
											"end": 6846,
											"name": "tag",
											"source": 22,
											"value": "185"
										},
										{
											"begin": 6784,
											"end": 6846,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6774,
											"end": 6846,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 6774,
											"end": 6846,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6729,
											"end": 6856,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6895,
											"end": 6897,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 6921,
											"end": 6985,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "186"
										},
										{
											"begin": 6977,
											"end": 6984,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 6968,
											"end": 6974,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6957,
											"end": 6966,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 6953,
											"end": 6975,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6921,
											"end": 6985,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "91"
										},
										{
											"begin": 6921,
											"end": 6985,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 6921,
											"end": 6985,
											"name": "tag",
											"source": 22,
											"value": "186"
										},
										{
											"begin": 6921,
											"end": 6985,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6911,
											"end": 6985,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 6911,
											"end": 6985,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6866,
											"end": 6995,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7034,
											"end": 7036,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 7060,
											"end": 7124,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "187"
										},
										{
											"begin": 7116,
											"end": 7123,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 7107,
											"end": 7113,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7096,
											"end": 7105,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 7092,
											"end": 7114,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7060,
											"end": 7124,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "91"
										},
										{
											"begin": 7060,
											"end": 7124,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 7060,
											"end": 7124,
											"name": "tag",
											"source": 22,
											"value": "187"
										},
										{
											"begin": 7060,
											"end": 7124,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7050,
											"end": 7124,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 7050,
											"end": 7124,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7005,
											"end": 7134,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "SWAP6",
											"source": 22
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6325,
											"end": 7141,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 7147,
											"end": 7265,
											"name": "tag",
											"source": 22,
											"value": "95"
										},
										{
											"begin": 7147,
											"end": 7265,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7234,
											"end": 7258,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "189"
										},
										{
											"begin": 7252,
											"end": 7257,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7234,
											"end": 7258,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 7234,
											"end": 7258,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 7234,
											"end": 7258,
											"name": "tag",
											"source": 22,
											"value": "189"
										},
										{
											"begin": 7234,
											"end": 7258,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7229,
											"end": 7232,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7222,
											"end": 7259,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 7147,
											"end": 7265,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7147,
											"end": 7265,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7147,
											"end": 7265,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 7271,
											"end": 7493,
											"name": "tag",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7271,
											"end": 7493,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7364,
											"end": 7368,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7402,
											"end": 7404,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7391,
											"end": 7400,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7387,
											"end": 7405,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7379,
											"end": 7405,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 7379,
											"end": 7405,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7415,
											"end": 7486,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "191"
										},
										{
											"begin": 7483,
											"end": 7484,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7472,
											"end": 7481,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 7468,
											"end": 7485,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7459,
											"end": 7465,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 7415,
											"end": 7486,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "95"
										},
										{
											"begin": 7415,
											"end": 7486,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 7415,
											"end": 7486,
											"name": "tag",
											"source": 22,
											"value": "191"
										},
										{
											"begin": 7415,
											"end": 7486,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7271,
											"end": 7493,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 7271,
											"end": 7493,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 7271,
											"end": 7493,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7271,
											"end": 7493,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7271,
											"end": 7493,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 7499,
											"end": 7642,
											"name": "tag",
											"source": 22,
											"value": "96"
										},
										{
											"begin": 7499,
											"end": 7642,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7556,
											"end": 7561,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7587,
											"end": 7593,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7581,
											"end": 7594,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 7572,
											"end": 7594,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 7572,
											"end": 7594,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7603,
											"end": 7636,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "193"
										},
										{
											"begin": 7630,
											"end": 7635,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7603,
											"end": 7636,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "69"
										},
										{
											"begin": 7603,
											"end": 7636,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 7603,
											"end": 7636,
											"name": "tag",
											"source": 22,
											"value": "193"
										},
										{
											"begin": 7603,
											"end": 7636,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7499,
											"end": 7642,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 7499,
											"end": 7642,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 7499,
											"end": 7642,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7499,
											"end": 7642,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7499,
											"end": 7642,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 7648,
											"end": 7999,
											"name": "tag",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 7648,
											"end": 7999,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7718,
											"end": 7724,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7767,
											"end": 7769,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7755,
											"end": 7764,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7746,
											"end": 7753,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 7742,
											"end": 7765,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 7738,
											"end": 7770,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 7735,
											"end": 7854,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 7735,
											"end": 7854,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "195"
										},
										{
											"begin": 7735,
											"end": 7854,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 7773,
											"end": 7852,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "196"
										},
										{
											"begin": 7773,
											"end": 7852,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "65"
										},
										{
											"begin": 7773,
											"end": 7852,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 7773,
											"end": 7852,
											"name": "tag",
											"source": 22,
											"value": "196"
										},
										{
											"begin": 7773,
											"end": 7852,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7735,
											"end": 7854,
											"name": "tag",
											"source": 22,
											"value": "195"
										},
										{
											"begin": 7735,
											"end": 7854,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7893,
											"end": 7894,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7918,
											"end": 7982,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "197"
										},
										{
											"begin": 7974,
											"end": 7981,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 7965,
											"end": 7971,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7954,
											"end": 7963,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 7950,
											"end": 7972,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7918,
											"end": 7982,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "96"
										},
										{
											"begin": 7918,
											"end": 7982,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 7918,
											"end": 7982,
											"name": "tag",
											"source": 22,
											"value": "197"
										},
										{
											"begin": 7918,
											"end": 7982,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7908,
											"end": 7982,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 7908,
											"end": 7982,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7864,
											"end": 7992,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7648,
											"end": 7999,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 7648,
											"end": 7999,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 7648,
											"end": 7999,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7648,
											"end": 7999,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7648,
											"end": 7999,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 8005,
											"end": 8185,
											"name": "tag",
											"source": 22,
											"value": "36"
										},
										{
											"begin": 8005,
											"end": 8185,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8053,
											"end": 8130,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8050,
											"end": 8051,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8043,
											"end": 8131,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 8150,
											"end": 8154,
											"name": "PUSH",
											"source": 22,
											"value": "32"
										},
										{
											"begin": 8147,
											"end": 8148,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 8140,
											"end": 8155,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 8174,
											"end": 8178,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 8171,
											"end": 8172,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8164,
											"end": 8179,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 8191,
											"end": 8371,
											"name": "tag",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 8191,
											"end": 8371,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8239,
											"end": 8316,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8236,
											"end": 8237,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8229,
											"end": 8317,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 8336,
											"end": 8340,
											"name": "PUSH",
											"source": 22,
											"value": "11"
										},
										{
											"begin": 8333,
											"end": 8334,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 8326,
											"end": 8341,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 8360,
											"end": 8364,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 8357,
											"end": 8358,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8350,
											"end": 8365,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 8377,
											"end": 8548,
											"name": "tag",
											"source": 22,
											"value": "45"
										},
										{
											"begin": 8377,
											"end": 8548,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8416,
											"end": 8419,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8439,
											"end": 8463,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "201"
										},
										{
											"begin": 8457,
											"end": 8462,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8439,
											"end": 8463,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 8439,
											"end": 8463,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8439,
											"end": 8463,
											"name": "tag",
											"source": 22,
											"value": "201"
										},
										{
											"begin": 8439,
											"end": 8463,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8430,
											"end": 8463,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 8430,
											"end": 8463,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8485,
											"end": 8489,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8478,
											"end": 8483,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8475,
											"end": 8490,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 8472,
											"end": 8513,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8472,
											"end": 8513,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "202"
										},
										{
											"begin": 8472,
											"end": 8513,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 8493,
											"end": 8511,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "203"
										},
										{
											"begin": 8493,
											"end": 8511,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 8493,
											"end": 8511,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8493,
											"end": 8511,
											"name": "tag",
											"source": 22,
											"value": "203"
										},
										{
											"begin": 8493,
											"end": 8511,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8472,
											"end": 8513,
											"name": "tag",
											"source": 22,
											"value": "202"
										},
										{
											"begin": 8472,
											"end": 8513,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8540,
											"end": 8541,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 8533,
											"end": 8538,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8529,
											"end": 8542,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 8522,
											"end": 8542,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 8522,
											"end": 8542,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8377,
											"end": 8548,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 8377,
											"end": 8548,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 8377,
											"end": 8548,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8377,
											"end": 8548,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 8554,
											"end": 8902,
											"name": "tag",
											"source": 22,
											"value": "47"
										},
										{
											"begin": 8554,
											"end": 8902,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8594,
											"end": 8601,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8617,
											"end": 8637,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "205"
										},
										{
											"begin": 8635,
											"end": 8636,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8617,
											"end": 8637,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 8617,
											"end": 8637,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8617,
											"end": 8637,
											"name": "tag",
											"source": 22,
											"value": "205"
										},
										{
											"begin": 8617,
											"end": 8637,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8612,
											"end": 8637,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 8612,
											"end": 8637,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8651,
											"end": 8671,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "206"
										},
										{
											"begin": 8669,
											"end": 8670,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8651,
											"end": 8671,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 8651,
											"end": 8671,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8651,
											"end": 8671,
											"name": "tag",
											"source": 22,
											"value": "206"
										},
										{
											"begin": 8651,
											"end": 8671,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8646,
											"end": 8671,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 8646,
											"end": 8671,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8839,
											"end": 8840,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8771,
											"end": 8837,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8767,
											"end": 8841,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 8764,
											"end": 8765,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8761,
											"end": 8842,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 8756,
											"end": 8757,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8749,
											"end": 8758,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8742,
											"end": 8759,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8738,
											"end": 8843,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 8735,
											"end": 8866,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 8735,
											"end": 8866,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "207"
										},
										{
											"begin": 8735,
											"end": 8866,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 8846,
											"end": 8864,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "208"
										},
										{
											"begin": 8846,
											"end": 8864,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 8846,
											"end": 8864,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8846,
											"end": 8864,
											"name": "tag",
											"source": 22,
											"value": "208"
										},
										{
											"begin": 8846,
											"end": 8864,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8735,
											"end": 8866,
											"name": "tag",
											"source": 22,
											"value": "207"
										},
										{
											"begin": 8735,
											"end": 8866,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8894,
											"end": 8895,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8891,
											"end": 8892,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8887,
											"end": 8896,
											"name": "MUL",
											"source": 22
										},
										{
											"begin": 8876,
											"end": 8896,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 8876,
											"end": 8896,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8554,
											"end": 8902,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 8554,
											"end": 8902,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 8554,
											"end": 8902,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8554,
											"end": 8902,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8554,
											"end": 8902,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 8908,
											"end": 9099,
											"name": "tag",
											"source": 22,
											"value": "51"
										},
										{
											"begin": 8908,
											"end": 9099,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8948,
											"end": 8952,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8968,
											"end": 8988,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "210"
										},
										{
											"begin": 8986,
											"end": 8987,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8968,
											"end": 8988,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 8968,
											"end": 8988,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 8968,
											"end": 8988,
											"name": "tag",
											"source": 22,
											"value": "210"
										},
										{
											"begin": 8968,
											"end": 8988,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8963,
											"end": 8988,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 8963,
											"end": 8988,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9002,
											"end": 9022,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "211"
										},
										{
											"begin": 9020,
											"end": 9021,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 9002,
											"end": 9022,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 9002,
											"end": 9022,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 9002,
											"end": 9022,
											"name": "tag",
											"source": 22,
											"value": "211"
										},
										{
											"begin": 9002,
											"end": 9022,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8997,
											"end": 9022,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 8997,
											"end": 9022,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9041,
											"end": 9042,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9038,
											"end": 9039,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9035,
											"end": 9043,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 9032,
											"end": 9066,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 9032,
											"end": 9066,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "212"
										},
										{
											"begin": 9032,
											"end": 9066,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 9046,
											"end": 9064,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "213"
										},
										{
											"begin": 9046,
											"end": 9064,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 9046,
											"end": 9064,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 9046,
											"end": 9064,
											"name": "tag",
											"source": 22,
											"value": "213"
										},
										{
											"begin": 9046,
											"end": 9064,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9032,
											"end": 9066,
											"name": "tag",
											"source": 22,
											"value": "212"
										},
										{
											"begin": 9032,
											"end": 9066,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9091,
											"end": 9092,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9088,
											"end": 9089,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9084,
											"end": 9093,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 9076,
											"end": 9093,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9076,
											"end": 9093,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8908,
											"end": 9099,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 8908,
											"end": 9099,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 8908,
											"end": 9099,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8908,
											"end": 9099,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8908,
											"end": 9099,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 9105,
											"end": 9410,
											"name": "tag",
											"source": 22,
											"value": "53"
										},
										{
											"begin": 9105,
											"end": 9410,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9145,
											"end": 9148,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9164,
											"end": 9184,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "215"
										},
										{
											"begin": 9182,
											"end": 9183,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9164,
											"end": 9184,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 9164,
											"end": 9184,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 9164,
											"end": 9184,
											"name": "tag",
											"source": 22,
											"value": "215"
										},
										{
											"begin": 9164,
											"end": 9184,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9159,
											"end": 9184,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9159,
											"end": 9184,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9198,
											"end": 9218,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "216"
										},
										{
											"begin": 9216,
											"end": 9217,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 9198,
											"end": 9218,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 9198,
											"end": 9218,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 9198,
											"end": 9218,
											"name": "tag",
											"source": 22,
											"value": "216"
										},
										{
											"begin": 9198,
											"end": 9218,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9193,
											"end": 9218,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 9193,
											"end": 9218,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9352,
											"end": 9353,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9284,
											"end": 9350,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9280,
											"end": 9354,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 9277,
											"end": 9278,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9274,
											"end": 9355,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 9271,
											"end": 9378,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 9271,
											"end": 9378,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "217"
										},
										{
											"begin": 9271,
											"end": 9378,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 9358,
											"end": 9376,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "218"
										},
										{
											"begin": 9358,
											"end": 9376,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 9358,
											"end": 9376,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 9358,
											"end": 9376,
											"name": "tag",
											"source": 22,
											"value": "218"
										},
										{
											"begin": 9358,
											"end": 9376,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9271,
											"end": 9378,
											"name": "tag",
											"source": 22,
											"value": "217"
										},
										{
											"begin": 9271,
											"end": 9378,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9402,
											"end": 9403,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9399,
											"end": 9400,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9395,
											"end": 9404,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9388,
											"end": 9404,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9388,
											"end": 9404,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9105,
											"end": 9410,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 9105,
											"end": 9410,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9105,
											"end": 9410,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9105,
											"end": 9410,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9105,
											"end": 9410,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 9416,
											"end": 9649,
											"name": "tag",
											"source": 22,
											"value": "59"
										},
										{
											"begin": 9416,
											"end": 9649,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9455,
											"end": 9458,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9478,
											"end": 9502,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "220"
										},
										{
											"begin": 9496,
											"end": 9501,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9478,
											"end": 9502,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 9478,
											"end": 9502,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 9478,
											"end": 9502,
											"name": "tag",
											"source": 22,
											"value": "220"
										},
										{
											"begin": 9478,
											"end": 9502,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9469,
											"end": 9502,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9469,
											"end": 9502,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9524,
											"end": 9590,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9517,
											"end": 9522,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9514,
											"end": 9591,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 9511,
											"end": 9614,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 9511,
											"end": 9614,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "221"
										},
										{
											"begin": 9511,
											"end": 9614,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 9594,
											"end": 9612,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "222"
										},
										{
											"begin": 9594,
											"end": 9612,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 9594,
											"end": 9612,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 9594,
											"end": 9612,
											"name": "tag",
											"source": 22,
											"value": "222"
										},
										{
											"begin": 9594,
											"end": 9612,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9511,
											"end": 9614,
											"name": "tag",
											"source": 22,
											"value": "221"
										},
										{
											"begin": 9511,
											"end": 9614,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9641,
											"end": 9642,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 9634,
											"end": 9639,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9630,
											"end": 9643,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9623,
											"end": 9643,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9623,
											"end": 9643,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9416,
											"end": 9649,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9416,
											"end": 9649,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9416,
											"end": 9649,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9416,
											"end": 9649,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 9655,
											"end": 9757,
											"name": "tag",
											"source": 22,
											"value": "98"
										},
										{
											"begin": 9655,
											"end": 9757,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9697,
											"end": 9705,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9744,
											"end": 9749,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9741,
											"end": 9742,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 9737,
											"end": 9750,
											"name": "SHR",
											"source": 22
										},
										{
											"begin": 9716,
											"end": 9750,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9716,
											"end": 9750,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9655,
											"end": 9757,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9655,
											"end": 9757,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9655,
											"end": 9757,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9655,
											"end": 9757,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "tag",
											"source": 22,
											"value": "99"
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9824,
											"end": 9829,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9831,
											"end": 9835,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 9855,
											"end": 9861,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9846,
											"end": 9861,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9846,
											"end": 9861,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9879,
											"end": 9884,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 9870,
											"end": 9884,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9870,
											"end": 9884,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9893,
											"end": 10605,
											"name": "tag",
											"source": 22,
											"value": "225"
										},
										{
											"begin": 9893,
											"end": 10605,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9914,
											"end": 9915,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 9904,
											"end": 9912,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 9901,
											"end": 9916,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 9893,
											"end": 10605,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 9893,
											"end": 10605,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "227"
										},
										{
											"begin": 9893,
											"end": 10605,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 10009,
											"end": 10013,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 10004,
											"end": 10007,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 10000,
											"end": 10014,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 9994,
											"end": 9998,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9991,
											"end": 10015,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 9988,
											"end": 10038,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 9988,
											"end": 10038,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "228"
										},
										{
											"begin": 9988,
											"end": 10038,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 10018,
											"end": 10036,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "229"
										},
										{
											"begin": 10018,
											"end": 10036,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 10018,
											"end": 10036,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 10018,
											"end": 10036,
											"name": "tag",
											"source": 22,
											"value": "229"
										},
										{
											"begin": 10018,
											"end": 10036,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9988,
											"end": 10038,
											"name": "tag",
											"source": 22,
											"value": "228"
										},
										{
											"begin": 9988,
											"end": 10038,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10068,
											"end": 10069,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 10058,
											"end": 10066,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 10054,
											"end": 10070,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 10051,
											"end": 10502,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 10051,
											"end": 10502,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "230"
										},
										{
											"begin": 10051,
											"end": 10502,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 10483,
											"end": 10487,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 10476,
											"end": 10481,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10472,
											"end": 10488,
											"name": "MUL",
											"source": 22
										},
										{
											"begin": 10463,
											"end": 10488,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 10463,
											"end": 10488,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10051,
											"end": 10502,
											"name": "tag",
											"source": 22,
											"value": "230"
										},
										{
											"begin": 10051,
											"end": 10502,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10533,
											"end": 10537,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 10527,
											"end": 10531,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 10523,
											"end": 10538,
											"name": "MUL",
											"source": 22
										},
										{
											"begin": 10515,
											"end": 10538,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 10515,
											"end": 10538,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10563,
											"end": 10595,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "231"
										},
										{
											"begin": 10586,
											"end": 10594,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 10563,
											"end": 10595,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "98"
										},
										{
											"begin": 10563,
											"end": 10595,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 10563,
											"end": 10595,
											"name": "tag",
											"source": 22,
											"value": "231"
										},
										{
											"begin": 10563,
											"end": 10595,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10551,
											"end": 10595,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 10551,
											"end": 10595,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9893,
											"end": 10605,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "225"
										},
										{
											"begin": 9893,
											"end": 10605,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9893,
											"end": 10605,
											"name": "tag",
											"source": 22,
											"value": "227"
										},
										{
											"begin": 9893,
											"end": 10605,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9763,
											"end": 10611,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "tag",
											"source": 22,
											"value": "100"
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10671,
											"end": 10676,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 10862,
											"end": 10870,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10852,
											"end": 10892,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "233"
										},
										{
											"begin": 10852,
											"end": 10892,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 10883,
											"end": 10884,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 10874,
											"end": 10884,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 10874,
											"end": 10884,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10885,
											"end": 10890,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "232"
										},
										{
											"begin": 10885,
											"end": 10890,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10852,
											"end": 10892,
											"name": "tag",
											"source": 22,
											"value": "233"
										},
										{
											"begin": 10852,
											"end": 10892,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10911,
											"end": 10915,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 10901,
											"end": 10937,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "234"
										},
										{
											"begin": 10901,
											"end": 10937,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 10928,
											"end": 10929,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 10919,
											"end": 10929,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 10919,
											"end": 10929,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10930,
											"end": 10935,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "232"
										},
										{
											"begin": 10930,
											"end": 10935,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10901,
											"end": 10937,
											"name": "tag",
											"source": 22,
											"value": "234"
										},
										{
											"begin": 10901,
											"end": 10937,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10997,
											"end": 11001,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 11045,
											"end": 11046,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 11040,
											"end": 11067,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 11040,
											"end": 11067,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 11040,
											"end": 11067,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "236"
										},
										{
											"begin": 11040,
											"end": 11067,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 11081,
											"end": 11082,
											"name": "PUSH",
											"source": 22,
											"value": "2"
										},
										{
											"begin": 11076,
											"end": 11267,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 11076,
											"end": 11267,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 11076,
											"end": 11267,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "237"
										},
										{
											"begin": 11076,
											"end": 11267,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 10990,
											"end": 11267,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "235"
										},
										{
											"begin": 10990,
											"end": 11267,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11040,
											"end": 11067,
											"name": "tag",
											"source": 22,
											"value": "236"
										},
										{
											"begin": 11040,
											"end": 11067,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11058,
											"end": 11059,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 11049,
											"end": 11059,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 11049,
											"end": 11059,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11060,
											"end": 11065,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11060,
											"end": 11065,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "232"
										},
										{
											"begin": 11060,
											"end": 11065,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11076,
											"end": 11267,
											"name": "tag",
											"source": 22,
											"value": "237"
										},
										{
											"begin": 11076,
											"end": 11267,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11121,
											"end": 11124,
											"name": "PUSH",
											"source": 22,
											"value": "FF"
										},
										{
											"begin": 11111,
											"end": 11119,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11108,
											"end": 11125,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 11105,
											"end": 11148,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 11105,
											"end": 11148,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "238"
										},
										{
											"begin": 11105,
											"end": 11148,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 11128,
											"end": 11146,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "239"
										},
										{
											"begin": 11128,
											"end": 11146,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 11128,
											"end": 11146,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 11128,
											"end": 11146,
											"name": "tag",
											"source": 22,
											"value": "239"
										},
										{
											"begin": 11128,
											"end": 11146,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11105,
											"end": 11148,
											"name": "tag",
											"source": 22,
											"value": "238"
										},
										{
											"begin": 11105,
											"end": 11148,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11177,
											"end": 11185,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 11174,
											"end": 11175,
											"name": "PUSH",
											"source": 22,
											"value": "2"
										},
										{
											"begin": 11170,
											"end": 11186,
											"name": "EXP",
											"source": 22
										},
										{
											"begin": 11161,
											"end": 11186,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 11161,
											"end": 11186,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11212,
											"end": 11215,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11205,
											"end": 11210,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11202,
											"end": 11216,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 11199,
											"end": 11239,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 11199,
											"end": 11239,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "240"
										},
										{
											"begin": 11199,
											"end": 11239,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 11219,
											"end": 11237,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "241"
										},
										{
											"begin": 11219,
											"end": 11237,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 11219,
											"end": 11237,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 11219,
											"end": 11237,
											"name": "tag",
											"source": 22,
											"value": "241"
										},
										{
											"begin": 11219,
											"end": 11237,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11199,
											"end": 11239,
											"name": "tag",
											"source": 22,
											"value": "240"
										},
										{
											"begin": 11199,
											"end": 11239,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11252,
											"end": 11257,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11252,
											"end": 11257,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "232"
										},
										{
											"begin": 11252,
											"end": 11257,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10990,
											"end": 11267,
											"name": "tag",
											"source": 22,
											"value": "235"
										},
										{
											"begin": 10990,
											"end": 11267,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10990,
											"end": 11267,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11376,
											"end": 11378,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 11366,
											"end": 11374,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 11363,
											"end": 11379,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 11357,
											"end": 11360,
											"name": "PUSH",
											"source": 22,
											"value": "133"
										},
										{
											"begin": 11351,
											"end": 11355,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 11348,
											"end": 11361,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 11344,
											"end": 11380,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 11326,
											"end": 11328,
											"name": "PUSH",
											"source": 22,
											"value": "4E"
										},
										{
											"begin": 11316,
											"end": 11324,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11313,
											"end": 11329,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 11308,
											"end": 11310,
											"name": "PUSH",
											"source": 22,
											"value": "B"
										},
										{
											"begin": 11302,
											"end": 11306,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11299,
											"end": 11311,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 11295,
											"end": 11330,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 11279,
											"end": 11390,
											"name": "OR",
											"source": 22
										},
										{
											"begin": 11276,
											"end": 11522,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 11276,
											"end": 11522,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "242"
										},
										{
											"begin": 11276,
											"end": 11522,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 11432,
											"end": 11440,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11426,
											"end": 11430,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11422,
											"end": 11441,
											"name": "EXP",
											"source": 22
										},
										{
											"begin": 11413,
											"end": 11441,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 11413,
											"end": 11441,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11467,
											"end": 11470,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 11460,
											"end": 11465,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 11457,
											"end": 11471,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 11454,
											"end": 11494,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 11454,
											"end": 11494,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "243"
										},
										{
											"begin": 11454,
											"end": 11494,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 11474,
											"end": 11492,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "244"
										},
										{
											"begin": 11474,
											"end": 11492,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 11474,
											"end": 11492,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 11474,
											"end": 11492,
											"name": "tag",
											"source": 22,
											"value": "244"
										},
										{
											"begin": 11474,
											"end": 11492,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11454,
											"end": 11494,
											"name": "tag",
											"source": 22,
											"value": "243"
										},
										{
											"begin": 11454,
											"end": 11494,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11507,
											"end": 11512,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "232"
										},
										{
											"begin": 11507,
											"end": 11512,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11276,
											"end": 11522,
											"name": "tag",
											"source": 22,
											"value": "242"
										},
										{
											"begin": 11276,
											"end": 11522,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11547,
											"end": 11589,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "245"
										},
										{
											"begin": 11585,
											"end": 11588,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11575,
											"end": 11583,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11569,
											"end": 11573,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11566,
											"end": 11567,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 11547,
											"end": 11589,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "99"
										},
										{
											"begin": 11547,
											"end": 11589,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 11547,
											"end": 11589,
											"name": "tag",
											"source": 22,
											"value": "245"
										},
										{
											"begin": 11547,
											"end": 11589,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11532,
											"end": 11589,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 11532,
											"end": 11589,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11532,
											"end": 11589,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 11532,
											"end": 11589,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11621,
											"end": 11625,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 11616,
											"end": 11619,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11612,
											"end": 11626,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 11605,
											"end": 11610,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 11602,
											"end": 11627,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 11599,
											"end": 11650,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 11599,
											"end": 11650,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "246"
										},
										{
											"begin": 11599,
											"end": 11650,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 11630,
											"end": 11648,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "247"
										},
										{
											"begin": 11630,
											"end": 11648,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "97"
										},
										{
											"begin": 11630,
											"end": 11648,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 11630,
											"end": 11648,
											"name": "tag",
											"source": 22,
											"value": "247"
										},
										{
											"begin": 11630,
											"end": 11648,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11599,
											"end": 11650,
											"name": "tag",
											"source": 22,
											"value": "246"
										},
										{
											"begin": 11599,
											"end": 11650,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11679,
											"end": 11683,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 11672,
											"end": 11677,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 11668,
											"end": 11684,
											"name": "MUL",
											"source": 22
										},
										{
											"begin": 11659,
											"end": 11684,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 11659,
											"end": 11684,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "tag",
											"source": 22,
											"value": "232"
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10617,
											"end": 11690,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										},
										{
											"begin": 11696,
											"end": 11981,
											"name": "tag",
											"source": 22,
											"value": "62"
										},
										{
											"begin": 11696,
											"end": 11981,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11756,
											"end": 11761,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 11780,
											"end": 11803,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "249"
										},
										{
											"begin": 11798,
											"end": 11802,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11780,
											"end": 11803,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 11780,
											"end": 11803,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 11780,
											"end": 11803,
											"name": "tag",
											"source": 22,
											"value": "249"
										},
										{
											"begin": 11780,
											"end": 11803,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11772,
											"end": 11803,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 11772,
											"end": 11803,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11824,
											"end": 11851,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "250"
										},
										{
											"begin": 11842,
											"end": 11850,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 11824,
											"end": 11851,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "89"
										},
										{
											"begin": 11824,
											"end": 11851,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 11824,
											"end": 11851,
											"name": "tag",
											"source": 22,
											"value": "250"
										},
										{
											"begin": 11824,
											"end": 11851,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11812,
											"end": 11851,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 11812,
											"end": 11851,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11870,
											"end": 11974,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "251"
										},
										{
											"begin": 11907,
											"end": 11973,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11897,
											"end": 11905,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11891,
											"end": 11895,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 11870,
											"end": 11974,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "100"
										},
										{
											"begin": 11870,
											"end": 11974,
											"name": "JUMP",
											"source": 22,
											"value": "[in]"
										},
										{
											"begin": 11870,
											"end": 11974,
											"name": "tag",
											"source": 22,
											"value": "251"
										},
										{
											"begin": 11870,
											"end": 11974,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11861,
											"end": 11974,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 11861,
											"end": 11974,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11696,
											"end": 11981,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 11696,
											"end": 11981,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 11696,
											"end": 11981,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11696,
											"end": 11981,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11696,
											"end": 11981,
											"name": "JUMP",
											"source": 22,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"isSubscribed(address,address,string)": "2251a8a9"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"profileId\",\"type\":\"string\"}],\"name\":\"isSubscribed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"subscribed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"mosaic/Mosaic.sol\":\"Mosaic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0x8a191d6f5dcdfd97e8fbbe17382fa96f51dbaddea6ed704206e7cbda5d12cc65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5bed573cf54d2406d0e7566ab6cd37c31025c6fab3b5b8d8ef9b79b1cab098fd\",\"dweb:/ipfs/QmegphCXp9qTAvefUYyW8eGdaGQMLJ4JrEXELU7WhisRcS\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0x2e5be80a58134c213a5fb4da40797c616a0c73cf807d5d0c49b28c5c5047a5f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2f29b92234d646c801b9c5f2628742c9679f58ae9090b1bf346cfca3eddec8fb\",\"dweb:/ipfs/QmcK7zX8ugFViAM7h7xVQiZzYifH5NZbBRQSy1Yr9bfeA9\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0x6c45e56bafabb2d0b61be9c9b5c40ce16f06537b7f7d695115ba995d8e384c7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5bec860e391e693171417377bf386fe70fe09a27063fc1499b2c6776d140a52\",\"dweb:/ipfs/QmeYq64k3gZRkpJyRKquxqdNWFrwy2tWHBiXSHNGMjaMNA\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x2df65c6d6e74ba92a267176b1f1661416a6d54cf56bebbdea85fccadfe6d446e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://113dab47ce7e686fbddbeadd58183fea3839f5882261a285b4141b558838528a\",\"dweb:/ipfs/QmY6pVPzSSwR2Bu3YCxHv7Fyfwx8VJcBBjYRSfDi4e7LbV\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xbdcda11e5c157e63da15d7aced71fa20858472e3d5d5dba158690109d4abdfab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://02277add66a1b52361fbfa8d1f8a502abfdeeb860f41458bcee731a3b9447456\",\"dweb:/ipfs/QmYnPVWYfCtBc359gu36sF4tMETQS1DDztgJ9hmSZtxMDP\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0x4dc5784dc8c21fa4ed393add91ced5853e3f95222467b03dbaa79e60eb7cc193\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e8580acc481e6cc15425898d64c63fc2a348248b01543a3db8b4ad75ef57a98\",\"dweb:/ipfs/QmYDRy7fvrnHHRW5m7u9CZJrKEKEXXxAJ7ZR5JG8fwa5GG\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0x1961a8579193d3a9cdceee56c4e8a1a888869eaac1b2ca3594616c67a25d45c8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f55802e18a32f9f46958fbf5ffdf6ed8654e063e545488110bb455020b4eda69\",\"dweb:/ipfs/QmNehJdVBqEssEdFL6jTmHtfvEVCUanHyiVQEJBC4rnuUD\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xb3701155641cb42103b206e66dcdc82c286f554189f9c9715b7146c0f1b6fbdc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8345c2c3fbc825eb133f05440665530569d5bd59acb8e1fcdea53593e9c7d49b\",\"dweb:/ipfs/QmXNRYfqWDm8TofsoRw38GVa2LWzvPsGkF1H8Ro5E22CP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0xf1d91553023a7a2db8da3352753fc59645aa4339643e02264b9c1868eb632f5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c80058a66407690e98e40cd454a9cb46f695e948604f024e38f6b2b61626555\",\"dweb:/ipfs/QmTVwCQmh4GBS4K9r3RYk8zpLfzGtmeWfYRdAfMmu7htP7\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xb8cfa2d1f1a9de1495102bac583a819a0bc746031e157d0f5fa4103d6ebe4179\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e229ecfd55d9fd21ea3d4e58e49ffe0c47c862d6b17cdf552ad6d39a6379443\",\"dweb:/ipfs/QmaPY4Fg2uCNoeF99tnTcEfYdwQWBLp87WPmez37KDGiTW\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0x650695c87473f47c36ba57eecf57b42faa9eab3dd0be828aa0be5aeabf1f15db\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3aea8086ef10750f92d133cc65becd0b51e51add441435819a58d81f9d482f55\",\"dweb:/ipfs/QmRZKfHxgg9aEWDzsnd326Bpq2bpCZM4zM86NRkcW1Lu4x\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x60b8207b8d0bd42b66decf0def9e8ebc032ec3e1d44b348979afc6066428effc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b459c2e6d2637506bcbc159c422520ebd22a31646283909fb173e0da0f6e9489\",\"dweb:/ipfs/QmZ6PNM8jFgh6aXR9ULdXkFABMsMXQrHrtF4fZKsBPVQzu\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0x63eb98b650214aff1979f13bb9b503425d0c2d7500a3f210930fe3057695df70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83603f4cbad24656818345a08965b8402a5b38ad1d9382077727e8154774f66f\",\"dweb:/ipfs/QmVqdmcwma6FCmJ8eKPm761o1PPWhPMW1yauLVLpXMiwpt\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0xa68065a8a4da8cb3755364b714b2636861a22a268f8dd82a1be7b4686a1d02fe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://deff30448cfeecc0ac555e35d6bd5d47acaffa9b2199e9f6b0dd0a01b2fbe4ed\",\"dweb:/ipfs/QmayyxRBkgBT3yCCsQ96TAmFcrHVufqTGVnuNjLGy2Cva8\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0xea22c0295f28a5e4124cc54a5324d9d9f018f322df644ab5e2b332bbf23ada74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca09ea1f6c2f14ba1d59c75946d12563e01bee00dfdb18461b68117d120aea4\",\"dweb:/ipfs/QmUFN1W5kfi57Ae2F74o42HFe3WrUZr5gc7rmQHujMjQVE\"]},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x873a19fc42452483280191324109a527e0b0a1c200dab28aa85dff4ad0a7d0c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://838778521d9036ef0005ff0cd969a095f1b5535dba9518051a190cf21693a2d9\",\"dweb:/ipfs/Qmd2eZ1ENtiiyiua97kyzWyUUn4hZvUqCHNMeAc6umxP2D\"]},\"mosaic/Mosaic.sol\":{\"keccak256\":\"0x772596c9b0e09692074b0989af214b68831ca82188bfbbfe33ce6407f08da3cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e0c9b4a8205d67c4f12f5aa877b9c37fe9486046e2d00c01dd67538f44c000c8\",\"dweb:/ipfs/QmTKHbfwbNue8v23k3AH63gHUNwj9bbBaq6bkUuZBJBk4G\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2676:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2668:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2690:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2682:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2702:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2694:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2694:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:42:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2728:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2728:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2727:6:0"
									},
									"scope": 77,
									"src": "2646:88:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2534:0",
							"usedErrors": []
						}
					],
					"src": "106:2631:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							395
						],
						"IERC721": [
							193
						]
					},
					"id": 194,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 80,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 194,
							"sourceUnit": 396,
							"src": "133:47:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 82,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 395,
										"src": "271:7:1"
									},
									"id": 83,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:1"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 81,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:1",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 193,
							"linearizedBaseContracts": [
								193,
								395
							],
							"name": "IERC721",
							"nameLocation": "260:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:1",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 92,
									"name": "Transfer",
									"nameLocation": "384:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "393:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 88,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "415:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 87,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "435:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 89,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:1"
									},
									"src": "378:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:1",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 101,
									"name": "Approval",
									"nameLocation": "571:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "580:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 94,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "603:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "629:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:1"
									},
									"src": "565:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:1",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 110,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "803:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "826:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "852:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 107,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:1"
									},
									"src": "782:85:1"
								},
								{
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:1",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 118,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "973:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "1011:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:1"
									},
									"scope": 193,
									"src": "954:74:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:1",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "1187:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "1227:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:1"
									},
									"scope": 193,
									"src": "1170:72:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1843:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1835:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1835:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1857:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1849:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1849:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1869:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1861:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1861:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1893:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "1878:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 134,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1878:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:64:1"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1907:0:1"
									},
									"scope": 193,
									"src": "1809:99:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "1914:687:1",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2615:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2640:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2632:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 140,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2632:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2654:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2646:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2646:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2666:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "2658:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2658:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2631:43:1"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2683:0:1"
									},
									"scope": 193,
									"src": "2606:78:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "2690:732:1",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3436:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3457:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "3449:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3449:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3471:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "3463:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3463:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3483:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "3475:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3448:43:1"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3500:0:1"
									},
									"scope": 193,
									"src": "3427:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "3507:452:1",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3973:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3989:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "3981:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3981:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4001:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "3993:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3993:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3980:29:1"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4018:0:1"
									},
									"scope": 193,
									"src": "3964:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "4025:309:1",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 174,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4348:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4374:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "4366:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4366:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4389:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 174,
												"src": "4384:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 170,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4384:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:33:1"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4407:0:1"
									},
									"scope": 193,
									"src": "4339:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 175,
										"nodeType": "StructuredDocumentation",
										"src": "4414:139:1",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 182,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4567:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4587:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "4579:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4579:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4578:17:1"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4627:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "4619:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4619:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4618:18:1"
									},
									"scope": 193,
									"src": "4558:79:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "4643:138:1",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4795:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4820:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "4812:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4812:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4835:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "4827:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4827:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4811:33:1"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "4868:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4868:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4867:6:1"
									},
									"scope": 193,
									"src": "4786:88:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 194,
							"src": "250:4626:1",
							"usedErrors": []
						}
					],
					"src": "108:4769:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							395
						],
						"IERC721": [
							193
						],
						"IERC721Metadata": [
							220
						]
					},
					"id": 221,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 195,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 196,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 221,
							"sourceUnit": 194,
							"src": "137:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 198,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 193,
										"src": "326:7:2"
									},
									"id": 199,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:2"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 197,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:2",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 220,
							"linearizedBaseContracts": [
								220,
								193,
								395
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 200,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:2",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 205,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:2"
									},
									"returnParameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "442:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 202,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:2"
									},
									"scope": 220,
									"src": "403:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:2",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "569:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 208,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:2"
									},
									"scope": 220,
									"src": "528:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:2",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "703:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "743:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 216,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:2"
									},
									"scope": 220,
									"src": "685:73:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 221,
							"src": "297:463:2",
							"usedErrors": []
						}
					],
					"src": "112:649:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC777/IERC777.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
					"exportedSymbols": {
						"IERC777": [
							383
						]
					},
					"id": 384,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 222,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC777",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 223,
								"nodeType": "StructuredDocumentation",
								"src": "133:372:3",
								"text": " @dev Interface of the ERC777Token standard as defined in the EIP.\n This contract uses the\n https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n token holders and recipients react to token movements by using setting implementers\n for the associated interfaces in said registry. See {IERC1820Registry} and\n {ERC1820Implementer}."
							},
							"fullyImplemented": false,
							"id": 383,
							"linearizedBaseContracts": [
								383
							],
							"name": "IERC777",
							"nameLocation": "516:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 224,
										"nodeType": "StructuredDocumentation",
										"src": "530:199:3",
										"text": " @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\n Note that some additional user `data` and `operatorData` can be logged in the event."
									},
									"id": 236,
									"name": "Minted",
									"nameLocation": "740:6:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "763:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "747:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "747:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "789:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "773:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "773:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "801:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "793:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "815:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "809:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 231,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "827:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "821:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 233,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "821:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "746:94:3"
									},
									"src": "734:107:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "847:187:3",
										"text": " @dev Emitted when `operator` destroys `amount` tokens from `account`.\n Note that some additional user `data` and `operatorData` can be logged in the event."
									},
									"id": 249,
									"name": "Burned",
									"nameLocation": "1045:6:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1068:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1052:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1052:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1094:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1078:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1078:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1108:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1100:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1100:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1122:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1116:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 244,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1116:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "1134:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1128:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 246,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1128:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1051:96:3"
									},
									"src": "1039:109:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "1154:83:3",
										"text": " @dev Emitted when `operator` is made operator for `tokenHolder`."
									},
									"id": 256,
									"name": "AuthorizedOperator",
									"nameLocation": "1248:18:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1283:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "1267:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "1309:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "1293:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1293:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:55:3"
									},
									"src": "1242:80:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "1328:97:3",
										"text": " @dev Emitted when `operator` is revoked its operator status for `tokenHolder`."
									},
									"id": 263,
									"name": "RevokedOperator",
									"nameLocation": "1436:15:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1468:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1452:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "1494:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1478:27:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1478:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1451:55:3"
									},
									"src": "1430:77:3"
								},
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "1513:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 269,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1581:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1585:2:3"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "1611:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1611:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1610:15:3"
									},
									"scope": 383,
									"src": "1572:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "1632:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 275,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1748:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1754:2:3"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "1780:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 272,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1780:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1779:15:3"
									},
									"scope": 383,
									"src": "1739:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 276,
										"nodeType": "StructuredDocumentation",
										"src": "1801:287:3",
										"text": " @dev Returns the smallest part of the token that is not divisible. This\n means all token operations (creation, movement and destruction) must have\n amounts that are a multiple of this number.\n For most token contracts, this value will equal 1."
									},
									"functionSelector": "556f0dc7",
									"id": 281,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "granularity",
									"nameLocation": "2102:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2113:2:3"
									},
									"returnParameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "2139:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2139:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2138:9:3"
									},
									"scope": 383,
									"src": "2093:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "2154:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2234:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2245:2:3"
									},
									"returnParameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "2271:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2271:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2270:9:3"
									},
									"scope": 383,
									"src": "2225:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "2286:83:3",
										"text": " @dev Returns the amount of tokens owned by an account (`owner`)."
									},
									"functionSelector": "70a08231",
									"id": 295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2383:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2401:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "2393:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2393:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2392:15:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 295,
												"src": "2431:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2431:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:9:3"
									},
									"scope": 383,
									"src": "2374:66:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "2446:585:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n If send or receive hooks are registered for the caller and `recipient`,\n the corresponding functions will be called with `data` and empty\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "9bd9bbc6",
									"id": 305,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "3045:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "3058:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3050:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3050:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3077:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3069:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3069:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3100:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "3085:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 301,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3085:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3049:56:3"
									},
									"returnParameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3114:0:3"
									},
									"scope": 383,
									"src": "3036:79:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "3121:404:3",
										"text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply.\n If a send hook is registered for the caller, the corresponding function\n will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - the caller must have at least `amount` tokens."
									},
									"functionSelector": "fe9d9303",
									"id": 313,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "3539:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3552:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "3544:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3544:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3575:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "3560:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 309,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3560:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3543:37:3"
									},
									"returnParameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3589:0:3"
									},
									"scope": 383,
									"src": "3530:60:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "3596:249:3",
										"text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
									},
									"functionSelector": "d95b6371",
									"id": 323,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOperatorFor",
									"nameLocation": "3859:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3881:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "3873:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3873:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "3899:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "3891:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 317,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3891:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3872:39:3"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "3935:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 320,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3935:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3934:6:3"
									},
									"scope": 383,
									"src": "3850:91:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 324,
										"nodeType": "StructuredDocumentation",
										"src": "3947:233:3",
										"text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n Emits an {AuthorizedOperator} event.\n Requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "959b8c3f",
									"id": 329,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeOperator",
									"nameLocation": "4194:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4220:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "4212:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 325,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4212:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4211:18:3"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4238:0:3"
									},
									"scope": 383,
									"src": "4185:54:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "4245:261:3",
										"text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n Emits a {RevokedOperator} event.\n Requirements\n - `operator` cannot be calling address."
									},
									"functionSelector": "fad8b32a",
									"id": 335,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeOperator",
									"nameLocation": "4520:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4543:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "4535:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4535:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4534:18:3"
									},
									"returnParameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4561:0:3"
									},
									"scope": 383,
									"src": "4511:51:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "4568:338:3",
										"text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
									},
									"functionSelector": "06e48538",
									"id": 342,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultOperators",
									"nameLocation": "4920:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4936:2:3"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 342,
												"src": "4962:16:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 338,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "4962:7:3",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 339,
													"nodeType": "ArrayTypeName",
													"src": "4962:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4961:18:3"
									},
									"scope": 383,
									"src": "4911:69:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 343,
										"nodeType": "StructuredDocumentation",
										"src": "4986:714:3",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `data` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n Emits a {Sent} event.\n Requirements\n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "62ad1b83",
									"id": 356,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorSend",
									"nameLocation": "5714:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5744:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5736:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5736:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "5768:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5760:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5760:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5795:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5787:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5826:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5811:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 350,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5811:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "5855:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "5840:27:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 352,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5840:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5726:147:3"
									},
									"returnParameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5882:0:3"
									},
									"scope": 383,
									"src": "5705:178:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 357,
										"nodeType": "StructuredDocumentation",
										"src": "5889:532:3",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `data` and `operatorData`. See {IERC777Sender}.\n Emits a {Burned} event.\n Requirements\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
									},
									"functionSelector": "fc673c4f",
									"id": 368,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorBurn",
									"nameLocation": "6435:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6456:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6448:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6448:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6473:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6465:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6465:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6496:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6481:19:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 362,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6481:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "6517:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "6502:27:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 364,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6502:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6447:83:3"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6539:0:3"
									},
									"scope": 383,
									"src": "6426:114:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"id": 382,
									"name": "Sent",
									"nameLocation": "6552:4:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6582:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6566:24:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6616:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6600:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6646:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6630:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6630:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6666:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6658:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6658:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6688:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6682:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 377,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6682:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 380,
												"indexed": false,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "6708:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6702:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 379,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6702:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6556:170:3"
									},
									"src": "6546:181:3"
								}
							],
							"scope": 384,
							"src": "506:6223:3",
							"usedErrors": []
						}
					],
					"src": "108:6622:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							395
						]
					},
					"id": 396,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 385,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 386,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:4",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 395,
							"linearizedBaseContracts": [
								395
							],
							"name": "IERC165",
							"nameLocation": "415:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 387,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:4",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 394,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "801:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 388,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:4"
									},
									"returnParameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 394,
												"src": "844:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 391,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:4"
									},
									"scope": 395,
									"src": "774:76:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 396,
							"src": "405:447:4",
							"usedErrors": []
						}
					],
					"src": "100:753:4"
				},
				"id": 4
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
					"exportedSymbols": {
						"IConstantFlowAgreementV1": [
							805
						],
						"ISuperAgreement": [
							1466
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 806,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 397,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:5"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "../superfluid/ISuperAgreement.sol",
							"id": 399,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 806,
							"sourceUnit": 1467,
							"src": "59:68:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 398,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:15:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "../superfluid/ISuperfluidToken.sol",
							"id": 401,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 806,
							"sourceUnit": 3124,
							"src": "128:70:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 400,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "137:16:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 403,
										"name": "ISuperAgreement",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1466,
										"src": "320:15:5"
									},
									"id": 404,
									"nodeType": "InheritanceSpecifier",
									"src": "320:15:5"
								}
							],
							"canonicalName": "IConstantFlowAgreementV1",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 402,
								"nodeType": "StructuredDocumentation",
								"src": "200:73:5",
								"text": " @title Constant Flow Agreement interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 805,
							"linearizedBaseContracts": [
								805,
								1466
							],
							"name": "IConstantFlowAgreementV1",
							"nameLocation": "292:24:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 406,
									"name": "CFA_ACL_NO_SENDER_CREATE",
									"nameLocation": "523:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "547:2:5"
									},
									"src": "517:33:5"
								},
								{
									"id": 408,
									"name": "CFA_ACL_NO_SENDER_UPDATE",
									"nameLocation": "589:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "613:2:5"
									},
									"src": "583:33:5"
								},
								{
									"id": 410,
									"name": "CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS",
									"nameLocation": "655:38:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "693:2:5"
									},
									"src": "649:47:5"
								},
								{
									"id": 412,
									"name": "CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS",
									"nameLocation": "721:38:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"src": "715:47:5"
								},
								{
									"id": 414,
									"name": "CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS",
									"nameLocation": "787:38:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "825:2:5"
									},
									"src": "781:47:5"
								},
								{
									"id": 416,
									"name": "CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED",
									"nameLocation": "853:36:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "889:2:5"
									},
									"src": "847:45:5"
								},
								{
									"id": 418,
									"name": "CFA_ACL_UNCLEAN_PERMISSIONS",
									"nameLocation": "919:27:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "946:2:5"
									},
									"src": "913:36:5"
								},
								{
									"id": 420,
									"name": "CFA_ACL_NO_SENDER_FLOW_OPERATOR",
									"nameLocation": "985:31:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1016:2:5"
									},
									"src": "979:40:5"
								},
								{
									"id": 422,
									"name": "CFA_ACL_NO_NEGATIVE_ALLOWANCE",
									"nameLocation": "1051:29:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1080:2:5"
									},
									"src": "1045:38:5"
								},
								{
									"id": 424,
									"name": "CFA_FLOW_ALREADY_EXISTS",
									"nameLocation": "1117:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1140:2:5"
									},
									"src": "1111:32:5"
								},
								{
									"id": 426,
									"name": "CFA_FLOW_DOES_NOT_EXIST",
									"nameLocation": "1183:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1206:2:5"
									},
									"src": "1177:32:5"
								},
								{
									"id": 428,
									"name": "CFA_INSUFFICIENT_BALANCE",
									"nameLocation": "1249:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1273:2:5"
									},
									"src": "1243:33:5"
								},
								{
									"id": 430,
									"name": "CFA_ZERO_ADDRESS_SENDER",
									"nameLocation": "1315:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:2:5"
									},
									"src": "1309:32:5"
								},
								{
									"id": 432,
									"name": "CFA_ZERO_ADDRESS_RECEIVER",
									"nameLocation": "1381:25:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1406:2:5"
									},
									"src": "1375:34:5"
								},
								{
									"id": 434,
									"name": "CFA_HOOK_OUT_OF_GAS",
									"nameLocation": "1447:19:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1466:2:5"
									},
									"src": "1441:28:5"
								},
								{
									"id": 436,
									"name": "CFA_DEPOSIT_TOO_BIG",
									"nameLocation": "1513:19:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1532:2:5"
									},
									"src": "1507:28:5"
								},
								{
									"id": 438,
									"name": "CFA_FLOW_RATE_TOO_BIG",
									"nameLocation": "1579:21:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1600:2:5"
									},
									"src": "1573:30:5"
								},
								{
									"id": 440,
									"name": "CFA_NON_CRITICAL_SENDER",
									"nameLocation": "1645:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1668:2:5"
									},
									"src": "1639:32:5"
								},
								{
									"id": 442,
									"name": "CFA_INVALID_FLOW_RATE",
									"nameLocation": "1711:21:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1732:2:5"
									},
									"src": "1705:30:5"
								},
								{
									"id": 444,
									"name": "CFA_NO_SELF_FLOW",
									"nameLocation": "1777:16:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:5"
									},
									"src": "1771:25:5"
								},
								{
									"baseFunctions": [
										1448
									],
									"body": {
										"id": 455,
										"nodeType": "Block",
										"src": "1962:95:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e61677265656d656e74732e436f6e7374616e74466c6f7741677265656d656e742e7631",
															"id": 452,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1989:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3",
																"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\""
															},
															"value": "org.superfluid-finance.agreements.ConstantFlowAgreement.v1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_a9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3",
																"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\""
															}
														],
														"id": 451,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "1979:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 453,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1979:71:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 450,
												"id": 454,
												"nodeType": "Return",
												"src": "1972:78:5"
											}
										]
									},
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "1838:53:5",
										"text": "@dev ISuperAgreement.agreementType implementation"
									},
									"functionSelector": "7730599e",
									"id": 456,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "agreementType",
									"nameLocation": "1905:13:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 447,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1930:8:5"
									},
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1918:2:5"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "1953:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 448,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1953:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1952:9:5"
									},
									"scope": 805,
									"src": "1896:161:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 457,
										"nodeType": "StructuredDocumentation",
										"src": "2063:239:5",
										"text": " @notice Get the maximum flow rate allowed with the deposit\n @dev The deposit is clipped and rounded down\n @param deposit Deposit amount used for creating the flow\n @return flowRate The maximum flow rate"
									},
									"functionSelector": "0602f7db",
									"id": 467,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getMaximumFlowRateFromDeposit",
									"nameLocation": "2316:29:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2372:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "2355:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 459,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 458,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2355:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "2355:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2395:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "2387:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 461,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2387:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:58:5"
									},
									"returnParameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "2457:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "2451:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 464,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "2451:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2450:16:5"
									},
									"scope": 805,
									"src": "2307:160:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 468,
										"nodeType": "StructuredDocumentation",
										"src": "2473:482:5",
										"text": " @notice Get the deposit required for creating the flow\n @dev Calculates the deposit based on the liquidationPeriod and flowRate\n @param flowRate Flow rate to be tested\n @return deposit The deposit amount based on flowRate and liquidationPeriod\n @custom:note \n - if calculated deposit (flowRate * liquidationPeriod) is less\n   than the minimum deposit, we use the minimum deposit otherwise\n   we use the calculated deposit"
									},
									"functionSelector": "8d997f6e",
									"id": 478,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDepositRequiredForFlowRate",
									"nameLocation": "2969:29:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3025:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "3008:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 470,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 469,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "3008:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "3008:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "3046:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "3040:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 472,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "3040:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2998:57:5"
									},
									"returnParameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "3111:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "3103:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3102:17:5"
									},
									"scope": 805,
									"src": "2960:160:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 479,
										"nodeType": "StructuredDocumentation",
										"src": "3126:306:5",
										"text": " @dev Returns whether it is the patrician period based on host.getNow()\n @param account The account we are interested in\n @return isCurrentlyPatricianPeriod Whether it is currently the patrician period dictated by governance\n @return timestamp The value of host.getNow()"
									},
									"functionSelector": "4fe9c291",
									"id": 491,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPatricianPeriodNow",
									"nameLocation": "3446:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3493:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3476:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 481,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 480,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "3476:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "3476:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3516:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3508:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 483,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3508:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3466:58:5"
									},
									"returnParameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "isCurrentlyPatricianPeriod",
												"nameLocation": "3577:26:5",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3572:31:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 486,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3572:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3613:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3605:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3605:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3571:52:5"
									},
									"scope": 805,
									"src": "3437:187:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "3630:329:5",
										"text": " @dev Returns whether it is the patrician period based on timestamp\n @param account The account we are interested in\n @param timestamp The timestamp we are interested in observing the result of isPatricianPeriod\n @return bool Whether it is currently the patrician period dictated by governance"
									},
									"functionSelector": "4b839e0b",
									"id": 504,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isPatricianPeriod",
									"nameLocation": "3973:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4017:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "4000:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 494,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 493,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "4000:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "4000:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4040:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "4032:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 496,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4032:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "4065:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "4057:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4057:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3990:90:5"
									},
									"returnParameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 502,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 504,
												"src": "4126:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 501,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4126:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4125:6:5"
									},
									"scope": 805,
									"src": "3964:168:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 505,
										"nodeType": "StructuredDocumentation",
										"src": "4138:464:5",
										"text": " @dev msgSender from `ctx` updates permissions for the `flowOperator` with `flowRateAllowance`\n @param token Super token address\n @param flowOperator The permission grantee address\n @param permissions A bitmask representation of the granted permissions\n @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "811b3d40",
									"id": 521,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlowOperatorPermissions",
									"nameLocation": "4616:29:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4672:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4655:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 507,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 506,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "4655:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "4655:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "4695:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4687:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4687:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "4723:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4717:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 511,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4717:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "4750:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4744:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 513,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "4744:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "4792:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4777:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 515,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4777:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4645:156:5"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "4857:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "4844:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 518,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4844:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4843:21:5"
									},
									"scope": 805,
									"src": "4607:258:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 522,
										"nodeType": "StructuredDocumentation",
										"src": "4871:508:5",
										"text": " @notice msgSender from `ctx` increases flow rate allowance for the `flowOperator` by `addedFlowRateAllowance`\n @dev if `addedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n @param token Super token address\n @param flowOperator The permission grantee address\n @param addedFlowRateAllowance The flow rate allowance delta\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @return newCtx The new context bytes"
									},
									"functionSelector": "ac5f5d00",
									"id": 536,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseFlowRateAllowance",
									"nameLocation": "5393:25:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5445:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5428:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 524,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 523,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "5428:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "5428:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "5468:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5460:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5460:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "addedFlowRateAllowance",
												"nameLocation": "5496:22:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5490:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 528,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "5490:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "5543:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5528:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 530,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5528:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5418:134:5"
									},
									"returnParameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "5591:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "5578:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 533,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5578:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5577:21:5"
									},
									"scope": 805,
									"src": "5384:215:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 537,
										"nodeType": "StructuredDocumentation",
										"src": "5605:520:5",
										"text": " @dev msgSender from `ctx` decreases flow rate allowance for the `flowOperator` by `subtractedFlowRateAllowance`\n @dev if `subtractedFlowRateAllowance` is negative, we revert with CFA_ACL_NO_NEGATIVE_ALLOWANCE\n @param token Super token address\n @param flowOperator The permission grantee address\n @param subtractedFlowRateAllowance The flow rate allowance delta\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @return newCtx The new context bytes"
									},
									"functionSelector": "5f51fb23",
									"id": 551,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseFlowRateAllowance",
									"nameLocation": "6139:25:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6191:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6174:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 539,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 538,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "6174:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "6174:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "6214:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6206:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "subtractedFlowRateAllowance",
												"nameLocation": "6242:27:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6236:33:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 543,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "6236:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "6294:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6279:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 545,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6279:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6164:139:5"
									},
									"returnParameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "6342:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 551,
												"src": "6329:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 548,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6329:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6328:21:5"
									},
									"scope": 805,
									"src": "6130:220:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 552,
										"nodeType": "StructuredDocumentation",
										"src": "6356:295:5",
										"text": " @dev msgSender from `ctx` grants `flowOperator` all permissions with flowRateAllowance as type(int96).max\n @param token Super token address\n @param flowOperator The permission grantee address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "54b770e3",
									"id": 564,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeFlowOperatorWithFullControl",
									"nameLocation": "6665:36:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6728:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "6711:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 554,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 553,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "6711:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "6711:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "6751:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "6743:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6743:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "6788:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "6773:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 558,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6773:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6701:96:5"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "6852:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 564,
												"src": "6839:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 561,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6839:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6838:21:5"
									},
									"scope": 805,
									"src": "6656:204:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 565,
										"nodeType": "StructuredDocumentation",
										"src": "6867:346:5",
										"text": " @notice msgSender from `ctx` revokes `flowOperator` create/update/delete permissions\n @dev `permissions` and `flowRateAllowance` will both be set to 0\n @param token Super token address\n @param flowOperator The permission grantee address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "062e56ec",
									"id": 577,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeFlowOperatorWithFullControl",
									"nameLocation": "7227:33:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7287:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "7270:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 567,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 566,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "7270:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "7270:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "7310:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "7302:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7302:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "7347:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "7332:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 571,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7332:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7260:96:5"
									},
									"returnParameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "7411:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "7398:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 574,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7398:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7397:21:5"
									},
									"scope": 805,
									"src": "7218:201:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 578,
										"nodeType": "StructuredDocumentation",
										"src": "7425:553:5",
										"text": " @notice Get the permissions of a flow operator between `sender` and `flowOperator` for `token`\n @param token Super token address\n @param sender The permission granter address\n @param flowOperator The permission grantee address\n @return flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n @return permissions A bitmask representation of the granted permissions\n @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"functionSelector": "00422bbe",
									"id": 594,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowOperatorData",
									"nameLocation": "7992:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8037:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8020:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 580,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 579,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "8020:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "8020:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "8059:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8051:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8051:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "8082:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8074:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 584,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8074:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8011:89:5"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "flowOperatorId",
												"nameLocation": "8167:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8159:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 587,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8159:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "8201:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8195:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 589,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8195:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "8232:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "8226:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 591,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "8226:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8145:114:5"
									},
									"scope": 805,
									"src": "7983:277:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 595,
										"nodeType": "StructuredDocumentation",
										"src": "8266:394:5",
										"text": " @notice Get flow operator using flowOperatorId\n @param token Super token address\n @param flowOperatorId The keccak256 hash of encoded string \"flowOperator\", sender and flowOperator\n @return permissions A bitmask representation of the granted permissions\n @return flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"functionSelector": "09d256ef",
									"id": 607,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowOperatorDataByID",
									"nameLocation": "8674:23:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 598,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8723:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8706:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 597,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 596,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "8706:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "8706:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "flowOperatorId",
												"nameLocation": "8745:14:5",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8737:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 599,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8737:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8697:68:5"
									},
									"returnParameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "8832:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8826:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 602,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8826:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "8863:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 607,
												"src": "8857:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 604,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "8857:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8812:78:5"
									},
									"scope": 805,
									"src": "8665:226:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 608,
										"nodeType": "StructuredDocumentation",
										"src": "8897:741:5",
										"text": " @notice Create a flow betwen ctx.msgSender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @custom:callbacks \n - AgreementCreated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - A deposit is taken as safety margin for the solvency agents\n - A extra gas fee may be taken to pay for solvency agent liquidations"
									},
									"functionSelector": "62fc305e",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createFlow",
									"nameLocation": "9652:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9689:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9672:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 610,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 609,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "9672:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "9672:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9712:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9704:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 612,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9704:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "9736:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9730:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 614,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "9730:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "9769:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9754:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 616,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9754:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9662:116:5"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "9833:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "9820:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 619,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9820:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9819:21:5"
									},
									"scope": 805,
									"src": "9643:198:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "9847:436:5",
										"text": " @notice Create a flow between sender and receiver\n @dev A flow created by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param sender Flow sender address (has granted permissions)\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "94229ecb",
									"id": 639,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createFlowByOperator",
									"nameLocation": "10297:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "10344:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10327:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 625,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 624,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "10327:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "10327:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "10367:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10359:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 627,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10359:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 630,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "10391:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10383:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 629,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10383:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "10415:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10409:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 631,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "10409:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "10448:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10433:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 633,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10433:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10317:140:5"
									},
									"returnParameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "10512:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "10499:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 636,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10499:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10498:21:5"
									},
									"scope": 805,
									"src": "10288:232:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 640,
										"nodeType": "StructuredDocumentation",
										"src": "10526:833:5",
										"text": " @notice Update the flow rate between ctx.msgSender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @custom:callbacks \n - AgreementUpdated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - Only the flow sender may update the flow rate\n - Even if the flow rate is zero, the flow is not deleted\n from the system\n - Deposit amount will be adjusted accordingly\n - No new gas fee is charged"
									},
									"functionSelector": "50209a62",
									"id": 654,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlow",
									"nameLocation": "11373:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "11410:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11393:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 642,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 641,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "11393:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "11393:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "11433:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11425:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11425:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "11457:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11451:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 646,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "11451:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "11490:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11475:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 648,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11475:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11383:116:5"
									},
									"returnParameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "11554:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 654,
												"src": "11541:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 651,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11541:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11540:21:5"
									},
									"scope": 805,
									"src": "11364:198:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 655,
										"nodeType": "StructuredDocumentation",
										"src": "11568:436:5",
										"text": " @notice Update a flow between sender and receiver\n @dev A flow updated by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param sender Flow sender address (has granted permissions)\n @param receiver Flow receiver address\n @param flowRate New flow rate in amount per second\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)"
									},
									"functionSelector": "354b9590",
									"id": 671,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateFlowByOperator",
									"nameLocation": "12018:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "12065:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12048:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 657,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 656,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "12048:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "12048:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "12088:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12080:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12080:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12112:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12104:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 661,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12104:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "12136:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12130:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 663,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "12130:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "12169:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12154:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 665,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12154:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12038:140:5"
									},
									"returnParameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "12233:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "12220:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 668,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12220:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12219:21:5"
									},
									"scope": 805,
									"src": "12009:232:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 672,
										"nodeType": "StructuredDocumentation",
										"src": "12247:415:5",
										"text": " @dev Get the flow data between `sender` and `receiver` of `token`\n @param token Super token address\n @param sender Flow receiver\n @param receiver Flow sender\n @return timestamp Timestamp of when the flow is updated\n @return flowRate The flow rate\n @return deposit The amount of deposit the flow\n @return owedDeposit The amount of owed deposit of the flow"
									},
									"functionSelector": "e6a1e888",
									"id": 690,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlow",
									"nameLocation": "12676:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "12710:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12693:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 674,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 673,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "12693:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "12693:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "12733:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12725:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12725:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12757:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12749:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12749:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12683:88:5"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "12840:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12832:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12832:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "12869:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12863:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 683,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "12863:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "12899:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12891:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12891:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "12928:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "12920:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12920:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12818:131:5"
									},
									"scope": 805,
									"src": "12667:283:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "12956:445:5",
										"text": " @notice Get flow data using agreementId\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param agreementId The agreement ID\n @return timestamp Timestamp of when the flow is updated\n @return flowRate The flow rate\n @return deposit The deposit amount of the flow\n @return owedDeposit The owed deposit amount of the flow"
									},
									"functionSelector": "aabd2668",
									"id": 707,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getFlowByID",
									"nameLocation": "13415:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "13452:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13435:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 693,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 692,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "13435:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "13435:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "13474:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13466:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 695,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13466:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13426:65:5"
									},
									"returnParameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "13560:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13552:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 698,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13552:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "13589:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13583:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 700,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "13583:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "13619:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13611:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13611:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "13648:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "13640:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 704,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13640:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13538:131:5"
									},
									"scope": 805,
									"src": "13406:264:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 708,
										"nodeType": "StructuredDocumentation",
										"src": "13676:436:5",
										"text": " @dev Get the aggregated flow info of the account\n @param token Super token address\n @param account Account for the query\n @return timestamp Timestamp of when a flow was last updated for account\n @return flowRate The net flow rate of token for account\n @return deposit The sum of all deposits for account's flows\n @return owedDeposit The sum of all owed deposits for account's flows"
									},
									"functionSelector": "0f1ac495",
									"id": 724,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccountFlowInfo",
									"nameLocation": "14126:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14171:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14154:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 710,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 709,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "14154:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "14154:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14194:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14186:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14186:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14144:63:5"
									},
									"returnParameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "14276:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14268:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14268:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "14305:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14299:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 717,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "14299:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "14335:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14327:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14327:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "14364:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "14356:19:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14356:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14254:122:5"
									},
									"scope": 805,
									"src": "14117:260:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "14383:182:5",
										"text": " @dev Get the net flow rate of the account\n @param token Super token address\n @param account Account for the query\n @return flowRate Net flow rate"
									},
									"functionSelector": "e8e7e2d1",
									"id": 735,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNetFlow",
									"nameLocation": "14579:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14616:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "14599:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 727,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 726,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "14599:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "14599:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14639:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "14631:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14631:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14589:63:5"
									},
									"returnParameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "14706:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "14700:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 732,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "14700:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14699:16:5"
									},
									"scope": 805,
									"src": "14570:146:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "14722:763:5",
										"text": " @notice Delete the flow between sender and receiver\n @dev flowId (agreementId) is the keccak256 hash of encoded sender and receiver\n @param token Super token address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @param receiver Flow receiver address\n @custom:callbacks \n - AgreementTerminated\n   - agreementId - can be used in getFlowByID\n   - agreementData - abi.encode(address flowSender, address flowReceiver)\n @custom:note \n - Both flow sender and receiver may delete the flow\n - If Sender account is insolvent or in critical state, a solvency agent may\n   also terminate the agreement\n - Gas fee may be returned to the sender"
									},
									"functionSelector": "b4b333c6",
									"id": 750,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteFlow",
									"nameLocation": "15499:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 739,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "15536:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15519:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 738,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 737,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "15519:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "15519:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 741,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "15559:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15551:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 740,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15551:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 743,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "15583:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15575:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 742,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15575:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "15616:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15601:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 744,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15601:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15509:116:5"
									},
									"returnParameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15680:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "15667:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 747,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15667:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15666:21:5"
									},
									"scope": 805,
									"src": "15490:198:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 751,
										"nodeType": "StructuredDocumentation",
										"src": "15694:321:5",
										"text": " @notice Delete the flow between sender and receiver\n @dev A flow deleted by an approved flow operator (see above for details on callbacks)\n @param token Super token address\n @param ctx Context bytes (see ISuperfluid.sol for Context struct)\n @param receiver Flow receiver address"
									},
									"functionSelector": "4c8b181f",
									"id": 765,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteFlowByOperator",
									"nameLocation": "16029:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16076:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16059:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 753,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 752,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "16059:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "16059:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "16099:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16091:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16091:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 758,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "16123:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16115:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16115:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16156:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16141:18:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 759,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16141:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16049:116:5"
									},
									"returnParameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16220:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "16207:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 762,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16207:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16206:21:5"
									},
									"scope": 805,
									"src": "16020:208:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 766,
										"nodeType": "StructuredDocumentation",
										"src": "16239:353:5",
										"text": " @dev Flow operator updated event\n @param token Super token address\n @param sender Flow sender address\n @param flowOperator Flow operator address\n @param permissions Octo bitmask representation of permissions\n @param flowRateAllowance The flow rate allowance the `flowOperator` is granted (only goes down)"
									},
									"id": 779,
									"name": "FlowOperatorUpdated",
									"nameLocation": "16603:19:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 769,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16657:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16632:30:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 768,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 767,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "16632:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "16632:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 771,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "16688:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16672:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 770,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16672:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 773,
												"indexed": true,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "16720:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16704:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 772,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16704:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 775,
												"indexed": false,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "16748:11:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16742:17:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 774,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "16742:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 777,
												"indexed": false,
												"mutability": "mutable",
												"name": "flowRateAllowance",
												"nameLocation": "16775:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "16769:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 776,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "16769:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16622:176:5"
									},
									"src": "16597:202:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 780,
										"nodeType": "StructuredDocumentation",
										"src": "16805:466:5",
										"text": " @dev Flow updated event\n @param token Super token address\n @param sender Flow sender address\n @param receiver Flow recipient address\n @param flowRate Flow rate in amount per second for this flow\n @param totalSenderFlowRate Total flow rate in amount per second for the sender\n @param totalReceiverFlowRate Total flow rate in amount per second for the receiver\n @param userData The user provided data"
									},
									"id": 797,
									"name": "FlowUpdated",
									"nameLocation": "17282:11:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "17328:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17303:30:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 782,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 781,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "17303:16:5"
													},
													"referencedDeclaration": 3123,
													"src": "17303:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "17359:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17343:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17343:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "17391:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17375:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 786,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17375:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"indexed": false,
												"mutability": "mutable",
												"name": "flowRate",
												"nameLocation": "17415:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17409:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int96",
													"typeString": "int96"
												},
												"typeName": {
													"id": 788,
													"name": "int96",
													"nodeType": "ElementaryTypeName",
													"src": "17409:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int96",
														"typeString": "int96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 791,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalSenderFlowRate",
												"nameLocation": "17440:19:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17433:26:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 790,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "17433:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 793,
												"indexed": false,
												"mutability": "mutable",
												"name": "totalReceiverFlowRate",
												"nameLocation": "17476:21:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17469:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 792,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "17469:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 795,
												"indexed": false,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "17513:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "17507:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 794,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17507:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17293:234:5"
									},
									"src": "17276:252:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 798,
										"nodeType": "StructuredDocumentation",
										"src": "17534:181:5",
										"text": " @dev Flow updated extension event\n @param flowOperator Flow operator address - the Context.msgSender\n @param deposit The deposit amount for the stream"
									},
									"id": 804,
									"name": "FlowUpdatedExtension",
									"nameLocation": "17726:20:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 800,
												"indexed": true,
												"mutability": "mutable",
												"name": "flowOperator",
												"nameLocation": "17772:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "17756:28:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 799,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17756:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 802,
												"indexed": false,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "17802:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 804,
												"src": "17794:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 801,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17794:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17746:69:5"
									},
									"src": "17720:96:5"
								}
							],
							"scope": 806,
							"src": "274:17544:5",
							"usedErrors": [
								406,
								408,
								410,
								412,
								414,
								416,
								418,
								420,
								422,
								424,
								426,
								428,
								430,
								432,
								434,
								436,
								438,
								440,
								442,
								444
							]
						}
					],
					"src": "32:17787:5"
				},
				"id": 5
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
					"exportedSymbols": {
						"BatchOperation": [
							1177
						],
						"ContextDefinitions": [
							1044
						],
						"FlowOperatorDefinitions": [
							1131
						],
						"SuperAppDefinitions": [
							968
						],
						"SuperfluidGovernanceConfigs": [
							1278
						]
					},
					"id": 1279,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 807,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SuperAppDefinitions",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 808,
								"nodeType": "StructuredDocumentation",
								"src": "59:69:6",
								"text": " @title Super app definitions library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 968,
							"linearizedBaseContracts": [
								968
							],
							"name": "SuperAppDefinitions",
							"nameLocation": "137:19:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 811,
									"mutability": "constant",
									"name": "APP_LEVEL_MASK",
									"nameLocation": "612:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "586:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 809,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "586:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "30784646",
										"id": 810,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "629:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0xFF"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 816,
									"mutability": "constant",
									"name": "APP_LEVEL_FINAL",
									"nameLocation": "757:15:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "731:50:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 812,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "731:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"id": 815,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 813,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "775:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "30",
											"id": 814,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "780:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_0_by_1",
												"typeString": "int_const 0"
											},
											"value": "0"
										},
										"src": "775:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 821,
									"mutability": "constant",
									"name": "APP_LEVEL_SECOND",
									"nameLocation": "912:16:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "886:51:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 817,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "886:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"id": 820,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 818,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "931:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "31",
											"id": 819,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "936:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"src": "931:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 835,
										"nodeType": "Block",
										"src": "1023:58:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 830,
																"name": "configWord",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "1046:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"id": 831,
																"name": "APP_LEVEL_MASK",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 811,
																"src": "1059:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1046:27:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 829,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1040:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint8_$",
															"typeString": "type(uint8)"
														},
														"typeName": {
															"id": 828,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "1040:5:6",
															"typeDescriptions": {}
														}
													},
													"id": 833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1040:34:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 827,
												"id": 834,
												"nodeType": "Return",
												"src": "1033:41:6"
											}
										]
									},
									"id": 836,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAppCallbackLevel",
									"nameLocation": "953:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "981:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "973:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 822,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:20:6"
									},
									"returnParameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "1016:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 825,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1016:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1015:7:6"
									},
									"scope": 968,
									"src": "944:137:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 841,
									"mutability": "constant",
									"name": "APP_JAIL_BIT",
									"nameLocation": "1113:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1087:48:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 837,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1087:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_32768_by_1",
											"typeString": "int_const 32768"
										},
										"id": 840,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 838,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1128:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "3135",
											"id": 839,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1133:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_15_by_1",
												"typeString": "int_const 15"
											},
											"value": "15"
										},
										"src": "1128:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_32768_by_1",
											"typeString": "int_const 32768"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 856,
										"nodeType": "Block",
										"src": "1211:75:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 851,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 848,
																	"name": "configWord",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 843,
																	"src": "1229:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"expression": {
																		"id": 849,
																		"name": "SuperAppDefinitions",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 968,
																		"src": "1242:19:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SuperAppDefinitions_$968_$",
																			"typeString": "type(library SuperAppDefinitions)"
																		}
																	},
																	"id": 850,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "APP_JAIL_BIT",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 841,
																	"src": "1242:32:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1229:45:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 852,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1228:47:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 853,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1278:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1228:51:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 847,
												"id": 855,
												"nodeType": "Return",
												"src": "1221:58:6"
											}
										]
									},
									"id": 857,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isAppJailed",
									"nameLocation": "1150:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "1170:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "1162:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1162:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1161:20:6"
									},
									"returnParameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "1205:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 845,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1205:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1204:6:6"
									},
									"scope": 968,
									"src": "1141:145:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 862,
									"mutability": "constant",
									"name": "AGREEMENT_CALLBACK_NOOP_BITMASKS",
									"nameLocation": "1519:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1493:71:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 858,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1493:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_1095216660480_by_1",
											"typeString": "int_const 1095216660480"
										},
										"id": 861,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "30784646",
											"id": 859,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1554:4:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_255_by_1",
												"typeString": "int_const 255"
											},
											"value": "0xFF"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "3332",
											"id": 860,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1562:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_32_by_1",
												"typeString": "int_const 32"
											},
											"value": "32"
										},
										"src": "1554:10:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1095216660480_by_1",
											"typeString": "int_const 1095216660480"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 870,
									"mutability": "constant",
									"name": "BEFORE_AGREEMENT_CREATED_NOOP",
									"nameLocation": "1596:29:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1570:71:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 863,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1570:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_4294967296_by_1",
											"typeString": "int_const 4294967296"
										},
										"id": 869,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 864,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1628:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_32_by_1",
														"typeString": "int_const 32"
													},
													"id": 867,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 865,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1634:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "30",
														"id": 866,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1639:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1634:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_32_by_1",
														"typeString": "int_const 32"
													}
												}
											],
											"id": 868,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1633:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_32_by_1",
												"typeString": "int_const 32"
											}
										},
										"src": "1628:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4294967296_by_1",
											"typeString": "int_const 4294967296"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 878,
									"mutability": "constant",
									"name": "AFTER_AGREEMENT_CREATED_NOOP",
									"nameLocation": "1673:28:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1647:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 871,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1647:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_8589934592_by_1",
											"typeString": "int_const 8589934592"
										},
										"id": 877,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 872,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1704:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_33_by_1",
														"typeString": "int_const 33"
													},
													"id": 875,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 873,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1710:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 874,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1715:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1710:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_33_by_1",
														"typeString": "int_const 33"
													}
												}
											],
											"id": 876,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1709:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_33_by_1",
												"typeString": "int_const 33"
											}
										},
										"src": "1704:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_8589934592_by_1",
											"typeString": "int_const 8589934592"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 886,
									"mutability": "constant",
									"name": "BEFORE_AGREEMENT_UPDATED_NOOP",
									"nameLocation": "1749:29:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1723:71:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 879,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_17179869184_by_1",
											"typeString": "int_const 17179869184"
										},
										"id": 885,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 880,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1781:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_34_by_1",
														"typeString": "int_const 34"
													},
													"id": 883,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 881,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1787:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "32",
														"id": 882,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1792:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "1787:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_34_by_1",
														"typeString": "int_const 34"
													}
												}
											],
											"id": 884,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1786:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_34_by_1",
												"typeString": "int_const 34"
											}
										},
										"src": "1781:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_17179869184_by_1",
											"typeString": "int_const 17179869184"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 894,
									"mutability": "constant",
									"name": "AFTER_AGREEMENT_UPDATED_NOOP",
									"nameLocation": "1826:28:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1800:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 887,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1800:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_34359738368_by_1",
											"typeString": "int_const 34359738368"
										},
										"id": 893,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 888,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1857:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_35_by_1",
														"typeString": "int_const 35"
													},
													"id": 891,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 889,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1863:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "33",
														"id": 890,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1868:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "1863:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_35_by_1",
														"typeString": "int_const 35"
													}
												}
											],
											"id": 892,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1862:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_35_by_1",
												"typeString": "int_const 35"
											}
										},
										"src": "1857:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_34359738368_by_1",
											"typeString": "int_const 34359738368"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 902,
									"mutability": "constant",
									"name": "BEFORE_AGREEMENT_TERMINATED_NOOP",
									"nameLocation": "1902:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1876:74:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 895,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1876:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_68719476736_by_1",
											"typeString": "int_const 68719476736"
										},
										"id": 901,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 896,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1937:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_36_by_1",
														"typeString": "int_const 36"
													},
													"id": 899,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 897,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1943:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "34",
														"id": 898,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1948:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_4_by_1",
															"typeString": "int_const 4"
														},
														"value": "4"
													},
													"src": "1943:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_36_by_1",
														"typeString": "int_const 36"
													}
												}
											],
											"id": 900,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1942:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_36_by_1",
												"typeString": "int_const 36"
											}
										},
										"src": "1937:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_68719476736_by_1",
											"typeString": "int_const 68719476736"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 910,
									"mutability": "constant",
									"name": "AFTER_AGREEMENT_TERMINATED_NOOP",
									"nameLocation": "1982:31:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "1956:73:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 903,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1956:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_137438953472_by_1",
											"typeString": "int_const 137438953472"
										},
										"id": 909,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 904,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2016:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_rational_37_by_1",
														"typeString": "int_const 37"
													},
													"id": 907,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "3332",
														"id": 905,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2022:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "35",
														"id": 906,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2027:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_5_by_1",
															"typeString": "int_const 5"
														},
														"value": "5"
													},
													"src": "2022:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_37_by_1",
														"typeString": "int_const 37"
													}
												}
											],
											"id": 908,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "2021:8:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_37_by_1",
												"typeString": "int_const 37"
											}
										},
										"src": "2016:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_137438953472_by_1",
											"typeString": "int_const 137438953472"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 913,
									"mutability": "constant",
									"name": "APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR",
									"nameLocation": "2247:41:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2221:71:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 911,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2221:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 912,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2291:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 916,
									"mutability": "constant",
									"name": "APP_RULE_NO_REGISTRATION_FOR_EOA",
									"nameLocation": "2324:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2298:62:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 914,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2298:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 915,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2359:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 919,
									"mutability": "constant",
									"name": "APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK",
									"nameLocation": "2392:42:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2366:73:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 917,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2366:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3130",
										"id": 918,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2437:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10_by_1",
											"typeString": "int_const 10"
										},
										"value": "10"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 922,
									"mutability": "constant",
									"name": "APP_RULE_NO_CRITICAL_SENDER_ACCOUNT",
									"nameLocation": "2471:35:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2445:66:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 920,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2445:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3131",
										"id": 921,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2509:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_11_by_1",
											"typeString": "int_const 11"
										},
										"value": "11"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 925,
									"mutability": "constant",
									"name": "APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT",
									"nameLocation": "2543:37:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2517:68:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 923,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2517:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3132",
										"id": 924,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2583:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_12_by_1",
											"typeString": "int_const 12"
										},
										"value": "12"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 928,
									"mutability": "constant",
									"name": "APP_RULE_CTX_IS_READONLY",
									"nameLocation": "2617:24:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2591:55:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 926,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2591:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 927,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2644:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 931,
									"mutability": "constant",
									"name": "APP_RULE_CTX_IS_NOT_CLEAN",
									"nameLocation": "2678:25:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2652:56:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 929,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2652:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3231",
										"id": 930,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2706:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_21_by_1",
											"typeString": "int_const 21"
										},
										"value": "21"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 934,
									"mutability": "constant",
									"name": "APP_RULE_CTX_IS_MALFORMATED",
									"nameLocation": "2740:27:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2714:58:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 932,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2714:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3232",
										"id": 933,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2770:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_22_by_1",
											"typeString": "int_const 22"
										},
										"value": "22"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 937,
									"mutability": "constant",
									"name": "APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED",
									"nameLocation": "2804:41:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2778:72:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 935,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2778:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3330",
										"id": 936,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2848:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_30_by_1",
											"typeString": "int_const 30"
										},
										"value": "30"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 940,
									"mutability": "constant",
									"name": "APP_RULE_COMPOSITE_APP_IS_JAILED",
									"nameLocation": "2882:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2856:63:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 938,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2856:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3331",
										"id": 939,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2917:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_31_by_1",
											"typeString": "int_const 31"
										},
										"value": "31"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 943,
									"mutability": "constant",
									"name": "APP_RULE_MAX_APP_LEVEL_REACHED",
									"nameLocation": "2951:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 968,
									"src": "2925:61:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 941,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2925:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3430",
										"id": 942,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2984:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_40_by_1",
											"typeString": "int_const 40"
										},
										"value": "40"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 966,
										"nodeType": "Block",
										"src": "3179:120:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 950,
																	"name": "configWord",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 945,
																	"src": "3197:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 957,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "~",
																	"prefix": true,
																	"src": "3210:67:6",
																	"subExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 955,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 953,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 951,
																						"name": "APP_LEVEL_MASK",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 811,
																						"src": "3212:14:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "|",
																					"rightExpression": {
																						"id": 952,
																						"name": "APP_JAIL_BIT",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 841,
																						"src": "3229:12:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3212:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "|",
																				"rightExpression": {
																					"id": 954,
																					"name": "AGREEMENT_CALLBACK_NOOP_BITMASKS",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 862,
																					"src": "3244:32:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "3212:64:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 956,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "3211:66:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3197:80:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 959,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3196:82:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 962,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3290:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3282:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 960,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3282:7:6",
																"typeDescriptions": {}
															}
														},
														"id": 963,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3282:10:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3196:96:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 949,
												"id": 965,
												"nodeType": "Return",
												"src": "3189:103:6"
											}
										]
									},
									"id": 967,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isConfigWordClean",
									"nameLocation": "3112:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "3138:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3130:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3130:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3129:20:6"
									},
									"returnParameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3173:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 947,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3173:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3172:6:6"
									},
									"scope": 968,
									"src": "3103:196:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "129:3172:6",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ContextDefinitions",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 969,
								"nodeType": "StructuredDocumentation",
								"src": "3303:67:6",
								"text": " @title Context definitions library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 1044,
							"linearizedBaseContracts": [
								1044
							],
							"name": "ContextDefinitions",
							"nameLocation": "3379:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 972,
									"mutability": "constant",
									"name": "CALL_INFO_APP_LEVEL_MASK",
									"nameLocation": "3626:24:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3600:57:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 970,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3600:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "30784646",
										"id": 971,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3653:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0xFF"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 975,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_SHIFT",
									"nameLocation": "3707:25:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3681:56:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 973,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3681:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3332",
										"id": 974,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3735:2:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_32_by_1",
											"typeString": "int_const 32"
										},
										"value": "32"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 980,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_MASK",
									"nameLocation": "3769:24:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3743:85:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 976,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3743:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 979,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "307846",
											"id": 977,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3796:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_15_by_1",
												"typeString": "int_const 15"
											},
											"value": "0xF"
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"id": 978,
											"name": "CALL_INFO_CALL_TYPE_SHIFT",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 975,
											"src": "3803:25:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "3796:32:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 983,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_AGREEMENT",
									"nameLocation": "3858:29:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3834:57:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 981,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3834:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 982,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3890:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 986,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_APP_ACTION",
									"nameLocation": "3921:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3897:58:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 984,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3897:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 985,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3954:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 989,
									"mutability": "constant",
									"name": "CALL_INFO_CALL_TYPE_APP_CALLBACK",
									"nameLocation": "3985:32:6",
									"nodeType": "VariableDeclaration",
									"scope": 1044,
									"src": "3961:60:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 987,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3961:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 988,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "4020:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1019,
										"nodeType": "Block",
										"src": "4153:172:6",
										"statements": [
											{
												"expression": {
													"id": 1005,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 998,
														"name": "appCallbackLevel",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 994,
														"src": "4163:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1003,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1001,
																	"name": "callInfo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 991,
																	"src": "4188:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1002,
																	"name": "CALL_INFO_APP_LEVEL_MASK",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 972,
																	"src": "4199:24:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4188:35:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1000,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4182:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 999,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "4182:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1004,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4182:42:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4163:61:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1006,
												"nodeType": "ExpressionStatement",
												"src": "4163:61:6"
											},
											{
												"expression": {
													"id": 1017,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1007,
														"name": "callType",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 996,
														"src": "4234:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1015,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1012,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1010,
																				"name": "callInfo",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 991,
																				"src": "4252:8:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&",
																			"rightExpression": {
																				"id": 1011,
																				"name": "CALL_INFO_CALL_TYPE_MASK",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 980,
																				"src": "4263:24:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4252:35:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1013,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4251:37:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"id": 1014,
																	"name": "CALL_INFO_CALL_TYPE_SHIFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 975,
																	"src": "4292:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4251:66:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1009,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4245:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1008,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "4245:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1016,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4245:73:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4234:84:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1018,
												"nodeType": "ExpressionStatement",
												"src": "4234:84:6"
											}
										]
									},
									"id": 1020,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodeCallInfo",
									"nameLocation": "4037:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "callInfo",
												"nameLocation": "4060:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4052:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 990,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4052:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4051:18:6"
									},
									"returnParameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "appCallbackLevel",
												"nameLocation": "4115:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4109:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 993,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4109:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "callType",
												"nameLocation": "4139:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "4133:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 995,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4133:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4108:40:6"
									},
									"scope": 1044,
									"src": "4028:297:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1042,
										"nodeType": "Block",
										"src": "4456:100:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1031,
																"name": "appCallbackLevel",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1022,
																"src": "4481:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															],
															"id": 1030,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4473:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1029,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4473:7:6",
																"typeDescriptions": {}
															}
														},
														"id": 1032,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4473:25:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "|",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1038,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1035,
																			"name": "callType",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1024,
																			"src": "4510:8:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 1034,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4502:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1033,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "4502:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1036,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4502:17:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<<",
																"rightExpression": {
																	"id": 1037,
																	"name": "CALL_INFO_CALL_TYPE_SHIFT",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 975,
																	"src": "4523:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4502:46:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1039,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4501:48:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4473:76:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1028,
												"id": 1041,
												"nodeType": "Return",
												"src": "4466:83:6"
											}
										]
									},
									"id": 1043,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "encodeCallInfo",
									"nameLocation": "4340:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "appCallbackLevel",
												"nameLocation": "4361:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "4355:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1021,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4355:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "callType",
												"nameLocation": "4385:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "4379:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1023,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4379:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4354:40:6"
									},
									"returnParameters": {
										"id": 1028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "callInfo",
												"nameLocation": "4442:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "4434:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4434:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4433:18:6"
									},
									"scope": 1044,
									"src": "4331:225:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "3371:1188:6",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "FlowOperatorDefinitions",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1045,
								"nodeType": "StructuredDocumentation",
								"src": "4561:74:6",
								"text": " @title Flow Operator definitions library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 1131,
							"linearizedBaseContracts": [
								1131
							],
							"name": "FlowOperatorDefinitions",
							"nameLocation": "4645:23:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1053,
									"mutability": "constant",
									"name": "AUTHORIZE_FLOW_OPERATOR_CREATE",
									"nameLocation": "4699:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "4675:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1046,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4675:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 1052,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"arguments": [
												{
													"hexValue": "31",
													"id": 1049,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4738:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													}
												],
												"id": 1048,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "4732:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint8_$",
													"typeString": "type(uint8)"
												},
												"typeName": {
													"id": 1047,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4732:5:6",
													"typeDescriptions": {}
												}
											},
											"id": 1050,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "typeConversion",
											"lValueRequested": false,
											"names": [],
											"nodeType": "FunctionCall",
											"src": "4732:8:6",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "30",
											"id": 1051,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4744:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_0_by_1",
												"typeString": "int_const 0"
											},
											"value": "0"
										},
										"src": "4732:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1061,
									"mutability": "constant",
									"name": "AUTHORIZE_FLOW_OPERATOR_UPDATE",
									"nameLocation": "4775:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "4751:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1054,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4751:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 1060,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"arguments": [
												{
													"hexValue": "31",
													"id": 1057,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4814:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													}
												],
												"id": 1056,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "4808:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint8_$",
													"typeString": "type(uint8)"
												},
												"typeName": {
													"id": 1055,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4808:5:6",
													"typeDescriptions": {}
												}
											},
											"id": 1058,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "typeConversion",
											"lValueRequested": false,
											"names": [],
											"nodeType": "FunctionCall",
											"src": "4808:8:6",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "31",
											"id": 1059,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4820:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"src": "4808:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1069,
									"mutability": "constant",
									"name": "AUTHORIZE_FLOW_OPERATOR_DELETE",
									"nameLocation": "4851:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "4827:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1062,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4827:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 1068,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"arguments": [
												{
													"hexValue": "31",
													"id": 1065,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4890:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												}
											],
											"expression": {
												"argumentTypes": [
													{
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													}
												],
												"id": 1064,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"lValueRequested": false,
												"nodeType": "ElementaryTypeNameExpression",
												"src": "4884:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_uint8_$",
													"typeString": "type(uint8)"
												},
												"typeName": {
													"id": 1063,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4884:5:6",
													"typeDescriptions": {}
												}
											},
											"id": 1066,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "typeConversion",
											"lValueRequested": false,
											"names": [],
											"nodeType": "FunctionCall",
											"src": "4884:8:6",
											"tryCall": false,
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "<<",
										"rightExpression": {
											"hexValue": "32",
											"id": 1067,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4896:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"src": "4884:13:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1076,
									"mutability": "constant",
									"name": "AUTHORIZE_FULL_CONTROL",
									"nameLocation": "4927:22:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "4903:153:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1070,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "4903:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										},
										"id": 1075,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"commonType": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"id": 1073,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"leftExpression": {
												"id": 1071,
												"name": "AUTHORIZE_FLOW_OPERATOR_CREATE",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1053,
												"src": "4960:30:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"nodeType": "BinaryOperation",
											"operator": "|",
											"rightExpression": {
												"id": 1072,
												"name": "AUTHORIZE_FLOW_OPERATOR_UPDATE",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1061,
												"src": "4993:30:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"src": "4960:63:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"nodeType": "BinaryOperation",
										"operator": "|",
										"rightExpression": {
											"id": 1074,
											"name": "AUTHORIZE_FLOW_OPERATOR_DELETE",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 1069,
											"src": "5026:30:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"src": "4960:96:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1086,
									"mutability": "constant",
									"name": "REVOKE_FLOW_OPERATOR_CREATE",
									"nameLocation": "5086:27:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "5062:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1077,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "5062:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"id": 1085,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "~",
										"prefix": true,
										"src": "5116:16:6",
										"subExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1083,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 1080,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5124:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"id": 1079,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5118:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1078,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5118:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1081,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5118:8:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "30",
														"id": 1082,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5130:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5118:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												}
											],
											"id": 1084,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "5117:15:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1096,
									"mutability": "constant",
									"name": "REVOKE_FLOW_OPERATOR_UPDATE",
									"nameLocation": "5162:27:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "5138:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1087,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "5138:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"id": 1095,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "~",
										"prefix": true,
										"src": "5192:16:6",
										"subExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1093,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5200:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"id": 1089,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5194:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1088,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5194:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1091,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5194:8:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "31",
														"id": 1092,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5206:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "5194:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												}
											],
											"id": 1094,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "5193:15:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1106,
									"mutability": "constant",
									"name": "REVOKE_FLOW_OPERATOR_DELETE",
									"nameLocation": "5238:27:6",
									"nodeType": "VariableDeclaration",
									"scope": 1131,
									"src": "5214:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1097,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "5214:5:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"id": 1105,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"nodeType": "UnaryOperation",
										"operator": "~",
										"prefix": true,
										"src": "5268:16:6",
										"subExpression": {
											"components": [
												{
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1103,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"hexValue": "31",
																"id": 1100,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5276:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																}
															],
															"id": 1099,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5270:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1098,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5270:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1101,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5270:8:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"hexValue": "32",
														"id": 1102,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5282:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "5270:13:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												}
											],
											"id": 1104,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "5269:15:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											}
										},
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1129,
										"nodeType": "Block",
										"src": "5367:209:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 1121,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1113,
																	"name": "permissions",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1108,
																	"src": "5398:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "~",
																	"prefix": true,
																	"src": "5412:131:6",
																	"subExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				},
																				"id": 1118,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					},
																					"id": 1116,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1114,
																						"name": "AUTHORIZE_FLOW_OPERATOR_CREATE",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1053,
																						"src": "5414:30:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "|",
																					"rightExpression": {
																						"id": 1115,
																						"name": "AUTHORIZE_FLOW_OPERATOR_UPDATE",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1061,
																						"src": "5463:30:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					},
																					"src": "5414:79:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "|",
																				"rightExpression": {
																					"id": 1117,
																					"name": "AUTHORIZE_FLOW_OPERATOR_DELETE",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1069,
																					"src": "5512:30:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				},
																				"src": "5414:128:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			}
																		],
																		"id": 1119,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5413:130:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "5398:145:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															}
														],
														"id": 1122,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5384:173:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1125,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5567:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1124,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5561:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint8_$",
																"typeString": "type(uint8)"
															},
															"typeName": {
																"id": 1123,
																"name": "uint8",
																"nodeType": "ElementaryTypeName",
																"src": "5561:5:6",
																"typeDescriptions": {}
															}
														},
														"id": 1126,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5561:8:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5384:185:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1112,
												"id": 1128,
												"nodeType": "Return",
												"src": "5377:192:6"
											}
										]
									},
									"id": 1130,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isPermissionsClean",
									"nameLocation": "5300:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "5325:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "5319:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1107,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5319:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:19:6"
									},
									"returnParameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "5361:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1110,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5361:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5360:6:6"
									},
									"scope": 1131,
									"src": "5291:285:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "4637:942:6",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "BatchOperation",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1132,
								"nodeType": "StructuredDocumentation",
								"src": "5581:63:6",
								"text": " @title Batch operation library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 1177,
							"linearizedBaseContracts": [
								1177
							],
							"name": "BatchOperation",
							"nameLocation": "5653:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"documentation": {
										"id": 1133,
										"nodeType": "StructuredDocumentation",
										"src": "5674:200:6",
										"text": " @dev ERC20.approve batch operation type\n Call spec:\n ISuperToken(target).operationApprove(\n     abi.decode(data, (address spender, uint256 amount))\n )"
									},
									"id": 1136,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_APPROVE",
									"nameLocation": "5904:28:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "5879:57:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1134,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "5879:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 1135,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5935:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1137,
										"nodeType": "StructuredDocumentation",
										"src": "5942:227:6",
										"text": " @dev ERC20.transferFrom batch operation type\n Call spec:\n ISuperToken(target).operationTransferFrom(\n     abi.decode(data, (address sender, address recipient, uint256 amount)\n )"
									},
									"id": 1140,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_TRANSFER_FROM",
									"nameLocation": "6199:34:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "6174:63:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1138,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "6174:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 1139,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6236:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1141,
										"nodeType": "StructuredDocumentation",
										"src": "6243:212:6",
										"text": " @dev ERC777.send batch operation type\n Call spec:\n ISuperToken(target).operationSend(\n     abi.decode(data, (address recipient, uint256 amount, bytes userData)\n )"
									},
									"id": 1144,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC777_SEND",
									"nameLocation": "6485:26:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "6460:55:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1142,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "6460:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 1143,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6514:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1145,
										"nodeType": "StructuredDocumentation",
										"src": "6521:241:6",
										"text": " @dev ERC20.increaseAllowance batch operation type\n Call spec:\n ISuperToken(target).operationIncreaseAllowance(\n     abi.decode(data, (address account, address spender, uint256 addedValue))\n )"
									},
									"id": 1148,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_INCREASE_ALLOWANCE",
									"nameLocation": "6792:39:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "6767:68:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1146,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "6767:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "34",
										"id": 1147,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6834:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4_by_1",
											"typeString": "int_const 4"
										},
										"value": "4"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1149,
										"nodeType": "StructuredDocumentation",
										"src": "6841:246:6",
										"text": " @dev ERC20.decreaseAllowance batch operation type\n Call spec:\n ISuperToken(target).operationDecreaseAllowance(\n     abi.decode(data, (address account, address spender, uint256 subtractedValue))\n )"
									},
									"id": 1152,
									"mutability": "constant",
									"name": "OPERATION_TYPE_ERC20_DECREASE_ALLOWANCE",
									"nameLocation": "7117:39:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "7092:68:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1150,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7092:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "35",
										"id": 1151,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7159:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_5_by_1",
											"typeString": "int_const 5"
										},
										"value": "5"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1153,
										"nodeType": "StructuredDocumentation",
										"src": "7166:187:6",
										"text": " @dev SuperToken.upgrade batch operation type\n Call spec:\n ISuperToken(target).operationUpgrade(\n     abi.decode(data, (uint256 amount)\n )"
									},
									"id": 1158,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERTOKEN_UPGRADE",
									"nameLocation": "7383:33:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "7358:68:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1154,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7358:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_101_by_1",
											"typeString": "int_const 101"
										},
										"id": 1157,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 1155,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7419:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "313030",
											"id": 1156,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7423:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_100_by_1",
												"typeString": "int_const 100"
											},
											"value": "100"
										},
										"src": "7419:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_101_by_1",
											"typeString": "int_const 101"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1159,
										"nodeType": "StructuredDocumentation",
										"src": "7432:191:6",
										"text": " @dev SuperToken.downgrade batch operation type\n Call spec:\n ISuperToken(target).operationDowngrade(\n     abi.decode(data, (uint256 amount)\n )"
									},
									"id": 1164,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERTOKEN_DOWNGRADE",
									"nameLocation": "7653:35:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "7628:70:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1160,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7628:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_102_by_1",
											"typeString": "int_const 102"
										},
										"id": 1163,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "32",
											"id": 1161,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7691:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "313030",
											"id": 1162,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "7695:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_100_by_1",
												"typeString": "int_const 100"
											},
											"value": "100"
										},
										"src": "7691:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102_by_1",
											"typeString": "int_const 102"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1165,
										"nodeType": "StructuredDocumentation",
										"src": "7704:223:6",
										"text": " @dev Superfluid.callAgreement batch operation type\n Call spec:\n callAgreement(\n     ISuperAgreement(target)),\n     abi.decode(data, (bytes callData, bytes userData)\n )"
									},
									"id": 1170,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT",
									"nameLocation": "7957:40:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "7932:75:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1166,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "7932:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_201_by_1",
											"typeString": "int_const 201"
										},
										"id": 1169,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31",
											"id": 1167,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8000:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1_by_1",
												"typeString": "int_const 1"
											},
											"value": "1"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "323030",
											"id": 1168,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8004:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_200_by_1",
												"typeString": "int_const 200"
											},
											"value": "200"
										},
										"src": "8000:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_201_by_1",
											"typeString": "int_const 201"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1171,
										"nodeType": "StructuredDocumentation",
										"src": "8013:172:6",
										"text": " @dev Superfluid.callAppAction batch operation type\n Call spec:\n callAppAction(\n     ISuperApp(target)),\n     data\n )"
									},
									"id": 1176,
									"mutability": "constant",
									"name": "OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION",
									"nameLocation": "8215:41:6",
									"nodeType": "VariableDeclaration",
									"scope": 1177,
									"src": "8190:76:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 1172,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "8190:6:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_202_by_1",
											"typeString": "int_const 202"
										},
										"id": 1175,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "32",
											"id": 1173,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8259:1:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_2_by_1",
												"typeString": "int_const 2"
											},
											"value": "2"
										},
										"nodeType": "BinaryOperation",
										"operator": "+",
										"rightExpression": {
											"hexValue": "323030",
											"id": 1174,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "8263:3:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_200_by_1",
												"typeString": "int_const 200"
											},
											"value": "200"
										},
										"src": "8259:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_202_by_1",
											"typeString": "int_const 202"
										}
									},
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "5645:2624:6",
							"usedErrors": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SuperfluidGovernanceConfigs",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1178,
								"nodeType": "StructuredDocumentation",
								"src": "8271:77:6",
								"text": " @title Superfluid governance configs library\n @author Superfluid"
							},
							"fullyImplemented": true,
							"id": 1278,
							"linearizedBaseContracts": [
								1278
							],
							"name": "SuperfluidGovernanceConfigs",
							"nameLocation": "8357:27:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1183,
									"mutability": "constant",
									"name": "SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY",
									"nameLocation": "8418:36:6",
									"nodeType": "VariableDeclaration",
									"scope": 1278,
									"src": "8392:133:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1179,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8392:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e72657761726441646472657373",
												"id": 1181,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "8475:49:6",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_9f60ae461adf056670e03ae602566409933242392cb06744f5747c9f38b05d09",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.rewardAddress\""
												},
												"value": "org.superfluid-finance.superfluid.rewardAddress"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_9f60ae461adf056670e03ae602566409933242392cb06744f5747c9f38b05d09",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.rewardAddress\""
												}
											],
											"id": 1180,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "8465:9:6",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1182,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "8465:60:6",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1188,
									"mutability": "constant",
									"name": "CFAV1_PPP_CONFIG_KEY",
									"nameLocation": "8557:20:6",
									"nodeType": "VariableDeclaration",
									"scope": 1278,
									"src": "8531:145:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1184,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8531:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e61677265656d656e74732e436f6e7374616e74466c6f7741677265656d656e742e76312e505050436f6e66696775726174696f6e",
												"id": 1186,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "8598:77:6",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_e420d96e81cb4a6b2abb2366c4f93312d4e2ae878a7d4b22e73472fdad891f78",
													"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\""
												},
												"value": "org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_e420d96e81cb4a6b2abb2366c4f93312d4e2ae878a7d4b22e73472fdad891f78",
													"typeString": "literal_string \"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.PPPConfiguration\""
												}
											],
											"id": 1185,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "8588:9:6",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1187,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "8588:88:6",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 1193,
									"mutability": "constant",
									"name": "SUPERTOKEN_MINIMUM_DEPOSIT_KEY",
									"nameLocation": "8708:30:6",
									"nodeType": "VariableDeclaration",
									"scope": 1278,
									"src": "8682:138:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1189,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8682:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e7375706572546f6b656e4d696e696d756d4465706f736974",
												"id": 1191,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "8759:60:6",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_eae305fa863b373417e615b1044222e2806cefc7788d169ce6748a443c3f6cc4",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.superTokenMinimumDeposit\""
												},
												"value": "org.superfluid-finance.superfluid.superTokenMinimumDeposit"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_eae305fa863b373417e615b1044222e2806cefc7788d169ce6748a443c3f6cc4",
													"typeString": "literal_string \"org.superfluid-finance.superfluid.superTokenMinimumDeposit\""
												}
											],
											"id": 1190,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "8749:9:6",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1192,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "8749:71:6",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1208,
										"nodeType": "Block",
										"src": "8916:135:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e74727573746564466f72776172646572",
																	"id": 1203,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8967:52:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_5e8d8c86403ce515d0afc5f813484261c20de0e66deea95df3a7de50a4365fdd",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.trustedForwarder\""
																	},
																	"value": "org.superfluid-finance.superfluid.trustedForwarder"
																},
																{
																	"id": 1204,
																	"name": "forwarder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1195,
																	"src": "9033:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_5e8d8c86403ce515d0afc5f813484261c20de0e66deea95df3a7de50a4365fdd",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.trustedForwarder\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1201,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8943:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "8943:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1205,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8943:100:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1200,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "8933:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8933:111:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1199,
												"id": 1207,
												"nodeType": "Return",
												"src": "8926:118:6"
											}
										]
									},
									"id": 1209,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTrustedForwarderConfigKey",
									"nameLocation": "8836:28:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "forwarder",
												"nameLocation": "8873:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "8865:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8865:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8864:19:6"
									},
									"returnParameters": {
										"id": 1199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "8907:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1197,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8907:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8906:9:6"
									},
									"scope": 1278,
									"src": "8827:224:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1227,
										"nodeType": "Block",
										"src": "9187:178:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e61707057686974654c697374696e672e726567697374726174696f6e4b6579",
																	"id": 1221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9238:67:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2ac2eda5c308a51ed3bd3433d0d20fe487916751b3404fa382719429ef24259a",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\""
																	},
																	"value": "org.superfluid-finance.superfluid.appWhiteListing.registrationKey"
																},
																{
																	"id": 1222,
																	"name": "deployer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1211,
																	"src": "9319:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1223,
																	"name": "registrationKey",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1213,
																	"src": "9341:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_2ac2eda5c308a51ed3bd3433d0d20fe487916751b3404fa382719429ef24259a",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"expression": {
																	"id": 1219,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9214:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1220,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "9214:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9214:143:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1218,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9204:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9204:154:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1217,
												"id": 1226,
												"nodeType": "Return",
												"src": "9197:161:6"
											}
										]
									},
									"id": 1228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAppRegistrationConfigKey",
									"nameLocation": "9066:27:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "deployer",
												"nameLocation": "9102:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "9094:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9094:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "registrationKey",
												"nameLocation": "9126:15:6",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "9112:29:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1212,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9112:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9093:49:6"
									},
									"returnParameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1216,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "9174:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1215,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9174:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9173:9:6"
									},
									"scope": 1278,
									"src": "9057:308:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1243,
										"nodeType": "Block",
										"src": "9456:140:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f72672e7375706572666c7569642d66696e616e63652e7375706572666c7569642e61707057686974654c697374696e672e666163746f7279",
																	"id": 1238,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9507:59:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_3a9ec29d76a01dd4676b43ee8f5ae7a021577f823fb495dfb5627ad6bbb890b6",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.factory\""
																	},
																	"value": "org.superfluid-finance.superfluid.appWhiteListing.factory"
																},
																{
																	"id": 1239,
																	"name": "factory",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1230,
																	"src": "9580:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_3a9ec29d76a01dd4676b43ee8f5ae7a021577f823fb495dfb5627ad6bbb890b6",
																		"typeString": "literal_string \"org.superfluid-finance.superfluid.appWhiteListing.factory\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1236,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9483:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1237,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "9483:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1240,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9483:105:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1235,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9473:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9473:116:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1234,
												"id": 1242,
												"nodeType": "Return",
												"src": "9466:123:6"
											}
										]
									},
									"id": 1244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAppFactoryConfigKey",
									"nameLocation": "9380:22:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "9411:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "9403:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9402:17:6"
									},
									"returnParameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "9443:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1232,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9443:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9442:9:6"
									},
									"scope": 1278,
									"src": "9371:225:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1276,
										"nodeType": "Block",
										"src": "9733:129:6",
										"statements": [
											{
												"expression": {
													"id": 1264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1253,
														"name": "liquidationPeriod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1249,
														"src": "9743:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1254,
																		"name": "pppConfig",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1246,
																		"src": "9764:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">>",
																	"rightExpression": {
																		"hexValue": "3332",
																		"id": 1255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9777:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_32_by_1",
																			"typeString": "int_const 32"
																		},
																		"value": "32"
																	},
																	"src": "9764:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1257,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "9763:17:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1260,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9788:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		},
																		"typeName": {
																			"id": 1259,
																			"name": "uint32",
																			"nodeType": "ElementaryTypeName",
																			"src": "9788:6:6",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		}
																	],
																	"id": 1258,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "9783:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1261,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9783:12:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint32",
																	"typeString": "type(uint32)"
																}
															},
															"id": 1262,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "9783:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "9763:36:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9743:56:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1265,
												"nodeType": "ExpressionStatement",
												"src": "9743:56:6"
											},
											{
												"expression": {
													"id": 1274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1266,
														"name": "patricianPeriod",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1251,
														"src": "9809:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1273,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1267,
															"name": "pppConfig",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1246,
															"src": "9827:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9844:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		},
																		"typeName": {
																			"id": 1269,
																			"name": "uint32",
																			"nodeType": "ElementaryTypeName",
																			"src": "9844:6:6",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint32_$",
																			"typeString": "type(uint32)"
																		}
																	],
																	"id": 1268,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "9839:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1271,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9839:12:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint32",
																	"typeString": "type(uint32)"
																}
															},
															"id": 1272,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "9839:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															}
														},
														"src": "9827:28:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9809:46:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1275,
												"nodeType": "ExpressionStatement",
												"src": "9809:46:6"
											}
										]
									},
									"id": 1277,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decodePPPConfig",
									"nameLocation": "9611:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "pppConfig",
												"nameLocation": "9635:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "9627:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9627:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9626:19:6"
									},
									"returnParameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "liquidationPeriod",
												"nameLocation": "9685:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "9677:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9677:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "patricianPeriod",
												"nameLocation": "9712:15:6",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "9704:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1250,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9704:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9676:52:6"
									},
									"scope": 1278,
									"src": "9602:260:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1279,
							"src": "8349:1515:6",
							"usedErrors": []
						}
					],
					"src": "32:9833:6"
				},
				"id": 6
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
					"exportedSymbols": {
						"IConstantInflowNFT": [
							1303
						],
						"IFlowNFTBase": [
							1431
						],
						"ISuperToken": [
							2054
						]
					},
					"id": 1304,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1280,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:7"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 1282,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1304,
							"sourceUnit": 2055,
							"src": "58:48:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1281,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "67:11:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
							"file": "./IFlowNFTBase.sol",
							"id": 1284,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1304,
							"sourceUnit": 1432,
							"src": "107:50:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1283,
										"name": "IFlowNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "116:12:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1285,
										"name": "IFlowNFTBase",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1431,
										"src": "191:12:7"
									},
									"id": 1286,
									"nodeType": "InheritanceSpecifier",
									"src": "191:12:7"
								}
							],
							"canonicalName": "IConstantInflowNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1303,
							"linearizedBaseContracts": [
								1303,
								1431,
								220,
								193,
								395
							],
							"name": "IConstantInflowNFT",
							"nameLocation": "169:18:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1288,
									"name": "CIF_NFT_ONLY_CONSTANT_OUTFLOW",
									"nameLocation": "397:29:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "426:2:7"
									},
									"src": "391:38:7"
								},
								{
									"documentation": {
										"id": 1289,
										"nodeType": "StructuredDocumentation",
										"src": "633:333:7",
										"text": "@notice The mint function emits the \"mint\" `Transfer` event.\n @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n is to inform clients that search for events.\n @param to the flow receiver (inflow NFT receiver)\n @param newTokenId the new token id"
									},
									"functionSelector": "40c10f19",
									"id": 1296,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "980:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "993:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "985:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "985:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "newTokenId",
												"nameLocation": "1005:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1296,
												"src": "997:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "997:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "984:32:7"
									},
									"returnParameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1025:0:7"
									},
									"scope": 1303,
									"src": "971:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1297,
										"nodeType": "StructuredDocumentation",
										"src": "1032:281:7",
										"text": "@notice This burn function emits the \"burn\" `Transfer` event.\n @dev We don't modify storage as this is handled in ConstantOutflowNFT.sol and this function's sole purpose\n is to inform clients that search for events.\n @param tokenId desired token id to burn"
									},
									"functionSelector": "42966c68",
									"id": 1302,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "1327:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1299,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1340:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "1332:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1332:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:17:7"
									},
									"returnParameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1357:0:7"
									},
									"scope": 1303,
									"src": "1318:40:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1304,
							"src": "159:1201:7",
							"usedErrors": [
								1288,
								1376,
								1378,
								1380,
								1382,
								1384,
								1386,
								1388,
								1390,
								1392
							]
						}
					],
					"src": "32:1329:7"
				},
				"id": 7
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
					"exportedSymbols": {
						"IConstantOutflowNFT": [
							1357
						],
						"IFlowNFTBase": [
							1431
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 1358,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1305,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:8"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 1307,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1358,
							"sourceUnit": 3124,
							"src": "58:58:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1306,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "67:16:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
							"file": "./IFlowNFTBase.sol",
							"id": 1309,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1358,
							"sourceUnit": 1432,
							"src": "117:50:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1308,
										"name": "IFlowNFTBase",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "126:12:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1310,
										"name": "IFlowNFTBase",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1431,
										"src": "202:12:8"
									},
									"id": 1311,
									"nodeType": "InheritanceSpecifier",
									"src": "202:12:8"
								}
							],
							"canonicalName": "IConstantOutflowNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1357,
							"linearizedBaseContracts": [
								1357,
								1431,
								220,
								193,
								395
							],
							"name": "IConstantOutflowNFT",
							"nameLocation": "179:19:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1313,
									"name": "COF_NFT_INVALID_SUPER_TOKEN",
									"nameLocation": "409:27:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "436:2:8"
									},
									"src": "403:36:8"
								},
								{
									"id": 1315,
									"name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
									"nameLocation": "475:38:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:8"
									},
									"src": "469:47:8"
								},
								{
									"id": 1317,
									"name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
									"nameLocation": "541:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "569:2:8"
									},
									"src": "535:37:8"
								},
								{
									"id": 1319,
									"name": "COF_NFT_ONLY_CONSTANT_INFLOW",
									"nameLocation": "607:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:8"
									},
									"src": "601:37:8"
								},
								{
									"id": 1321,
									"name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
									"nameLocation": "673:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "701:2:8"
									},
									"src": "667:37:8"
								},
								{
									"id": 1323,
									"name": "COF_NFT_TOKEN_ALREADY_EXISTS",
									"nameLocation": "739:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "767:2:8"
									},
									"src": "733:37:8"
								},
								{
									"documentation": {
										"id": 1324,
										"nodeType": "StructuredDocumentation",
										"src": "985:227:8",
										"text": "@notice The onCreate function is called when a new flow is created.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "f7e3d983",
									"id": 1334,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onCreate",
									"nameLocation": "1226:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1327,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1252:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "1235:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1326,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1325,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "1235:16:8"
													},
													"referencedDeclaration": 3123,
													"src": "1235:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1267:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "1259:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1328,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1259:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1287:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "1279:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1279:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:66:8"
									},
									"returnParameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1309:0:8"
									},
									"scope": 1357,
									"src": "1217:93:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1335,
										"nodeType": "StructuredDocumentation",
										"src": "1316:223:8",
										"text": "@notice The onUpdate function is called when a flow is updated.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "eb54a7ca",
									"id": 1345,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onUpdate",
									"nameLocation": "1553:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1338,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1579:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "1562:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1337,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1336,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "1562:16:8"
													},
													"referencedDeclaration": 3123,
													"src": "1562:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1340,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1594:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "1586:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1586:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1614:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1345,
												"src": "1606:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1606:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1561:66:8"
									},
									"returnParameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1636:0:8"
									},
									"scope": 1357,
									"src": "1544:93:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1346,
										"nodeType": "StructuredDocumentation",
										"src": "1643:223:8",
										"text": "@notice The onDelete function is called when a flow is deleted.\n @param token the super token passed from the CFA (flowVars)\n @param flowSender the flow sender\n @param flowReceiver the flow receiver"
									},
									"functionSelector": "ef1f0237",
									"id": 1356,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onDelete",
									"nameLocation": "1880:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1906:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "1889:22:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1348,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1347,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "1889:16:8"
													},
													"referencedDeclaration": 3123,
													"src": "1889:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "1921:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "1913:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "1941:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "1933:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1933:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1888:66:8"
									},
									"returnParameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1963:0:8"
									},
									"scope": 1357,
									"src": "1871:93:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1358,
							"src": "169:1797:8",
							"usedErrors": [
								1313,
								1315,
								1317,
								1319,
								1321,
								1323,
								1376,
								1378,
								1380,
								1382,
								1384,
								1386,
								1388,
								1390,
								1392
							]
						}
					],
					"src": "32:1935:8"
				},
				"id": 8
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol",
					"exportedSymbols": {
						"IERC721Metadata": [
							220
						],
						"IFlowNFTBase": [
							1431
						],
						"ISuperToken": [
							2054
						]
					},
					"id": 1432,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1359,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 1361,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1432,
							"sourceUnit": 221,
							"src": "58:106:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1360,
										"name": "IERC721Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "71:15:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 1363,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1432,
							"sourceUnit": 2055,
							"src": "165:48:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1362,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "174:11:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1364,
										"name": "IERC721Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "241:15:9"
									},
									"id": 1365,
									"nodeType": "InheritanceSpecifier",
									"src": "241:15:9"
								}
							],
							"canonicalName": "IFlowNFTBase",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1431,
							"linearizedBaseContracts": [
								1431,
								220,
								193,
								395
							],
							"name": "IFlowNFTBase",
							"nameLocation": "225:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IFlowNFTBase.FlowNFTData",
									"id": 1374,
									"members": [
										{
											"constant": false,
											"id": 1367,
											"mutability": "mutable",
											"name": "superToken",
											"nameLocation": "628:10:9",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "620:18:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1366,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "620:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1369,
											"mutability": "mutable",
											"name": "flowSender",
											"nameLocation": "656:10:9",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "648:18:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1368,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "648:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1371,
											"mutability": "mutable",
											"name": "flowReceiver",
											"nameLocation": "684:12:9",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "676:20:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1370,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "676:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1373,
											"mutability": "mutable",
											"name": "flowStartDate",
											"nameLocation": "713:13:9",
											"nodeType": "VariableDeclaration",
											"scope": 1374,
											"src": "706:20:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 1372,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "706:6:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "FlowNFTData",
									"nameLocation": "598:11:9",
									"nodeType": "StructDefinition",
									"scope": 1431,
									"src": "591:142:9",
									"visibility": "public"
								},
								{
									"id": 1376,
									"name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "927:52:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "979:2:9"
									},
									"src": "921:61:9"
								},
								{
									"id": 1378,
									"name": "CFA_NFT_APPROVE_TO_CALLER",
									"nameLocation": "1009:25:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1034:2:9"
									},
									"src": "1003:34:9"
								},
								{
									"id": 1380,
									"name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
									"nameLocation": "1091:32:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:9"
									},
									"src": "1085:41:9"
								},
								{
									"id": 1382,
									"name": "CFA_NFT_INVALID_TOKEN_ID",
									"nameLocation": "1173:24:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1197:2:9"
									},
									"src": "1167:33:9"
								},
								{
									"id": 1384,
									"name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
									"nameLocation": "1255:32:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1383,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1287:2:9"
									},
									"src": "1249:41:9"
								},
								{
									"id": 1386,
									"name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
									"nameLocation": "1337:53:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1385,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1390:2:9"
									},
									"src": "1331:62:9"
								},
								{
									"id": 1388,
									"name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
									"nameLocation": "1419:37:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1456:2:9"
									},
									"src": "1413:46:9"
								},
								{
									"id": 1390,
									"name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
									"nameLocation": "1501:31:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1389,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1532:2:9"
									},
									"src": "1495:40:9"
								},
								{
									"id": 1392,
									"name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
									"nameLocation": "1583:32:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1615:2:9"
									},
									"src": "1577:41:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1393,
										"nodeType": "StructuredDocumentation",
										"src": "1835:233:9",
										"text": "@notice Informs third-party platforms that NFT metadata should be updated\n @dev This event comes from https://eips.ethereum.org/EIPS/eip-4906\n @param tokenId the id of the token that should have its metadata updated"
									},
									"id": 1397,
									"name": "MetadataUpdate",
									"nameLocation": "2079:14:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1395,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2102:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1397,
												"src": "2094:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1394,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2094:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2093:17:9"
									},
									"src": "2073:38:9"
								},
								{
									"documentation": {
										"id": 1398,
										"nodeType": "StructuredDocumentation",
										"src": "2290:170:9",
										"text": "@notice An external function for querying flow data by `tokenId``\n @param tokenId the token id\n @return flowData the flow data associated with `tokenId`"
									},
									"functionSelector": "8d47859e",
									"id": 1406,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flowDataByTokenId",
									"nameLocation": "2474:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1400,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2509:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "2501:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2501:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2491:31:9"
									},
									"returnParameters": {
										"id": 1405,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "flowData",
												"nameLocation": "2565:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "2546:27:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FlowNFTData_$1374_memory_ptr",
													"typeString": "struct IFlowNFTBase.FlowNFTData"
												},
												"typeName": {
													"id": 1403,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1402,
														"name": "FlowNFTData",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1374,
														"src": "2546:11:9"
													},
													"referencedDeclaration": 1374,
													"src": "2546:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FlowNFTData_$1374_storage_ptr",
														"typeString": "struct IFlowNFTBase.FlowNFTData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2545:29:9"
									},
									"scope": 1431,
									"src": "2465:110:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1407,
										"nodeType": "StructuredDocumentation",
										"src": "2581:345:9",
										"text": "@notice An external function for computing the deterministic tokenId\n @dev tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\n @param superToken the super token\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n @return tokenId the tokenId"
									},
									"functionSelector": "89f71d2d",
									"id": 1418,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenId",
									"nameLocation": "2940:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2968:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "2960:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2960:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "flowSender",
												"nameLocation": "2996:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "2988:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2988:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "flowReceiver",
												"nameLocation": "3024:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "3016:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2950:92:9"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "3066:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1415,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3066:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3065:9:9"
									},
									"scope": 1431,
									"src": "2931:144:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4cd88b76",
									"id": 1425,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "3264:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1420,
												"mutability": "mutable",
												"name": "nftName",
												"nameLocation": "3298:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "3284:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1419,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3284:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1422,
												"mutability": "mutable",
												"name": "nftSymbol",
												"nameLocation": "3329:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "3315:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1421,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3315:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3274:70:9"
									},
									"returnParameters": {
										"id": 1424,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3353:0:9"
									},
									"scope": 1431,
									"src": "3255:99:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2f388560",
									"id": 1430,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "triggerMetadataUpdate",
									"nameLocation": "3385:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1427,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3415:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "3407:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3407:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3406:17:9"
									},
									"returnParameters": {
										"id": 1429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3432:0:9"
									},
									"scope": 1431,
									"src": "3376:57:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1432,
							"src": "215:3220:9",
							"usedErrors": [
								1376,
								1378,
								1380,
								1382,
								1384,
								1386,
								1388,
								1390,
								1392
							]
						}
					],
					"src": "32:3404:9"
				},
				"id": 9
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
					"exportedSymbols": {
						"IPoolAdminNFT": [
							1434
						]
					},
					"id": 1435,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1433,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolAdminNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 1434,
							"linearizedBaseContracts": [
								1434
							],
							"name": "IPoolAdminNFT",
							"nameLocation": "68:13:10",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1435,
							"src": "58:26:10",
							"usedErrors": []
						}
					],
					"src": "32:52:10"
				},
				"id": 10
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
					"exportedSymbols": {
						"IPoolMemberNFT": [
							1437
						]
					},
					"id": 1438,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1436,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolMemberNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 1437,
							"linearizedBaseContracts": [
								1437
							],
							"name": "IPoolMemberNFT",
							"nameLocation": "68:14:11",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1438,
							"src": "58:27:11",
							"usedErrors": []
						}
					],
					"src": "32:53:11"
				},
				"id": 11
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							1466
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 1467,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1439,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:12"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 1441,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1467,
							"sourceUnit": 3124,
							"src": "59:58:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1440,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:16:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperAgreement",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1442,
								"nodeType": "StructuredDocumentation",
								"src": "119:65:12",
								"text": " @title Super agreement interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 1466,
							"linearizedBaseContracts": [
								1466
							],
							"name": "ISuperAgreement",
							"nameLocation": "195:15:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1443,
										"nodeType": "StructuredDocumentation",
										"src": "218:59:12",
										"text": " @dev Get the type of the agreement class"
									},
									"functionSelector": "7730599e",
									"id": 1448,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "agreementType",
									"nameLocation": "291:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "304:2:12"
									},
									"returnParameters": {
										"id": 1447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1446,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1448,
												"src": "330:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1445,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "330:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "329:9:12"
									},
									"scope": 1466,
									"src": "282:57:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1449,
										"nodeType": "StructuredDocumentation",
										"src": "345:425:12",
										"text": " @dev Calculate the real-time balance for the account of this agreement class\n @param account Account the state belongs to\n @param time Time used for the calculation\n @return dynamicBalance Dynamic balance portion of real-time balance of this agreement\n @return deposit Account deposit amount of this agreement\n @return owedDeposit Account owed deposit amount of this agreement"
									},
									"functionSelector": "9b2e48bc",
									"id": 1465,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "784:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "828:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "811:22:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 1451,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1450,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "811:16:12"
													},
													"referencedDeclaration": 3123,
													"src": "811:16:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1454,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "851:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "843:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "843:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "876:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "868:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "868:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "801:85:12"
									},
									"returnParameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1459,
												"mutability": "mutable",
												"name": "dynamicBalance",
												"nameLocation": "954:14:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "947:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1458,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "947:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "990:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "982:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "1019:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1011:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "933:107:12"
									},
									"scope": 1466,
									"src": "775:266:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1467,
							"src": "185:859:12",
							"usedErrors": []
						}
					],
					"src": "32:1013:12"
				},
				"id": 12
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
					"exportedSymbols": {
						"ISuperApp": [
							1580
						],
						"ISuperToken": [
							2054
						]
					},
					"id": 1581,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1468,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:13"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 1470,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1581,
							"sourceUnit": 2055,
							"src": "59:48:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1469,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:11:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperApp",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1471,
								"nodeType": "StructuredDocumentation",
								"src": "109:133:13",
								"text": " @title SuperApp interface\n @author Superfluid\n @dev Be aware of the app being jailed, when the word permitted is used."
							},
							"fullyImplemented": false,
							"id": 1580,
							"linearizedBaseContracts": [
								1580
							],
							"name": "ISuperApp",
							"nameLocation": "253:9:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1472,
										"nodeType": "StructuredDocumentation",
										"src": "270:630:13",
										"text": " @dev Callback before a new agreement is created.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param ctx The context data.\n @return cbdata A free format in memory data the app can use to pass\n          arbitary information to the after-hook callback.\n @custom:note \n - It will be invoked with `staticcall`, no state changes are permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "30d9c915",
									"id": 1488,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeAgreementCreated",
									"nameLocation": "914:22:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "958:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "946:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1474,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1473,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "946:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "946:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "986:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "978:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "978:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "1018:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "1010:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1478,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1481,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "1054:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "1039:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1480,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1039:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "1092:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "1077:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1482,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1077:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "936:165:13"
									},
									"returnParameters": {
										"id": 1487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1486,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "1162:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "1149:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1485,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1149:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1148:21:13"
									},
									"scope": 1580,
									"src": "905:265:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1489,
										"nodeType": "StructuredDocumentation",
										"src": "1176:579:13",
										"text": " @dev Callback after a new agreement is created.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param cbdata The data returned from the before-hook callback.\n @param ctx The context data.\n @return newCtx The current context of the transaction.\n @custom:note \n - State changes is permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "d86ed3e5",
									"id": 1507,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "afterAgreementCreated",
									"nameLocation": "1769:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1812:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1800:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1491,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1490,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "1800:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "1800:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1494,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "1840:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1832:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1832:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1496,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "1872:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1864:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1495,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1864:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "1908:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1893:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1497,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1893:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "1946:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1931:21:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1499,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1931:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "1977:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "1962:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1501,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1962:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1790:196:13"
									},
									"returnParameters": {
										"id": 1506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "2034:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "2021:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1504,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2021:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2020:21:13"
									},
									"scope": 1580,
									"src": "1760:282:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1508,
										"nodeType": "StructuredDocumentation",
										"src": "2048:630:13",
										"text": " @dev Callback before a new agreement is updated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param ctx The context data.\n @return cbdata A free format in memory data the app can use to pass\n          arbitary information to the after-hook callback.\n @custom:note \n - It will be invoked with `staticcall`, no state changes are permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "884d1f40",
									"id": 1524,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeAgreementUpdated",
									"nameLocation": "2692:22:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1511,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2736:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2724:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1510,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1509,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "2724:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "2724:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1513,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "2764:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2756:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1512,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2756:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1515,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "2796:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2788:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1514,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "2832:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2817:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1516,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2817:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "2870:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2855:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1518,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2855:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2714:165:13"
									},
									"returnParameters": {
										"id": 1523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "2940:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "2927:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1521,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2927:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2926:21:13"
									},
									"scope": 1580,
									"src": "2683:265:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1525,
										"nodeType": "StructuredDocumentation",
										"src": "2955:566:13",
										"text": " @dev Callback after a new agreement is updated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param cbdata The data returned from the before-hook callback.\n @param ctx The context data.\n @return newCtx The current context of the transaction.\n @custom:note \n - State changes is permitted.\n - Only revert with a \"reason\" is permitted."
									},
									"functionSelector": "230dbd29",
									"id": 1543,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "afterAgreementUpdated",
									"nameLocation": "3535:21:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "3578:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3566:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1527,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1526,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "3566:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "3566:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "3606:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3598:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3598:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "3638:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3630:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1531,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "3674:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3659:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1533,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3659:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "3712:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3697:21:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1535,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3697:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "3743:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3728:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1537,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3728:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3556:196:13"
									},
									"returnParameters": {
										"id": 1542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1541,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "3800:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "3787:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1540,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3787:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3786:21:13"
									},
									"scope": 1580,
									"src": "3526:282:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1544,
										"nodeType": "StructuredDocumentation",
										"src": "3814:602:13",
										"text": " @dev Callback before a new agreement is terminated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param ctx The context data.\n @return cbdata A free format in memory data the app can use to pass arbitary information to\n         the after-hook callback.\n @custom:note \n - It will be invoked with `staticcall`, no state changes are permitted.\n - Revert is not permitted."
									},
									"functionSelector": "5f9e7d77",
									"id": 1560,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "beforeAgreementTerminated",
									"nameLocation": "4430:25:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1547,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "4477:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4465:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1546,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1545,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "4465:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "4465:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1549,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "4505:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4497:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1548,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4497:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "4537:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4529:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1550,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4529:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "4573:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4558:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1552,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4558:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "4611:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4596:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1554,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4596:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4455:165:13"
									},
									"returnParameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "4681:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "4668:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1557,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4668:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4667:21:13"
									},
									"scope": 1580,
									"src": "4421:268:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1561,
										"nodeType": "StructuredDocumentation",
										"src": "4695:552:13",
										"text": " @dev Callback after a new agreement is terminated.\n @param superToken The super token used for the agreement.\n @param agreementClass The agreement class address.\n @param agreementId The agreementId\n @param agreementData The agreement data (non-compressed)\n @param cbdata The data returned from the before-hook callback.\n @param ctx The context data.\n @return newCtx The current context of the transaction.\n @custom:note \n - State changes is permitted.\n - Revert is not permitted."
									},
									"functionSelector": "53c11f99",
									"id": 1579,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "afterAgreementTerminated",
									"nameLocation": "5261:24:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1564,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "5307:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5295:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 1563,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1562,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "5295:11:13"
													},
													"referencedDeclaration": 2054,
													"src": "5295:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1566,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "5335:14:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5327:22:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5327:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1568,
												"mutability": "mutable",
												"name": "agreementId",
												"nameLocation": "5367:11:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5359:19:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1567,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5359:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1570,
												"mutability": "mutable",
												"name": "agreementData",
												"nameLocation": "5403:13:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5388:28:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1569,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5388:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1572,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "5441:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5426:21:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1571,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5426:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1574,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "5472:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5457:18:13",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1573,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5457:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5285:196:13"
									},
									"returnParameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "5529:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "5516:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1576,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5516:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5515:21:13"
									},
									"scope": 1580,
									"src": "5252:285:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1581,
							"src": "243:5296:13",
							"usedErrors": []
						}
					],
					"src": "32:5508:13"
				},
				"id": 13
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
					"exportedSymbols": {
						"IConstantInflowNFT": [
							1303
						],
						"IConstantOutflowNFT": [
							1357
						],
						"IERC20": [
							77
						],
						"IERC777": [
							383
						],
						"IPoolAdminNFT": [
							1434
						],
						"IPoolMemberNFT": [
							1437
						],
						"ISuperToken": [
							2054
						],
						"ISuperfluid": [
							2708
						],
						"ISuperfluidToken": [
							3123
						],
						"TokenInfo": [
							3157
						]
					},
					"id": 2055,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1582,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:14"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"file": "./ISuperfluid.sol",
							"id": 1584,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 2709,
							"src": "59:48:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1583,
										"name": "ISuperfluid",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:11:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 1586,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 3124,
							"src": "108:58:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1585,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "117:16:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
							"file": "../tokens/TokenInfo.sol",
							"id": 1588,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 3158,
							"src": "167:52:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1587,
										"name": "TokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "176:9:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"file": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"id": 1590,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 384,
							"src": "220:75:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1589,
										"name": "IERC777",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "229:7:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1592,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 78,
							"src": "296:72:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1591,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "305:6:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
							"file": "./IConstantOutflowNFT.sol",
							"id": 1594,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 1358,
							"src": "369:64:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1593,
										"name": "IConstantOutflowNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "378:19:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
							"file": "./IConstantInflowNFT.sol",
							"id": 1596,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 1304,
							"src": "434:62:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1595,
										"name": "IConstantInflowNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "443:18:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol",
							"file": "./IPoolAdminNFT.sol",
							"id": 1598,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 1435,
							"src": "497:52:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1597,
										"name": "IPoolAdminNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "506:13:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol",
							"file": "./IPoolMemberNFT.sol",
							"id": 1600,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2055,
							"sourceUnit": 1438,
							"src": "550:54:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1599,
										"name": "IPoolMemberNFT",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "559:14:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1602,
										"name": "ISuperfluidToken",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3123,
										"src": "729:16:14"
									},
									"id": 1603,
									"nodeType": "InheritanceSpecifier",
									"src": "729:16:14"
								},
								{
									"baseName": {
										"id": 1604,
										"name": "TokenInfo",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3157,
										"src": "747:9:14"
									},
									"id": 1605,
									"nodeType": "InheritanceSpecifier",
									"src": "747:9:14"
								},
								{
									"baseName": {
										"id": 1606,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 77,
										"src": "758:6:14"
									},
									"id": 1607,
									"nodeType": "InheritanceSpecifier",
									"src": "758:6:14"
								},
								{
									"baseName": {
										"id": 1608,
										"name": "IERC777",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 383,
										"src": "766:7:14"
									},
									"id": 1609,
									"nodeType": "InheritanceSpecifier",
									"src": "766:7:14"
								}
							],
							"canonicalName": "ISuperToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1601,
								"nodeType": "StructuredDocumentation",
								"src": "606:97:14",
								"text": " @title Super token (Superfluid Token + ERC20 + ERC777) interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 2054,
							"linearizedBaseContracts": [
								2054,
								383,
								77,
								3157,
								3123
							],
							"name": "ISuperToken",
							"nameLocation": "714:11:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1611,
									"name": "SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER",
									"nameLocation": "961:45:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1610,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:14"
									},
									"src": "955:54:14"
								},
								{
									"id": 1613,
									"name": "SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT",
									"nameLocation": "1040:39:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1079:2:14"
									},
									"src": "1034:48:14"
								},
								{
									"id": 1615,
									"name": "SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED",
									"nameLocation": "1119:51:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1170:2:14"
									},
									"src": "1113:60:14"
								},
								{
									"id": 1617,
									"name": "SUPER_TOKEN_NO_UNDERLYING_TOKEN",
									"nameLocation": "1198:31:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1616,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1229:2:14"
									},
									"src": "1192:40:14"
								},
								{
									"id": 1619,
									"name": "SUPER_TOKEN_ONLY_SELF",
									"nameLocation": "1277:21:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1298:2:14"
									},
									"src": "1271:30:14"
								},
								{
									"id": 1621,
									"name": "SUPER_TOKEN_ONLY_HOST",
									"nameLocation": "1356:21:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1620,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1377:2:14"
									},
									"src": "1350:30:14"
								},
								{
									"id": 1623,
									"name": "SUPER_TOKEN_ONLY_GOV_OWNER",
									"nameLocation": "1435:26:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1622,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1461:2:14"
									},
									"src": "1429:35:14"
								},
								{
									"id": 1625,
									"name": "SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS",
									"nameLocation": "1514:37:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1624,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1551:2:14"
									},
									"src": "1508:46:14"
								},
								{
									"id": 1627,
									"name": "SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS",
									"nameLocation": "1593:35:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1626,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:2:14"
									},
									"src": "1587:44:14"
								},
								{
									"id": 1629,
									"name": "SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS",
									"nameLocation": "1672:34:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1628,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1706:2:14"
									},
									"src": "1666:43:14"
								},
								{
									"id": 1631,
									"name": "SUPER_TOKEN_MINT_TO_ZERO_ADDRESS",
									"nameLocation": "1751:32:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1783:2:14"
									},
									"src": "1745:41:14"
								},
								{
									"id": 1633,
									"name": "SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS",
									"nameLocation": "1830:38:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1632,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1868:2:14"
									},
									"src": "1824:47:14"
								},
								{
									"id": 1635,
									"name": "SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS",
									"nameLocation": "1909:36:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1634,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:2:14"
									},
									"src": "1903:45:14"
								},
								{
									"id": 1637,
									"name": "SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED",
									"nameLocation": "1988:37:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2025:2:14"
									},
									"src": "1982:46:14"
								},
								{
									"documentation": {
										"id": 1638,
										"nodeType": "StructuredDocumentation",
										"src": "2062:47:14",
										"text": " @dev Initialize the contract"
									},
									"functionSelector": "42fe0980",
									"id": 1650,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "2123:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1641,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2150:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "2143:22:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1640,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1639,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2143:6:14"
													},
													"referencedDeclaration": 77,
													"src": "2143:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2181:18:14",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "2175:24:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1642,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2175:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1645,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "2225:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "2209:17:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1644,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2209:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1647,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2252:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "2236:17:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1646,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2236:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2133:126:14"
									},
									"returnParameters": {
										"id": 1649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2268:0:14"
									},
									"scope": 2054,
									"src": "2114:155:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "ef43d2c6",
									"id": 1656,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "CONSTANT_OUTFLOW_NFT",
									"nameLocation": "2523:20:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1651,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2543:2:14"
									},
									"returnParameters": {
										"id": 1655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1654,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1656,
												"src": "2569:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantOutflowNFT_$1357",
													"typeString": "contract IConstantOutflowNFT"
												},
												"typeName": {
													"id": 1653,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1652,
														"name": "IConstantOutflowNFT",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1357,
														"src": "2569:19:14"
													},
													"referencedDeclaration": 1357,
													"src": "2569:19:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantOutflowNFT_$1357",
														"typeString": "contract IConstantOutflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2568:21:14"
									},
									"scope": 2054,
									"src": "2514:76:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4c5c0c85",
									"id": 1662,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "CONSTANT_INFLOW_NFT",
									"nameLocation": "2657:19:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2676:2:14"
									},
									"returnParameters": {
										"id": 1661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "2702:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantInflowNFT_$1303",
													"typeString": "contract IConstantInflowNFT"
												},
												"typeName": {
													"id": 1659,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1658,
														"name": "IConstantInflowNFT",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "2702:18:14"
													},
													"referencedDeclaration": 1303,
													"src": "2702:18:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantInflowNFT_$1303",
														"typeString": "contract IConstantInflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2701:20:14"
									},
									"scope": 2054,
									"src": "2648:74:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										269,
										3144
									],
									"documentation": {
										"id": 1663,
										"nodeType": "StructuredDocumentation",
										"src": "2913:54:14",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1671,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2981:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1667,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1665,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "3011:7:14"
											},
											{
												"id": 1666,
												"name": "TokenInfo",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3157,
												"src": "3020:9:14"
											}
										],
										"src": "3002:28:14"
									},
									"parameters": {
										"id": 1664,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2985:2:14"
									},
									"returnParameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1671,
												"src": "3040:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1668,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3040:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3039:15:14"
									},
									"scope": 2054,
									"src": "2972:83:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										275,
										3150
									],
									"documentation": {
										"id": 1672,
										"nodeType": "StructuredDocumentation",
										"src": "3061:102:14",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1680,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3177:6:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1676,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1674,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "3209:7:14"
											},
											{
												"id": 1675,
												"name": "TokenInfo",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3157,
												"src": "3218:9:14"
											}
										],
										"src": "3200:28:14"
									},
									"parameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3183:2:14"
									},
									"returnParameters": {
										"id": 1679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1678,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1680,
												"src": "3238:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1677,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3238:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3237:15:14"
									},
									"scope": 2054,
									"src": "3168:85:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										3156
									],
									"documentation": {
										"id": 1681,
										"nodeType": "StructuredDocumentation",
										"src": "3259:669:14",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n @custom:note SuperToken always uses 18 decimals.\n This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 1688,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3942:8:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1684,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1683,
												"name": "TokenInfo",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3157,
												"src": "3976:9:14"
											}
										],
										"src": "3967:19:14"
									},
									"parameters": {
										"id": 1682,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3950:2:14"
									},
									"returnParameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "3996:5:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1685,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3996:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3995:7:14"
									},
									"scope": 2054,
									"src": "3933:70:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										26,
										287
									],
									"documentation": {
										"id": 1689,
										"nodeType": "StructuredDocumentation",
										"src": "4190:49:14",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 1697,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "4253:11:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1693,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1691,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "4290:7:14"
											},
											{
												"id": 1692,
												"name": "IERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "4299:6:14"
											}
										],
										"src": "4281:25:14"
									},
									"parameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4264:2:14"
									},
									"returnParameters": {
										"id": 1696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1695,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "4316:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4316:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4315:9:14"
									},
									"scope": 2054,
									"src": "4244:81:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										34,
										295
									],
									"documentation": {
										"id": 1698,
										"nodeType": "StructuredDocumentation",
										"src": "4331:83:14",
										"text": " @dev Returns the amount of tokens owned by an account (`owner`)."
									},
									"functionSelector": "70a08231",
									"id": 1708,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4428:9:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1704,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1702,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "4478:7:14"
											},
											{
												"id": 1703,
												"name": "IERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "4487:6:14"
											}
										],
										"src": "4469:25:14"
									},
									"parameters": {
										"id": 1701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1700,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4446:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "4438:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4438:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4437:17:14"
									},
									"returnParameters": {
										"id": 1707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1706,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4511:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "4503:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4503:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4502:17:14"
									},
									"scope": 2054,
									"src": "4419:101:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										44
									],
									"documentation": {
										"id": 1709,
										"nodeType": "StructuredDocumentation",
										"src": "4698:233:14",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1720,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4945:8:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1716,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1715,
												"name": "IERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "5007:6:14"
											}
										],
										"src": "4998:16:14"
									},
									"parameters": {
										"id": 1714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1711,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "4962:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1720,
												"src": "4954:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1710,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4954:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1713,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4981:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1720,
												"src": "4973:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1712,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4973:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4953:35:14"
									},
									"returnParameters": {
										"id": 1719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1720,
												"src": "5024:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1717,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5024:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5023:6:14"
									},
									"scope": 2054,
									"src": "4936:94:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										54
									],
									"documentation": {
										"id": 1721,
										"nodeType": "StructuredDocumentation",
										"src": "5036:288:14",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n         allowed to spend on behalf of `owner` through {transferFrom}. This is\n         zero by default.\n @notice This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1732,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "5338:9:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1728,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1727,
												"name": "IERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "5398:6:14"
											}
										],
										"src": "5389:16:14"
									},
									"parameters": {
										"id": 1726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1723,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5356:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "5348:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1722,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5348:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1725,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5371:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "5363:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1724,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5363:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5347:32:14"
									},
									"returnParameters": {
										"id": 1731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1730,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1732,
												"src": "5420:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1729,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5420:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5419:9:14"
									},
									"scope": 2054,
									"src": "5329:100:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										64
									],
									"documentation": {
										"id": 1733,
										"nodeType": "StructuredDocumentation",
										"src": "5435:668:14",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:note Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n @custom:emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1744,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "6117:7:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1740,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1739,
												"name": "IERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "6176:6:14"
											}
										],
										"src": "6167:16:14"
									},
									"parameters": {
										"id": 1738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1735,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6133:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1744,
												"src": "6125:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1734,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6125:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1737,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6150:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1744,
												"src": "6142:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1736,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6142:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6124:33:14"
									},
									"returnParameters": {
										"id": 1743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1742,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1744,
												"src": "6193:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1741,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6193:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6192:6:14"
									},
									"scope": 2054,
									"src": "6108:91:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										76
									],
									"documentation": {
										"id": 1745,
										"nodeType": "StructuredDocumentation",
										"src": "6205:336:14",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n         allowance mechanism. `amount` is then deducted from the caller's\n         allowance.\n @return Returns Success a boolean value indicating whether the operation succeeded.\n @custom:emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1758,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6555:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1754,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1753,
												"name": "IERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 77,
												"src": "6637:6:14"
											}
										],
										"src": "6628:16:14"
									},
									"parameters": {
										"id": 1752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1747,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "6576:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "6568:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6568:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1749,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "6592:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "6584:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6584:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1751,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6611:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "6603:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6603:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6567:51:14"
									},
									"returnParameters": {
										"id": 1757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1758,
												"src": "6654:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1755,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6654:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6653:6:14"
									},
									"scope": 2054,
									"src": "6546:114:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1759,
										"nodeType": "StructuredDocumentation",
										"src": "6666:393:14",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n @custom:emits an {Approval} event indicating the updated allowance.\n @custom:requirements \n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 1768,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "7073:17:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1761,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7099:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "7091:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7091:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "7116:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "7108:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7108:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7090:37:14"
									},
									"returnParameters": {
										"id": 1767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1766,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1768,
												"src": "7146:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1765,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7146:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7145:6:14"
									},
									"scope": 2054,
									"src": "7064:88:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1769,
										"nodeType": "StructuredDocumentation",
										"src": "7158:485:14",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n @custom:emits an {Approval} event indicating the updated allowance.\n @custom:requirements \n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1778,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "7658:17:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1771,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7684:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1778,
												"src": "7676:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1770,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7676:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1773,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "7701:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 1778,
												"src": "7693:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1772,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7693:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7675:42:14"
									},
									"returnParameters": {
										"id": 1777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1776,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1778,
												"src": "7736:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1775,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7736:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:6:14"
									},
									"scope": 2054,
									"src": "7649:93:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										281
									],
									"documentation": {
										"id": 1779,
										"nodeType": "StructuredDocumentation",
										"src": "7921:315:14",
										"text": " @dev Returns the smallest part of the token that is not divisible. This\n         means all token operations (creation, movement and destruction) must have\n         amounts that are a multiple of this number.\n @custom:note For super token contracts, this value is always 1"
									},
									"functionSelector": "556f0dc7",
									"id": 1786,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "granularity",
									"nameLocation": "8250:11:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1782,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1781,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "8287:7:14"
											}
										],
										"src": "8278:17:14"
									},
									"parameters": {
										"id": 1780,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8261:2:14"
									},
									"returnParameters": {
										"id": 1785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1784,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "8305:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8305:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8304:9:14"
									},
									"scope": 2054,
									"src": "8241:73:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										305
									],
									"documentation": {
										"id": 1787,
										"nodeType": "StructuredDocumentation",
										"src": "8320:610:14",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n @dev If send or receive hooks are registered for the caller and `recipient`,\n      the corresponding functions will be called with `data` and empty\n      `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n @custom:emits a {Sent} event.\n @custom:requirements \n - the caller must have at least `amount` tokens.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "9bd9bbc6",
									"id": 1798,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "send",
									"nameLocation": "8944:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1796,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1795,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "9023:7:14"
											}
										],
										"src": "9014:17:14"
									},
									"parameters": {
										"id": 1794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1789,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "8957:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "8949:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1788,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8949:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1791,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8976:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "8968:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8968:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1793,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8999:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1798,
												"src": "8984:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1792,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8984:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8948:56:14"
									},
									"returnParameters": {
										"id": 1797,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9031:0:14"
									},
									"scope": 2054,
									"src": "8935:97:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										313
									],
									"documentation": {
										"id": 1799,
										"nodeType": "StructuredDocumentation",
										"src": "9038:473:14",
										"text": " @dev Destroys `amount` tokens from the caller's account, reducing the\n total supply and transfers the underlying token to the caller's account.\n If a send hook is registered for the caller, the corresponding function\n will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n @custom:emits a {Burned} event.\n @custom:requirements \n - the caller must have at least `amount` tokens."
									},
									"functionSelector": "fe9d9303",
									"id": 1808,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "9525:4:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1806,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1805,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "9585:7:14"
											}
										],
										"src": "9576:17:14"
									},
									"parameters": {
										"id": 1804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1801,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9538:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "9530:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9530:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1803,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9561:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "9546:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1802,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9546:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9529:37:14"
									},
									"returnParameters": {
										"id": 1807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9593:0:14"
									},
									"scope": 2054,
									"src": "9516:78:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										323
									],
									"documentation": {
										"id": 1809,
										"nodeType": "StructuredDocumentation",
										"src": "9600:249:14",
										"text": " @dev Returns true if an account is an operator of `tokenHolder`.\n Operators can send and burn tokens on behalf of their owners. All\n accounts are their own operator.\n See {operatorSend} and {operatorBurn}."
									},
									"functionSelector": "d95b6371",
									"id": 1820,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOperatorFor",
									"nameLocation": "9863:13:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1816,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1815,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "9934:7:14"
											}
										],
										"src": "9925:17:14"
									},
									"parameters": {
										"id": 1814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "9885:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "9877:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9877:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1813,
												"mutability": "mutable",
												"name": "tokenHolder",
												"nameLocation": "9903:11:14",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "9895:19:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1812,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9895:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9876:39:14"
									},
									"returnParameters": {
										"id": 1819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1818,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1820,
												"src": "9957:4:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1817,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9957:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9956:6:14"
									},
									"scope": 2054,
									"src": "9854:109:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										329
									],
									"documentation": {
										"id": 1821,
										"nodeType": "StructuredDocumentation",
										"src": "9969:243:14",
										"text": " @dev Make an account an operator of the caller.\n See {isOperatorFor}.\n @custom:emits an {AuthorizedOperator} event.\n @custom:requirements \n - `operator` cannot be calling address."
									},
									"functionSelector": "959b8c3f",
									"id": 1828,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "authorizeOperator",
									"nameLocation": "10226:17:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1826,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1825,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "10280:7:14"
											}
										],
										"src": "10271:17:14"
									},
									"parameters": {
										"id": 1824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1823,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10252:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1828,
												"src": "10244:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1822,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10244:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10243:18:14"
									},
									"returnParameters": {
										"id": 1827,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10288:0:14"
									},
									"scope": 2054,
									"src": "10217:72:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										335
									],
									"documentation": {
										"id": 1829,
										"nodeType": "StructuredDocumentation",
										"src": "10295:271:14",
										"text": " @dev Revoke an account's operator status for the caller.\n See {isOperatorFor} and {defaultOperators}.\n @custom:emits a {RevokedOperator} event.\n @custom:requirements \n - `operator` cannot be calling address."
									},
									"functionSelector": "fad8b32a",
									"id": 1836,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeOperator",
									"nameLocation": "10580:14:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1834,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1833,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "10631:7:14"
											}
										],
										"src": "10622:17:14"
									},
									"parameters": {
										"id": 1832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1831,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10603:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1836,
												"src": "10595:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10595:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10594:18:14"
									},
									"returnParameters": {
										"id": 1835,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10639:0:14"
									},
									"scope": 2054,
									"src": "10571:69:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										342
									],
									"documentation": {
										"id": 1837,
										"nodeType": "StructuredDocumentation",
										"src": "10646:338:14",
										"text": " @dev Returns the list of default operators. These accounts are operators\n for all token holders, even if {authorizeOperator} was never called on\n them.\n This list is immutable, but individual holders may revoke these via\n {revokeOperator}, in which case {isOperatorFor} will return false."
									},
									"functionSelector": "06e48538",
									"id": 1845,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultOperators",
									"nameLocation": "10998:16:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1840,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1839,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "11035:7:14"
											}
										],
										"src": "11026:17:14"
									},
									"parameters": {
										"id": 1838,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11014:2:14"
									},
									"returnParameters": {
										"id": 1844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1843,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1845,
												"src": "11058:16:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1841,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11058:7:14",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1842,
													"nodeType": "ArrayTypeName",
													"src": "11058:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11057:18:14"
									},
									"scope": 2054,
									"src": "10989:87:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										356
									],
									"documentation": {
										"id": 1846,
										"nodeType": "StructuredDocumentation",
										"src": "11082:724:14",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n be an operator of `sender`.\n If send or receive hooks are registered for `sender` and `recipient`,\n the corresponding functions will be called with `data` and\n `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n @custom:emits a {Sent} event.\n @custom:requirements \n - `sender` cannot be the zero address.\n - `sender` must have at least `amount` tokens.\n - the caller must be an operator for `sender`.\n - `recipient` cannot be the zero address.\n - if `recipient` is a contract, it must implement the {IERC777Recipient}\n interface."
									},
									"functionSelector": "62ad1b83",
									"id": 1861,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorSend",
									"nameLocation": "11820:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1859,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1858,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "11998:7:14"
											}
										],
										"src": "11989:17:14"
									},
									"parameters": {
										"id": 1857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1848,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "11850:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11842:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1847,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11842:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "11874:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11866:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1849,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11866:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11901:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11893:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11893:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "11932:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11917:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1853,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11917:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1856,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "11961:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1861,
												"src": "11946:27:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1855,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11946:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11832:147:14"
									},
									"returnParameters": {
										"id": 1860,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12006:0:14"
									},
									"scope": 2054,
									"src": "11811:196:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										368
									],
									"documentation": {
										"id": 1862,
										"nodeType": "StructuredDocumentation",
										"src": "12013:542:14",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the total supply.\n The caller must be an operator of `account`.\n If a send hook is registered for `account`, the corresponding function\n will be called with `data` and `operatorData`. See {IERC777Sender}.\n @custom:emits a {Burned} event.\n @custom:requirements \n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens.\n - the caller must be an operator for `account`."
									},
									"functionSelector": "fc673c4f",
									"id": 1875,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operatorBurn",
									"nameLocation": "12569:12:14",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1873,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1872,
												"name": "IERC777",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 383,
												"src": "12721:7:14"
											}
										],
										"src": "12712:17:14"
									},
									"parameters": {
										"id": 1871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1864,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "12599:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "12591:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1863,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12591:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1866,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12624:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "12616:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1865,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12616:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1868,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "12655:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "12640:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1867,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12640:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "operatorData",
												"nameLocation": "12684:12:14",
												"nodeType": "VariableDeclaration",
												"scope": 1875,
												"src": "12669:27:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1869,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "12669:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12581:121:14"
									},
									"returnParameters": {
										"id": 1874,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12729:0:14"
									},
									"scope": 2054,
									"src": "12560:170:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1876,
										"nodeType": "StructuredDocumentation",
										"src": "12938:107:14",
										"text": " @dev Mint new tokens for the account\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "c68d4283",
									"id": 1885,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfMint",
									"nameLocation": "13059:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13085:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "13077:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13077:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1880,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13110:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "13102:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13102:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1882,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "13139:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1885,
												"src": "13126:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1881,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13126:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13067:86:14"
									},
									"returnParameters": {
										"id": 1884,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13162:0:14"
									},
									"scope": 2054,
									"src": "13050:113:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1886,
										"nodeType": "StructuredDocumentation",
										"src": "13168:107:14",
										"text": " @dev Burn existing tokens for the account\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "9d876741",
									"id": 1895,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfBurn",
									"nameLocation": "13288:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1888,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13313:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "13305:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13305:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1890,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13337:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "13329:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1889,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13329:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "13365:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 1895,
												"src": "13352:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1891,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13352:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13296:82:14"
									},
									"returnParameters": {
										"id": 1894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13387:0:14"
									},
									"scope": 2054,
									"src": "13279:109:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1896,
										"nodeType": "StructuredDocumentation",
										"src": "13393:245:14",
										"text": " @dev Transfer `amount` tokens from the `sender` to `recipient`.\n If `spender` isn't the same as `sender`, checks if `spender` has allowance to\n spend tokens of `sender`.\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "41b706be",
									"id": 1907,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfTransferFrom",
									"nameLocation": "13651:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1898,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "13685:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13677:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1897,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13677:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1900,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "13709:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13701:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1899,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13701:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1902,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "13734:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13726:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1901,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13726:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1904,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13761:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1907,
												"src": "13753:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13753:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13667:105:14"
									},
									"returnParameters": {
										"id": 1906,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13781:0:14"
									},
									"scope": 2054,
									"src": "13642:140:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1908,
										"nodeType": "StructuredDocumentation",
										"src": "13787:145:14",
										"text": " @dev Give `spender`, `amount` allowance to spend the tokens of\n `account`.\n @custom:modifiers \n  - onlySelf"
									},
									"functionSelector": "66a12fb6",
									"id": 1917,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "selfApproveFor",
									"nameLocation": "13945:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1910,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "13977:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "13969:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1909,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13969:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1912,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "14002:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "13994:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13994:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1914,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "14027:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1917,
												"src": "14019:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1913,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14019:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13959:79:14"
									},
									"returnParameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14047:0:14"
									},
									"scope": 2054,
									"src": "13936:112:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1918,
										"nodeType": "StructuredDocumentation",
										"src": "14249:87:14",
										"text": " @dev Transfer all available balance from `msg.sender` to `recipient`"
									},
									"functionSelector": "a3a7e7f3",
									"id": 1923,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAll",
									"nameLocation": "14350:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1920,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "14370:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1923,
												"src": "14362:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1919,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14362:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14361:19:14"
									},
									"returnParameters": {
										"id": 1922,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14389:0:14"
									},
									"scope": 2054,
									"src": "14341:49:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1924,
										"nodeType": "StructuredDocumentation",
										"src": "14579:110:14",
										"text": " @dev Return the underlying token contract\n @return tokenAddr Underlying token address"
									},
									"functionSelector": "ee719bc8",
									"id": 1929,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUnderlyingToken",
									"nameLocation": "14703:18:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14721:2:14"
									},
									"returnParameters": {
										"id": 1928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1927,
												"mutability": "mutable",
												"name": "tokenAddr",
												"nameLocation": "14754:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1929,
												"src": "14746:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14746:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14745:19:14"
									},
									"scope": 2054,
									"src": "14694:71:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1930,
										"nodeType": "StructuredDocumentation",
										"src": "14771:262:14",
										"text": " @dev Upgrade ERC20 to SuperToken.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @custom:note It will use `transferFrom` to get tokens. Before calling this\n function you should `approve` this contract"
									},
									"functionSelector": "45977d03",
									"id": 1935,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "upgrade",
									"nameLocation": "15047:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1932,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "15063:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1935,
												"src": "15055:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1931,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15055:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15054:16:14"
									},
									"returnParameters": {
										"id": 1934,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15079:0:14"
									},
									"scope": 2054,
									"src": "15038:42:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1936,
										"nodeType": "StructuredDocumentation",
										"src": "15086:679:14",
										"text": " @dev Upgrade ERC20 to SuperToken and transfer immediately\n @param to The account to receive upgraded tokens\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @param data User data for the TokensRecipient callback\n @custom:note It will use `transferFrom` to get tokens. Before calling this\n function you should `approve` this contract\n \n @custom:warning\n - there is potential of reentrancy IF the \"to\" account is a registered ERC777 recipient.\n @custom:requirements \n - if `data` is NOT empty AND `to` is a contract, it MUST be a registered ERC777 recipient otherwise it reverts."
									},
									"functionSelector": "5b9d09cc",
									"id": 1945,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "upgradeTo",
									"nameLocation": "15779:9:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1938,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "15797:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 1945,
												"src": "15789:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1937,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15789:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1940,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "15809:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1945,
												"src": "15801:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15801:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1942,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "15832:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1945,
												"src": "15817:19:14",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1941,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15817:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15788:49:14"
									},
									"returnParameters": {
										"id": 1944,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15846:0:14"
									},
									"scope": 2054,
									"src": "15770:77:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1946,
										"nodeType": "StructuredDocumentation",
										"src": "15853:166:14",
										"text": " @dev Token upgrade event\n @param account Account where tokens are upgraded to\n @param amount Amount of tokens upgraded (in 18 decimals)"
									},
									"id": 1952,
									"name": "TokenUpgraded",
									"nameLocation": "16030:13:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1948,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "16069:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "16053:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1947,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16053:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1950,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16094:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "16086:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16086:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16043:63:14"
									},
									"src": "16024:83:14"
								},
								{
									"documentation": {
										"id": 1953,
										"nodeType": "StructuredDocumentation",
										"src": "16113:158:14",
										"text": " @dev Downgrade SuperToken to ERC20.\n @dev It will call transfer to send tokens\n @param amount Number of tokens to be downgraded"
									},
									"functionSelector": "11bcc81e",
									"id": 1958,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "downgrade",
									"nameLocation": "16285:9:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16303:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1958,
												"src": "16295:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16295:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16294:16:14"
									},
									"returnParameters": {
										"id": 1957,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16319:0:14"
									},
									"scope": 2054,
									"src": "16276:44:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1959,
										"nodeType": "StructuredDocumentation",
										"src": "16326:208:14",
										"text": " @dev Downgrade SuperToken to ERC20 and transfer immediately\n @param to The account to receive downgraded tokens\n @param amount Number of tokens to be downgraded (in 18 decimals)"
									},
									"functionSelector": "83ba2525",
									"id": 1966,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "downgradeTo",
									"nameLocation": "16548:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1961,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16568:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "16560:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16560:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1963,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16580:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "16572:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1962,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16572:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16559:28:14"
									},
									"returnParameters": {
										"id": 1965,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16596:0:14"
									},
									"scope": 2054,
									"src": "16539:58:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1967,
										"nodeType": "StructuredDocumentation",
										"src": "16603:152:14",
										"text": " @dev Token downgrade event\n @param account Account whose tokens are downgraded\n @param amount Amount of tokens downgraded"
									},
									"id": 1973,
									"name": "TokenDowngraded",
									"nameLocation": "16766:15:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1969,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "16807:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "16791:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1968,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16791:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1971,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16832:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1973,
												"src": "16824:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1970,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16824:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16781:63:14"
									},
									"src": "16760:85:14"
								},
								{
									"documentation": {
										"id": 1974,
										"nodeType": "StructuredDocumentation",
										"src": "17034:277:14",
										"text": " @dev Perform ERC20 approve by host contract.\n @param account The account owner to be approved.\n @param spender The spender of account owner's funds.\n @param amount Number of tokens to be approved.\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "62aa5287",
									"id": 1983,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationApprove",
									"nameLocation": "17325:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1976,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17359:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1983,
												"src": "17351:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17351:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1978,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "17384:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1983,
												"src": "17376:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1977,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17376:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1980,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "17409:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1983,
												"src": "17401:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1979,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17401:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17341:80:14"
									},
									"returnParameters": {
										"id": 1982,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17430:0:14"
									},
									"scope": 2054,
									"src": "17316:115:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "4b2763b3",
									"id": 1992,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationIncreaseAllowance",
									"nameLocation": "17446:26:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1985,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17490:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "17482:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1984,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17482:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1987,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "17515:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "17507:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17507:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1989,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "17540:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 1992,
												"src": "17532:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17532:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17472:84:14"
									},
									"returnParameters": {
										"id": 1991,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17565:0:14"
									},
									"scope": 2054,
									"src": "17437:129:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "c780fd82",
									"id": 2001,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationDecreaseAllowance",
									"nameLocation": "17581:26:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1994,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "17625:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2001,
												"src": "17617:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1993,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17617:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1996,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "17650:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2001,
												"src": "17642:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1995,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17642:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1998,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "17675:15:14",
												"nodeType": "VariableDeclaration",
												"scope": 2001,
												"src": "17667:23:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1997,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17667:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17607:89:14"
									},
									"returnParameters": {
										"id": 2000,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17705:0:14"
									},
									"scope": 2054,
									"src": "17572:134:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2002,
										"nodeType": "StructuredDocumentation",
										"src": "17712:343:14",
										"text": " @dev Perform ERC20 transferFrom by host contract.\n @param account The account to spend sender's funds.\n @param spender The account where the funds is sent from.\n @param recipient The recipient of the funds.\n @param amount Number of tokens to be transferred.\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "16d055d6",
									"id": 2013,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationTransferFrom",
									"nameLocation": "18069:21:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2004,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "18108:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2013,
												"src": "18100:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2003,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18100:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2006,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "18133:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2013,
												"src": "18125:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2005,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18125:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "18158:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2013,
												"src": "18150:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18150:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2010,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18185:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2013,
												"src": "18177:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18177:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18090:107:14"
									},
									"returnParameters": {
										"id": 2012,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18206:0:14"
									},
									"scope": 2054,
									"src": "18060:147:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2014,
										"nodeType": "StructuredDocumentation",
										"src": "18213:325:14",
										"text": " @dev Perform ERC777 send by host contract.\n @param spender The account where the funds is sent from.\n @param recipient The recipient of the funds.\n @param amount Number of tokens to be transferred.\n @param data Arbitrary user inputted data\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "ca0c1e7f",
									"id": 2025,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationSend",
									"nameLocation": "18552:13:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2016,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "18583:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "18575:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2015,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18575:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2018,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "18608:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "18600:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2017,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18600:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2020,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18635:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "18627:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2019,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18627:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2022,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "18664:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2025,
												"src": "18651:17:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2021,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18651:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18565:109:14"
									},
									"returnParameters": {
										"id": 2024,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18683:0:14"
									},
									"scope": 2054,
									"src": "18543:141:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2026,
										"nodeType": "StructuredDocumentation",
										"src": "18690:233:14",
										"text": " @dev Upgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be upgraded (in 18 decimals)\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "ca789464",
									"id": 2033,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationUpgrade",
									"nameLocation": "18937:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2028,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "18962:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2033,
												"src": "18954:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18954:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "18979:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2033,
												"src": "18971:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2029,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18971:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18953:33:14"
									},
									"returnParameters": {
										"id": 2032,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18995:0:14"
									},
									"scope": 2054,
									"src": "18928:68:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2034,
										"nodeType": "StructuredDocumentation",
										"src": "19002:237:14",
										"text": " @dev Downgrade ERC20 to SuperToken by host contract.\n @param account The account to be changed.\n @param amount Number of tokens to be downgraded (in 18 decimals)\n @custom:modifiers \n  - onlyHost"
									},
									"functionSelector": "245887fc",
									"id": 2041,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "operationDowngrade",
									"nameLocation": "19253:18:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2036,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "19280:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2041,
												"src": "19272:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2035,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19272:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2038,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "19297:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2041,
												"src": "19289:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2037,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19289:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19271:33:14"
									},
									"returnParameters": {
										"id": 2040,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19313:0:14"
									},
									"scope": 2054,
									"src": "19244:70:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2042,
										"nodeType": "StructuredDocumentation",
										"src": "19343:126:14",
										"text": " @dev Constant Outflow NFT proxy created event\n @param constantOutflowNFT constant outflow nft address"
									},
									"id": 2047,
									"name": "ConstantOutflowNFTCreated",
									"nameLocation": "19480:25:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2045,
												"indexed": true,
												"mutability": "mutable",
												"name": "constantOutflowNFT",
												"nameLocation": "19543:18:14",
												"nodeType": "VariableDeclaration",
												"scope": 2047,
												"src": "19515:46:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantOutflowNFT_$1357",
													"typeString": "contract IConstantOutflowNFT"
												},
												"typeName": {
													"id": 2044,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2043,
														"name": "IConstantOutflowNFT",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1357,
														"src": "19515:19:14"
													},
													"referencedDeclaration": 1357,
													"src": "19515:19:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantOutflowNFT_$1357",
														"typeString": "contract IConstantOutflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19505:62:14"
									},
									"src": "19474:94:14"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2048,
										"nodeType": "StructuredDocumentation",
										"src": "19574:123:14",
										"text": " @dev Constant Inflow NFT proxy created event\n @param constantInflowNFT constant inflow nft address"
									},
									"id": 2053,
									"name": "ConstantInflowNFTCreated",
									"nameLocation": "19708:24:14",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2052,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2051,
												"indexed": true,
												"mutability": "mutable",
												"name": "constantInflowNFT",
												"nameLocation": "19769:17:14",
												"nodeType": "VariableDeclaration",
												"scope": 2053,
												"src": "19742:44:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IConstantInflowNFT_$1303",
													"typeString": "contract IConstantInflowNFT"
												},
												"typeName": {
													"id": 2050,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2049,
														"name": "IConstantInflowNFT",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1303,
														"src": "19742:18:14"
													},
													"referencedDeclaration": 1303,
													"src": "19742:18:14",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantInflowNFT_$1303",
														"typeString": "contract IConstantInflowNFT"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19732:60:14"
									},
									"src": "19702:91:14"
								}
							],
							"scope": 2055,
							"src": "704:19618:14",
							"usedErrors": [
								1611,
								1613,
								1615,
								1617,
								1619,
								1621,
								1623,
								1625,
								1627,
								1629,
								1631,
								1633,
								1635,
								1637,
								2844,
								2846,
								2848,
								2850,
								2852,
								2854
							]
						}
					],
					"src": "32:20291:14"
				},
				"id": 14
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
					"exportedSymbols": {
						"ERC20WithTokenInfo": [
							3135
						],
						"IERC20": [
							77
						],
						"ISuperToken": [
							2054
						],
						"ISuperTokenFactory": [
							2184
						]
					},
					"id": 2185,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2056,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:15"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 2058,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2185,
							"sourceUnit": 2055,
							"src": "59:48:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2057,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:11:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
							"file": "../tokens/ERC20WithTokenInfo.sol",
							"id": 2061,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2185,
							"sourceUnit": 3136,
							"src": "109:86:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2059,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "122:6:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2060,
										"name": "ERC20WithTokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "134:18:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperTokenFactory",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2062,
								"nodeType": "StructuredDocumentation",
								"src": "197:69:15",
								"text": " @title Super token factory interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 2184,
							"linearizedBaseContracts": [
								2184
							],
							"name": "ISuperTokenFactory",
							"nameLocation": "277:18:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 2064,
									"name": "SUPER_TOKEN_FACTORY_ALREADY_EXISTS",
									"nameLocation": "483:34:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2063,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "517:2:15"
									},
									"src": "477:43:15"
								},
								{
									"id": 2066,
									"name": "SUPER_TOKEN_FACTORY_DOES_NOT_EXIST",
									"nameLocation": "561:34:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "595:2:15"
									},
									"src": "555:43:15"
								},
								{
									"id": 2068,
									"name": "SUPER_TOKEN_FACTORY_UNINITIALIZED",
									"nameLocation": "639:33:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2067,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "672:2:15"
									},
									"src": "633:42:15"
								},
								{
									"id": 2070,
									"name": "SUPER_TOKEN_FACTORY_ONLY_HOST",
									"nameLocation": "717:29:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2069,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "746:2:15"
									},
									"src": "711:38:15"
								},
								{
									"id": 2072,
									"name": "SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED",
									"nameLocation": "795:49:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "844:2:15"
									},
									"src": "789:58:15"
								},
								{
									"id": 2074,
									"name": "SUPER_TOKEN_FACTORY_ZERO_ADDRESS",
									"nameLocation": "873:32:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2073,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "905:2:15"
									},
									"src": "867:41:15"
								},
								{
									"documentation": {
										"id": 2075,
										"nodeType": "StructuredDocumentation",
										"src": "1133:60:15",
										"text": " @dev Get superfluid host contract address"
									},
									"functionSelector": "20bc4425",
									"id": 2080,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHost",
									"nameLocation": "1207:7:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2076,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1214:2:15"
									},
									"returnParameters": {
										"id": 2079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2078,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1247:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2080,
												"src": "1239:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1239:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1238:14:15"
									},
									"scope": 2184,
									"src": "1198:55:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2081,
										"nodeType": "StructuredDocumentation",
										"src": "1259:32:15",
										"text": "@dev Initialize the contract"
									},
									"functionSelector": "8129fc1c",
									"id": 2084,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "1305:10:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2082,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1315:2:15"
									},
									"returnParameters": {
										"id": 2083,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1326:0:15"
									},
									"scope": 2184,
									"src": "1296:31:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2085,
										"nodeType": "StructuredDocumentation",
										"src": "1333:63:15",
										"text": " @notice Get the canonical super token logic."
									},
									"functionSelector": "9470a5b2",
									"id": 2091,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenLogic",
									"nameLocation": "1410:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1428:2:15"
									},
									"returnParameters": {
										"id": 2090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2089,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1466:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2091,
												"src": "1454:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2088,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2087,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "1454:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "1454:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1453:24:15"
									},
									"scope": 2184,
									"src": "1401:77:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperTokenFactory.Upgradability",
									"id": 2095,
									"members": [
										{
											"id": 2092,
											"name": "NON_UPGRADABLE",
											"nameLocation": "1642:14:15",
											"nodeType": "EnumValue",
											"src": "1642:14:15"
										},
										{
											"id": 2093,
											"name": "SEMI_UPGRADABLE",
											"nameLocation": "1736:15:15",
											"nodeType": "EnumValue",
											"src": "1736:15:15"
										},
										{
											"id": 2094,
											"name": "FULL_UPGRADABLE",
											"nameLocation": "1815:15:15",
											"nodeType": "EnumValue",
											"src": "1815:15:15"
										}
									],
									"name": "Upgradability",
									"nameLocation": "1537:13:15",
									"nodeType": "EnumDefinition",
									"src": "1532:304:15"
								},
								{
									"documentation": {
										"id": 2096,
										"nodeType": "StructuredDocumentation",
										"src": "1842:398:15",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token\n @param underlyingToken Underlying ERC20 token\n @param underlyingDecimals Underlying token decimals\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @return superToken The deployed and initialized wrapper super token"
									},
									"functionSelector": "a6d0c534",
									"id": 2114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "2254:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2099,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "2289:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2282:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 2098,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2097,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2282:6:15"
													},
													"referencedDeclaration": 77,
													"src": "2282:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2101,
												"mutability": "mutable",
												"name": "underlyingDecimals",
												"nameLocation": "2320:18:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2314:24:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2100,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2314:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2104,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "2362:13:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2348:27:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$2095",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 2103,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2102,
														"name": "Upgradability",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2095,
														"src": "2348:13:15"
													},
													"referencedDeclaration": 2095,
													"src": "2348:13:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$2095",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2106,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "2401:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2385:20:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2105,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2385:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2108,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "2431:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2415:22:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2107,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2415:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2272:171:15"
									},
									"returnParameters": {
										"id": 2113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2112,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2490:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2114,
												"src": "2478:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2111,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2110,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "2478:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "2478:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2477:24:15"
									},
									"scope": 2184,
									"src": "2245:257:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2115,
										"nodeType": "StructuredDocumentation",
										"src": "2508:433:15",
										"text": " @notice Create new super token wrapper for the underlying ERC20 token with extra token info\n @param underlyingToken Underlying ERC20 token\n @param upgradability Upgradability mode\n @param name Super token name\n @param symbol Super token symbol\n @return superToken The deployed and initialized wrapper super token\n NOTE:\n - It assumes token provide the .decimals() function"
									},
									"functionSelector": "431f1481",
									"id": 2131,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createERC20Wrapper",
									"nameLocation": "2955:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2118,
												"mutability": "mutable",
												"name": "underlyingToken",
												"nameLocation": "3002:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "2983:34:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$3135",
													"typeString": "contract ERC20WithTokenInfo"
												},
												"typeName": {
													"id": 2117,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2116,
														"name": "ERC20WithTokenInfo",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3135,
														"src": "2983:18:15"
													},
													"referencedDeclaration": 3135,
													"src": "2983:18:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$3135",
														"typeString": "contract ERC20WithTokenInfo"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2121,
												"mutability": "mutable",
												"name": "upgradability",
												"nameLocation": "3041:13:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "3027:27:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Upgradability_$2095",
													"typeString": "enum ISuperTokenFactory.Upgradability"
												},
												"typeName": {
													"id": 2120,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2119,
														"name": "Upgradability",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2095,
														"src": "3027:13:15"
													},
													"referencedDeclaration": 2095,
													"src": "3027:13:15",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Upgradability_$2095",
														"typeString": "enum ISuperTokenFactory.Upgradability"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2123,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3080:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "3064:20:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2122,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3064:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2125,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "3110:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "3094:22:15",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2124,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3094:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2973:149:15"
									},
									"returnParameters": {
										"id": 2130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2129,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "3169:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2131,
												"src": "3157:22:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2128,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2127,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "3157:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "3157:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3156:24:15"
									},
									"scope": 2184,
									"src": "2946:235:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2132,
										"nodeType": "StructuredDocumentation",
										"src": "3187:318:15",
										"text": " @notice Creates a wrapper super token AND sets it in the canonical list OR reverts if it already exists\n @dev salt for create2 is the keccak256 hash of abi.encode(address(_underlyingToken))\n @param _underlyingToken Underlying ERC20 token\n @return ISuperToken the created supertoken"
									},
									"functionSelector": "151188dc",
									"id": 2141,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createCanonicalERC20Wrapper",
									"nameLocation": "3519:27:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2135,
												"mutability": "mutable",
												"name": "_underlyingToken",
												"nameLocation": "3566:16:15",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "3547:35:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$3135",
													"typeString": "contract ERC20WithTokenInfo"
												},
												"typeName": {
													"id": 2134,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2133,
														"name": "ERC20WithTokenInfo",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3135,
														"src": "3547:18:15"
													},
													"referencedDeclaration": 3135,
													"src": "3547:18:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20WithTokenInfo_$3135",
														"typeString": "contract ERC20WithTokenInfo"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3546:37:15"
									},
									"returnParameters": {
										"id": 2140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2139,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2141,
												"src": "3618:11:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2138,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2137,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "3618:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "3618:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3617:13:15"
									},
									"scope": 2184,
									"src": "3510:121:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2142,
										"nodeType": "StructuredDocumentation",
										"src": "3637:502:15",
										"text": " @notice Computes/Retrieves wrapper super token address given the underlying token address\n @dev We return from our canonical list if it already exists, otherwise we compute it\n @dev note that this function only computes addresses for SEMI_UPGRADABLE SuperTokens\n @param _underlyingToken Underlying ERC20 token address\n @return superTokenAddress Super token address\n @return isDeployed whether the super token is deployed AND set in the canonical mapping"
									},
									"functionSelector": "bab74c89",
									"id": 2151,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "computeCanonicalERC20WrapperAddress",
									"nameLocation": "4153:35:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "_underlyingToken",
												"nameLocation": "4197:16:15",
												"nodeType": "VariableDeclaration",
												"scope": 2151,
												"src": "4189:24:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4189:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:26:15"
									},
									"returnParameters": {
										"id": 2150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "superTokenAddress",
												"nameLocation": "4270:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 2151,
												"src": "4262:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2149,
												"mutability": "mutable",
												"name": "isDeployed",
												"nameLocation": "4294:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2151,
												"src": "4289:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2148,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4289:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:44:15"
									},
									"scope": 2184,
									"src": "4144:162:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2152,
										"nodeType": "StructuredDocumentation",
										"src": "4312:314:15",
										"text": " @notice Gets the canonical ERC20 wrapper super token address given the underlying token address\n @dev We return the address if it exists and the zero address otherwise\n @param _underlyingTokenAddress Underlying ERC20 token address\n @return superTokenAddress Super token address"
									},
									"functionSelector": "eff0a89d",
									"id": 2159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getCanonicalERC20Wrapper",
									"nameLocation": "4640:24:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2154,
												"mutability": "mutable",
												"name": "_underlyingTokenAddress",
												"nameLocation": "4673:23:15",
												"nodeType": "VariableDeclaration",
												"scope": 2159,
												"src": "4665:31:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4665:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4664:33:15"
									},
									"returnParameters": {
										"id": 2158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2157,
												"mutability": "mutable",
												"name": "superTokenAddress",
												"nameLocation": "4753:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 2159,
												"src": "4745:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4745:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4744:27:15"
									},
									"scope": 2184,
									"src": "4631:141:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2160,
										"nodeType": "StructuredDocumentation",
										"src": "4778:131:15",
										"text": " @dev Creates a new custom super token\n @param customSuperTokenProxy address of the custom supertoken proxy"
									},
									"functionSelector": "d412d344",
									"id": 2165,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initializeCustomSuperToken",
									"nameLocation": "4923:26:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2162,
												"mutability": "mutable",
												"name": "customSuperTokenProxy",
												"nameLocation": "4967:21:15",
												"nodeType": "VariableDeclaration",
												"scope": 2165,
												"src": "4959:29:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4959:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4949:45:15"
									},
									"returnParameters": {
										"id": 2164,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5011:0:15"
									},
									"scope": 2184,
									"src": "4914:98:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2166,
										"nodeType": "StructuredDocumentation",
										"src": "5018:103:15",
										"text": " @dev Super token logic created event\n @param tokenLogic Token logic address"
									},
									"id": 2171,
									"name": "SuperTokenLogicCreated",
									"nameLocation": "5132:22:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2169,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenLogic",
												"nameLocation": "5175:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2171,
												"src": "5155:30:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2168,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2167,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "5155:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "5155:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5154:32:15"
									},
									"src": "5126:61:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2172,
										"nodeType": "StructuredDocumentation",
										"src": "5193:106:15",
										"text": " @dev Super token created event\n @param token Newly created super token address"
									},
									"id": 2177,
									"name": "SuperTokenCreated",
									"nameLocation": "5310:17:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2175,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5348:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2177,
												"src": "5328:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2174,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2173,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "5328:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "5328:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5327:27:15"
									},
									"src": "5304:51:15"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2178,
										"nodeType": "StructuredDocumentation",
										"src": "5361:120:15",
										"text": " @dev Custom super token created event\n @param token Newly created custom super token address"
									},
									"id": 2183,
									"name": "CustomSuperTokenCreated",
									"nameLocation": "5492:23:15",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2181,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5536:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 2183,
												"src": "5516:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2180,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2179,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "5516:11:15"
													},
													"referencedDeclaration": 2054,
													"src": "5516:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5515:27:15"
									},
									"src": "5486:57:15"
								}
							],
							"scope": 2185,
							"src": "267:5279:15",
							"usedErrors": [
								2064,
								2066,
								2068,
								2070,
								2072,
								2074
							]
						}
					],
					"src": "32:5514:15"
				},
				"id": 15
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
					"exportedSymbols": {
						"BatchOperation": [
							1177
						],
						"ContextDefinitions": [
							1044
						],
						"FlowOperatorDefinitions": [
							1131
						],
						"IERC20": [
							77
						],
						"IERC777": [
							383
						],
						"ISuperAgreement": [
							1466
						],
						"ISuperApp": [
							1580
						],
						"ISuperToken": [
							2054
						],
						"ISuperTokenFactory": [
							2184
						],
						"ISuperfluid": [
							2708
						],
						"ISuperfluidGovernance": [
							2837
						],
						"ISuperfluidToken": [
							3123
						],
						"SuperAppDefinitions": [
							968
						],
						"SuperfluidGovernanceConfigs": [
							1278
						],
						"TokenInfo": [
							3157
						]
					},
					"id": 2709,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2186,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:16"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
							"file": "./ISuperfluidGovernance.sol",
							"id": 2188,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 2838,
							"src": "59:68:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2187,
										"name": "ISuperfluidGovernance",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:21:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 2190,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 3124,
							"src": "128:58:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2189,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "137:16:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 2192,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 2055,
							"src": "187:48:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2191,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "196:11:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol",
							"file": "./ISuperTokenFactory.sol",
							"id": 2194,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 2185,
							"src": "236:62:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2193,
										"name": "ISuperTokenFactory",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "245:18:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 2196,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 1467,
							"src": "299:56:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2195,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "308:15:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol",
							"file": "./ISuperApp.sol",
							"id": 2198,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 1581,
							"src": "356:44:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2197,
										"name": "ISuperApp",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "365:9:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol",
							"file": "./Definitions.sol",
							"id": 2204,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 1279,
							"src": "401:166:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2199,
										"name": "BatchOperation",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "414:14:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2200,
										"name": "ContextDefinitions",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "434:18:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2201,
										"name": "FlowOperatorDefinitions",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "458:23:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2202,
										"name": "SuperAppDefinitions",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "487:19:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2203,
										"name": "SuperfluidGovernanceConfigs",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "512:27:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
							"file": "../tokens/TokenInfo.sol",
							"id": 2206,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 3158,
							"src": "568:52:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2205,
										"name": "TokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "577:9:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 2208,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 78,
							"src": "621:72:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2207,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "630:6:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"file": "@openzeppelin/contracts/token/ERC777/IERC777.sol",
							"id": 2210,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2709,
							"sourceUnit": 384,
							"src": "694:75:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2209,
										"name": "IERC777",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "703:7:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluid",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2211,
								"nodeType": "StructuredDocumentation",
								"src": "771:345:16",
								"text": " @title Host interface\n @author Superfluid\n @notice This is the central contract of the system where super agreement, super app\n and super token features are connected.\n The Superfluid host contract is also the entry point for the protocol users,\n where batch call and meta transaction are provided for UX improvements."
							},
							"fullyImplemented": false,
							"id": 2708,
							"linearizedBaseContracts": [
								2708
							],
							"name": "ISuperfluid",
							"nameLocation": "1127:11:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 2213,
									"name": "HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION",
									"nameLocation": "1358:37:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2212,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1395:2:16"
									},
									"src": "1352:46:16"
								},
								{
									"id": 2215,
									"name": "HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE",
									"nameLocation": "1436:40:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2214,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1476:2:16"
									},
									"src": "1430:49:16"
								},
								{
									"id": 2217,
									"name": "HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS",
									"nameLocation": "1514:47:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1561:2:16"
									},
									"src": "1508:56:16"
								},
								{
									"id": 2219,
									"name": "HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS",
									"nameLocation": "1592:48:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1640:2:16"
									},
									"src": "1586:57:16"
								},
								{
									"id": 2221,
									"name": "HOST_INVALID_CONFIG_WORD",
									"nameLocation": "1670:24:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:16"
									},
									"src": "1664:33:16"
								},
								{
									"id": 2223,
									"name": "HOST_MAX_256_AGREEMENTS",
									"nameLocation": "1748:23:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2222,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1771:2:16"
									},
									"src": "1742:32:16"
								},
								{
									"id": 2225,
									"name": "HOST_NON_UPGRADEABLE",
									"nameLocation": "1826:20:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2224,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1846:2:16"
									},
									"src": "1820:29:16"
								},
								{
									"id": 2227,
									"name": "HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX",
									"nameLocation": "1904:36:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2226,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1940:2:16"
									},
									"src": "1898:45:16"
								},
								{
									"id": 2229,
									"name": "HOST_ONLY_GOVERNANCE",
									"nameLocation": "1982:20:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2002:2:16"
									},
									"src": "1976:29:16"
								},
								{
									"id": 2231,
									"name": "HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE",
									"nameLocation": "2060:38:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2230,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2098:2:16"
									},
									"src": "2054:47:16"
								},
								{
									"id": 2233,
									"name": "HOST_AGREEMENT_ALREADY_REGISTERED",
									"nameLocation": "2138:33:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2171:2:16"
									},
									"src": "2132:42:16"
								},
								{
									"id": 2235,
									"name": "HOST_AGREEMENT_IS_NOT_REGISTERED",
									"nameLocation": "2216:32:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2234,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:16"
									},
									"src": "2210:41:16"
								},
								{
									"id": 2237,
									"name": "HOST_MUST_BE_CONTRACT",
									"nameLocation": "2294:21:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2315:2:16"
									},
									"src": "2288:30:16"
								},
								{
									"id": 2239,
									"name": "HOST_ONLY_LISTED_AGREEMENT",
									"nameLocation": "2372:26:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2398:2:16"
									},
									"src": "2366:35:16"
								},
								{
									"id": 2241,
									"name": "HOST_NEED_MORE_GAS",
									"nameLocation": "2450:18:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2468:2:16"
									},
									"src": "2444:27:16"
								},
								{
									"id": 2245,
									"name": "APP_RULE",
									"nameLocation": "2621:8:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2243,
												"mutability": "mutable",
												"name": "_code",
												"nameLocation": "2638:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2245,
												"src": "2630:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2630:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2629:15:16"
									},
									"src": "2615:30:16"
								},
								{
									"id": 2247,
									"name": "HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY",
									"nameLocation": "2700:50:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2750:2:16"
									},
									"src": "2694:59:16"
								},
								{
									"id": 2249,
									"name": "HOST_NOT_A_SUPER_APP",
									"nameLocation": "2778:20:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2798:2:16"
									},
									"src": "2772:29:16"
								},
								{
									"id": 2251,
									"name": "HOST_NO_APP_REGISTRATION_PERMISSIONS",
									"nameLocation": "2856:36:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2892:2:16"
									},
									"src": "2850:45:16"
								},
								{
									"id": 2253,
									"name": "HOST_RECEIVER_IS_NOT_SUPER_APP",
									"nameLocation": "2934:30:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2252,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2964:2:16"
									},
									"src": "2928:39:16"
								},
								{
									"id": 2255,
									"name": "HOST_SENDER_IS_NOT_SUPER_APP",
									"nameLocation": "3012:28:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2254,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3040:2:16"
									},
									"src": "3006:37:16"
								},
								{
									"id": 2257,
									"name": "HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL",
									"nameLocation": "3090:38:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2256,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3128:2:16"
									},
									"src": "3084:47:16"
								},
								{
									"id": 2259,
									"name": "HOST_SUPER_APP_IS_JAILED",
									"nameLocation": "3168:24:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3192:2:16"
									},
									"src": "3162:33:16"
								},
								{
									"id": 2261,
									"name": "HOST_SUPER_APP_ALREADY_REGISTERED",
									"nameLocation": "3246:33:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3279:2:16"
									},
									"src": "3240:42:16"
								},
								{
									"id": 2263,
									"name": "HOST_UNAUTHORIZED_SUPER_APP_FACTORY",
									"nameLocation": "3324:35:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3359:2:16"
									},
									"src": "3318:44:16"
								},
								{
									"functionSelector": "bbe4fd50",
									"id": 2268,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNow",
									"nameLocation": "3919:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3925:2:16"
									},
									"returnParameters": {
										"id": 2267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2266,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2268,
												"src": "3951:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3951:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3950:9:16"
									},
									"scope": 2708,
									"src": "3910:50:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2269,
										"nodeType": "StructuredDocumentation",
										"src": "4145:81:16",
										"text": " @dev Get the current governance address of the Superfluid host"
									},
									"functionSelector": "289b3c0d",
									"id": 2275,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getGovernance",
									"nameLocation": "4240:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2270,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4253:2:16"
									},
									"returnParameters": {
										"id": 2274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2273,
												"mutability": "mutable",
												"name": "governance",
												"nameLocation": "4300:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2275,
												"src": "4278:32:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 2272,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2271,
														"name": "ISuperfluidGovernance",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2837,
														"src": "4278:21:16"
													},
													"referencedDeclaration": 2837,
													"src": "4278:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4277:34:16"
									},
									"scope": 2708,
									"src": "4231:81:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2276,
										"nodeType": "StructuredDocumentation",
										"src": "4318:69:16",
										"text": " @dev Replace the current governance with a new one"
									},
									"functionSelector": "7283100c",
									"id": 2282,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "replaceGovernance",
									"nameLocation": "4401:17:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2279,
												"mutability": "mutable",
												"name": "newGov",
												"nameLocation": "4441:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2282,
												"src": "4419:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 2278,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2277,
														"name": "ISuperfluidGovernance",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2837,
														"src": "4419:21:16"
													},
													"referencedDeclaration": 2837,
													"src": "4419:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4418:30:16"
									},
									"returnParameters": {
										"id": 2281,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4457:0:16"
									},
									"scope": 2708,
									"src": "4392:66:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2283,
										"nodeType": "StructuredDocumentation",
										"src": "4463:169:16",
										"text": " @dev Governance replaced event\n @param oldGov Address of the old governance contract\n @param newGov Address of the new governance contract"
									},
									"id": 2291,
									"name": "GovernanceReplaced",
									"nameLocation": "4643:18:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2286,
												"indexed": false,
												"mutability": "mutable",
												"name": "oldGov",
												"nameLocation": "4684:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2291,
												"src": "4662:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 2285,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2284,
														"name": "ISuperfluidGovernance",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2837,
														"src": "4662:21:16"
													},
													"referencedDeclaration": 2837,
													"src": "4662:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2289,
												"indexed": false,
												"mutability": "mutable",
												"name": "newGov",
												"nameLocation": "4714:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2291,
												"src": "4692:28:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
													"typeString": "contract ISuperfluidGovernance"
												},
												"typeName": {
													"id": 2288,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2287,
														"name": "ISuperfluidGovernance",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2837,
														"src": "4692:21:16"
													},
													"referencedDeclaration": 2837,
													"src": "4692:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidGovernance_$2837",
														"typeString": "contract ISuperfluidGovernance"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4661:60:16"
									},
									"src": "4637:85:16"
								},
								{
									"documentation": {
										"id": 2292,
										"nodeType": "StructuredDocumentation",
										"src": "4919:188:16",
										"text": " @dev Register a new agreement class to the system\n @param agreementClassLogic Initial agreement class code\n @custom:modifiers \n - onlyGovernance"
									},
									"functionSelector": "15a024e1",
									"id": 2298,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAgreementClass",
									"nameLocation": "5121:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2295,
												"mutability": "mutable",
												"name": "agreementClassLogic",
												"nameLocation": "5160:19:16",
												"nodeType": "VariableDeclaration",
												"scope": 2298,
												"src": "5144:35:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2294,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2293,
														"name": "ISuperAgreement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "5144:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "5144:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5143:37:16"
									},
									"returnParameters": {
										"id": 2297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5189:0:16"
									},
									"scope": 2708,
									"src": "5112:78:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2299,
										"nodeType": "StructuredDocumentation",
										"src": "5195:280:16",
										"text": " @notice Agreement class registered event\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param agreementType The agreement type registered\n @param code Address of the new agreement"
									},
									"id": 2305,
									"name": "AgreementClassRegistered",
									"nameLocation": "5486:24:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2301,
												"indexed": false,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "5519:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2305,
												"src": "5511:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2300,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5511:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2303,
												"indexed": false,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "5542:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2305,
												"src": "5534:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5534:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5510:37:16"
									},
									"src": "5480:68:16"
								},
								{
									"documentation": {
										"id": 2306,
										"nodeType": "StructuredDocumentation",
										"src": "5554:176:16",
										"text": " @dev Update code of an agreement class\n @param agreementClassLogic New code for the agreement class\n @custom:modifiers \n  - onlyGovernance"
									},
									"functionSelector": "06cecba8",
									"id": 2312,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementClass",
									"nameLocation": "5744:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2309,
												"mutability": "mutable",
												"name": "agreementClassLogic",
												"nameLocation": "5781:19:16",
												"nodeType": "VariableDeclaration",
												"scope": 2312,
												"src": "5765:35:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2308,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2307,
														"name": "ISuperAgreement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "5765:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "5765:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5764:37:16"
									},
									"returnParameters": {
										"id": 2311,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5810:0:16"
									},
									"scope": 2708,
									"src": "5735:76:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2313,
										"nodeType": "StructuredDocumentation",
										"src": "5816:274:16",
										"text": " @notice Agreement class updated event\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param agreementType The agreement type updated\n @param code Address of the new agreement"
									},
									"id": 2319,
									"name": "AgreementClassUpdated",
									"nameLocation": "6101:21:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2315,
												"indexed": false,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "6131:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "6123:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2314,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6123:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2317,
												"indexed": false,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "6154:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2319,
												"src": "6146:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6146:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6122:37:16"
									},
									"src": "6095:65:16"
								},
								{
									"documentation": {
										"id": 2320,
										"nodeType": "StructuredDocumentation",
										"src": "6166:181:16",
										"text": " @notice Check if the agreement type is whitelisted\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
									},
									"functionSelector": "e8dccb7d",
									"id": 2327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAgreementTypeListed",
									"nameLocation": "6361:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2322,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "6391:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2327,
												"src": "6383:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2321,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6383:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6382:23:16"
									},
									"returnParameters": {
										"id": 2326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2325,
												"mutability": "mutable",
												"name": "yes",
												"nameLocation": "6433:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2327,
												"src": "6428:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2324,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6428:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6427:10:16"
									},
									"scope": 2708,
									"src": "6352:86:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2328,
										"nodeType": "StructuredDocumentation",
										"src": "6444:65:16",
										"text": " @dev Check if the agreement class is whitelisted"
									},
									"functionSelector": "8ca48484",
									"id": 2336,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAgreementClassListed",
									"nameLocation": "6523:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2331,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6562:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2336,
												"src": "6546:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2329,
														"name": "ISuperAgreement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "6546:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "6546:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6545:32:16"
									},
									"returnParameters": {
										"id": 2335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2334,
												"mutability": "mutable",
												"name": "yes",
												"nameLocation": "6605:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2336,
												"src": "6600:8:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2333,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6600:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:10:16"
									},
									"scope": 2708,
									"src": "6514:96:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2337,
										"nodeType": "StructuredDocumentation",
										"src": "6616:158:16",
										"text": " @notice Get agreement class\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\""
									},
									"functionSelector": "b6d200de",
									"id": 2345,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementClass",
									"nameLocation": "6788:17:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "6814:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "6806:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2338,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6806:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6805:23:16"
									},
									"returnParameters": {
										"id": 2344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2343,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6867:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "6851:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2342,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2341,
														"name": "ISuperAgreement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "6851:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "6851:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6850:32:16"
									},
									"scope": 2708,
									"src": "6779:104:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2346,
										"nodeType": "StructuredDocumentation",
										"src": "6889:113:16",
										"text": " @dev Map list of the agreement classes using a bitmap\n @param bitmap Agreement class bitmap"
									},
									"functionSelector": "c56a069d",
									"id": 2355,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mapAgreementClasses",
									"nameLocation": "7016:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2348,
												"mutability": "mutable",
												"name": "bitmap",
												"nameLocation": "7044:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "7036:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7036:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7035:16:16"
									},
									"returnParameters": {
										"id": 2354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2353,
												"mutability": "mutable",
												"name": "agreementClasses",
												"nameLocation": "7116:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "7091:41:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1466_$dyn_memory_ptr",
													"typeString": "contract ISuperAgreement[]"
												},
												"typeName": {
													"baseType": {
														"id": 2351,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2350,
															"name": "ISuperAgreement",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1466,
															"src": "7091:15:16"
														},
														"referencedDeclaration": 1466,
														"src": "7091:15:16",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
															"typeString": "contract ISuperAgreement"
														}
													},
													"id": 2352,
													"nodeType": "ArrayTypeName",
													"src": "7091:17:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1466_$dyn_storage_ptr",
														"typeString": "contract ISuperAgreement[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7090:43:16"
									},
									"scope": 2708,
									"src": "7007:127:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2356,
										"nodeType": "StructuredDocumentation",
										"src": "7140:236:16",
										"text": " @notice Create a new bitmask by adding a agreement class to it\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param bitmap Agreement class bitmap"
									},
									"functionSelector": "bced3ddc",
									"id": 2365,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addToAgreementClassesBitmap",
									"nameLocation": "7390:27:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2358,
												"mutability": "mutable",
												"name": "bitmap",
												"nameLocation": "7426:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "7418:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7418:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2360,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "7442:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "7434:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2359,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7434:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7417:39:16"
									},
									"returnParameters": {
										"id": 2364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2363,
												"mutability": "mutable",
												"name": "newBitmap",
												"nameLocation": "7504:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2365,
												"src": "7496:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7496:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7495:19:16"
									},
									"scope": 2708,
									"src": "7381:134:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2366,
										"nodeType": "StructuredDocumentation",
										"src": "7521:240:16",
										"text": " @notice Create a new bitmask by removing a agreement class from it\n @dev agreementType is the keccak256 hash of: \"org.superfluid-finance.agreements.<AGREEMENT_NAME>.<VERSION>\"\n @param bitmap Agreement class bitmap"
									},
									"functionSelector": "a5dbbbcd",
									"id": 2375,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeFromAgreementClassesBitmap",
									"nameLocation": "7775:32:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2368,
												"mutability": "mutable",
												"name": "bitmap",
												"nameLocation": "7816:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2375,
												"src": "7808:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7808:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2370,
												"mutability": "mutable",
												"name": "agreementType",
												"nameLocation": "7832:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2375,
												"src": "7824:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2369,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7824:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7807:39:16"
									},
									"returnParameters": {
										"id": 2374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2373,
												"mutability": "mutable",
												"name": "newBitmap",
												"nameLocation": "7894:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2375,
												"src": "7886:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7886:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7885:19:16"
									},
									"scope": 2708,
									"src": "7766:139:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2376,
										"nodeType": "StructuredDocumentation",
										"src": "8098:86:16",
										"text": " @dev Get the super token factory\n @return factory The factory"
									},
									"functionSelector": "731aed6e",
									"id": 2382,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenFactory",
									"nameLocation": "8198:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2377,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8218:2:16"
									},
									"returnParameters": {
										"id": 2381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2380,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "8263:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 2382,
												"src": "8244:26:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
													"typeString": "contract ISuperTokenFactory"
												},
												"typeName": {
													"id": 2379,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2378,
														"name": "ISuperTokenFactory",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2184,
														"src": "8244:18:16"
													},
													"referencedDeclaration": 2184,
													"src": "8244:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
														"typeString": "contract ISuperTokenFactory"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8243:28:16"
									},
									"scope": 2708,
									"src": "8189:83:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2383,
										"nodeType": "StructuredDocumentation",
										"src": "8278:134:16",
										"text": " @dev Get the super token factory logic (applicable to upgradable deployment)\n @return logic The factory logic"
									},
									"functionSelector": "f2e55caf",
									"id": 2388,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSuperTokenFactoryLogic",
									"nameLocation": "8426:25:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2384,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8451:2:16"
									},
									"returnParameters": {
										"id": 2387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2386,
												"mutability": "mutable",
												"name": "logic",
												"nameLocation": "8485:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "8477:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8477:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8476:15:16"
									},
									"scope": 2708,
									"src": "8417:75:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2389,
										"nodeType": "StructuredDocumentation",
										"src": "8498:93:16",
										"text": " @dev Update super token factory\n @param newFactory New factory logic"
									},
									"functionSelector": "54fbc493",
									"id": 2395,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateSuperTokenFactory",
									"nameLocation": "8605:23:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2392,
												"mutability": "mutable",
												"name": "newFactory",
												"nameLocation": "8648:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2395,
												"src": "8629:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
													"typeString": "contract ISuperTokenFactory"
												},
												"typeName": {
													"id": 2391,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2390,
														"name": "ISuperTokenFactory",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2184,
														"src": "8629:18:16"
													},
													"referencedDeclaration": 2184,
													"src": "8629:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
														"typeString": "contract ISuperTokenFactory"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8628:31:16"
									},
									"returnParameters": {
										"id": 2394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8668:0:16"
									},
									"scope": 2708,
									"src": "8596:73:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2396,
										"nodeType": "StructuredDocumentation",
										"src": "8674:108:16",
										"text": " @dev SuperToken factory updated event\n @param newFactory Address of the new factory"
									},
									"id": 2401,
									"name": "SuperTokenFactoryUpdated",
									"nameLocation": "8793:24:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2399,
												"indexed": false,
												"mutability": "mutable",
												"name": "newFactory",
												"nameLocation": "8837:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2401,
												"src": "8818:29:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
													"typeString": "contract ISuperTokenFactory"
												},
												"typeName": {
													"id": 2398,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2397,
														"name": "ISuperTokenFactory",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2184,
														"src": "8818:18:16"
													},
													"referencedDeclaration": 2184,
													"src": "8818:18:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperTokenFactory_$2184",
														"typeString": "contract ISuperTokenFactory"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8817:31:16"
									},
									"src": "8787:62:16"
								},
								{
									"documentation": {
										"id": 2402,
										"nodeType": "StructuredDocumentation",
										"src": "8855:147:16",
										"text": " @notice Update the super token logic to the latest\n @dev Refer to ISuperTokenFactory.Upgradability for expected behaviours"
									},
									"functionSelector": "787afde7",
									"id": 2408,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateSuperTokenLogic",
									"nameLocation": "9016:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2405,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9050:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2408,
												"src": "9038:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2404,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2403,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "9038:11:16"
													},
													"referencedDeclaration": 2054,
													"src": "9038:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9037:19:16"
									},
									"returnParameters": {
										"id": 2407,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9065:0:16"
									},
									"scope": 2708,
									"src": "9007:59:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2409,
										"nodeType": "StructuredDocumentation",
										"src": "9071:109:16",
										"text": " @dev SuperToken logic updated event\n @param code Address of the new SuperToken logic"
									},
									"id": 2416,
									"name": "SuperTokenLogicUpdated",
									"nameLocation": "9191:22:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2412,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9234:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2416,
												"src": "9214:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperToken_$2054",
													"typeString": "contract ISuperToken"
												},
												"typeName": {
													"id": 2411,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2410,
														"name": "ISuperToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2054,
														"src": "9214:11:16"
													},
													"referencedDeclaration": 2054,
													"src": "9214:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperToken_$2054",
														"typeString": "contract ISuperToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2414,
												"indexed": false,
												"mutability": "mutable",
												"name": "code",
												"nameLocation": "9249:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2416,
												"src": "9241:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9241:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9213:41:16"
									},
									"src": "9185:70:16"
								},
								{
									"documentation": {
										"id": 2417,
										"nodeType": "StructuredDocumentation",
										"src": "9442:383:16",
										"text": " @dev Message sender (must be a contract) declares itself as a super app.\n @custom:deprecated you should use `registerAppWithKey` or `registerAppByFactory` instead,\n because app registration is currently governance permissioned on mainnets.\n @param configWord The super app manifest configuration, flags are defined in\n `SuperAppDefinitions`"
									},
									"functionSelector": "ad3915c8",
									"id": 2422,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerApp",
									"nameLocation": "9839:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2420,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2419,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "9859:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2422,
												"src": "9851:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2418,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9851:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9850:20:16"
									},
									"returnParameters": {
										"id": 2421,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9879:0:16"
									},
									"scope": 2708,
									"src": "9830:50:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2423,
										"nodeType": "StructuredDocumentation",
										"src": "9885:84:16",
										"text": " @dev App registered event\n @param app Address of jailed app"
									},
									"id": 2428,
									"name": "AppRegistered",
									"nameLocation": "9980:13:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2426,
												"indexed": true,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "10012:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2428,
												"src": "9994:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2425,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2424,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "9994:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "9994:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9993:23:16"
									},
									"src": "9974:43:16"
								},
								{
									"documentation": {
										"id": 2429,
										"nodeType": "StructuredDocumentation",
										"src": "10023:655:16",
										"text": " @dev Message sender declares itself as a super app.\n @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n @param registrationKey The registration key issued by the governance, needed to register on a mainnet.\n @notice See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide\n On testnets or in dev environment, a placeholder (e.g. empty string) can be used.\n While the message sender must be the super app itself, the transaction sender (tx.origin)\n must be the deployer account the registration key was issued for."
									},
									"functionSelector": "bd1c448b",
									"id": 2436,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAppWithKey",
									"nameLocation": "10692:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2431,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "10719:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2436,
												"src": "10711:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10711:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2433,
												"mutability": "mutable",
												"name": "registrationKey",
												"nameLocation": "10747:15:16",
												"nodeType": "VariableDeclaration",
												"scope": 2436,
												"src": "10731:31:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2432,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "10731:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10710:53:16"
									},
									"returnParameters": {
										"id": 2435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10772:0:16"
									},
									"scope": 2708,
									"src": "10683:90:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2437,
										"nodeType": "StructuredDocumentation",
										"src": "10779:400:16",
										"text": " @dev Message sender (must be a contract) declares app as a super app\n @param configWord The super app manifest configuration, flags are defined in `SuperAppDefinitions`\n @notice On mainnet deployments, only factory contracts pre-authorized by governance can use this.\n See https://github.com/superfluid-finance/protocol-monorepo/wiki/Super-App-White-listing-Guide"
									},
									"functionSelector": "f3733052",
									"id": 2445,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAppByFactory",
									"nameLocation": "11193:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2440,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11224:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "11214:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2439,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2438,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "11214:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "11214:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2442,
												"mutability": "mutable",
												"name": "configWord",
												"nameLocation": "11237:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "11229:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11229:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11213:35:16"
									},
									"returnParameters": {
										"id": 2444,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11257:0:16"
									},
									"scope": 2708,
									"src": "11184:74:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2446,
										"nodeType": "StructuredDocumentation",
										"src": "11264:90:16",
										"text": " @dev Query if the app is registered\n @param app Super app address"
									},
									"functionSelector": "3ca3ad4e",
									"id": 2454,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApp",
									"nameLocation": "11368:5:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2449,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11384:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "11374:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2448,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2447,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "11374:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "11374:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11373:15:16"
									},
									"returnParameters": {
										"id": 2453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2452,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "11411:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2451,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11411:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11410:6:16"
									},
									"scope": 2708,
									"src": "11359:58:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2455,
										"nodeType": "StructuredDocumentation",
										"src": "11423:83:16",
										"text": " @dev Query app callbacklevel\n @param app Super app address"
									},
									"functionSelector": "9378fa13",
									"id": 2463,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAppCallbackLevel",
									"nameLocation": "11520:19:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2458,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11550:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2463,
												"src": "11540:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2457,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2456,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "11540:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "11540:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11539:15:16"
									},
									"returnParameters": {
										"id": 2462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2461,
												"mutability": "mutable",
												"name": "appCallbackLevel",
												"nameLocation": "11583:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2463,
												"src": "11577:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2460,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "11577:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11576:24:16"
									},
									"scope": 2708,
									"src": "11511:90:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2464,
										"nodeType": "StructuredDocumentation",
										"src": "11607:93:16",
										"text": " @dev Get the manifest of the super app\n @param app Super app address"
									},
									"functionSelector": "f9f522f4",
									"id": 2476,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAppManifest",
									"nameLocation": "11714:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2467,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "11748:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "11738:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2466,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2465,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "11738:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "11738:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11728:29:16"
									},
									"returnParameters": {
										"id": 2475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2470,
												"mutability": "mutable",
												"name": "isSuperApp",
												"nameLocation": "11815:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "11810:15:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2469,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11810:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2472,
												"mutability": "mutable",
												"name": "isJailed",
												"nameLocation": "11844:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "11839:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2471,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11839:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2474,
												"mutability": "mutable",
												"name": "noopMask",
												"nameLocation": "11874:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2476,
												"src": "11866:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11866:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11796:96:16"
									},
									"scope": 2708,
									"src": "11705:188:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2477,
										"nodeType": "StructuredDocumentation",
										"src": "11899:92:16",
										"text": " @dev Query if the app has been jailed\n @param app Super app address"
									},
									"functionSelector": "6b4f3335",
									"id": 2485,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAppJailed",
									"nameLocation": "12005:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2480,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "12027:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2485,
												"src": "12017:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2479,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2478,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "12017:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "12017:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12016:15:16"
									},
									"returnParameters": {
										"id": 2484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2483,
												"mutability": "mutable",
												"name": "isJail",
												"nameLocation": "12060:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2485,
												"src": "12055:11:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2482,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12055:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12054:13:16"
									},
									"scope": 2708,
									"src": "11996:72:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2486,
										"nodeType": "StructuredDocumentation",
										"src": "12074:153:16",
										"text": " @dev Whitelist the target app for app composition for the source app (msg.sender)\n @param targetApp The target super app address"
									},
									"functionSelector": "57121e0c",
									"id": 2492,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowCompositeApp",
									"nameLocation": "12241:17:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2489,
												"mutability": "mutable",
												"name": "targetApp",
												"nameLocation": "12269:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2492,
												"src": "12259:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2488,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2487,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "12259:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "12259:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12258:21:16"
									},
									"returnParameters": {
										"id": 2491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12288:0:16"
									},
									"scope": 2708,
									"src": "12232:57:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2493,
										"nodeType": "StructuredDocumentation",
										"src": "12295:184:16",
										"text": " @dev Query if source app is allowed to call the target app as downstream app\n @param app Super app address\n @param targetApp The target super app address"
									},
									"functionSelector": "bb84cfa1",
									"id": 2504,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isCompositeAppAllowed",
									"nameLocation": "12493:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2496,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "12534:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "12524:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2495,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2494,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "12524:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "12524:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2499,
												"mutability": "mutable",
												"name": "targetApp",
												"nameLocation": "12557:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "12547:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2498,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2497,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "12547:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "12547:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12514:58:16"
									},
									"returnParameters": {
										"id": 2503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2502,
												"mutability": "mutable",
												"name": "isAppAllowed",
												"nameLocation": "12617:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 2504,
												"src": "12612:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2501,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12612:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12611:19:16"
									},
									"scope": 2708,
									"src": "12484:147:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2505,
										"nodeType": "StructuredDocumentation",
										"src": "13023:393:16",
										"text": " @dev (For agreements) StaticCall the app before callback\n @param  app               The super app.\n @param  callData          The call data sending to the super app.\n @param  isTermination     Is it a termination callback?\n @param  ctx               Current ctx, it will be validated.\n @return cbdata            Data returned from the callback."
									},
									"functionSelector": "74041e02",
									"id": 2519,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppBeforeCallback",
									"nameLocation": "13430:21:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2508,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "13471:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13461:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2507,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2506,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "13461:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "13461:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2510,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "13499:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13484:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2509,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13484:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2512,
												"mutability": "mutable",
												"name": "isTermination",
												"nameLocation": "13522:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13517:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2511,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13517:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2514,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "13560:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13545:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2513,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13545:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13451:118:16"
									},
									"returnParameters": {
										"id": 2518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2517,
												"mutability": "mutable",
												"name": "cbdata",
												"nameLocation": "13672:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2519,
												"src": "13659:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2516,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13659:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13658:21:16"
									},
									"scope": 2708,
									"src": "13421:259:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2520,
										"nodeType": "StructuredDocumentation",
										"src": "13686:393:16",
										"text": " @dev (For agreements) Call the app after callback\n @param  app               The super app.\n @param  callData          The call data sending to the super app.\n @param  isTermination     Is it a termination callback?\n @param  ctx               Current ctx, it will be validated.\n @return newCtx            The current context of the transaction."
									},
									"functionSelector": "1e6d0a84",
									"id": 2534,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppAfterCallback",
									"nameLocation": "14093:20:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2523,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "14133:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14123:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2522,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2521,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "14123:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "14123:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2525,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "14161:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14146:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14146:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2527,
												"mutability": "mutable",
												"name": "isTermination",
												"nameLocation": "14184:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14179:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2526,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14179:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2529,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "14222:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14207:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2528,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14207:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14113:118:16"
									},
									"returnParameters": {
										"id": 2533,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2532,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "14334:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "14321:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2531,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14321:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14320:21:16"
									},
									"scope": 2708,
									"src": "14084:258:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2535,
										"nodeType": "StructuredDocumentation",
										"src": "14348:408:16",
										"text": " @dev (For agreements) Create a new callback stack\n @param  ctx                     The current ctx, it will be validated.\n @param  app                     The super app.\n @param  appCreditGranted        App credit granted so far.\n @param  appCreditUsed           App credit used so far.\n @return newCtx                  The current context of the transaction."
									},
									"functionSelector": "768fabb0",
									"id": 2552,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "appCallbackPush",
									"nameLocation": "14770:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2537,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "14810:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14795:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2536,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14795:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2540,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "14833:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14823:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2539,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2538,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "14823:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "14823:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2542,
												"mutability": "mutable",
												"name": "appCreditGranted",
												"nameLocation": "14854:16:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14846:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14846:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2544,
												"mutability": "mutable",
												"name": "appCreditUsed",
												"nameLocation": "14887:13:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14880:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2543,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "14880:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2547,
												"mutability": "mutable",
												"name": "appCreditToken",
												"nameLocation": "14927:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "14910:31:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2546,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2545,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "14910:16:16"
													},
													"referencedDeclaration": 3123,
													"src": "14910:16:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14785:162:16"
									},
									"returnParameters": {
										"id": 2551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2550,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15051:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2552,
												"src": "15038:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2549,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15038:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15037:21:16"
									},
									"scope": 2708,
									"src": "14761:298:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2553,
										"nodeType": "StructuredDocumentation",
										"src": "15065:554:16",
										"text": " @dev (For agreements) Pop from the current app callback stack\n @param  ctx                     The ctx that was pushed before the callback stack.\n @param  appCreditUsedDelta      App credit used by the app.\n @return newCtx                  The current context of the transaction.\n @custom:security\n - Here we cannot do assertValidCtx(ctx), since we do not really save the stack in memory.\n - Hence there is still implicit trust that the agreement handles the callback push/pop pair correctly."
									},
									"functionSelector": "989b0c3e",
									"id": 2562,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "appCallbackPop",
									"nameLocation": "15633:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2555,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "15672:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2562,
												"src": "15657:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2554,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15657:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2557,
												"mutability": "mutable",
												"name": "appCreditUsedDelta",
												"nameLocation": "15692:18:16",
												"nodeType": "VariableDeclaration",
												"scope": 2562,
												"src": "15685:25:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2556,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "15685:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15647:69:16"
									},
									"returnParameters": {
										"id": 2561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2560,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "15789:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2562,
												"src": "15776:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2559,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "15776:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15775:21:16"
									},
									"scope": 2708,
									"src": "15624:173:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2563,
										"nodeType": "StructuredDocumentation",
										"src": "15803:288:16",
										"text": " @dev (For agreements) Use app credit.\n @param  ctx                      The current ctx, it will be validated.\n @param  appCreditUsedMore        See app credit for more details.\n @return newCtx                   The current context of the transaction."
									},
									"functionSelector": "59a29141",
									"id": 2572,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ctxUseCredit",
									"nameLocation": "16105:12:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2565,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16142:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2572,
												"src": "16127:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2564,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16127:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2567,
												"mutability": "mutable",
												"name": "appCreditUsedMore",
												"nameLocation": "16162:17:16",
												"nodeType": "VariableDeclaration",
												"scope": 2572,
												"src": "16155:24:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2566,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "16155:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16117:68:16"
									},
									"returnParameters": {
										"id": 2571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2570,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16289:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2572,
												"src": "16276:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2569,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16276:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16275:21:16"
									},
									"scope": 2708,
									"src": "16096:201:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2573,
										"nodeType": "StructuredDocumentation",
										"src": "16303:244:16",
										"text": " @dev (For agreements) Jail the app.\n @param  app                     The super app.\n @param  reason                  Jail reason code.\n @return newCtx                  The current context of the transaction."
									},
									"functionSelector": "b724211e",
									"id": 2585,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "jailApp",
									"nameLocation": "16561:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2575,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "16593:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "16578:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2574,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16578:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2578,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "16616:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "16606:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2577,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2576,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "16606:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "16606:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2580,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "16637:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "16629:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2579,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16629:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16568:81:16"
									},
									"returnParameters": {
										"id": 2584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2583,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "16753:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "16740:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2582,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16740:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16739:21:16"
									},
									"scope": 2708,
									"src": "16552:209:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2586,
										"nodeType": "StructuredDocumentation",
										"src": "16767:172:16",
										"text": " @dev Jail event for the app\n @param app Address of jailed app\n @param reason Reason the app is jailed (see Definitions.sol for the full list)"
									},
									"id": 2593,
									"name": "Jail",
									"nameLocation": "16950:4:16",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2589,
												"indexed": true,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "16973:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2593,
												"src": "16955:21:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2588,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2587,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "16955:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "16955:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2591,
												"indexed": false,
												"mutability": "mutable",
												"name": "reason",
												"nameLocation": "16986:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2593,
												"src": "16978:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2590,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16978:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16954:39:16"
									},
									"src": "16944:50:16"
								},
								{
									"documentation": {
										"id": 2594,
										"nodeType": "StructuredDocumentation",
										"src": "17555:265:16",
										"text": " @dev Call agreement function\n @param agreementClass The agreement address you are calling\n @param callData The contextual call data with placeholder ctx\n @param userData Extra user data being sent to the super app callbacks"
									},
									"functionSelector": "39255d5b",
									"id": 2606,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAgreement",
									"nameLocation": "17835:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2597,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "17875:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "17859:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2596,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2595,
														"name": "ISuperAgreement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "17859:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "17859:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2599,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "17915:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "17900:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2598,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17900:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2601,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "17949:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "17934:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2600,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17934:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17848:116:16"
									},
									"returnParameters": {
										"id": 2605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2604,
												"mutability": "mutable",
												"name": "returnedData",
												"nameLocation": "18068:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "18055:25:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2603,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18055:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18054:27:16"
									},
									"scope": 2708,
									"src": "17826:256:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2607,
										"nodeType": "StructuredDocumentation",
										"src": "18088:268:16",
										"text": " @notice Call app action\n @dev Main use case is calling app action in a batch call via the host\n @param callData The contextual call data\n @custom:note See \"Contextless Call Proxies\" above for more about contextual call data."
									},
									"functionSelector": "1e855cf3",
									"id": 2617,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppAction",
									"nameLocation": "18370:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2610,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "18403:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2617,
												"src": "18393:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2609,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2608,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "18393:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "18393:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2612,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "18431:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2617,
												"src": "18416:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2611,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18416:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18383:62:16"
									},
									"returnParameters": {
										"id": 2616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2615,
												"mutability": "mutable",
												"name": "returnedData",
												"nameLocation": "18575:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 2617,
												"src": "18562:25:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2614,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18562:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18561:27:16"
									},
									"scope": 2708,
									"src": "18361:228:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluid.Context",
									"id": 2641,
									"members": [
										{
											"constant": false,
											"id": 2619,
											"mutability": "mutable",
											"name": "appCallbackLevel",
											"nameLocation": "19834:16:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "19828:22:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 2618,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "19828:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2621,
											"mutability": "mutable",
											"name": "callType",
											"nameLocation": "19890:8:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "19884:14:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 2620,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "19884:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2623,
											"mutability": "mutable",
											"name": "timestamp",
											"nameLocation": "19948:9:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "19940:17:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2622,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "19940:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2625,
											"mutability": "mutable",
											"name": "msgSender",
											"nameLocation": "20027:9:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20019:17:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2624,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "20019:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2627,
											"mutability": "mutable",
											"name": "agreementSelector",
											"nameLocation": "20192:17:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20185:24:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes4",
												"typeString": "bytes4"
											},
											"typeName": {
												"id": 2626,
												"name": "bytes4",
												"nodeType": "ElementaryTypeName",
												"src": "20185:6:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2629,
											"mutability": "mutable",
											"name": "userData",
											"nameLocation": "20273:8:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20267:14:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2628,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "20267:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2631,
											"mutability": "mutable",
											"name": "appCreditGranted",
											"nameLocation": "20375:16:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20367:24:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2630,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "20367:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2633,
											"mutability": "mutable",
											"name": "appCreditWantedDeprecated",
											"nameLocation": "20458:25:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "20450:33:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2632,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "20450:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2635,
											"mutability": "mutable",
											"name": "appCreditUsed",
											"nameLocation": "21021:13:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "21014:20:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int256",
												"typeString": "int256"
											},
											"typeName": {
												"id": 2634,
												"name": "int256",
												"nodeType": "ElementaryTypeName",
												"src": "21014:6:16",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2637,
											"mutability": "mutable",
											"name": "appAddress",
											"nameLocation": "21075:10:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "21067:18:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2636,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "21067:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2640,
											"mutability": "mutable",
											"name": "appCreditToken",
											"nameLocation": "21149:14:16",
											"nodeType": "VariableDeclaration",
											"scope": 2641,
											"src": "21132:31:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
												"typeString": "contract ISuperfluidToken"
											},
											"typeName": {
												"id": 2639,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 2638,
													"name": "ISuperfluidToken",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 3123,
													"src": "21132:16:16"
												},
												"referencedDeclaration": 3123,
												"src": "21132:16:16",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Context",
									"nameLocation": "19734:7:16",
									"nodeType": "StructDefinition",
									"scope": 2708,
									"src": "19727:1443:16",
									"visibility": "public"
								},
								{
									"functionSelector": "4329d293",
									"id": 2657,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAgreementWithContext",
									"nameLocation": "21185:24:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2644,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "21235:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21219:30:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
													"typeString": "contract ISuperAgreement"
												},
												"typeName": {
													"id": 2643,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2642,
														"name": "ISuperAgreement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1466,
														"src": "21219:15:16"
													},
													"referencedDeclaration": 1466,
													"src": "21219:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
														"typeString": "contract ISuperAgreement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2646,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "21274:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21259:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2645,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21259:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2648,
												"mutability": "mutable",
												"name": "userData",
												"nameLocation": "21307:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21292:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2647,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21292:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2650,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21340:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21325:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2649,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21325:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21209:140:16"
									},
									"returnParameters": {
										"id": 2656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2653,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "21470:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21457:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2652,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21457:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2655,
												"mutability": "mutable",
												"name": "returnedData",
												"nameLocation": "21491:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 2657,
												"src": "21478:25:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2654,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21478:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21456:48:16"
									},
									"scope": 2708,
									"src": "21176:329:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "ba48b5f8",
									"id": 2669,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "callAppActionWithContext",
									"nameLocation": "21520:24:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2660,
												"mutability": "mutable",
												"name": "app",
												"nameLocation": "21564:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "21554:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperApp_$1580",
													"typeString": "contract ISuperApp"
												},
												"typeName": {
													"id": 2659,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2658,
														"name": "ISuperApp",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1580,
														"src": "21554:9:16"
													},
													"referencedDeclaration": 1580,
													"src": "21554:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperApp_$1580",
														"typeString": "contract ISuperApp"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2662,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "21592:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "21577:23:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21577:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2664,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21625:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "21610:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2663,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21610:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21544:90:16"
									},
									"returnParameters": {
										"id": 2668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2667,
												"mutability": "mutable",
												"name": "newCtx",
												"nameLocation": "21742:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2669,
												"src": "21729:19:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2666,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21729:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21728:21:16"
									},
									"scope": 2708,
									"src": "21511:239:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "3f6c923a",
									"id": 2677,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decodeCtx",
									"nameLocation": "21765:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2671,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21788:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "21775:16:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2670,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21775:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21774:18:16"
									},
									"returnParameters": {
										"id": 2676,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2675,
												"mutability": "mutable",
												"name": "context",
												"nameLocation": "21847:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 2677,
												"src": "21832:22:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Context_$2641_memory_ptr",
													"typeString": "struct ISuperfluid.Context"
												},
												"typeName": {
													"id": 2674,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2673,
														"name": "Context",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2641,
														"src": "21832:7:16"
													},
													"referencedDeclaration": 2641,
													"src": "21832:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Context_$2641_storage_ptr",
														"typeString": "struct ISuperfluid.Context"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21831:24:16"
									},
									"scope": 2708,
									"src": "21756:100:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "bf428734",
									"id": 2684,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isCtxValid",
									"nameLocation": "21871:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2679,
												"mutability": "mutable",
												"name": "ctx",
												"nameLocation": "21897:3:16",
												"nodeType": "VariableDeclaration",
												"scope": 2684,
												"src": "21882:18:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "21882:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21881:20:16"
									},
									"returnParameters": {
										"id": 2683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2682,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2684,
												"src": "21925:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2681,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "21925:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21924:6:16"
									},
									"scope": 2708,
									"src": "21862:69:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluid.Operation",
									"id": 2691,
									"members": [
										{
											"constant": false,
											"id": 2686,
											"mutability": "mutable",
											"name": "operationType",
											"nameLocation": "22268:13:16",
											"nodeType": "VariableDeclaration",
											"scope": 2691,
											"src": "22261:20:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 2685,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "22261:6:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2688,
											"mutability": "mutable",
											"name": "target",
											"nameLocation": "22327:6:16",
											"nodeType": "VariableDeclaration",
											"scope": 2691,
											"src": "22319:14:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2687,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "22319:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2690,
											"mutability": "mutable",
											"name": "data",
											"nameLocation": "22391:4:16",
											"nodeType": "VariableDeclaration",
											"scope": 2691,
											"src": "22385:10:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2689,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "22385:5:16",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Operation",
									"nameLocation": "22170:9:16",
									"nodeType": "StructDefinition",
									"scope": 2708,
									"src": "22163:239:16",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2692,
										"nodeType": "StructuredDocumentation",
										"src": "22408:94:16",
										"text": " @dev Batch call function\n @param operations Array of batch operations"
									},
									"functionSelector": "6ad3ca7d",
									"id": 2699,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchCall",
									"nameLocation": "22516:9:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2697,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2696,
												"mutability": "mutable",
												"name": "operations",
												"nameLocation": "22547:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2699,
												"src": "22526:31:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Operation_$2691_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISuperfluid.Operation[]"
												},
												"typeName": {
													"baseType": {
														"id": 2694,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2693,
															"name": "Operation",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2691,
															"src": "22526:9:16"
														},
														"referencedDeclaration": 2691,
														"src": "22526:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Operation_$2691_storage_ptr",
															"typeString": "struct ISuperfluid.Operation"
														}
													},
													"id": 2695,
													"nodeType": "ArrayTypeName",
													"src": "22526:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Operation_$2691_storage_$dyn_storage_ptr",
														"typeString": "struct ISuperfluid.Operation[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22525:33:16"
									},
									"returnParameters": {
										"id": 2698,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22567:0:16"
									},
									"scope": 2708,
									"src": "22507:61:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2700,
										"nodeType": "StructuredDocumentation",
										"src": "22574:128:16",
										"text": " @dev Batch call function for trusted forwarders (EIP-2771)\n @param operations Array of batch operations"
									},
									"functionSelector": "670e77e3",
									"id": 2707,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "forwardBatchCall",
									"nameLocation": "22716:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2704,
												"mutability": "mutable",
												"name": "operations",
												"nameLocation": "22754:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2707,
												"src": "22733:31:16",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Operation_$2691_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISuperfluid.Operation[]"
												},
												"typeName": {
													"baseType": {
														"id": 2702,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2701,
															"name": "Operation",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2691,
															"src": "22733:9:16"
														},
														"referencedDeclaration": 2691,
														"src": "22733:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Operation_$2691_storage_ptr",
															"typeString": "struct ISuperfluid.Operation"
														}
													},
													"id": 2703,
													"nodeType": "ArrayTypeName",
													"src": "22733:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Operation_$2691_storage_$dyn_storage_ptr",
														"typeString": "struct ISuperfluid.Operation[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22732:33:16"
									},
									"returnParameters": {
										"id": 2706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22774:0:16"
									},
									"scope": 2708,
									"src": "22707:68:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2709,
							"src": "1117:22765:16",
							"usedErrors": [
								2213,
								2215,
								2217,
								2219,
								2221,
								2223,
								2225,
								2227,
								2229,
								2231,
								2233,
								2235,
								2237,
								2239,
								2241,
								2245,
								2247,
								2249,
								2251,
								2253,
								2255,
								2257,
								2259,
								2261,
								2263
							]
						}
					],
					"src": "32:23851:16"
				},
				"id": 16
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							1466
						],
						"ISuperToken": [
							2054
						],
						"ISuperfluid": [
							2708
						],
						"ISuperfluidGovernance": [
							2837
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 2838,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2710,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:17"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 2712,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2838,
							"sourceUnit": 1467,
							"src": "59:56:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2711,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:15:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol",
							"file": "./ISuperToken.sol",
							"id": 2714,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2838,
							"sourceUnit": 2055,
							"src": "116:48:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2713,
										"name": "ISuperToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "125:11:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
							"file": "./ISuperfluidToken.sol",
							"id": 2716,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2838,
							"sourceUnit": 3124,
							"src": "165:59:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2715,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "174:16:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"file": "./ISuperfluid.sol",
							"id": 2718,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2838,
							"sourceUnit": 2709,
							"src": "225:48:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2717,
										"name": "ISuperfluid",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "234:11:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluidGovernance",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2719,
								"nodeType": "StructuredDocumentation",
								"src": "276:71:17",
								"text": " @title Superfluid governance interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 2837,
							"linearizedBaseContracts": [
								2837
							],
							"name": "ISuperfluidGovernance",
							"nameLocation": "358:21:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 2721,
									"name": "SF_GOV_ARRAYS_NOT_SAME_LENGTH",
									"nameLocation": "571:29:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2720,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "600:2:17"
									},
									"src": "565:38:17"
								},
								{
									"id": 2723,
									"name": "SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD",
									"nameLocation": "645:46:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2722,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "691:2:17"
									},
									"src": "639:55:17"
								},
								{
									"id": 2725,
									"name": "SF_GOV_MUST_BE_CONTRACT",
									"nameLocation": "719:23:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "742:2:17"
									},
									"src": "713:32:17"
								},
								{
									"documentation": {
										"id": 2726,
										"nodeType": "StructuredDocumentation",
										"src": "788:76:17",
										"text": " @dev Replace the current governance with a new governance"
									},
									"functionSelector": "44864b25",
									"id": 2734,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "replaceGovernance",
									"nameLocation": "878:17:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2729,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "917:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2734,
												"src": "905:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2728,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2727,
														"name": "ISuperfluid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "905:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "905:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2731,
												"mutability": "mutable",
												"name": "newGov",
												"nameLocation": "939:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2734,
												"src": "931:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2730,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "895:51:17"
									},
									"returnParameters": {
										"id": 2733,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "955:0:17"
									},
									"scope": 2837,
									"src": "869:87:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2735,
										"nodeType": "StructuredDocumentation",
										"src": "962:54:17",
										"text": " @dev Register a new agreement class"
									},
									"functionSelector": "cadf8f85",
									"id": 2743,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerAgreementClass",
									"nameLocation": "1030:22:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2738,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1074:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "1062:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2737,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2736,
														"name": "ISuperfluid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "1062:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "1062:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2740,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "1096:14:17",
												"nodeType": "VariableDeclaration",
												"scope": 2743,
												"src": "1088:22:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2739,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1088:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1052:59:17"
									},
									"returnParameters": {
										"id": 2742,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1120:0:17"
									},
									"scope": 2837,
									"src": "1021:100:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2744,
										"nodeType": "StructuredDocumentation",
										"src": "1127:193:17",
										"text": " @dev Update logics of the contracts\n @custom:note \n - Because they might have inter-dependencies, it is good to have one single function to update them all"
									},
									"functionSelector": "427942a4",
									"id": 2757,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateContracts",
									"nameLocation": "1334:15:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2747,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1371:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1359:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2746,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2745,
														"name": "ISuperfluid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "1359:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "1359:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2749,
												"mutability": "mutable",
												"name": "hostNewLogic",
												"nameLocation": "1393:12:17",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1385:20:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1385:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2752,
												"mutability": "mutable",
												"name": "agreementClassNewLogics",
												"nameLocation": "1434:23:17",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1415:42:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2750,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1415:7:17",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2751,
													"nodeType": "ArrayTypeName",
													"src": "1415:9:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2754,
												"mutability": "mutable",
												"name": "superTokenFactoryNewLogic",
												"nameLocation": "1475:25:17",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1467:33:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2753,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1467:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1349:157:17"
									},
									"returnParameters": {
										"id": 2756,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1515:0:17"
									},
									"scope": 2837,
									"src": "1325:191:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2758,
										"nodeType": "StructuredDocumentation",
										"src": "1522:113:17",
										"text": " @dev Update supertoken logic contract to the latest that is managed by the super token factory"
									},
									"functionSelector": "42148deb",
									"id": 2768,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchUpdateSuperTokenLogic",
									"nameLocation": "1649:26:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2761,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1697:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2768,
												"src": "1685:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2760,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2759,
														"name": "ISuperfluid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "1685:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "1685:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2765,
												"mutability": "mutable",
												"name": "tokens",
												"nameLocation": "1734:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2768,
												"src": "1711:29:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperToken_$2054_$dyn_calldata_ptr",
													"typeString": "contract ISuperToken[]"
												},
												"typeName": {
													"baseType": {
														"id": 2763,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2762,
															"name": "ISuperToken",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 2054,
															"src": "1711:11:17"
														},
														"referencedDeclaration": 2054,
														"src": "1711:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperToken_$2054",
															"typeString": "contract ISuperToken"
														}
													},
													"id": 2764,
													"nodeType": "ArrayTypeName",
													"src": "1711:13:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperToken_$2054_$dyn_storage_ptr",
														"typeString": "contract ISuperToken[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1675:66:17"
									},
									"returnParameters": {
										"id": 2767,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1750:0:17"
									},
									"scope": 2837,
									"src": "1640:111:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2769,
										"nodeType": "StructuredDocumentation",
										"src": "1761:58:17",
										"text": " @dev Set configuration as address value"
									},
									"functionSelector": "78707cb8",
									"id": 2782,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setConfig",
									"nameLocation": "1833:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2772,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1864:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2782,
												"src": "1852:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2771,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2770,
														"name": "ISuperfluid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "1852:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "1852:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2775,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "1895:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2782,
												"src": "1878:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2774,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2773,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "1878:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "1878:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2777,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "1923:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2782,
												"src": "1915:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2776,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1915:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2779,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1944:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2782,
												"src": "1936:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2778,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1936:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1842:113:17"
									},
									"returnParameters": {
										"id": 2781,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1964:0:17"
									},
									"scope": 2837,
									"src": "1824:141:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2783,
										"nodeType": "StructuredDocumentation",
										"src": "1975:58:17",
										"text": " @dev Set configuration as uint256 value"
									},
									"functionSelector": "f79a8e63",
									"id": 2796,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setConfig",
									"nameLocation": "2047:9:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2786,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2078:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2796,
												"src": "2066:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2785,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2784,
														"name": "ISuperfluid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "2066:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "2066:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2789,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2109:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2796,
												"src": "2092:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2788,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2787,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2092:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "2092:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2791,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2137:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2796,
												"src": "2129:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2790,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2129:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2793,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2158:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2796,
												"src": "2150:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2792,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2150:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2056:113:17"
									},
									"returnParameters": {
										"id": 2795,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2178:0:17"
									},
									"scope": 2837,
									"src": "2038:141:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2797,
										"nodeType": "StructuredDocumentation",
										"src": "2185:43:17",
										"text": " @dev Clear configuration"
									},
									"functionSelector": "640b6cc9",
									"id": 2808,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "clearConfig",
									"nameLocation": "2242:11:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2800,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2275:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2808,
												"src": "2263:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2799,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2798,
														"name": "ISuperfluid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "2263:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "2263:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2803,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2306:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2808,
												"src": "2289:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2802,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2801,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2289:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "2289:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2805,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2334:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2808,
												"src": "2326:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2804,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2253:90:17"
									},
									"returnParameters": {
										"id": 2807,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2352:0:17"
									},
									"scope": 2837,
									"src": "2233:120:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2809,
										"nodeType": "StructuredDocumentation",
										"src": "2359:58:17",
										"text": " @dev Get configuration as address value"
									},
									"functionSelector": "8369a0f1",
									"id": 2822,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getConfigAsAddress",
									"nameLocation": "2431:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2812,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2471:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2822,
												"src": "2459:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2811,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2810,
														"name": "ISuperfluid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "2459:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "2459:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2815,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2502:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2822,
												"src": "2485:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2814,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2813,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2485:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "2485:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2817,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2530:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2822,
												"src": "2522:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2816,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2522:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2449:85:17"
									},
									"returnParameters": {
										"id": 2821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2820,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2566:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2822,
												"src": "2558:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2819,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2558:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2557:15:17"
									},
									"scope": 2837,
									"src": "2422:151:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2823,
										"nodeType": "StructuredDocumentation",
										"src": "2579:58:17",
										"text": " @dev Get configuration as uint256 value"
									},
									"functionSelector": "80f70cba",
									"id": 2836,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getConfigAsUint256",
									"nameLocation": "2651:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2826,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "2691:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2836,
												"src": "2679:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluid_$2708",
													"typeString": "contract ISuperfluid"
												},
												"typeName": {
													"id": 2825,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2824,
														"name": "ISuperfluid",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2708,
														"src": "2679:11:17"
													},
													"referencedDeclaration": 2708,
													"src": "2679:11:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluid_$2708",
														"typeString": "contract ISuperfluid"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2829,
												"mutability": "mutable",
												"name": "superToken",
												"nameLocation": "2722:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2836,
												"src": "2705:27:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
													"typeString": "contract ISuperfluidToken"
												},
												"typeName": {
													"id": 2828,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2827,
														"name": "ISuperfluidToken",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3123,
														"src": "2705:16:17"
													},
													"referencedDeclaration": 3123,
													"src": "2705:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
														"typeString": "contract ISuperfluidToken"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2831,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "2750:3:17",
												"nodeType": "VariableDeclaration",
												"scope": 2836,
												"src": "2742:11:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2830,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2742:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:85:17"
									},
									"returnParameters": {
										"id": 2835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2834,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2786:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2836,
												"src": "2778:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2778:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2777:15:17"
									},
									"scope": 2837,
									"src": "2642:151:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2838,
							"src": "348:2448:17",
							"usedErrors": [
								2721,
								2723,
								2725
							]
						}
					],
					"src": "32:2765:17"
				},
				"id": 17
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
					"exportedSymbols": {
						"ISuperAgreement": [
							1466
						],
						"ISuperfluidToken": [
							3123
						]
					},
					"id": 3124,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2839,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:18"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol",
							"file": "./ISuperAgreement.sol",
							"id": 2841,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3124,
							"sourceUnit": 1467,
							"src": "59:56:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2840,
										"name": "ISuperAgreement",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:15:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISuperfluidToken",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2842,
								"nodeType": "StructuredDocumentation",
								"src": "117:66:18",
								"text": " @title Superfluid token interface\n @author Superfluid"
							},
							"fullyImplemented": false,
							"id": 3123,
							"linearizedBaseContracts": [
								3123
							],
							"name": "ISuperfluidToken",
							"nameLocation": "194:16:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 2844,
									"name": "SF_TOKEN_AGREEMENT_ALREADY_EXISTS",
									"nameLocation": "398:33:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2843,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "431:2:18"
									},
									"src": "392:42:18"
								},
								{
									"id": 2846,
									"name": "SF_TOKEN_AGREEMENT_DOES_NOT_EXIST",
									"nameLocation": "460:33:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2845,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "493:2:18"
									},
									"src": "454:42:18"
								},
								{
									"id": 2848,
									"name": "SF_TOKEN_BURN_INSUFFICIENT_BALANCE",
									"nameLocation": "522:34:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2847,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "556:2:18"
									},
									"src": "516:43:18"
								},
								{
									"id": 2850,
									"name": "SF_TOKEN_MOVE_INSUFFICIENT_BALANCE",
									"nameLocation": "584:34:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2849,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "618:2:18"
									},
									"src": "578:43:18"
								},
								{
									"id": 2852,
									"name": "SF_TOKEN_ONLY_LISTED_AGREEMENT",
									"nameLocation": "646:30:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "676:2:18"
									},
									"src": "640:39:18"
								},
								{
									"id": 2854,
									"name": "SF_TOKEN_ONLY_HOST",
									"nameLocation": "708:18:18",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2853,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "726:2:18"
									},
									"src": "702:27:18"
								},
								{
									"documentation": {
										"id": 2855,
										"nodeType": "StructuredDocumentation",
										"src": "951:60:18",
										"text": " @dev Get superfluid host contract address"
									},
									"functionSelector": "20bc4425",
									"id": 2860,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHost",
									"nameLocation": "1025:7:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2856,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1032:2:18"
									},
									"returnParameters": {
										"id": 2859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2858,
												"mutability": "mutable",
												"name": "host",
												"nameLocation": "1065:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2860,
												"src": "1057:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2857,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1057:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1056:14:18"
									},
									"scope": 3123,
									"src": "1016:55:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISuperfluidToken.LiquidationTypeData",
									"id": 2865,
									"members": [
										{
											"constant": false,
											"id": 2862,
											"mutability": "mutable",
											"name": "version",
											"nameLocation": "1504:7:18",
											"nodeType": "VariableDeclaration",
											"scope": 2865,
											"src": "1496:15:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2861,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1496:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2864,
											"mutability": "mutable",
											"name": "liquidationType",
											"nameLocation": "1527:15:18",
											"nodeType": "VariableDeclaration",
											"scope": 2865,
											"src": "1521:21:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint8",
												"typeString": "uint8"
											},
											"typeName": {
												"id": 2863,
												"name": "uint8",
												"nodeType": "ElementaryTypeName",
												"src": "1521:5:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "LiquidationTypeData",
									"nameLocation": "1466:19:18",
									"nodeType": "StructDefinition",
									"scope": 3123,
									"src": "1459:90:18",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2866,
										"nodeType": "StructuredDocumentation",
										"src": "1751:321:18",
										"text": " @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n @param account for the query\n @param timestamp Time of balance\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "eb3537cc",
									"id": 2879,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOf",
									"nameLocation": "2086:17:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2868,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2120:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2112:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2112:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2870,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2144:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2136:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2136:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2103:56:18"
									},
									"returnParameters": {
										"id": 2878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2873,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2219:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2212:23:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2872,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2212:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2875,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2257:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2249:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2874,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2249:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2877,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2286:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 2879,
												"src": "2278:19:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2278:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2198:100:18"
									},
									"scope": 3123,
									"src": "2077:222:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2880,
										"nodeType": "StructuredDocumentation",
										"src": "2305:339:18",
										"text": " @notice Calculate the realtime balance given the current host.getNow() value\n @dev realtimeBalanceOf with timestamp equals to block timestamp\n @param account for the query\n @return availableBalance Real-time balance\n @return deposit Account deposit\n @return owedDeposit Account owed Deposit"
									},
									"functionSelector": "2ec8eec7",
									"id": 2893,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "realtimeBalanceOfNow",
									"nameLocation": "2658:20:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2882,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2695:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2687:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2881,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2687:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:30:18"
									},
									"returnParameters": {
										"id": 2892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2885,
												"mutability": "mutable",
												"name": "availableBalance",
												"nameLocation": "2768:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2761:23:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2884,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "2761:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2887,
												"mutability": "mutable",
												"name": "deposit",
												"nameLocation": "2806:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2798:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2886,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2889,
												"mutability": "mutable",
												"name": "owedDeposit",
												"nameLocation": "2835:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2827:19:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2888,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2827:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2891,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2868:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2893,
												"src": "2860:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2860:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2747:131:18"
									},
									"scope": 3123,
									"src": "2649:230:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2894,
										"nodeType": "StructuredDocumentation",
										"src": "2885:309:18",
										"text": " @notice Check if account is critical\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @param timestamp The time we'd like to check if the account is critical (should use future)\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "d9d078d6",
									"id": 2903,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCritical",
									"nameLocation": "3208:17:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2899,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2896,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3243:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2903,
												"src": "3235:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2895,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3235:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2898,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3268:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2903,
												"src": "3260:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2897,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3260:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3225:58:18"
									},
									"returnParameters": {
										"id": 2902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2901,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3327:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2903,
												"src": "3322:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2900,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3322:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3321:17:18"
									},
									"scope": 3123,
									"src": "3199:140:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2904,
										"nodeType": "StructuredDocumentation",
										"src": "3345:239:18",
										"text": " @notice Check if account is critical now (current host.getNow())\n @dev A critical account is when availableBalance < 0\n @param account The account to check\n @return isCritical Whether the account is critical"
									},
									"functionSelector": "79359f6f",
									"id": 2911,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountCriticalNow",
									"nameLocation": "3598:20:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2907,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2906,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3636:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2911,
												"src": "3628:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3618:31:18"
									},
									"returnParameters": {
										"id": 2910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2909,
												"mutability": "mutable",
												"name": "isCritical",
												"nameLocation": "3693:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2911,
												"src": "3688:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2908,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3688:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3687:17:18"
									},
									"scope": 3123,
									"src": "3589:116:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2912,
										"nodeType": "StructuredDocumentation",
										"src": "3711:383:18",
										"text": " @notice Check if account is solvent\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @param timestamp The time we'd like to check if the account is solvent (should use future)\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "b84cdd4a",
									"id": 2921,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolvent",
									"nameLocation": "4108:16:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2914,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4142:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2921,
												"src": "4134:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2913,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4134:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2916,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "4167:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2921,
												"src": "4159:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4159:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4124:58:18"
									},
									"returnParameters": {
										"id": 2920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2919,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4226:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2921,
												"src": "4221:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2918,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4221:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4220:16:18"
									},
									"scope": 3123,
									"src": "4099:138:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2922,
										"nodeType": "StructuredDocumentation",
										"src": "4243:289:18",
										"text": " @notice Check if account is solvent now\n @dev An account is insolvent when the sum of deposits for a token can't cover the negative availableBalance\n @param account The account to check\n @return isSolvent True if the account is solvent, false otherwise"
									},
									"functionSelector": "bb0d196e",
									"id": 2929,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isAccountSolventNow",
									"nameLocation": "4546:19:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2924,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4583:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2929,
												"src": "4575:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4575:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4565:31:18"
									},
									"returnParameters": {
										"id": 2928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2927,
												"mutability": "mutable",
												"name": "isSolvent",
												"nameLocation": "4640:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2929,
												"src": "4635:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2926,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4635:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4634:16:18"
									},
									"scope": 3123,
									"src": "4537:114:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2930,
										"nodeType": "StructuredDocumentation",
										"src": "4657:277:18",
										"text": " @notice Get a list of agreements that is active for the account\n @dev An active agreement is one that has state for the account\n @param account Account to query\n @return activeAgreements List of accounts that have non-zero states for the account"
									},
									"functionSelector": "386fa221",
									"id": 2939,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccountActiveAgreements",
									"nameLocation": "4948:26:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2932,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4983:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2939,
												"src": "4975:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2931,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4975:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4974:17:18"
									},
									"returnParameters": {
										"id": 2938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2937,
												"mutability": "mutable",
												"name": "activeAgreements",
												"nameLocation": "5053:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 2939,
												"src": "5028:41:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1466_$dyn_memory_ptr",
													"typeString": "contract ISuperAgreement[]"
												},
												"typeName": {
													"baseType": {
														"id": 2935,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 2934,
															"name": "ISuperAgreement",
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1466,
															"src": "5028:15:18"
														},
														"referencedDeclaration": 1466,
														"src": "5028:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISuperAgreement_$1466",
															"typeString": "contract ISuperAgreement"
														}
													},
													"id": 2936,
													"nodeType": "ArrayTypeName",
													"src": "5028:17:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_ISuperAgreement_$1466_$dyn_storage_ptr",
														"typeString": "contract ISuperAgreement[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5027:43:18"
									},
									"scope": 3123,
									"src": "4939:132:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2940,
										"nodeType": "StructuredDocumentation",
										"src": "5277:110:18",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "12a6a3f8",
									"id": 2948,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createAgreement",
									"nameLocation": "5401:15:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2942,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5434:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2948,
												"src": "5426:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2941,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5426:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2945,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5465:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2948,
												"src": "5446:23:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2943,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5446:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2944,
													"nodeType": "ArrayTypeName",
													"src": "5446:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5416:59:18"
									},
									"returnParameters": {
										"id": 2947,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5492:0:18"
									},
									"scope": 3123,
									"src": "5392:101:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2949,
										"nodeType": "StructuredDocumentation",
										"src": "5498:174:18",
										"text": " @dev Agreement created event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"id": 2958,
									"name": "AgreementCreated",
									"nameLocation": "5683:16:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2951,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "5725:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "5709:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5709:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2953,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "5757:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "5749:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2952,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5749:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2956,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5779:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2958,
												"src": "5769:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2954,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5769:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2955,
													"nodeType": "ArrayTypeName",
													"src": "5769:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5699:90:18"
									},
									"src": "5677:113:18"
								},
								{
									"documentation": {
										"id": 2959,
										"nodeType": "StructuredDocumentation",
										"src": "5796:184:18",
										"text": " @dev Get data of the agreement\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @return data Data of the agreement"
									},
									"functionSelector": "6c2d9f2f",
									"id": 2971,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementData",
									"nameLocation": "5994:16:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2961,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6028:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "6020:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2960,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2963,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6060:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "6052:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2962,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6052:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2965,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6077:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "6072:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2964,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6072:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6010:83:18"
									},
									"returnParameters": {
										"id": 2970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2969,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6149:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2971,
												"src": "6132:21:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2967,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6132:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2968,
													"nodeType": "ArrayTypeName",
													"src": "6132:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6131:23:18"
									},
									"scope": 3123,
									"src": "5985:170:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2972,
										"nodeType": "StructuredDocumentation",
										"src": "6161:110:18",
										"text": " @dev Create a new agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"functionSelector": "a1b2bf8b",
									"id": 2980,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementData",
									"nameLocation": "6285:19:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2974,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6322:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2980,
												"src": "6314:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2973,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2977,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6353:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2980,
												"src": "6334:23:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2975,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6334:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2976,
													"nodeType": "ArrayTypeName",
													"src": "6334:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6304:59:18"
									},
									"returnParameters": {
										"id": 2979,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6380:0:18"
									},
									"scope": 3123,
									"src": "6276:105:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2981,
										"nodeType": "StructuredDocumentation",
										"src": "6386:174:18",
										"text": " @dev Agreement updated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param data Agreement data"
									},
									"id": 2990,
									"name": "AgreementUpdated",
									"nameLocation": "6571:16:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 2989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2983,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "6613:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 2990,
												"src": "6597:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2982,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6597:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2985,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6645:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2990,
												"src": "6637:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2984,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6637:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2988,
												"indexed": false,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6667:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2990,
												"src": "6657:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 2986,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6657:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 2987,
													"nodeType": "ArrayTypeName",
													"src": "6657:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6587:90:18"
									},
									"src": "6565:113:18"
								},
								{
									"documentation": {
										"id": 2991,
										"nodeType": "StructuredDocumentation",
										"src": "6684:73:18",
										"text": " @dev Close the agreement\n @param id Agreement ID"
									},
									"functionSelector": "27048397",
									"id": 2998,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "terminateAgreement",
									"nameLocation": "6771:18:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2993,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "6807:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 2998,
												"src": "6799:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2992,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6799:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2995,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "6824:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2998,
												"src": "6819:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2994,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6819:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6789:51:18"
									},
									"returnParameters": {
										"id": 2997,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6857:0:18"
									},
									"scope": 3123,
									"src": "6762:96:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 2999,
										"nodeType": "StructuredDocumentation",
										"src": "6863:143:18",
										"text": " @dev Agreement terminated event\n @param agreementClass Contract address of the agreement\n @param id Agreement ID"
									},
									"id": 3005,
									"name": "AgreementTerminated",
									"nameLocation": "7017:19:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3001,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7062:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3005,
												"src": "7046:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7046:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3003,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "7094:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3005,
												"src": "7086:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3002,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7086:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7036:66:18"
									},
									"src": "7011:92:18"
								},
								{
									"documentation": {
										"id": 3006,
										"nodeType": "StructuredDocumentation",
										"src": "7109:199:18",
										"text": " @dev Update agreement state slot\n @param account Account to be updated\n @custom:note \n - To clear the storage out, provide zero-ed array of intended length"
									},
									"functionSelector": "090c415e",
									"id": 3016,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updateAgreementStateSlot",
									"nameLocation": "7322:24:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3008,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7364:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 3016,
												"src": "7356:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7356:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3010,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7389:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3016,
												"src": "7381:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7381:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3013,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "7424:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 3016,
												"src": "7405:27:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 3011,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7405:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 3012,
													"nodeType": "ArrayTypeName",
													"src": "7405:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7346:92:18"
									},
									"returnParameters": {
										"id": 3015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7455:0:18"
									},
									"scope": 3123,
									"src": "7313:143:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3017,
										"nodeType": "StructuredDocumentation",
										"src": "7461:214:18",
										"text": " @dev Agreement account state updated event\n @param agreementClass Contract address of the agreement\n @param account Account updated\n @param slotId slot id of the agreement state"
									},
									"id": 3025,
									"name": "AgreementStateUpdated",
									"nameLocation": "7686:21:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3019,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "7733:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3025,
												"src": "7717:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7717:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3021,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7773:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 3025,
												"src": "7757:23:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3020,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7757:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3023,
												"indexed": false,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "7798:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3025,
												"src": "7790:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7790:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7707:103:18"
									},
									"src": "7680:131:18"
								},
								{
									"documentation": {
										"id": 3026,
										"nodeType": "StructuredDocumentation",
										"src": "7817:267:18",
										"text": " @dev Get data of the slot of the state of an agreement\n @param agreementClass Contract address of the agreement\n @param account Account to query\n @param slotId slot id of the state\n @param dataLength length of the state data"
									},
									"functionSelector": "4b61cc33",
									"id": 3040,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAgreementStateSlot",
									"nameLocation": "8098:21:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3028,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "8137:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8129:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8129:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3030,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8169:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8161:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3029,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8161:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3032,
												"mutability": "mutable",
												"name": "slotId",
												"nameLocation": "8194:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8186:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8186:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3034,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "8215:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8210:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3033,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8210:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8119:112:18"
									},
									"returnParameters": {
										"id": 3039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3038,
												"mutability": "mutable",
												"name": "slotData",
												"nameLocation": "8288:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 3040,
												"src": "8271:25:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 3036,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "8271:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 3037,
													"nodeType": "ArrayTypeName",
													"src": "8271:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8270:27:18"
									},
									"scope": 3123,
									"src": "8089:209:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3041,
										"nodeType": "StructuredDocumentation",
										"src": "8304:320:18",
										"text": " @notice Settle balance from an account by the agreement\n @dev The agreement needs to make sure that the balance delta is balanced afterwards\n @param account Account to query.\n @param delta Amount of balance delta to be settled\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "cf97256d",
									"id": 3048,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settleBalance",
									"nameLocation": "8638:13:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3043,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8669:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "8661:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8661:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3045,
												"mutability": "mutable",
												"name": "delta",
												"nameLocation": "8693:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "8686:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3044,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "8686:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8651:53:18"
									},
									"returnParameters": {
										"id": 3047,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8721:0:18"
									},
									"scope": 3123,
									"src": "8629:93:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3049,
										"nodeType": "StructuredDocumentation",
										"src": "8728:1154:18",
										"text": " @dev Make liquidation payouts (v2)\n @param id Agreement ID\n @param liquidationTypeData Data regarding the version of the liquidation schema and the type\n @param liquidatorAccount Address of the executor of the liquidation\n @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\n @param targetAccount Account to be liquidated\n @param rewardAmount The amount the rewarded account will receive\n @param targetAccountBalanceDelta The delta amount the target account balance should change by\n @custom:note \n - If a bailout is required (bailoutAmount > 0)\n   - the actual reward (single deposit) goes to the executor,\n   - while the reward account becomes the bailout account\n   - total bailout include: bailout amount + reward amount\n   - the targetAccount will be bailed out\n - If a bailout is not required\n   - the targetAccount will pay the rewardAmount\n   - the liquidator (reward account in PIC period) will receive the rewardAmount\n @custom:modifiers \n  - onlyAgreement"
									},
									"functionSelector": "1863e809",
									"id": 3066,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "makeLiquidationPayoutsV2",
									"nameLocation": "9896:24:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3051,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "9943:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "9935:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3050,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9935:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3053,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "9968:19:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "9955:32:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3052,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9955:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3055,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "10005:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "9997:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9997:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3057,
												"mutability": "mutable",
												"name": "useDefaultRewardAccount",
												"nameLocation": "10037:23:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "10032:28:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3056,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10032:4:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3059,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "10078:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "10070:21:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3058,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10070:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3061,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "10109:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "10101:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10101:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3063,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "10138:25:18",
												"nodeType": "VariableDeclaration",
												"scope": 3066,
												"src": "10131:32:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3062,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "10131:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9925:244:18"
									},
									"returnParameters": {
										"id": 3065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10178:0:18"
									},
									"scope": 3123,
									"src": "9887:292:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3067,
										"nodeType": "StructuredDocumentation",
										"src": "10184:1512:18",
										"text": " @dev Agreement liquidation event v2 (including agent account)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param liquidatorAccount Address of the executor of the liquidation\n @param targetAccount Account of the stream sender\n @param rewardAmountReceiver Account that collects the reward or bails out insolvent accounts\n @param rewardAmount The amount the reward recipient account balance should change by\n @param targetAccountBalanceDelta The amount the sender account balance should change by\n @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\n @custom:note \n Reward account rule:\n - if the agreement is liquidated during the PIC period\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\n   - the targetAccount will pay for the rewardAmount\n - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\n   - the rewardAmountReceiver will get the rewardAmount (remaining deposit)\n   - the targetAccount will pay for the rewardAmount\n - if the targetAccount is insolvent\n   - the liquidatorAccount will get the rewardAmount (single deposit)\n   - the default reward account (governance) will pay for both the rewardAmount and bailoutAmount\n   - the targetAccount will receive the bailoutAmount"
									},
									"id": 3085,
									"name": "AgreementLiquidatedV2",
									"nameLocation": "11707:21:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3069,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "11754:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11738:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11738:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3071,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "11786:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11778:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3070,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11778:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3073,
												"indexed": true,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "11814:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11798:33:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3072,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11798:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3075,
												"indexed": true,
												"mutability": "mutable",
												"name": "targetAccount",
												"nameLocation": "11857:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11841:29:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3074,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11841:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3077,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmountReceiver",
												"nameLocation": "11888:20:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11880:28:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3076,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11880:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3079,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "11926:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11918:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3078,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11918:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3081,
												"indexed": false,
												"mutability": "mutable",
												"name": "targetAccountBalanceDelta",
												"nameLocation": "11955:25:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11948:32:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3080,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "11948:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3083,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidationTypeData",
												"nameLocation": "11996:19:18",
												"nodeType": "VariableDeclaration",
												"scope": 3085,
												"src": "11990:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3082,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11990:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11728:293:18"
									},
									"src": "11701:321:18"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3086,
										"nodeType": "StructuredDocumentation",
										"src": "12834:435:18",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param rewardAccount Account that collect the reward\n @param rewardAmount Amount of liquidation reward\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"id": 3098,
									"name": "AgreementLiquidated",
									"nameLocation": "13280:19:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3088,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "13325:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13309:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13309:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3090,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "13357:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13349:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3089,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13349:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3092,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "13385:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13369:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3091,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13369:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3094,
												"indexed": true,
												"mutability": "mutable",
												"name": "rewardAccount",
												"nameLocation": "13425:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13409:29:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3093,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13409:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3096,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "13456:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3098,
												"src": "13448:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3095,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13448:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13299:175:18"
									},
									"src": "13274:201:18"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3099,
										"nodeType": "StructuredDocumentation",
										"src": "13481:276:18",
										"text": " @dev System bailout occurred (DEPRECATED BY AgreementLiquidatedBy)\n @param bailoutAccount Account that bailout the penalty account\n @param bailoutAmount Amount of account bailout\n @custom:deprecated Use AgreementLiquidatedV2 instead"
									},
									"id": 3105,
									"name": "Bailout",
									"nameLocation": "13768:7:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3101,
												"indexed": true,
												"mutability": "mutable",
												"name": "bailoutAccount",
												"nameLocation": "13801:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3105,
												"src": "13785:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13785:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3103,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "13833:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3105,
												"src": "13825:21:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13825:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13775:77:18"
									},
									"src": "13762:91:18"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3106,
										"nodeType": "StructuredDocumentation",
										"src": "13859:1082:18",
										"text": " @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedV2)\n @param liquidatorAccount Account of the agent that performed the liquidation.\n @param agreementClass Contract address of the agreement\n @param id Agreement ID\n @param penaltyAccount Account of the agreement to be penalized\n @param bondAccount Account that collect the reward or bailout accounts\n @param rewardAmount Amount of liquidation reward\n @param bailoutAmount Amount of liquidation bailouot\n @custom:deprecated Use AgreementLiquidatedV2 instead\n @custom:note \n Reward account rule:\n - if bailout is equal to 0, then\n   - the bondAccount will get the rewardAmount,\n   - the penaltyAccount will pay for the rewardAmount.\n - if bailout is larger than 0, then\n   - the liquidatorAccount will get the rewardAmouont,\n   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount."
									},
									"id": 3122,
									"name": "AgreementLiquidatedBy",
									"nameLocation": "14952:21:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3108,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidatorAccount",
												"nameLocation": "14991:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "14983:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14983:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3110,
												"indexed": true,
												"mutability": "mutable",
												"name": "agreementClass",
												"nameLocation": "15034:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15018:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3109,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15018:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3112,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "15066:2:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15058:10:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3111,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15058:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3114,
												"indexed": true,
												"mutability": "mutable",
												"name": "penaltyAccount",
												"nameLocation": "15094:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15078:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15078:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3116,
												"indexed": true,
												"mutability": "mutable",
												"name": "bondAccount",
												"nameLocation": "15134:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15118:27:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15118:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3118,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardAmount",
												"nameLocation": "15163:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15155:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15155:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3120,
												"indexed": false,
												"mutability": "mutable",
												"name": "bailoutAmount",
												"nameLocation": "15193:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 3122,
												"src": "15185:21:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3119,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15185:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14973:239:18"
									},
									"src": "14946:267:18"
								}
							],
							"scope": 3124,
							"src": "184:15031:18",
							"usedErrors": [
								2844,
								2846,
								2848,
								2850,
								2852,
								2854
							]
						}
					],
					"src": "32:15184:18"
				},
				"id": 18
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol",
					"exportedSymbols": {
						"ERC20WithTokenInfo": [
							3135
						],
						"IERC20": [
							77
						],
						"TokenInfo": [
							3157
						]
					},
					"id": 3136,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3125,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:19"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 3127,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3136,
							"sourceUnit": 78,
							"src": "59:72:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3126,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "68:6:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
							"file": "./TokenInfo.sol",
							"id": 3129,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3136,
							"sourceUnit": 3158,
							"src": "132:44:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3128,
										"name": "TokenInfo",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "141:9:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 3131,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 77,
										"src": "527:6:19"
									},
									"id": 3132,
									"nodeType": "InheritanceSpecifier",
									"src": "527:6:19"
								},
								{
									"baseName": {
										"id": 3133,
										"name": "TokenInfo",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3157,
										"src": "535:9:19"
									},
									"id": 3134,
									"nodeType": "InheritanceSpecifier",
									"src": "535:9:19"
								}
							],
							"canonicalName": "ERC20WithTokenInfo",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3130,
								"nodeType": "StructuredDocumentation",
								"src": "178:263:19",
								"text": " @title ERC20 token with token info interface\n @author Superfluid\n @dev Using abstract contract instead of interfaces because old solidity\n      does not support interface inheriting other interfaces\n solhint-disable-next-line no-empty-blocks"
							},
							"fullyImplemented": false,
							"id": 3135,
							"linearizedBaseContracts": [
								3135,
								3157,
								77
							],
							"name": "ERC20WithTokenInfo",
							"nameLocation": "505:18:19",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3136,
							"src": "487:60:19",
							"usedErrors": []
						}
					],
					"src": "32:516:19"
				},
				"id": 19
			},
			"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
				"ast": {
					"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol",
					"exportedSymbols": {
						"TokenInfo": [
							3157
						]
					},
					"id": 3158,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3137,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:25:20"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "TokenInfo",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3138,
								"nodeType": "StructuredDocumentation",
								"src": "59:188:20",
								"text": " @title ERC20 token info interface\n @author Superfluid\n @dev ERC20 standard interface does not specify these functions, but\n      often the token implementations have them."
							},
							"fullyImplemented": false,
							"id": 3157,
							"linearizedBaseContracts": [
								3157
							],
							"name": "TokenInfo",
							"nameLocation": "258:9:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3139,
										"nodeType": "StructuredDocumentation",
										"src": "274:54:20",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 3144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "342:4:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "346:2:20"
									},
									"returnParameters": {
										"id": 3143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3144,
												"src": "372:13:20",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3141,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "372:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "371:15:20"
									},
									"scope": 3157,
									"src": "333:54:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3145,
										"nodeType": "StructuredDocumentation",
										"src": "393:102:20",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 3150,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "509:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "515:2:20"
									},
									"returnParameters": {
										"id": 3149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3148,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3150,
												"src": "541:13:20",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3147,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "541:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "540:15:20"
									},
									"scope": 3157,
									"src": "500:56:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3151,
										"nodeType": "StructuredDocumentation",
										"src": "562:612:20",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5,05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n called.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 3156,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "1188:8:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1196:2:20"
									},
									"returnParameters": {
										"id": 3155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3154,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3156,
												"src": "1222:5:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 3153,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1222:5:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:7:20"
									},
									"scope": 3157,
									"src": "1179:50:20",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3158,
							"src": "248:983:20",
							"usedErrors": []
						}
					],
					"src": "32:1200:20"
				},
				"id": 20
			},
			"mosaic/Mosaic.sol": {
				"ast": {
					"absolutePath": "mosaic/Mosaic.sol",
					"exportedSymbols": {
						"IConstantFlowAgreementV1": [
							805
						],
						"IERC721": [
							193
						],
						"ISuperfluidToken": [
							3123
						],
						"Mosaic": [
							3368
						]
					},
					"id": 3369,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3159,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:21"
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
							"file": "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol",
							"id": 3161,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3369,
							"sourceUnit": 806,
							"src": "57:143:21",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3160,
										"name": "IConstantFlowAgreementV1",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "66:24:21",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"file": "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
							"id": 3163,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3369,
							"sourceUnit": 2709,
							"src": "201:122:21",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3162,
										"name": "ISuperfluidToken",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "210:16:21",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 3165,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3369,
							"sourceUnit": 194,
							"src": "324:75:21",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3164,
										"name": "IERC721",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"src": "333:7:21",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Mosaic",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3368,
							"linearizedBaseContracts": [
								3368
							],
							"name": "Mosaic",
							"nameLocation": "798:6:21",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3227,
										"nodeType": "Block",
										"src": "930:506:21",
										"statements": [
											{
												"expression": {
													"id": 3178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3176,
														"name": "subscribed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3174,
														"src": "940:10:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 3177,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "953:5:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "940:18:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3179,
												"nodeType": "ExpressionStatement",
												"src": "940:18:21"
											},
											{
												"assignments": [
													3182
												],
												"declarations": [
													{
														"constant": false,
														"id": 3182,
														"mutability": "mutable",
														"name": "_lensHub",
														"nameLocation": "977:8:21",
														"nodeType": "VariableDeclaration",
														"scope": 3227,
														"src": "969:16:21",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$193",
															"typeString": "contract IERC721"
														},
														"typeName": {
															"id": 3181,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 3180,
																"name": "IERC721",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 193,
																"src": "969:7:21"
															},
															"referencedDeclaration": 193,
															"src": "969:7:21",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$193",
																"typeString": "contract IERC721"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3186,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "307836304165383635656534433732356364303433353362354141623336343535336635366365463832",
															"id": 3184,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "996:42:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"value": "0x60Ae865ee4C725cd04353b5AAb364553f56ceF82"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3183,
														"name": "IERC721",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "988:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IERC721_$193_$",
															"typeString": "type(contract IERC721)"
														}
													},
													"id": 3185,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "988:51:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721_$193",
														"typeString": "contract IERC721"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "969:70:21"
											},
											{
												"assignments": [
													3189
												],
												"declarations": [
													{
														"constant": false,
														"id": 3189,
														"mutability": "mutable",
														"name": "_cfa",
														"nameLocation": "1074:4:21",
														"nodeType": "VariableDeclaration",
														"scope": 3227,
														"src": "1049:29:21",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$805",
															"typeString": "contract IConstantFlowAgreementV1"
														},
														"typeName": {
															"id": 3188,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 3187,
																"name": "IConstantFlowAgreementV1",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 805,
																"src": "1049:24:21"
															},
															"referencedDeclaration": 805,
															"src": "1049:24:21",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$805",
																"typeString": "contract IConstantFlowAgreementV1"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3193,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "307834396535363545643162646331374633643232306637324446303835374332364641383346383733",
															"id": 3191,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1106:42:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"value": "0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3190,
														"name": "IConstantFlowAgreementV1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 805,
														"src": "1081:24:21",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_IConstantFlowAgreementV1_$805_$",
															"typeString": "type(contract IConstantFlowAgreementV1)"
														}
													},
													"id": 3192,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1081:68:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$805",
														"typeString": "contract IConstantFlowAgreementV1"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1049:100:21"
											},
											{
												"assignments": [
													null,
													3195,
													null,
													null
												],
												"declarations": [
													null,
													{
														"constant": false,
														"id": 3195,
														"mutability": "mutable",
														"name": "flowRate",
														"nameLocation": "1168:8:21",
														"nodeType": "VariableDeclaration",
														"scope": 3227,
														"src": "1162:14:21",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int96",
															"typeString": "int96"
														},
														"typeName": {
															"id": 3194,
															"name": "int96",
															"nodeType": "ElementaryTypeName",
															"src": "1162:5:21",
															"typeDescriptions": {
																"typeIdentifier": "t_int96",
																"typeString": "int96"
															}
														},
														"visibility": "internal"
													},
													null,
													null
												],
												"id": 3204,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "307835443842344332353534616542376538364633383742346436633030416333333439394564303166",
																	"id": 3199,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1213:42:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"value": "0x5D8B4C2554aeB7e86F387B4d6c00Ac33499Ed01f"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 3198,
																"name": "ISuperfluidToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3123,
																"src": "1196:16:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISuperfluidToken_$3123_$",
																	"typeString": "type(contract ISuperfluidToken)"
																}
															},
															"id": 3200,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1196:60:21",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
																"typeString": "contract ISuperfluidToken"
															}
														},
														{
															"id": 3201,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3167,
															"src": "1258:6:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3202,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3169,
															"src": "1266:8:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_ISuperfluidToken_$3123",
																"typeString": "contract ISuperfluidToken"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 3196,
															"name": "_cfa",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3189,
															"src": "1183:4:21",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$805",
																"typeString": "contract IConstantFlowAgreementV1"
															}
														},
														"id": 3197,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getFlow",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 690,
														"src": "1183:12:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_contract$_ISuperfluidToken_$3123_$_t_address_$_t_address_$returns$_t_uint256_$_t_int96_$_t_uint256_$_t_uint256_$",
															"typeString": "function (contract ISuperfluidToken,address,address) view external returns (uint256,int96,uint256,uint256)"
														}
													},
													"id": 3203,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1183:92:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_int96_$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,int96,uint256,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1159:116:21"
											},
											{
												"assignments": [
													3206
												],
												"declarations": [
													{
														"constant": false,
														"id": 3206,
														"mutability": "mutable",
														"name": "_owner",
														"nameLocation": "1293:6:21",
														"nodeType": "VariableDeclaration",
														"scope": 3227,
														"src": "1285:14:21",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3205,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1285:7:21",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3213,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3210,
																	"name": "profileId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3171,
																	"src": "1328:9:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 3209,
																"name": "parseInt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3241,
																	3367
																],
																"referencedDeclaration": 3241,
																"src": "1319:8:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_uint256_$",
																	"typeString": "function (string memory) pure returns (uint256)"
																}
															},
															"id": 3211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1319:19:21",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3207,
															"name": "_lensHub",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3182,
															"src": "1302:8:21",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$193",
																"typeString": "contract IERC721"
															}
														},
														"id": 3208,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 126,
														"src": "1302:16:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view external returns (address)"
														}
													},
													"id": 3212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1302:37:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1285:54:21"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 3220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_int96",
															"typeString": "int96"
														},
														"id": 3216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3214,
															"name": "flowRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3195,
															"src": "1354:8:21",
															"typeDescriptions": {
																"typeIdentifier": "t_int96",
																"typeString": "int96"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "31",
															"id": 3215,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1365:1:21",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1354:12:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 3219,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3217,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3167,
															"src": "1370:6:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 3218,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3206,
															"src": "1380:6:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "1370:16:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1354:32:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3226,
												"nodeType": "IfStatement",
												"src": "1350:80:21",
												"trueBody": {
													"id": 3225,
													"nodeType": "Block",
													"src": "1388:42:21",
													"statements": [
														{
															"expression": {
																"id": 3223,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3221,
																	"name": "subscribed",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3174,
																	"src": "1402:10:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 3222,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1415:4:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1402:17:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 3224,
															"nodeType": "ExpressionStatement",
															"src": "1402:17:21"
														}
													]
												}
											}
										]
									},
									"functionSelector": "2251a8a9",
									"id": 3228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isSubscribed",
									"nameLocation": "820:12:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3167,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "841:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 3228,
												"src": "833:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "833:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3169,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "857:8:21",
												"nodeType": "VariableDeclaration",
												"scope": 3228,
												"src": "849:16:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "849:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3171,
												"mutability": "mutable",
												"name": "profileId",
												"nameLocation": "881:9:21",
												"nodeType": "VariableDeclaration",
												"scope": 3228,
												"src": "867:23:21",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3170,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "867:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "832:59:21"
									},
									"returnParameters": {
										"id": 3175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3174,
												"mutability": "mutable",
												"name": "subscribed",
												"nameLocation": "918:10:21",
												"nodeType": "VariableDeclaration",
												"scope": 3228,
												"src": "913:15:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3173,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "913:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "912:17:21"
									},
									"scope": 3368,
									"src": "811:625:21",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3240,
										"nodeType": "Block",
										"src": "1521:39:21",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3236,
															"name": "_a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3230,
															"src": "1547:2:21",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"hexValue": "30",
															"id": 3237,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1551:1:21",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 3235,
														"name": "parseInt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															3241,
															3367
														],
														"referencedDeclaration": 3367,
														"src": "1538:8:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (string memory,uint256) pure returns (uint256)"
														}
													},
													"id": 3238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1538:15:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3234,
												"id": 3239,
												"nodeType": "Return",
												"src": "1531:22:21"
											}
										]
									},
									"id": 3241,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "parseInt",
									"nameLocation": "1451:8:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3230,
												"mutability": "mutable",
												"name": "_a",
												"nameLocation": "1474:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 3241,
												"src": "1460:16:21",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3229,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1460:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1459:18:21"
									},
									"returnParameters": {
										"id": 3234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3233,
												"mutability": "mutable",
												"name": "_parsedInt",
												"nameLocation": "1509:10:21",
												"nodeType": "VariableDeclaration",
												"scope": 3241,
												"src": "1501:18:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1501:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1500:20:21"
									},
									"scope": 3368,
									"src": "1442:118:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3366,
										"nodeType": "Block",
										"src": "1654:711:21",
										"statements": [
											{
												"assignments": [
													3251
												],
												"declarations": [
													{
														"constant": false,
														"id": 3251,
														"mutability": "mutable",
														"name": "bresult",
														"nameLocation": "1677:7:21",
														"nodeType": "VariableDeclaration",
														"scope": 3366,
														"src": "1664:20:21",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 3250,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1664:5:21",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3256,
												"initialValue": {
													"arguments": [
														{
															"id": 3254,
															"name": "_a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3243,
															"src": "1693:2:21",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 3253,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1687:5:21",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 3252,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1687:5:21",
															"typeDescriptions": {}
														}
													},
													"id": 3255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1687:9:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1664:32:21"
											},
											{
												"assignments": [
													3258
												],
												"declarations": [
													{
														"constant": false,
														"id": 3258,
														"mutability": "mutable",
														"name": "mint",
														"nameLocation": "1711:4:21",
														"nodeType": "VariableDeclaration",
														"scope": 3366,
														"src": "1706:9:21",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3257,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1706:4:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3260,
												"initialValue": {
													"hexValue": "30",
													"id": 3259,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1718:1:21",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1706:13:21"
											},
											{
												"assignments": [
													3262
												],
												"declarations": [
													{
														"constant": false,
														"id": 3262,
														"mutability": "mutable",
														"name": "decimals",
														"nameLocation": "1734:8:21",
														"nodeType": "VariableDeclaration",
														"scope": 3366,
														"src": "1729:13:21",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 3261,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1729:4:21",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3264,
												"initialValue": {
													"hexValue": "66616c7365",
													"id": 3263,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1745:5:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1729:21:21"
											},
											{
												"body": {
													"id": 3351,
													"nodeType": "Block",
													"src": "1802:474:21",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 3300,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3286,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"baseExpression": {
																									"id": 3280,
																									"name": "bresult",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3251,
																									"src": "1832:7:21",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bytes_memory_ptr",
																										"typeString": "bytes memory"
																									}
																								},
																								"id": 3282,
																								"indexExpression": {
																									"id": 3281,
																									"name": "i",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3266,
																									"src": "1840:1:21",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "1832:10:21",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							],
																							"id": 3279,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1826:5:21",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint8_$",
																								"typeString": "type(uint8)"
																							},
																							"typeName": {
																								"id": 3278,
																								"name": "uint8",
																								"nodeType": "ElementaryTypeName",
																								"src": "1826:5:21",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 3283,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1826:17:21",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					],
																					"id": 3277,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1821:4:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3276,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "1821:4:21",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3284,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1821:23:21",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">=",
																			"rightExpression": {
																				"hexValue": "3438",
																				"id": 3285,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1848:2:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_48_by_1",
																					"typeString": "int_const 48"
																				},
																				"value": "48"
																			},
																			"src": "1821:29:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 3287,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1820:31:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3298,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"baseExpression": {
																									"id": 3292,
																									"name": "bresult",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3251,
																									"src": "1867:7:21",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bytes_memory_ptr",
																										"typeString": "bytes memory"
																									}
																								},
																								"id": 3294,
																								"indexExpression": {
																									"id": 3293,
																									"name": "i",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3266,
																									"src": "1875:1:21",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "1867:10:21",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_bytes1",
																									"typeString": "bytes1"
																								}
																							],
																							"id": 3291,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "1861:5:21",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint8_$",
																								"typeString": "type(uint8)"
																							},
																							"typeName": {
																								"id": 3290,
																								"name": "uint8",
																								"nodeType": "ElementaryTypeName",
																								"src": "1861:5:21",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 3295,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "1861:17:21",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint8",
																							"typeString": "uint8"
																						}
																					],
																					"id": 3289,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1856:4:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3288,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "1856:4:21",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3296,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1856:23:21",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<=",
																			"rightExpression": {
																				"hexValue": "3537",
																				"id": 3297,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1883:2:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_57_by_1",
																					"typeString": "int_const 57"
																				},
																				"value": "57"
																			},
																			"src": "1856:29:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		}
																	],
																	"id": 3299,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1855:31:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "1820:66:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"baseExpression": {
																							"id": 3337,
																							"name": "bresult",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3251,
																							"src": "2198:7:21",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 3339,
																						"indexExpression": {
																							"id": 3338,
																							"name": "i",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3266,
																							"src": "2206:1:21",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "2198:10:21",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes1",
																							"typeString": "bytes1"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes1",
																							"typeString": "bytes1"
																						}
																					],
																					"id": 3336,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2192:5:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 3335,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "2192:5:21",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3340,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2192:17:21",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			],
																			"id": 3334,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2187:4:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 3333,
																				"name": "uint",
																				"nodeType": "ElementaryTypeName",
																				"src": "2187:4:21",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3341,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2187:23:21",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "3436",
																		"id": 3342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2214:2:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_46_by_1",
																			"typeString": "int_const 46"
																		},
																		"value": "46"
																	},
																	"src": "2187:29:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 3349,
																"nodeType": "IfStatement",
																"src": "2183:83:21",
																"trueBody": {
																	"id": 3348,
																	"nodeType": "Block",
																	"src": "2218:48:21",
																	"statements": [
																		{
																			"expression": {
																				"id": 3346,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"id": 3344,
																					"name": "decimals",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3262,
																					"src": "2236:8:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "=",
																				"rightHandSide": {
																					"hexValue": "74727565",
																					"id": 3345,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2247:4:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				"src": "2236:15:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 3347,
																			"nodeType": "ExpressionStatement",
																			"src": "2236:15:21"
																		}
																	]
																}
															},
															"id": 3350,
															"nodeType": "IfStatement",
															"src": "1816:450:21",
															"trueBody": {
																"id": 3332,
																"nodeType": "Block",
																"src": "1888:289:21",
																"statements": [
																	{
																		"condition": {
																			"id": 3301,
																			"name": "decimals",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3262,
																			"src": "1910:8:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 3313,
																		"nodeType": "IfStatement",
																		"src": "1906:175:21",
																		"trueBody": {
																			"id": 3312,
																			"nodeType": "Block",
																			"src": "1920:161:21",
																			"statements": [
																				{
																					"condition": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 3304,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 3302,
																							"name": "_b",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 3245,
																							"src": "1945:2:21",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "==",
																						"rightExpression": {
																							"hexValue": "30",
																							"id": 3303,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "1951:1:21",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_0_by_1",
																								"typeString": "int_const 0"
																							},
																							"value": "0"
																						},
																						"src": "1945:7:21",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"falseBody": {
																						"id": 3310,
																						"nodeType": "Block",
																						"src": "2012:51:21",
																						"statements": [
																							{
																								"expression": {
																									"id": 3308,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "UnaryOperation",
																									"operator": "--",
																									"prefix": false,
																									"src": "2037:4:21",
																									"subExpression": {
																										"id": 3307,
																										"name": "_b",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 3245,
																										"src": "2037:2:21",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"id": 3309,
																								"nodeType": "ExpressionStatement",
																								"src": "2037:4:21"
																							}
																						]
																					},
																					"id": 3311,
																					"nodeType": "IfStatement",
																					"src": "1941:122:21",
																					"trueBody": {
																						"id": 3306,
																						"nodeType": "Block",
																						"src": "1954:52:21",
																						"statements": [
																							{
																								"id": 3305,
																								"nodeType": "Break",
																								"src": "1979:5:21"
																							}
																						]
																					}
																				}
																			]
																		}
																	},
																	{
																		"expression": {
																			"id": 3316,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 3314,
																				"name": "mint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3258,
																				"src": "2098:4:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "*=",
																			"rightHandSide": {
																				"hexValue": "3130",
																				"id": 3315,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2106:2:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"src": "2098:10:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3317,
																		"nodeType": "ExpressionStatement",
																		"src": "2098:10:21"
																	},
																	{
																		"expression": {
																			"id": 3330,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 3318,
																				"name": "mint",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3258,
																				"src": "2126:4:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3329,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"baseExpression": {
																										"id": 3323,
																										"name": "bresult",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 3251,
																										"src": "2145:7:21",
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes_memory_ptr",
																											"typeString": "bytes memory"
																										}
																									},
																									"id": 3325,
																									"indexExpression": {
																										"id": 3324,
																										"name": "i",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 3266,
																										"src": "2153:1:21",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "2145:10:21",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bytes1",
																										"typeString": "bytes1"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_bytes1",
																										"typeString": "bytes1"
																									}
																								],
																								"id": 3322,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "2139:5:21",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint8_$",
																									"typeString": "type(uint8)"
																								},
																								"typeName": {
																									"id": 3321,
																									"name": "uint8",
																									"nodeType": "ElementaryTypeName",
																									"src": "2139:5:21",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 3326,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "2139:17:21",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint8",
																								"typeString": "uint8"
																							}
																						],
																						"id": 3320,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2134:4:21",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 3319,
																							"name": "uint",
																							"nodeType": "ElementaryTypeName",
																							"src": "2134:4:21",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 3327,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2134:23:21",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"hexValue": "3438",
																					"id": 3328,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2160:2:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_48_by_1",
																						"typeString": "int_const 48"
																					},
																					"value": "48"
																				},
																				"src": "2134:28:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "2126:36:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 3331,
																		"nodeType": "ExpressionStatement",
																		"src": "2126:36:21"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3269,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3266,
														"src": "1777:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 3270,
															"name": "bresult",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3251,
															"src": "1781:7:21",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 3271,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1781:14:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1777:18:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3352,
												"initializationExpression": {
													"assignments": [
														3266
													],
													"declarations": [
														{
															"constant": false,
															"id": 3266,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1770:1:21",
															"nodeType": "VariableDeclaration",
															"scope": 3352,
															"src": "1765:6:21",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 3265,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "1765:4:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 3268,
													"initialValue": {
														"hexValue": "30",
														"id": 3267,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1774:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1765:10:21"
												},
												"loopExpression": {
													"expression": {
														"id": 3274,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1797:3:21",
														"subExpression": {
															"id": 3273,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3266,
															"src": "1797:1:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3275,
													"nodeType": "ExpressionStatement",
													"src": "1797:3:21"
												},
												"nodeType": "ForStatement",
												"src": "1760:516:21"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3353,
														"name": "_b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3245,
														"src": "2289:2:21",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 3354,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2294:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2289:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3363,
												"nodeType": "IfStatement",
												"src": "2285:53:21",
												"trueBody": {
													"id": 3362,
													"nodeType": "Block",
													"src": "2297:41:21",
													"statements": [
														{
															"expression": {
																"id": 3360,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3356,
																	"name": "mint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3258,
																	"src": "2311:4:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "*=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3359,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"hexValue": "3130",
																		"id": 3357,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2319:2:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10_by_1",
																			"typeString": "int_const 10"
																		},
																		"value": "10"
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "**",
																	"rightExpression": {
																		"id": 3358,
																		"name": "_b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3245,
																		"src": "2325:2:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2319:8:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2311:16:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3361,
															"nodeType": "ExpressionStatement",
															"src": "2311:16:21"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3364,
													"name": "mint",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3258,
													"src": "2354:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3249,
												"id": 3365,
												"nodeType": "Return",
												"src": "2347:11:21"
											}
										]
									},
									"id": 3367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "parseInt",
									"nameLocation": "1575:8:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3243,
												"mutability": "mutable",
												"name": "_a",
												"nameLocation": "1598:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 3367,
												"src": "1584:16:21",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3242,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1584:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3245,
												"mutability": "mutable",
												"name": "_b",
												"nameLocation": "1607:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 3367,
												"src": "1602:7:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3244,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1602:4:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1583:27:21"
									},
									"returnParameters": {
										"id": 3249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3248,
												"mutability": "mutable",
												"name": "_parsedInt",
												"nameLocation": "1642:10:21",
												"nodeType": "VariableDeclaration",
												"scope": 3367,
												"src": "1634:18:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1634:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1633:20:21"
									},
									"scope": 3368,
									"src": "1566:799:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3369,
							"src": "789:1578:21",
							"usedErrors": []
						}
					],
					"src": "32:2335:21"
				},
				"id": 21
			}
		}
	}
}